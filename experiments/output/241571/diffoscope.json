{"diffoscope-json-version": 1, "source1": "first/FieldOrMethod.class", "source2": "second/FieldOrMethod.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,51 +23,52 @@\n     private boolean searchedForSignatureAttribute;\n     \n     FieldOrMethod() {\n         this.signatureAttributeString = null;\n         this.searchedForSignatureAttribute = false;\n     }\n     \n-    protected FieldOrMethod(final FieldOrMethod c) {\n-        this(c.getAccessFlags(), c.getNameIndex(), c.getSignatureIndex(), c.getAttributes(), c.getConstantPool());\n+    protected FieldOrMethod(final FieldOrMethod fieldOrMethod) {\n+        this(fieldOrMethod.getAccessFlags(), fieldOrMethod.getNameIndex(), fieldOrMethod.getSignatureIndex(), fieldOrMethod.getAttributes(), fieldOrMethod.getConstantPool());\n     }\n     \n     @Deprecated\n-    protected FieldOrMethod(final DataInputStream file, final ConstantPool constant_pool) throws IOException, ClassFormatException {\n-        this((DataInput)file, constant_pool);\n+    protected FieldOrMethod(final DataInputStream dataInputStream, final ConstantPool constantPool) throws IOException, ClassFormatException {\n+        this((DataInput)dataInputStream, constantPool);\n     }\n     \n-    protected FieldOrMethod(final DataInput file, final ConstantPool constant_pool) throws IOException, ClassFormatException {\n-        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), null, constant_pool);\n-        final int attributes_count = file.readUnsignedShort();\n-        this.attributes = new Attribute[attributes_count];\n-        for (int i = 0; i < attributes_count; ++i) {\n-            this.attributes[i] = Attribute.readAttribute(file, constant_pool);\n+    protected FieldOrMethod(final DataInput dataInput, final ConstantPool constantPool) throws IOException, ClassFormatException {\n+        this(dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.attributes = new Attribute[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.attributes[i] = Attribute.readAttribute(dataInput, constantPool);\n         }\n-        this.attributes_count = attributes_count;\n+        this.attributes_count = unsignedShort;\n     }\n     \n-    protected FieldOrMethod(final int access_flags, final int name_index, final int signature_index, final Attribute[] attributes, final ConstantPool constant_pool) {\n-        super(access_flags);\n+    protected FieldOrMethod(final int n, final int name_index, final int signature_index, final Attribute[] attributes, final ConstantPool constant_pool) {\n+        super(n);\n         this.signatureAttributeString = null;\n         this.searchedForSignatureAttribute = false;\n         this.name_index = name_index;\n         this.signature_index = signature_index;\n         this.constant_pool = constant_pool;\n         this.setAttributes(attributes);\n     }\n     \n-    public final void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(super.getAccessFlags());\n-        file.writeShort(this.name_index);\n-        file.writeShort(this.signature_index);\n-        file.writeShort(this.attributes_count);\n+    public final void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(super.getAccessFlags());\n+        dataOutputStream.writeShort(this.name_index);\n+        dataOutputStream.writeShort(this.signature_index);\n+        dataOutputStream.writeShort(this.attributes_count);\n         if (this.attributes != null) {\n-            for (final Attribute attribute : this.attributes) {\n-                attribute.dump(file);\n+            final Attribute[] attributes = this.attributes;\n+            for (int length = attributes.length, i = 0; i < length; ++i) {\n+                attributes[i].dump(dataOutputStream);\n             }\n         }\n     }\n     \n     public final Attribute[] getAttributes() {\n         return this.attributes;\n     }\n@@ -98,52 +99,49 @@\n     }\n     \n     public final void setSignatureIndex(final int signature_index) {\n         this.signature_index = signature_index;\n     }\n     \n     public final String getName() {\n-        final ConstantUtf8 c = (ConstantUtf8)this.constant_pool.getConstant(this.name_index, (byte)1);\n-        return c.getBytes();\n+        return ((ConstantUtf8)this.constant_pool.getConstant(this.name_index, (byte)1)).getBytes();\n     }\n     \n     public final String getSignature() {\n-        final ConstantUtf8 c = (ConstantUtf8)this.constant_pool.getConstant(this.signature_index, (byte)1);\n-        return c.getBytes();\n+        return ((ConstantUtf8)this.constant_pool.getConstant(this.signature_index, (byte)1)).getBytes();\n     }\n     \n-    protected FieldOrMethod copy_(final ConstantPool _constant_pool) {\n-        FieldOrMethod c = null;\n+    protected FieldOrMethod copy_(final ConstantPool constantPool) {\n+        FieldOrMethod fieldOrMethod = null;\n         try {\n-            c = (FieldOrMethod)this.clone();\n+            fieldOrMethod = (FieldOrMethod)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {}\n-        c.constant_pool = this.constant_pool;\n-        c.attributes = new Attribute[this.attributes.length];\n-        c.attributes_count = this.attributes_count;\n+        fieldOrMethod.constant_pool = this.constant_pool;\n+        fieldOrMethod.attributes = new Attribute[this.attributes.length];\n+        fieldOrMethod.attributes_count = this.attributes_count;\n         for (int i = 0; i < this.attributes.length; ++i) {\n-            c.attributes[i] = this.attributes[i].copy(this.constant_pool);\n+            fieldOrMethod.attributes[i] = this.attributes[i].copy(this.constant_pool);\n         }\n-        return c;\n+        return fieldOrMethod;\n     }\n     \n     public AnnotationEntry[] getAnnotationEntries() {\n         if (this.annotationEntries == null) {\n             this.annotationEntries = AnnotationEntry.createAnnotationEntries(this.getAttributes());\n         }\n         return this.annotationEntries;\n     }\n     \n     public final String getGenericSignature() {\n         if (!this.searchedForSignatureAttribute) {\n-            boolean found = false;\n-            for (int i = 0; !found && i < this.attributes.length; ++i) {\n-                if (this.attributes[i] instanceof Signature) {\n-                    this.signatureAttributeString = ((Signature)this.attributes[i]).getSignature();\n-                    found = true;\n+            for (int n = 0, n2 = 0; n == 0 && n2 < this.attributes.length; ++n2) {\n+                if (this.attributes[n2] instanceof Signature) {\n+                    this.signatureAttributeString = ((Signature)this.attributes[n2]).getSignature();\n+                    n = 1;\n                 }\n             }\n             this.searchedForSignatureAttribute = true;\n         }\n         return this.signatureAttributeString;\n     }\n }\n"}]}
