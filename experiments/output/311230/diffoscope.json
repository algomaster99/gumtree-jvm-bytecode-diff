{"diffoscope-json-version": 1, "source1": "first/ZipLong.class", "source2": "second/ZipLong.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,136 +1,136 @@\n-  SHA-256 checksum 1fa782a82f33bac374d43fe997f55071b861df071441a08789000df9345b40df\n+  SHA-256 checksum 2dc017037fec9ad6778cc9f12b4a3e29148f5a12d21871e72643bfd2ba7b23c2\n   Compiled from \"ZipLong.java\"\n public final class org.apache.commons.compress.archivers.zip.ZipLong implements java.lang.Cloneable,java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #10                         // org/apache/commons/compress/archivers/zip/ZipLong\n-  super_class: #41                        // java/lang/Object\n+  super_class: #4                         // java/lang/Object\n   interfaces: 2, fields: 8, methods: 17, attributes: 1\n Constant pool:\n-    #1 = Class              #87           // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #41.#88       // java/lang/Object.\"<init>\":()V\n-    #3 = Fieldref           #10.#89       // org/apache/commons/compress/archivers/zip/ZipLong.value:J\n-    #4 = Methodref          #10.#90       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-    #5 = Methodref          #10.#91       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-    #6 = Methodref          #10.#92       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-    #7 = Methodref          #10.#93       // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-    #8 = Methodref          #94.#95       // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n-    #9 = Methodref          #94.#96       // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n-   #10 = Class              #97           // org/apache/commons/compress/archivers/zip/ZipLong\n-   #11 = Methodref          #10.#98       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #12 = Methodref          #41.#99       // java/lang/Object.clone:()Ljava/lang/Object;\n-   #13 = Class              #100          // java/lang/CloneNotSupportedException\n-   #14 = Class              #101          // java/lang/IllegalStateException\n-   #15 = Methodref          #14.#102      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #16 = Class              #103          // java/lang/StringBuilder\n-   #17 = Methodref          #16.#88       // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = String             #104          // ZipLong value:\n-   #19 = Methodref          #16.#105      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = Methodref          #16.#106      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #21 = Methodref          #16.#107      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #22 = Long               33639248l\n-   #24 = Methodref          #10.#108      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":(J)V\n-   #25 = Fieldref           #10.#109      // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #26 = Long               67324752l\n-   #28 = Fieldref           #10.#110      // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #29 = Long               134695760l\n-   #31 = Fieldref           #10.#111      // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #32 = Long               4294967295l\n-   #34 = Fieldref           #10.#112      // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #35 = Long               808471376l\n-   #37 = Fieldref           #10.#113      // org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #38 = Long               134630224l\n-   #40 = Fieldref           #10.#114      // org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #41 = Class              #115          // java/lang/Object\n-   #42 = Class              #116          // java/lang/Cloneable\n-   #43 = Class              #117          // java/io/Serializable\n-   #44 = Utf8               serialVersionUID\n-   #45 = Utf8               J\n-   #46 = Utf8               ConstantValue\n-   #47 = Long               1l\n-   #49 = Utf8               value\n-   #50 = Utf8               CFH_SIG\n-   #51 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #52 = Utf8               LFH_SIG\n-   #53 = Utf8               DD_SIG\n-   #54 = Utf8               ZIP64_MAGIC\n-   #55 = Utf8               SINGLE_SEGMENT_SPLIT_MARKER\n-   #56 = Utf8               AED_SIG\n-   #57 = Utf8               <init>\n-   #58 = Utf8               (J)V\n-   #59 = Utf8               Code\n-   #60 = Utf8               LineNumberTable\n-   #61 = Utf8               (I)V\n-   #62 = Utf8               ([B)V\n-   #63 = Utf8               ([BI)V\n-   #64 = Utf8               getBytes\n-   #65 = Utf8               ()[B\n-   #66 = Utf8               getValue\n-   #67 = Utf8               ()J\n-   #68 = Utf8               getIntValue\n-   #69 = Utf8               ()I\n-   #70 = Utf8               (J)[B\n-   #71 = Utf8               putLong\n-   #72 = Utf8               (J[BI)V\n-   #73 = Utf8               ([BI)J\n-   #74 = Utf8               ([B)J\n-   #75 = Utf8               equals\n-   #76 = Utf8               (Ljava/lang/Object;)Z\n-   #77 = Utf8               StackMapTable\n-   #78 = Utf8               hashCode\n-   #79 = Utf8               clone\n-   #80 = Utf8               ()Ljava/lang/Object;\n-   #81 = Utf8               toString\n-   #82 = Utf8               ()Ljava/lang/String;\n-   #83 = Utf8               <clinit>\n-   #84 = Utf8               ()V\n-   #85 = Utf8               SourceFile\n-   #86 = Utf8               ZipLong.java\n-   #87 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #88 = NameAndType        #57:#84       // \"<init>\":()V\n-   #89 = NameAndType        #49:#45       // value:J\n-   #90 = NameAndType        #57:#63       // \"<init>\":([BI)V\n-   #91 = NameAndType        #66:#73       // getValue:([BI)J\n-   #92 = NameAndType        #64:#70       // getBytes:(J)[B\n-   #93 = NameAndType        #71:#72       // putLong:(J[BI)V\n-   #94 = Class              #118          // org/apache/commons/compress/utils/ByteUtils\n-   #95 = NameAndType        #119:#120     // toLittleEndian:([BJII)V\n-   #96 = NameAndType        #121:#122     // fromLittleEndian:([BII)J\n-   #97 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-   #98 = NameAndType        #66:#67       // getValue:()J\n-   #99 = NameAndType        #79:#80       // clone:()Ljava/lang/Object;\n-  #100 = Utf8               java/lang/CloneNotSupportedException\n-  #101 = Utf8               java/lang/IllegalStateException\n-  #102 = NameAndType        #57:#123      // \"<init>\":(Ljava/lang/Throwable;)V\n-  #103 = Utf8               java/lang/StringBuilder\n-  #104 = Utf8               ZipLong value:\n-  #105 = NameAndType        #124:#125     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #106 = NameAndType        #124:#126     // append:(J)Ljava/lang/StringBuilder;\n-  #107 = NameAndType        #81:#82       // toString:()Ljava/lang/String;\n-  #108 = NameAndType        #57:#58       // \"<init>\":(J)V\n-  #109 = NameAndType        #50:#51       // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #110 = NameAndType        #52:#51       // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #111 = NameAndType        #53:#51       // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #112 = NameAndType        #54:#51       // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #113 = NameAndType        #55:#51       // SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #114 = NameAndType        #56:#51       // AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #115 = Utf8               java/lang/Object\n-  #116 = Utf8               java/lang/Cloneable\n-  #117 = Utf8               java/io/Serializable\n-  #118 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #119 = Utf8               toLittleEndian\n-  #120 = Utf8               ([BJII)V\n-  #121 = Utf8               fromLittleEndian\n-  #122 = Utf8               ([BII)J\n-  #123 = Utf8               (Ljava/lang/Throwable;)V\n-  #124 = Utf8               append\n-  #125 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #126 = Utf8               (J)Ljava/lang/StringBuilder;\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Fieldref           #10.#11       // org/apache/commons/compress/archivers/zip/ZipLong.value:J\n+   #10 = Class              #12           // org/apache/commons/compress/archivers/zip/ZipLong\n+   #11 = NameAndType        #13:#14       // value:J\n+   #12 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #13 = Utf8               value\n+   #14 = Utf8               J\n+   #15 = Methodref          #10.#16       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+   #16 = NameAndType        #7:#17        // \"<init>\":([BI)V\n+   #17 = Utf8               ([BI)V\n+   #18 = Methodref          #10.#19       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+   #19 = NameAndType        #20:#21       // getValue:([BI)J\n+   #20 = Utf8               getValue\n+   #21 = Utf8               ([BI)J\n+   #22 = Methodref          #10.#23       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+   #23 = NameAndType        #24:#25       // getBytes:(J)[B\n+   #24 = Utf8               getBytes\n+   #25 = Utf8               (J)[B\n+   #26 = Methodref          #10.#27       // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+   #27 = NameAndType        #28:#29       // putLong:(J[BI)V\n+   #28 = Utf8               putLong\n+   #29 = Utf8               (J[BI)V\n+   #30 = Methodref          #31.#32       // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+   #31 = Class              #33           // org/apache/commons/compress/utils/ByteUtils\n+   #32 = NameAndType        #34:#35       // toLittleEndian:([BJII)V\n+   #33 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+   #34 = Utf8               toLittleEndian\n+   #35 = Utf8               ([BJII)V\n+   #36 = Methodref          #31.#37       // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+   #37 = NameAndType        #38:#39       // fromLittleEndian:([BII)J\n+   #38 = Utf8               fromLittleEndian\n+   #39 = Utf8               ([BII)J\n+   #40 = Methodref          #10.#41       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+   #41 = NameAndType        #20:#42       // getValue:()J\n+   #42 = Utf8               ()J\n+   #43 = Methodref          #4.#44        // java/lang/Object.clone:()Ljava/lang/Object;\n+   #44 = NameAndType        #45:#46       // clone:()Ljava/lang/Object;\n+   #45 = Utf8               clone\n+   #46 = Utf8               ()Ljava/lang/Object;\n+   #47 = Class              #48           // java/lang/CloneNotSupportedException\n+   #48 = Utf8               java/lang/CloneNotSupportedException\n+   #49 = Class              #50           // java/lang/IllegalStateException\n+   #50 = Utf8               java/lang/IllegalStateException\n+   #51 = Methodref          #49.#52       // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #52 = NameAndType        #7:#53        // \"<init>\":(Ljava/lang/Throwable;)V\n+   #53 = Utf8               (Ljava/lang/Throwable;)V\n+   #54 = Class              #55           // java/lang/StringBuilder\n+   #55 = Utf8               java/lang/StringBuilder\n+   #56 = Methodref          #54.#5        // java/lang/StringBuilder.\"<init>\":()V\n+   #57 = String             #58           // ZipLong value:\n+   #58 = Utf8               ZipLong value:\n+   #59 = Methodref          #54.#60       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #60 = NameAndType        #61:#62       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #61 = Utf8               append\n+   #62 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #63 = Methodref          #54.#64       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #64 = NameAndType        #61:#65       // append:(J)Ljava/lang/StringBuilder;\n+   #65 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #66 = Methodref          #54.#67       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #67 = NameAndType        #68:#69       // toString:()Ljava/lang/String;\n+   #68 = Utf8               toString\n+   #69 = Utf8               ()Ljava/lang/String;\n+   #70 = Long               33639248l\n+   #72 = Methodref          #10.#73       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":(J)V\n+   #73 = NameAndType        #7:#74        // \"<init>\":(J)V\n+   #74 = Utf8               (J)V\n+   #75 = Fieldref           #10.#76       // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #76 = NameAndType        #77:#78       // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #77 = Utf8               CFH_SIG\n+   #78 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #79 = Long               67324752l\n+   #81 = Fieldref           #10.#82       // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #82 = NameAndType        #83:#78       // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #83 = Utf8               LFH_SIG\n+   #84 = Long               134695760l\n+   #86 = Fieldref           #10.#87       // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #87 = NameAndType        #88:#78       // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #88 = Utf8               DD_SIG\n+   #89 = Long               4294967295l\n+   #91 = Fieldref           #10.#92       // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #92 = NameAndType        #93:#78       // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #93 = Utf8               ZIP64_MAGIC\n+   #94 = Long               808471376l\n+   #96 = Fieldref           #10.#97       // org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #97 = NameAndType        #98:#78       // SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #98 = Utf8               SINGLE_SEGMENT_SPLIT_MARKER\n+   #99 = Long               134630224l\n+  #101 = Fieldref           #10.#102      // org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #102 = NameAndType        #103:#78      // AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #103 = Utf8               AED_SIG\n+  #104 = Class              #105          // java/lang/Cloneable\n+  #105 = Utf8               java/lang/Cloneable\n+  #106 = Class              #107          // java/io/Serializable\n+  #107 = Utf8               java/io/Serializable\n+  #108 = Utf8               serialVersionUID\n+  #109 = Utf8               ConstantValue\n+  #110 = Long               1l\n+  #112 = Utf8               Code\n+  #113 = Utf8               LineNumberTable\n+  #114 = Utf8               (I)V\n+  #115 = Utf8               ([B)V\n+  #116 = Utf8               ()[B\n+  #117 = Utf8               getIntValue\n+  #118 = Utf8               ()I\n+  #119 = Utf8               ([B)J\n+  #120 = Utf8               equals\n+  #121 = Utf8               (Ljava/lang/Object;)Z\n+  #122 = Utf8               StackMapTable\n+  #123 = Utf8               hashCode\n+  #124 = Utf8               <clinit>\n+  #125 = Utf8               SourceFile\n+  #126 = Utf8               ZipLong.java\n {\n   private static final long serialVersionUID = 1l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 1l\n \n   private final long value;\n@@ -163,103 +163,103 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipLong(long);\n     descriptor: (J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: lload_1\n-         6: putfield      #3                  // Field value:J\n+         6: putfield      #9                  // Field value:J\n          9: return\n       LineNumberTable:\n         line 80: 0\n         line 81: 4\n         line 82: 9\n \n   public org.apache.commons.compress.archivers.zip.ZipLong(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: iload_1\n          6: i2l\n-         7: putfield      #3                  // Field value:J\n+         7: putfield      #9                  // Field value:J\n         10: return\n       LineNumberTable:\n         line 89: 0\n         line 90: 4\n         line 91: 10\n \n   public org.apache.commons.compress.archivers.zip.ZipLong(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #4                  // Method \"<init>\":([BI)V\n+         3: invokespecial #15                 // Method \"<init>\":([BI)V\n          6: return\n       LineNumberTable:\n         line 98: 0\n         line 99: 6\n \n   public org.apache.commons.compress.archivers.zip.ZipLong(byte[], int);\n     descriptor: ([BI)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n          6: iload_2\n-         7: invokestatic  #5                  // Method getValue:([BI)J\n-        10: putfield      #3                  // Field value:J\n+         7: invokestatic  #18                 // Method getValue:([BI)J\n+        10: putfield      #9                  // Field value:J\n         13: return\n       LineNumberTable:\n         line 106: 0\n         line 107: 4\n         line 108: 13\n \n   public byte[] getBytes();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field value:J\n-         4: invokestatic  #6                  // Method getBytes:(J)[B\n+         1: getfield      #9                  // Field value:J\n+         4: invokestatic  #22                 // Method getBytes:(J)[B\n          7: areturn\n       LineNumberTable:\n         line 115: 0\n \n   public long getValue();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field value:J\n+         1: getfield      #9                  // Field value:J\n          4: lreturn\n       LineNumberTable:\n         line 123: 0\n \n   public int getIntValue();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field value:J\n+         1: getfield      #9                  // Field value:J\n          4: l2i\n          5: ireturn\n       LineNumberTable:\n         line 131: 0\n \n   public static byte[] getBytes(long);\n     descriptor: (J)[B\n@@ -268,15 +268,15 @@\n       stack=4, locals=3, args_size=1\n          0: iconst_4\n          1: newarray       byte\n          3: astore_2\n          4: lload_0\n          5: aload_2\n          6: iconst_0\n-         7: invokestatic  #7                  // Method putLong:(J[BI)V\n+         7: invokestatic  #26                 // Method putLong:(J[BI)V\n         10: aload_2\n         11: areturn\n       LineNumberTable:\n         line 139: 0\n         line 140: 4\n         line 141: 10\n \n@@ -285,56 +285,56 @@\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=4, args_size=3\n          0: aload_2\n          1: lload_0\n          2: iload_3\n          3: iconst_4\n-         4: invokestatic  #8                  // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+         4: invokestatic  #30                 // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n          7: return\n       LineNumberTable:\n         line 154: 0\n         line 155: 7\n \n   public void putLong(byte[], int);\n     descriptor: ([BI)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n-         1: getfield      #3                  // Field value:J\n+         1: getfield      #9                  // Field value:J\n          4: aload_1\n          5: iload_2\n-         6: invokestatic  #7                  // Method putLong:(J[BI)V\n+         6: invokestatic  #26                 // Method putLong:(J[BI)V\n          9: return\n       LineNumberTable:\n         line 158: 0\n         line 159: 9\n \n   public static long getValue(byte[], int);\n     descriptor: ([BI)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_4\n-         3: invokestatic  #9                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         3: invokestatic  #36                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          6: lreturn\n       LineNumberTable:\n         line 168: 0\n \n   public static long getValue(byte[]);\n     descriptor: ([B)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokestatic  #5                  // Method getValue:([BI)J\n+         2: invokestatic  #18                 // Method getValue:([BI)J\n          5: lreturn\n       LineNumberTable:\n         line 177: 0\n \n   public boolean equals(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x0001) ACC_PUBLIC\n@@ -342,18 +342,18 @@\n       stack=4, locals=2, args_size=2\n          0: aload_1\n          1: instanceof    #10                 // class org/apache/commons/compress/archivers/zip/ZipLong\n          4: ifne          9\n          7: iconst_0\n          8: ireturn\n          9: aload_0\n-        10: getfield      #3                  // Field value:J\n+        10: getfield      #9                  // Field value:J\n         13: aload_1\n         14: checkcast     #10                 // class org/apache/commons/compress/archivers/zip/ZipLong\n-        17: invokevirtual #11                 // Method getValue:()J\n+        17: invokevirtual #40                 // Method getValue:()J\n         20: lcmp\n         21: ifne          28\n         24: iconst_1\n         25: goto          29\n         28: iconst_0\n         29: ireturn\n       LineNumberTable:\n@@ -368,33 +368,33 @@\n \n   public int hashCode();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field value:J\n+         1: getfield      #9                  // Field value:J\n          4: l2i\n          5: ireturn\n       LineNumberTable:\n         line 199: 0\n \n   public java.lang.Object clone();\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #12                 // Method java/lang/Object.clone:()Ljava/lang/Object;\n+         1: invokespecial #43                 // Method java/lang/Object.clone:()Ljava/lang/Object;\n          4: areturn\n          5: astore_1\n-         6: new           #14                 // class java/lang/IllegalStateException\n+         6: new           #49                 // class java/lang/IllegalStateException\n          9: dup\n         10: aload_1\n-        11: invokespecial #15                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+        11: invokespecial #51                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n         14: athrow\n       Exception table:\n          from    to  target type\n              0     4     5   Class java/lang/CloneNotSupportedException\n       LineNumberTable:\n         line 205: 0\n         line 206: 5\n@@ -404,62 +404,62 @@\n           stack = [ class java/lang/CloneNotSupportedException ]\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #16                 // class java/lang/StringBuilder\n+         0: new           #54                 // class java/lang/StringBuilder\n          3: dup\n-         4: invokespecial #17                 // Method java/lang/StringBuilder.\"<init>\":()V\n-         7: ldc           #18                 // String ZipLong value:\n-         9: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+         4: invokespecial #56                 // Method java/lang/StringBuilder.\"<init>\":()V\n+         7: ldc           #57                 // String ZipLong value:\n+         9: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         12: aload_0\n-        13: getfield      #3                  // Field value:J\n-        16: invokevirtual #20                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        19: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        13: getfield      #9                  // Field value:J\n+        16: invokevirtual #63                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        19: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         22: areturn\n       LineNumberTable:\n         line 214: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n          0: new           #10                 // class org/apache/commons/compress/archivers/zip/ZipLong\n          3: dup\n-         4: ldc2_w        #22                 // long 33639248l\n-         7: invokespecial #24                 // Method \"<init>\":(J)V\n-        10: putstatic     #25                 // Field CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+         4: ldc2_w        #70                 // long 33639248l\n+         7: invokespecial #72                 // Method \"<init>\":(J)V\n+        10: putstatic     #75                 // Field CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         13: new           #10                 // class org/apache/commons/compress/archivers/zip/ZipLong\n         16: dup\n-        17: ldc2_w        #26                 // long 67324752l\n-        20: invokespecial #24                 // Method \"<init>\":(J)V\n-        23: putstatic     #28                 // Field LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        17: ldc2_w        #79                 // long 67324752l\n+        20: invokespecial #72                 // Method \"<init>\":(J)V\n+        23: putstatic     #81                 // Field LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         26: new           #10                 // class org/apache/commons/compress/archivers/zip/ZipLong\n         29: dup\n-        30: ldc2_w        #29                 // long 134695760l\n-        33: invokespecial #24                 // Method \"<init>\":(J)V\n-        36: putstatic     #31                 // Field DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        30: ldc2_w        #84                 // long 134695760l\n+        33: invokespecial #72                 // Method \"<init>\":(J)V\n+        36: putstatic     #86                 // Field DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         39: new           #10                 // class org/apache/commons/compress/archivers/zip/ZipLong\n         42: dup\n-        43: ldc2_w        #32                 // long 4294967295l\n-        46: invokespecial #24                 // Method \"<init>\":(J)V\n-        49: putstatic     #34                 // Field ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        43: ldc2_w        #89                 // long 4294967295l\n+        46: invokespecial #72                 // Method \"<init>\":(J)V\n+        49: putstatic     #91                 // Field ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         52: new           #10                 // class org/apache/commons/compress/archivers/zip/ZipLong\n         55: dup\n-        56: ldc2_w        #35                 // long 808471376l\n-        59: invokespecial #24                 // Method \"<init>\":(J)V\n-        62: putstatic     #37                 // Field SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        56: ldc2_w        #94                 // long 808471376l\n+        59: invokespecial #72                 // Method \"<init>\":(J)V\n+        62: putstatic     #96                 // Field SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         65: new           #10                 // class org/apache/commons/compress/archivers/zip/ZipLong\n         68: dup\n-        69: ldc2_w        #38                 // long 134630224l\n-        72: invokespecial #24                 // Method \"<init>\":(J)V\n-        75: putstatic     #40                 // Field AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        69: ldc2_w        #99                 // long 134630224l\n+        72: invokespecial #72                 // Method \"<init>\":(J)V\n+        75: putstatic     #101                // Field AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         78: return\n       LineNumberTable:\n         line 37: 0\n         line 40: 13\n         line 50: 26\n         line 57: 39\n         line 67: 52\n"}]}
