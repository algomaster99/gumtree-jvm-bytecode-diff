{"diffoscope-json-version": 1, "source1": "first/XdocsTemplateParser.class", "source2": "second/XdocsTemplateParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,30 +27,58 @@\n public class XdocsTemplateParser extends XdocParser\n {\n     public static final String TEMP_DIR;\n     private final Map<String, Object> macroParameters;\n     private String sourceContent;\n     private String macroName;\n     \n+    static {\n+        TEMP_DIR = System.getProperty(\"java.io.tmpdir\");\n+    }\n+    \n     public XdocsTemplateParser() {\n         this.macroParameters = new HashMap<String, Object>();\n     }\n     \n     public void parse(final Reader source, final Sink sink, final String reference) throws ParseException {\n-        try (final StringWriter contentWriter = new StringWriter()) {\n-            IOUtil.copy(source, (Writer)contentWriter);\n-            this.sourceContent = contentWriter.toString();\n-            super.parse((Reader)new StringReader(this.sourceContent), sink, reference);\n+        try {\n+            Throwable t = null;\n+            try {\n+                final StringWriter contentWriter = new StringWriter();\n+                try {\n+                    IOUtil.copy(source, (Writer)contentWriter);\n+                    this.sourceContent = contentWriter.toString();\n+                    super.parse((Reader)new StringReader(this.sourceContent), sink, reference);\n+                }\n+                finally {\n+                    if (contentWriter != null) {\n+                        contentWriter.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+            }\n         }\n         catch (final IOException ioException) {\n             throw new ParseException(\"Error reading the input source\", (Exception)ioException);\n         }\n         finally {\n             this.sourceContent = null;\n         }\n+        this.sourceContent = null;\n     }\n     \n     protected void handleStartTag(final XmlPullParser parser, final Sink sink) throws MacroExecutionException {\n         final String tagName = parser.getName();\n         if (tagName.equals(XdocsTemplateParser.DOCUMENT_TAG.toString())) {\n             sink.body();\n             sink.rawText(parser.getText());\n@@ -117,12 +145,8 @@\n         this.reinitializeMacroFields();\n     }\n     \n     private void reinitializeMacroFields() {\n         this.macroName = \"\";\n         this.macroParameters.clear();\n     }\n-    \n-    static {\n-        TEMP_DIR = System.getProperty(\"java.io.tmpdir\");\n-    }\n }\n"}]}
