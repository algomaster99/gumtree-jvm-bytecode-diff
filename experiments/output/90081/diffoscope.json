{"diffoscope-json-version": 1, "source1": "first/StreamWriteFeature.class", "source2": "second/StreamWriteFeature.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,35 +1,37 @@\n \n package com.fasterxml.jackson.core;\n \n import com.fasterxml.jackson.core.util.JacksonFeature;\n \n public enum StreamWriteFeature implements JacksonFeature\n {\n-    AUTO_CLOSE_TARGET(JsonGenerator.Feature.AUTO_CLOSE_TARGET), \n-    AUTO_CLOSE_CONTENT(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT), \n-    FLUSH_PASSED_TO_STREAM(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM), \n-    WRITE_BIGDECIMAL_AS_PLAIN(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN), \n-    STRICT_DUPLICATE_DETECTION(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION), \n-    IGNORE_UNKNOWN(JsonGenerator.Feature.IGNORE_UNKNOWN), \n-    USE_FAST_DOUBLE_WRITER(JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER);\n+    AUTO_CLOSE_TARGET(\"AUTO_CLOSE_TARGET\", 0, JsonGenerator.Feature.AUTO_CLOSE_TARGET), \n+    AUTO_CLOSE_CONTENT(\"AUTO_CLOSE_CONTENT\", 1, JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT), \n+    FLUSH_PASSED_TO_STREAM(\"FLUSH_PASSED_TO_STREAM\", 2, JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM), \n+    WRITE_BIGDECIMAL_AS_PLAIN(\"WRITE_BIGDECIMAL_AS_PLAIN\", 3, JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN), \n+    STRICT_DUPLICATE_DETECTION(\"STRICT_DUPLICATE_DETECTION\", 4, JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION), \n+    IGNORE_UNKNOWN(\"IGNORE_UNKNOWN\", 5, JsonGenerator.Feature.IGNORE_UNKNOWN), \n+    USE_FAST_DOUBLE_WRITER(\"USE_FAST_DOUBLE_WRITER\", 6, JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER);\n     \n     private final boolean _defaultState;\n     private final int _mask;\n     private final JsonGenerator.Feature _mappedFeature;\n     \n-    private StreamWriteFeature(final JsonGenerator.Feature mappedTo) {\n+    private StreamWriteFeature(final String name, final int ordinal, final JsonGenerator.Feature mappedTo) {\n         this._mappedFeature = mappedTo;\n         this._mask = mappedTo.getMask();\n         this._defaultState = mappedTo.enabledByDefault();\n     }\n     \n     public static int collectDefaults() {\n         int flags = 0;\n-        for (final StreamWriteFeature f : values()) {\n+        StreamWriteFeature[] values;\n+        for (int length = (values = values()).length, i = 0; i < length; ++i) {\n+            final StreamWriteFeature f = values[i];\n             if (f.enabledByDefault()) {\n                 flags |= f.getMask();\n             }\n         }\n         return flags;\n     }\n     \n"}]}
