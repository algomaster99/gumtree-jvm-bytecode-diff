{"diffoscope-json-version": 1, "source1": "first/MetadataGeneratorUtil.class", "source2": "second/MetadataGeneratorUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,17 +7,17 @@\n import java.util.function.Function;\n import java.nio.file.Path;\n import java.util.Collection;\n import java.nio.file.Files;\n import java.nio.file.FileVisitOption;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n+import java.io.File;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import java.io.IOException;\n-import java.io.File;\n import java.util.List;\n import com.puppycrawl.tools.checkstyle.api.AuditListener;\n import com.puppycrawl.tools.checkstyle.MetadataGeneratorLogger;\n import com.puppycrawl.tools.checkstyle.AbstractAutomaticBean;\n import com.puppycrawl.tools.checkstyle.api.Configuration;\n import java.nio.charset.StandardCharsets;\n import com.puppycrawl.tools.checkstyle.TreeWalker;\n@@ -26,37 +26,36 @@\n import java.io.OutputStream;\n \n public final class MetadataGeneratorUtil\n {\n     private MetadataGeneratorUtil() {\n     }\n     \n-    public static void generate(final String path, final OutputStream out, final String... moduleFolders) throws IOException, CheckstyleException {\n+    public static void generate(final String s, final OutputStream outputStream, final String... array) throws IOException, CheckstyleException {\n         JavadocMetadataScraper.resetModuleDetailsStore();\n         final Checker checker = new Checker();\n         checker.setModuleClassLoader(Checker.class.getClassLoader());\n-        final DefaultConfiguration scraperCheckConfig = new DefaultConfiguration(JavadocMetadataScraper.class.getName());\n-        final DefaultConfiguration defaultConfiguration = new DefaultConfiguration(\"configuration\");\n-        final DefaultConfiguration treeWalkerConfig = new DefaultConfiguration(TreeWalker.class.getName());\n-        defaultConfiguration.addProperty(\"charset\", StandardCharsets.UTF_8.name());\n-        defaultConfiguration.addChild((Configuration)treeWalkerConfig);\n-        treeWalkerConfig.addChild((Configuration)scraperCheckConfig);\n-        checker.configure((Configuration)defaultConfiguration);\n-        checker.addListener((AuditListener)new MetadataGeneratorLogger(out, AbstractAutomaticBean.OutputStreamOptions.NONE));\n-        final List<File> moduleFiles = getTargetFiles(path, moduleFolders);\n-        checker.process((List)moduleFiles);\n+        final DefaultConfiguration defaultConfiguration = new DefaultConfiguration(JavadocMetadataScraper.class.getName());\n+        final DefaultConfiguration defaultConfiguration2 = new DefaultConfiguration(\"configuration\");\n+        final DefaultConfiguration defaultConfiguration3 = new DefaultConfiguration(TreeWalker.class.getName());\n+        defaultConfiguration2.addProperty(\"charset\", StandardCharsets.UTF_8.name());\n+        defaultConfiguration2.addChild((Configuration)defaultConfiguration3);\n+        defaultConfiguration3.addChild((Configuration)defaultConfiguration);\n+        checker.configure((Configuration)defaultConfiguration2);\n+        checker.addListener((AuditListener)new MetadataGeneratorLogger(outputStream, AbstractAutomaticBean.OutputStreamOptions.NONE));\n+        checker.process((List)getTargetFiles(s, array));\n     }\n     \n-    private static List<File> getTargetFiles(final String path, final String... moduleFolders) throws IOException {\n-        final List<File> validFiles = new ArrayList<File>();\n-        for (int length = moduleFolders.length, i = 0; i < length; ++i) {\n-            final String folder = moduleFolders[i];\n-            try (final Stream<Path> files = Files.walk(Paths.get(path + \"/\" + folder, new String[0]), new FileVisitOption[0])) {\n-                validFiles.addAll(files.map((Function<? super Path, ?>)Path::toFile).filter(file -> {\n-                    final String fileName = file.getName();\n-                    return fileName.endsWith(\"SuppressWarningsHolder.java\") || fileName.endsWith(\"Check.java\") || fileName.endsWith(\"Filter.java\");\n-                }).collect((Collector<? super Object, ?, Collection<? extends File>>)Collectors.toList()));\n+    private static List<File> getTargetFiles(final String s, final String... array) throws IOException {\n+        final ArrayList list = new ArrayList();\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            try (final Stream<Path> walk = Files.walk(Paths.get(s + \"/\" + array[i], new String[0]), new FileVisitOption[0])) {\n+                list.addAll(walk.map((Function<? super Path, ?>)Path::toFile).filter(file -> {\n+                    file.getName();\n+                    final String s2;\n+                    return s2.endsWith(\"SuppressWarningsHolder.java\") || s2.endsWith(\"Check.java\") || s2.endsWith(\"Filter.java\");\n+                }).collect((Collector<? super Object, ?, List<Object>>)Collectors.toList()));\n             }\n         }\n-        return validFiles;\n+        return list;\n     }\n }\n"}]}
