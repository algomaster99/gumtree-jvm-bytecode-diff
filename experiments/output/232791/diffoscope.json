{"diffoscope-json-version": 1, "source1": "first/PeriodicReloadingTrigger.class", "source2": "second/PeriodicReloadingTrigger.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,27 +13,27 @@\n     private final ScheduledExecutorService executorService;\n     private final ReloadingController controller;\n     private final Object controllerParam;\n     private final long period;\n     private final TimeUnit timeUnit;\n     private ScheduledFuture<?> triggerTask;\n     \n-    public PeriodicReloadingTrigger(final ReloadingController ctrl, final Object ctrlParam, final long triggerPeriod, final TimeUnit unit, final ScheduledExecutorService exec) {\n-        if (ctrl == null) {\n+    public PeriodicReloadingTrigger(final ReloadingController controller, final Object controllerParam, final long period, final TimeUnit timeUnit, final ScheduledExecutorService scheduledExecutorService) {\n+        if (controller == null) {\n             throw new IllegalArgumentException(\"ReloadingController must not be null!\");\n         }\n-        this.controller = ctrl;\n-        this.controllerParam = ctrlParam;\n-        this.period = triggerPeriod;\n-        this.timeUnit = unit;\n-        this.executorService = ((exec != null) ? exec : createDefaultExecutorService());\n+        this.controller = controller;\n+        this.controllerParam = controllerParam;\n+        this.period = period;\n+        this.timeUnit = timeUnit;\n+        this.executorService = ((scheduledExecutorService != null) ? scheduledExecutorService : createDefaultExecutorService());\n     }\n     \n-    public PeriodicReloadingTrigger(final ReloadingController ctrl, final Object ctrlParam, final long triggerPeriod, final TimeUnit unit) {\n-        this(ctrl, ctrlParam, triggerPeriod, unit, null);\n+    public PeriodicReloadingTrigger(final ReloadingController reloadingController, final Object o, final long n, final TimeUnit timeUnit) {\n+        this(reloadingController, o, n, timeUnit, null);\n     }\n     \n     public synchronized void start() {\n         if (!this.isRunning()) {\n             this.triggerTask = this.getExecutorService().scheduleAtFixedRate(this.createTriggerTaskCommand(), this.period, this.period, this.timeUnit);\n         }\n     }\n@@ -45,17 +45,17 @@\n         }\n     }\n     \n     public synchronized boolean isRunning() {\n         return this.triggerTask != null;\n     }\n     \n-    public void shutdown(final boolean shutdownExecutor) {\n+    public void shutdown(final boolean b) {\n         this.stop();\n-        if (shutdownExecutor) {\n+        if (b) {\n             this.getExecutorService().shutdown();\n         }\n     }\n     \n     public void shutdown() {\n         this.shutdown(true);\n     }\n@@ -65,11 +65,10 @@\n     }\n     \n     private Runnable createTriggerTaskCommand() {\n         return () -> this.controller.checkForReloading(this.controllerParam);\n     }\n     \n     private static ScheduledExecutorService createDefaultExecutorService() {\n-        final ThreadFactory factory = (ThreadFactory)new BasicThreadFactory.Builder().namingPattern(\"ReloadingTrigger-%s\").daemon(true).build();\n-        return Executors.newScheduledThreadPool(1, factory);\n+        return Executors.newScheduledThreadPool(1, (ThreadFactory)new BasicThreadFactory.Builder().namingPattern(\"ReloadingTrigger-%s\").daemon(true).build());\n     }\n }\n"}]}
