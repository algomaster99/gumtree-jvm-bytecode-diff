{"diffoscope-json-version": 1, "source1": "first/Functions.class", "source2": "second/Functions.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,16 +2,16 @@\n package org.apache.commons.lang3;\n \n import java.util.stream.Stream;\n import java.util.Collection;\n import java.lang.reflect.UndeclaredThrowableException;\n import java.io.UncheckedIOException;\n import java.io.IOException;\n-import java.util.Objects;\n import org.apache.commons.lang3.function.FailableBooleanSupplier;\n+import java.util.Objects;\n import java.util.function.Supplier;\n import java.util.function.Predicate;\n import java.util.function.Function;\n import java.util.function.Consumer;\n import java.util.concurrent.Callable;\n import java.util.function.BiPredicate;\n import java.util.function.BiFunction;\n@@ -69,14 +69,15 @@\n     }\n     \n     public static <O> Supplier<O> asSupplier(final Functions.FailableSupplier<O, ?> supplier) {\n         return (Supplier<O>)(() -> get((Functions.FailableSupplier<Object, Throwable>)supplier));\n     }\n     \n     public static <O, T extends Throwable> O call(final Functions.FailableCallable<O, T> callable) {\n+        Objects.requireNonNull(callable);\n         return get((Functions.FailableSupplier<O, Throwable>)callable::call);\n     }\n     \n     public static <O, T extends Throwable> O get(final Functions.FailableSupplier<O, T> supplier) {\n         try {\n             return (O)supplier.get();\n         }\n"}]}
