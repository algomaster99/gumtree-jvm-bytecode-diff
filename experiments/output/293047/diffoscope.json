{"diffoscope-json-version": 1, "source1": "first/JSONPointer.class", "source2": "second/JSONPointer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,87 +1,87 @@\n-  SHA-256 checksum 6bd921b469eb09be8bdf00516e80628b08fbe3e71494ad2b3ecb3bc732fd3898\n+  SHA-256 checksum ef093b95d78dee0212f12c7780369e439046b4dbfddeba5c225b143593271df3\n   Compiled from \"JSONPointer.java\"\n public class org.json.JSONPointer\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #15                         // org/json/JSONPointer\n   super_class: #49                        // java/lang/Object\n   interfaces: 0, fields: 2, methods: 9, attributes: 2\n Constant pool:\n-    #1 = Class              #111          // org/json/JSONPointer$Builder\n-    #2 = Methodref          #1.#112       // org/json/JSONPointer$Builder.\"<init>\":()V\n-    #3 = Methodref          #49.#112      // java/lang/Object.\"<init>\":()V\n-    #4 = Class              #113          // java/lang/NullPointerException\n-    #5 = String             #114          // pointer cannot be null\n-    #6 = Methodref          #4.#115       // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n-    #7 = Methodref          #42.#116      // java/lang/String.isEmpty:()Z\n-    #8 = String             #117          // #\n-    #9 = Methodref          #42.#118      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #10 = Methodref          #119.#120     // java/util/Collections.emptyList:()Ljava/util/List;\n-   #11 = Fieldref           #15.#121      // org/json/JSONPointer.refTokens:Ljava/util/List;\n-   #12 = String             #122          // #/\n-   #13 = Methodref          #42.#123      // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-   #14 = Methodref          #42.#124      // java/lang/String.substring:(I)Ljava/lang/String;\n-   #15 = Class              #125          // org/json/JSONPointer\n-   #16 = String             #126          // utf-8\n-   #17 = Methodref          #127.#128     // java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #18 = Class              #129          // java/io/UnsupportedEncodingException\n-   #19 = Class              #130          // java/lang/RuntimeException\n-   #20 = Methodref          #19.#131      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #21 = String             #132          // /\n-   #22 = Class              #133          // java/lang/IllegalArgumentException\n-   #23 = String             #134          // a JSON pointer should start with \\'/\\' or \\'#/\\'\n-   #24 = Methodref          #22.#115      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #25 = Class              #135          // java/util/ArrayList\n-   #26 = Methodref          #25.#112      // java/util/ArrayList.\"<init>\":()V\n-   #27 = Methodref          #42.#136      // java/lang/String.indexOf:(II)I\n-   #28 = Methodref          #42.#137      // java/lang/String.length:()I\n-   #29 = String             #138          //\n-   #30 = InterfaceMethodref #139.#140     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #31 = Methodref          #42.#141      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #32 = Methodref          #15.#142      // org/json/JSONPointer.unescape:(Ljava/lang/String;)Ljava/lang/String;\n-   #33 = Methodref          #25.#143      // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-   #34 = String             #144          // ~1\n-   #35 = Methodref          #42.#145      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-   #36 = String             #146          // ~0\n-   #37 = String             #147          // ~\n-   #38 = InterfaceMethodref #139.#116     // java/util/List.isEmpty:()Z\n-   #39 = InterfaceMethodref #139.#148     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #40 = InterfaceMethodref #149.#150     // java/util/Iterator.hasNext:()Z\n-   #41 = InterfaceMethodref #149.#151     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #42 = Class              #152          // java/lang/String\n-   #43 = Class              #153          // org/json/JSONObject\n-   #44 = Methodref          #43.#154      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-   #45 = Class              #155          // org/json/JSONArray\n-   #46 = Methodref          #15.#156      // org/json/JSONPointer.readByIndexToken:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #47 = Class              #157          // org/json/JSONPointerException\n-   #48 = String             #158          // value [%s] is not an array or object therefore its key %s cannot be resolved\n-   #49 = Class              #159          // java/lang/Object\n-   #50 = Methodref          #42.#160      // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #51 = Methodref          #47.#115      // org/json/JSONPointerException.\"<init>\":(Ljava/lang/String;)V\n-   #52 = Methodref          #161.#162     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #53 = Methodref          #45.#137      // org/json/JSONArray.length:()I\n-   #54 = String             #163          // index %s is out of bounds - the array has %d elements\n-   #55 = Methodref          #161.#164     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #56 = Methodref          #45.#165      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n-   #57 = Class              #166          // org/json/JSONException\n-   #58 = Class              #167          // java/lang/StringBuilder\n-   #59 = Methodref          #58.#112      // java/lang/StringBuilder.\"<init>\":()V\n-   #60 = String             #168          // Error reading value at index position\n-   #61 = Methodref          #58.#169      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #62 = Methodref          #58.#170      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #63 = Methodref          #58.#171      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #64 = Methodref          #47.#172      // org/json/JSONPointerException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #65 = Class              #173          // java/lang/NumberFormatException\n-   #66 = String             #174          // %s is not an array index\n-   #67 = Methodref          #58.#115      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n-   #68 = Methodref          #58.#175      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #69 = Methodref          #15.#176      // org/json/JSONPointer.escape:(Ljava/lang/String;)Ljava/lang/String;\n-   #70 = Methodref          #177.#178     // java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+    #1 = Class              #103          // org/json/JSONPointer$Builder\n+    #2 = Methodref          #1.#104       // org/json/JSONPointer$Builder.\"<init>\":()V\n+    #3 = Methodref          #49.#104      // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #105          // java/lang/NullPointerException\n+    #5 = String             #106          // pointer cannot be null\n+    #6 = Methodref          #4.#107       // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+    #7 = Methodref          #42.#108      // java/lang/String.isEmpty:()Z\n+    #8 = String             #109          // #\n+    #9 = Methodref          #42.#110      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #10 = Methodref          #111.#112     // java/util/Collections.emptyList:()Ljava/util/List;\n+   #11 = Fieldref           #15.#113      // org/json/JSONPointer.refTokens:Ljava/util/List;\n+   #12 = String             #114          // #/\n+   #13 = Methodref          #42.#115      // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+   #14 = Methodref          #42.#116      // java/lang/String.substring:(I)Ljava/lang/String;\n+   #15 = Class              #117          // org/json/JSONPointer\n+   #16 = String             #118          // utf-8\n+   #17 = Methodref          #119.#120     // java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #18 = Class              #121          // java/io/UnsupportedEncodingException\n+   #19 = Class              #122          // java/lang/RuntimeException\n+   #20 = Methodref          #19.#123      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #21 = String             #124          // /\n+   #22 = Class              #125          // java/lang/IllegalArgumentException\n+   #23 = String             #126          // a JSON pointer should start with \\'/\\' or \\'#/\\'\n+   #24 = Methodref          #22.#107      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #25 = Class              #127          // java/util/ArrayList\n+   #26 = Methodref          #25.#104      // java/util/ArrayList.\"<init>\":()V\n+   #27 = Methodref          #42.#128      // java/lang/String.indexOf:(II)I\n+   #28 = Methodref          #42.#129      // java/lang/String.length:()I\n+   #29 = String             #130          //\n+   #30 = InterfaceMethodref #131.#132     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #31 = Methodref          #42.#133      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #32 = Methodref          #15.#134      // org/json/JSONPointer.unescape:(Ljava/lang/String;)Ljava/lang/String;\n+   #33 = Methodref          #25.#135      // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+   #34 = String             #136          // ~1\n+   #35 = Methodref          #42.#137      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #36 = String             #138          // ~0\n+   #37 = String             #139          // ~\n+   #38 = InterfaceMethodref #131.#108     // java/util/List.isEmpty:()Z\n+   #39 = InterfaceMethodref #131.#140     // java/util/List.iterator:()Ljava/util/Iterator;\n+   #40 = InterfaceMethodref #93.#141      // java/util/Iterator.hasNext:()Z\n+   #41 = InterfaceMethodref #93.#142      // java/util/Iterator.next:()Ljava/lang/Object;\n+   #42 = Class              #143          // java/lang/String\n+   #43 = Class              #144          // org/json/JSONObject\n+   #44 = Methodref          #43.#145      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+   #45 = Class              #146          // org/json/JSONArray\n+   #46 = Methodref          #15.#147      // org/json/JSONPointer.readByIndexToken:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #47 = Class              #148          // org/json/JSONPointerException\n+   #48 = String             #149          // value [%s] is not an array or object therefore its key %s cannot be resolved\n+   #49 = Class              #150          // java/lang/Object\n+   #50 = Methodref          #42.#151      // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #51 = Methodref          #47.#107      // org/json/JSONPointerException.\"<init>\":(Ljava/lang/String;)V\n+   #52 = Methodref          #152.#153     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #53 = Methodref          #45.#129      // org/json/JSONArray.length:()I\n+   #54 = String             #154          // index %s is out of bounds - the array has %d elements\n+   #55 = Methodref          #152.#155     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #56 = Methodref          #45.#156      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n+   #57 = Class              #157          // org/json/JSONException\n+   #58 = Class              #158          // java/lang/StringBuilder\n+   #59 = Methodref          #58.#104      // java/lang/StringBuilder.\"<init>\":()V\n+   #60 = String             #159          // Error reading value at index position\n+   #61 = Methodref          #58.#160      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #62 = Methodref          #58.#161      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #63 = Methodref          #58.#162      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #64 = Methodref          #47.#163      // org/json/JSONPointerException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #65 = Class              #164          // java/lang/NumberFormatException\n+   #66 = String             #165          // %s is not an array index\n+   #67 = Methodref          #58.#107      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+   #68 = Methodref          #58.#166      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #69 = Methodref          #15.#167      // org/json/JSONPointer.escape:(Ljava/lang/String;)Ljava/lang/String;\n+   #70 = Methodref          #168.#169     // java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n    #71 = Utf8               Builder\n    #72 = Utf8               InnerClasses\n    #73 = Utf8               ENCODING\n    #74 = Utf8               Ljava/lang/String;\n    #75 = Utf8               ConstantValue\n    #76 = Utf8               refTokens\n    #77 = Utf8               Ljava/util/List;\n@@ -90,156 +90,147 @@\n    #80 = Utf8               builder\n    #81 = Utf8               ()Lorg/json/JSONPointer$Builder;\n    #82 = Utf8               Code\n    #83 = Utf8               LineNumberTable\n    #84 = Utf8               <init>\n    #85 = Utf8               (Ljava/lang/String;)V\n    #86 = Utf8               StackMapTable\n-   #87 = Class              #125          // org/json/JSONPointer\n-   #88 = Class              #152          // java/lang/String\n-   #89 = Class              #129          // java/io/UnsupportedEncodingException\n-   #90 = Utf8               (Ljava/util/List;)V\n-   #91 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n-   #92 = Utf8               unescape\n-   #93 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #94 = Utf8               queryFrom\n-   #95 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-   #96 = Class              #159          // java/lang/Object\n-   #97 = Class              #179          // java/util/Iterator\n-   #98 = Utf8               Exceptions\n-   #99 = Utf8               readByIndexToken\n-  #100 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #101 = Class              #155          // org/json/JSONArray\n-  #102 = Class              #166          // org/json/JSONException\n-  #103 = Class              #173          // java/lang/NumberFormatException\n-  #104 = Utf8               toString\n-  #105 = Utf8               ()Ljava/lang/String;\n-  #106 = Class              #167          // java/lang/StringBuilder\n-  #107 = Utf8               escape\n-  #108 = Utf8               toURIFragment\n-  #109 = Utf8               SourceFile\n-  #110 = Utf8               JSONPointer.java\n-  #111 = Utf8               org/json/JSONPointer$Builder\n-  #112 = NameAndType        #84:#180      // \"<init>\":()V\n-  #113 = Utf8               java/lang/NullPointerException\n-  #114 = Utf8               pointer cannot be null\n-  #115 = NameAndType        #84:#85       // \"<init>\":(Ljava/lang/String;)V\n-  #116 = NameAndType        #181:#182     // isEmpty:()Z\n-  #117 = Utf8               #\n-  #118 = NameAndType        #183:#184     // equals:(Ljava/lang/Object;)Z\n-  #119 = Class              #185          // java/util/Collections\n-  #120 = NameAndType        #186:#187     // emptyList:()Ljava/util/List;\n-  #121 = NameAndType        #76:#77       // refTokens:Ljava/util/List;\n-  #122 = Utf8               #/\n-  #123 = NameAndType        #188:#189     // startsWith:(Ljava/lang/String;)Z\n-  #124 = NameAndType        #190:#191     // substring:(I)Ljava/lang/String;\n-  #125 = Utf8               org/json/JSONPointer\n-  #126 = Utf8               utf-8\n-  #127 = Class              #192          // java/net/URLDecoder\n-  #128 = NameAndType        #193:#194     // decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #129 = Utf8               java/io/UnsupportedEncodingException\n-  #130 = Utf8               java/lang/RuntimeException\n-  #131 = NameAndType        #84:#195      // \"<init>\":(Ljava/lang/Throwable;)V\n-  #132 = Utf8               /\n-  #133 = Utf8               java/lang/IllegalArgumentException\n-  #134 = Utf8               a JSON pointer should start with \\'/\\' or \\'#/\\'\n-  #135 = Utf8               java/util/ArrayList\n-  #136 = NameAndType        #196:#197     // indexOf:(II)I\n-  #137 = NameAndType        #198:#199     // length:()I\n-  #138 = Utf8\n-  #139 = Class              #200          // java/util/List\n-  #140 = NameAndType        #201:#184     // add:(Ljava/lang/Object;)Z\n-  #141 = NameAndType        #190:#202     // substring:(II)Ljava/lang/String;\n-  #142 = NameAndType        #92:#93       // unescape:(Ljava/lang/String;)Ljava/lang/String;\n-  #143 = NameAndType        #84:#203      // \"<init>\":(Ljava/util/Collection;)V\n-  #144 = Utf8               ~1\n-  #145 = NameAndType        #204:#205     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #146 = Utf8               ~0\n-  #147 = Utf8               ~\n-  #148 = NameAndType        #206:#207     // iterator:()Ljava/util/Iterator;\n-  #149 = Class              #179          // java/util/Iterator\n-  #150 = NameAndType        #208:#182     // hasNext:()Z\n-  #151 = NameAndType        #209:#210     // next:()Ljava/lang/Object;\n-  #152 = Utf8               java/lang/String\n-  #153 = Utf8               org/json/JSONObject\n-  #154 = NameAndType        #211:#212     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #155 = Utf8               org/json/JSONArray\n-  #156 = NameAndType        #99:#100      // readByIndexToken:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #157 = Utf8               org/json/JSONPointerException\n-  #158 = Utf8               value [%s] is not an array or object therefore its key %s cannot be resolved\n-  #159 = Utf8               java/lang/Object\n-  #160 = NameAndType        #213:#214     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #161 = Class              #215          // java/lang/Integer\n-  #162 = NameAndType        #216:#217     // parseInt:(Ljava/lang/String;)I\n-  #163 = Utf8               index %s is out of bounds - the array has %d elements\n-  #164 = NameAndType        #218:#219     // valueOf:(I)Ljava/lang/Integer;\n-  #165 = NameAndType        #220:#221     // get:(I)Ljava/lang/Object;\n-  #166 = Utf8               org/json/JSONException\n-  #167 = Utf8               java/lang/StringBuilder\n-  #168 = Utf8               Error reading value at index position\n-  #169 = NameAndType        #222:#223     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #170 = NameAndType        #222:#224     // append:(I)Ljava/lang/StringBuilder;\n-  #171 = NameAndType        #104:#105     // toString:()Ljava/lang/String;\n-  #172 = NameAndType        #84:#225      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #173 = Utf8               java/lang/NumberFormatException\n-  #174 = Utf8               %s is not an array index\n-  #175 = NameAndType        #222:#226     // append:(C)Ljava/lang/StringBuilder;\n-  #176 = NameAndType        #107:#93      // escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #177 = Class              #227          // java/net/URLEncoder\n-  #178 = NameAndType        #228:#194     // encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #179 = Utf8               java/util/Iterator\n-  #180 = Utf8               ()V\n-  #181 = Utf8               isEmpty\n-  #182 = Utf8               ()Z\n-  #183 = Utf8               equals\n-  #184 = Utf8               (Ljava/lang/Object;)Z\n-  #185 = Utf8               java/util/Collections\n-  #186 = Utf8               emptyList\n-  #187 = Utf8               ()Ljava/util/List;\n-  #188 = Utf8               startsWith\n-  #189 = Utf8               (Ljava/lang/String;)Z\n-  #190 = Utf8               substring\n-  #191 = Utf8               (I)Ljava/lang/String;\n-  #192 = Utf8               java/net/URLDecoder\n-  #193 = Utf8               decode\n-  #194 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #195 = Utf8               (Ljava/lang/Throwable;)V\n-  #196 = Utf8               indexOf\n-  #197 = Utf8               (II)I\n-  #198 = Utf8               length\n-  #199 = Utf8               ()I\n-  #200 = Utf8               java/util/List\n-  #201 = Utf8               add\n-  #202 = Utf8               (II)Ljava/lang/String;\n-  #203 = Utf8               (Ljava/util/Collection;)V\n-  #204 = Utf8               replace\n-  #205 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #206 = Utf8               iterator\n-  #207 = Utf8               ()Ljava/util/Iterator;\n-  #208 = Utf8               hasNext\n-  #209 = Utf8               next\n-  #210 = Utf8               ()Ljava/lang/Object;\n-  #211 = Utf8               opt\n-  #212 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #213 = Utf8               format\n-  #214 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #215 = Utf8               java/lang/Integer\n-  #216 = Utf8               parseInt\n-  #217 = Utf8               (Ljava/lang/String;)I\n-  #218 = Utf8               valueOf\n-  #219 = Utf8               (I)Ljava/lang/Integer;\n-  #220 = Utf8               get\n-  #221 = Utf8               (I)Ljava/lang/Object;\n-  #222 = Utf8               append\n-  #223 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #224 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #225 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #226 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #227 = Utf8               java/net/URLEncoder\n-  #228 = Utf8               encode\n+   #87 = Utf8               (Ljava/util/List;)V\n+   #88 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n+   #89 = Utf8               unescape\n+   #90 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+   #91 = Utf8               queryFrom\n+   #92 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #93 = Class              #170          // java/util/Iterator\n+   #94 = Utf8               Exceptions\n+   #95 = Utf8               readByIndexToken\n+   #96 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #97 = Utf8               toString\n+   #98 = Utf8               ()Ljava/lang/String;\n+   #99 = Utf8               escape\n+  #100 = Utf8               toURIFragment\n+  #101 = Utf8               SourceFile\n+  #102 = Utf8               JSONPointer.java\n+  #103 = Utf8               org/json/JSONPointer$Builder\n+  #104 = NameAndType        #84:#171      // \"<init>\":()V\n+  #105 = Utf8               java/lang/NullPointerException\n+  #106 = Utf8               pointer cannot be null\n+  #107 = NameAndType        #84:#85       // \"<init>\":(Ljava/lang/String;)V\n+  #108 = NameAndType        #172:#173     // isEmpty:()Z\n+  #109 = Utf8               #\n+  #110 = NameAndType        #174:#175     // equals:(Ljava/lang/Object;)Z\n+  #111 = Class              #176          // java/util/Collections\n+  #112 = NameAndType        #177:#178     // emptyList:()Ljava/util/List;\n+  #113 = NameAndType        #76:#77       // refTokens:Ljava/util/List;\n+  #114 = Utf8               #/\n+  #115 = NameAndType        #179:#180     // startsWith:(Ljava/lang/String;)Z\n+  #116 = NameAndType        #181:#182     // substring:(I)Ljava/lang/String;\n+  #117 = Utf8               org/json/JSONPointer\n+  #118 = Utf8               utf-8\n+  #119 = Class              #183          // java/net/URLDecoder\n+  #120 = NameAndType        #184:#185     // decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #121 = Utf8               java/io/UnsupportedEncodingException\n+  #122 = Utf8               java/lang/RuntimeException\n+  #123 = NameAndType        #84:#186      // \"<init>\":(Ljava/lang/Throwable;)V\n+  #124 = Utf8               /\n+  #125 = Utf8               java/lang/IllegalArgumentException\n+  #126 = Utf8               a JSON pointer should start with \\'/\\' or \\'#/\\'\n+  #127 = Utf8               java/util/ArrayList\n+  #128 = NameAndType        #187:#188     // indexOf:(II)I\n+  #129 = NameAndType        #189:#190     // length:()I\n+  #130 = Utf8\n+  #131 = Class              #191          // java/util/List\n+  #132 = NameAndType        #192:#175     // add:(Ljava/lang/Object;)Z\n+  #133 = NameAndType        #181:#193     // substring:(II)Ljava/lang/String;\n+  #134 = NameAndType        #89:#90       // unescape:(Ljava/lang/String;)Ljava/lang/String;\n+  #135 = NameAndType        #84:#194      // \"<init>\":(Ljava/util/Collection;)V\n+  #136 = Utf8               ~1\n+  #137 = NameAndType        #195:#196     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #138 = Utf8               ~0\n+  #139 = Utf8               ~\n+  #140 = NameAndType        #197:#198     // iterator:()Ljava/util/Iterator;\n+  #141 = NameAndType        #199:#173     // hasNext:()Z\n+  #142 = NameAndType        #200:#201     // next:()Ljava/lang/Object;\n+  #143 = Utf8               java/lang/String\n+  #144 = Utf8               org/json/JSONObject\n+  #145 = NameAndType        #202:#203     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #146 = Utf8               org/json/JSONArray\n+  #147 = NameAndType        #95:#96       // readByIndexToken:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #148 = Utf8               org/json/JSONPointerException\n+  #149 = Utf8               value [%s] is not an array or object therefore its key %s cannot be resolved\n+  #150 = Utf8               java/lang/Object\n+  #151 = NameAndType        #204:#205     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #152 = Class              #206          // java/lang/Integer\n+  #153 = NameAndType        #207:#208     // parseInt:(Ljava/lang/String;)I\n+  #154 = Utf8               index %s is out of bounds - the array has %d elements\n+  #155 = NameAndType        #209:#210     // valueOf:(I)Ljava/lang/Integer;\n+  #156 = NameAndType        #211:#212     // get:(I)Ljava/lang/Object;\n+  #157 = Utf8               org/json/JSONException\n+  #158 = Utf8               java/lang/StringBuilder\n+  #159 = Utf8               Error reading value at index position\n+  #160 = NameAndType        #213:#214     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #161 = NameAndType        #213:#215     // append:(I)Ljava/lang/StringBuilder;\n+  #162 = NameAndType        #97:#98       // toString:()Ljava/lang/String;\n+  #163 = NameAndType        #84:#216      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #164 = Utf8               java/lang/NumberFormatException\n+  #165 = Utf8               %s is not an array index\n+  #166 = NameAndType        #213:#217     // append:(C)Ljava/lang/StringBuilder;\n+  #167 = NameAndType        #99:#90       // escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #168 = Class              #218          // java/net/URLEncoder\n+  #169 = NameAndType        #219:#185     // encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #170 = Utf8               java/util/Iterator\n+  #171 = Utf8               ()V\n+  #172 = Utf8               isEmpty\n+  #173 = Utf8               ()Z\n+  #174 = Utf8               equals\n+  #175 = Utf8               (Ljava/lang/Object;)Z\n+  #176 = Utf8               java/util/Collections\n+  #177 = Utf8               emptyList\n+  #178 = Utf8               ()Ljava/util/List;\n+  #179 = Utf8               startsWith\n+  #180 = Utf8               (Ljava/lang/String;)Z\n+  #181 = Utf8               substring\n+  #182 = Utf8               (I)Ljava/lang/String;\n+  #183 = Utf8               java/net/URLDecoder\n+  #184 = Utf8               decode\n+  #185 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #186 = Utf8               (Ljava/lang/Throwable;)V\n+  #187 = Utf8               indexOf\n+  #188 = Utf8               (II)I\n+  #189 = Utf8               length\n+  #190 = Utf8               ()I\n+  #191 = Utf8               java/util/List\n+  #192 = Utf8               add\n+  #193 = Utf8               (II)Ljava/lang/String;\n+  #194 = Utf8               (Ljava/util/Collection;)V\n+  #195 = Utf8               replace\n+  #196 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #197 = Utf8               iterator\n+  #198 = Utf8               ()Ljava/util/Iterator;\n+  #199 = Utf8               hasNext\n+  #200 = Utf8               next\n+  #201 = Utf8               ()Ljava/lang/Object;\n+  #202 = Utf8               opt\n+  #203 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #204 = Utf8               format\n+  #205 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #206 = Utf8               java/lang/Integer\n+  #207 = Utf8               parseInt\n+  #208 = Utf8               (Ljava/lang/String;)I\n+  #209 = Utf8               valueOf\n+  #210 = Utf8               (I)Ljava/lang/Integer;\n+  #211 = Utf8               get\n+  #212 = Utf8               (I)Ljava/lang/Object;\n+  #213 = Utf8               append\n+  #214 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #215 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #216 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #217 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #218 = Utf8               java/net/URLEncoder\n+  #219 = Utf8               encode\n {\n   private static final java.lang.String ENCODING = \"utf-8\";\n     descriptor: Ljava/lang/String;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: String utf-8\n \n   private final java.util.List<java.lang.String> refTokens;\n@@ -448,15 +439,15 @@\n         10: invokespecial #33                 // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n         13: putfield      #11                 // Field refTokens:Ljava/util/List;\n         16: return\n       LineNumberTable:\n         line 166: 0\n         line 167: 4\n         line 168: 16\n-    Signature: #91                          // (Ljava/util/List<Ljava/lang/String;>;)V\n+    Signature: #88                          // (Ljava/util/List<Ljava/lang/String;>;)V\n \n   private static java.lang.String unescape(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n"}]}
