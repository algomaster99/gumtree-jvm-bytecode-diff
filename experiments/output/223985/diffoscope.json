{"diffoscope-json-version": 1, "source1": "first/JavaLanguageParser$CreatedNameObjectContext.class", "source2": "second/JavaLanguageParser$CreatedNameObjectContext.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,23 +23,23 @@\n         return (JavaLanguageParser.TypeArgumentsOrDiamondContext)this.getRuleContext((Class)JavaLanguageParser.TypeArgumentsOrDiamondContext.class, 0);\n     }\n     \n     public List<JavaLanguageParser.CreatedNameExtendedContext> createdNameExtended() {\n         return this.getRuleContexts((Class)JavaLanguageParser.CreatedNameExtendedContext.class);\n     }\n     \n-    public JavaLanguageParser.CreatedNameExtendedContext createdNameExtended(final int i) {\n-        return (JavaLanguageParser.CreatedNameExtendedContext)this.getRuleContext((Class)JavaLanguageParser.CreatedNameExtendedContext.class, i);\n+    public JavaLanguageParser.CreatedNameExtendedContext createdNameExtended(final int n) {\n+        return (JavaLanguageParser.CreatedNameExtendedContext)this.getRuleContext((Class)JavaLanguageParser.CreatedNameExtendedContext.class, n);\n     }\n     \n-    public CreatedNameObjectContext(final JavaLanguageParser.CreatedNameContext ctx) {\n+    public CreatedNameObjectContext(final JavaLanguageParser.CreatedNameContext createdNameContext) {\n         this.extended = new ArrayList();\n-        this.copyFrom(ctx);\n+        this.copyFrom(createdNameContext);\n     }\n     \n-    public <T> T accept(final ParseTreeVisitor<? extends T> visitor) {\n-        if (visitor instanceof JavaLanguageParserVisitor) {\n-            return (T)((JavaLanguageParserVisitor)visitor).visitCreatedNameObject(this);\n+    public <T> T accept(final ParseTreeVisitor<? extends T> parseTreeVisitor) {\n+        if (parseTreeVisitor instanceof JavaLanguageParserVisitor) {\n+            return (T)((JavaLanguageParserVisitor)parseTreeVisitor).visitCreatedNameObject(this);\n         }\n-        return (T)visitor.visitChildren((RuleNode)this);\n+        return (T)parseTreeVisitor.visitChildren((RuleNode)this);\n     }\n }\n"}]}
