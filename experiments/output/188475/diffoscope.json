{"diffoscope-json-version": 1, "source1": "first/TarFile.class", "source2": "second/TarFile.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,545 +1,545 @@\n-  SHA-256 checksum 4268f27b43a6f06a602c186c9aae908f1a02e481ddd7b16abb356053e01eb07e\n+  SHA-256 checksum 97c312864e81f00b8df99dba55c9fa3ecde923c417cc384d6ab93280114c6091\n   Compiled from \"TarFile.java\"\n public class org.apache.commons.compress.archivers.tar.TarFile implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #14                         // org/apache/commons/compress/archivers/tar/TarFile\n-  super_class: #145                       // java/lang/Object\n+  this_class: #2                          // org/apache/commons/compress/archivers/tar/TarFile\n+  super_class: #45                        // java/lang/Object\n   interfaces: 1, fields: 14, methods: 34, attributes: 2\n Constant pool:\n-    #1 = Fieldref           #14.#292      // org/apache/commons/compress/archivers/tar/TarFile.sparseInputStreams:Ljava/util/Map;\n-    #2 = Class              #293          // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-    #3 = Methodref          #2.#294       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n-    #4 = Methodref          #14.#295      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n-    #5 = Class              #296          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #6 = Methodref          #14.#297      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n-    #7 = Methodref          #298.#299     // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #8 = Methodref          #14.#300      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;)V\n-    #9 = Methodref          #14.#301      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-   #10 = Methodref          #14.#302      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;Z)V\n-   #11 = Class              #303          // java/nio/file/OpenOption\n-   #12 = Methodref          #304.#305     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-   #13 = Methodref          #145.#306     // java/lang/Object.\"<init>\":()V\n-   #14 = Class              #307          // org/apache/commons/compress/archivers/tar/TarFile\n-   #15 = Fieldref           #14.#308      // org/apache/commons/compress/archivers/tar/TarFile.smallBuf:[B\n-   #16 = Class              #309          // java/util/LinkedList\n-   #17 = Methodref          #16.#306      // java/util/LinkedList.\"<init>\":()V\n-   #18 = Fieldref           #14.#310      // org/apache/commons/compress/archivers/tar/TarFile.entries:Ljava/util/LinkedList;\n-   #19 = Class              #311          // java/util/ArrayList\n-   #20 = Methodref          #19.#306      // java/util/ArrayList.\"<init>\":()V\n-   #21 = Fieldref           #14.#312      // org/apache/commons/compress/archivers/tar/TarFile.globalSparseHeaders:Ljava/util/List;\n-   #22 = Class              #313          // java/util/HashMap\n-   #23 = Methodref          #22.#306      // java/util/HashMap.\"<init>\":()V\n-   #24 = Fieldref           #14.#314      // org/apache/commons/compress/archivers/tar/TarFile.globalPaxHeaders:Ljava/util/Map;\n-   #25 = Fieldref           #14.#315      // org/apache/commons/compress/archivers/tar/TarFile.archive:Ljava/nio/channels/SeekableByteChannel;\n-   #26 = Fieldref           #14.#316      // org/apache/commons/compress/archivers/tar/TarFile.hasHitEOF:Z\n-   #27 = Methodref          #317.#318     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #28 = Fieldref           #14.#319      // org/apache/commons/compress/archivers/tar/TarFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #29 = Fieldref           #14.#320      // org/apache/commons/compress/archivers/tar/TarFile.recordSize:I\n-   #30 = Methodref          #218.#321     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #31 = Fieldref           #14.#322      // org/apache/commons/compress/archivers/tar/TarFile.recordBuffer:Ljava/nio/ByteBuffer;\n-   #32 = Fieldref           #14.#323      // org/apache/commons/compress/archivers/tar/TarFile.blockSize:I\n-   #33 = Fieldref           #14.#324      // org/apache/commons/compress/archivers/tar/TarFile.lenient:Z\n-   #34 = Methodref          #14.#325      // org/apache/commons/compress/archivers/tar/TarFile.getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #35 = Methodref          #16.#326      // java/util/LinkedList.add:(Ljava/lang/Object;)Z\n-   #36 = Methodref          #14.#327      // org/apache/commons/compress/archivers/tar/TarFile.isAtEOF:()Z\n-   #37 = Fieldref           #14.#328      // org/apache/commons/compress/archivers/tar/TarFile.currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #38 = Methodref          #45.#329      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-   #39 = Methodref          #45.#330      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-   #40 = Methodref          #14.#331      // org/apache/commons/compress/archivers/tar/TarFile.repositionForwardTo:(J)V\n-   #41 = Methodref          #14.#332      // org/apache/commons/compress/archivers/tar/TarFile.throwExceptionIfPositionIsNotInArchive:()V\n-   #42 = Methodref          #14.#333      // org/apache/commons/compress/archivers/tar/TarFile.skipRecordPadding:()V\n-   #43 = Methodref          #14.#334      // org/apache/commons/compress/archivers/tar/TarFile.getRecord:()Ljava/nio/ByteBuffer;\n-   #44 = InterfaceMethodref #206.#335     // java/nio/channels/SeekableByteChannel.position:()J\n-   #45 = Class              #336          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #46 = Methodref          #218.#337     // java/nio/ByteBuffer.array:()[B\n-   #47 = Methodref          #45.#338      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-   #48 = Class              #339          // java/lang/IllegalArgumentException\n-   #49 = Class              #340          // java/io/IOException\n-   #50 = String             #341          // Error detected parsing the header\n-   #51 = Methodref          #49.#342      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #52 = Methodref          #45.#343      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n-   #53 = Methodref          #14.#344      // org/apache/commons/compress/archivers/tar/TarFile.getLongNameData:()[B\n-   #54 = InterfaceMethodref #345.#346     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #55 = Methodref          #45.#347      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n-   #56 = Methodref          #45.#348      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n-   #57 = Methodref          #45.#349      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n-   #58 = Methodref          #45.#350      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n-   #59 = String             #351          // /\n-   #60 = Methodref          #114.#352     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-   #61 = Class              #353          // java/lang/StringBuilder\n-   #62 = Methodref          #61.#306      // java/lang/StringBuilder.\"<init>\":()V\n-   #63 = Methodref          #61.#354      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #64 = Methodref          #61.#355      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #65 = Methodref          #45.#356      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n-   #66 = Methodref          #14.#357      // org/apache/commons/compress/archivers/tar/TarFile.readGlobalPaxHeaders:()V\n-   #67 = Methodref          #45.#358      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n-   #68 = Methodref          #14.#359      // org/apache/commons/compress/archivers/tar/TarFile.paxHeaders:()V\n-   #69 = InterfaceMethodref #245.#360     // java/util/Map.isEmpty:()Z\n-   #70 = Methodref          #14.#361      // org/apache/commons/compress/archivers/tar/TarFile.applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-   #71 = Class              #362          // java/lang/NumberFormatException\n-   #72 = String             #363          // Error detected parsing the pax header\n-   #73 = Methodref          #45.#364      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n-   #74 = Methodref          #14.#365      // org/apache/commons/compress/archivers/tar/TarFile.readOldGNUSparse:()V\n-   #75 = Methodref          #45.#366      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n-   #76 = String             #367          // premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n-   #77 = Methodref          #49.#368      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #78 = Class              #369          // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-   #79 = Methodref          #78.#294      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n-   #80 = Methodref          #45.#370      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n-   #81 = Methodref          #78.#370      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n-   #82 = InterfaceMethodref #236.#371     // java/util/List.addAll:(Ljava/util/Collection;)Z\n-   #83 = Methodref          #45.#372      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n-   #84 = Methodref          #78.#366      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n-   #85 = Methodref          #14.#373      // org/apache/commons/compress/archivers/tar/TarFile.buildSparseInputStreams:()V\n-   #86 = Methodref          #45.#374      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getOrderedSparseHeaders:()Ljava/util/List;\n-   #87 = Class              #375          // org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n-   #88 = Methodref          #87.#306      // org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream.\"<init>\":()V\n-   #89 = InterfaceMethodref #236.#376     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #90 = InterfaceMethodref #238.#377     // java/util/Iterator.hasNext:()Z\n-   #91 = InterfaceMethodref #238.#378     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #92 = Class              #379          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #93 = Methodref          #92.#380      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-   #94 = String             #381          // Corrupted struct sparse detected\n-   #95 = Class              #382          // org/apache/commons/compress/utils/BoundedInputStream\n-   #96 = Methodref          #95.#383      // org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n-   #97 = InterfaceMethodref #236.#326     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #98 = Methodref          #92.#384      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-   #99 = String             #385          // Unreadable TAR archive, sparse block offset or length too big\n-  #100 = Class              #386          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-  #101 = Methodref          #100.#387     // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-  #102 = Methodref          #45.#388      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-  #103 = InterfaceMethodref #245.#389     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #104 = Methodref          #45.#390      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n-  #105 = Methodref          #45.#391      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n-  #106 = Methodref          #14.#392      // org/apache/commons/compress/archivers/tar/TarFile.getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n-  #107 = Methodref          #393.#394     // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #108 = Methodref          #237.#395     // java/io/InputStream.close:()V\n-  #109 = Class              #396          // java/lang/Throwable\n-  #110 = Methodref          #109.#397     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-  #111 = String             #398          // GNU.sparse.map\n-  #112 = InterfaceMethodref #245.#399     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-  #113 = InterfaceMethodref #245.#400     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #114 = Class              #401          // java/lang/String\n-  #115 = Methodref          #393.#402     // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #116 = Methodref          #19.#403      // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-  #117 = String             #404          // premature end of tar archive. Didn\\'t find any entry after PAX header.\n-  #118 = Methodref          #45.#405      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n-  #119 = Methodref          #393.#406     // org/apache/commons/compress/archivers/tar/TarUtils.parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n-  #120 = Class              #407          // java/io/ByteArrayOutputStream\n-  #121 = Methodref          #120.#306     // java/io/ByteArrayOutputStream.\"<init>\":()V\n-  #122 = Methodref          #237.#408     // java/io/InputStream.read:([B)I\n-  #123 = Methodref          #120.#409     // java/io/ByteArrayOutputStream.write:([BII)V\n-  #124 = Methodref          #120.#410     // java/io/ByteArrayOutputStream.toByteArray:()[B\n-  #125 = Methodref          #411.#412     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #126 = Methodref          #14.#350      // org/apache/commons/compress/archivers/tar/TarFile.isDirectory:()Z\n-  #127 = Methodref          #14.#413      // org/apache/commons/compress/archivers/tar/TarFile.repositionForwardBy:(J)V\n-  #128 = String             #414          // trying to move backwards inside of the archive\n-  #129 = InterfaceMethodref #206.#415     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #130 = InterfaceMethodref #206.#416     // java/nio/channels/SeekableByteChannel.size:()J\n-  #131 = String             #417          // Truncated TAR archive\n-  #132 = Methodref          #14.#418      // org/apache/commons/compress/archivers/tar/TarFile.readRecord:()Ljava/nio/ByteBuffer;\n-  #133 = Methodref          #14.#419      // org/apache/commons/compress/archivers/tar/TarFile.isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n-  #134 = Methodref          #14.#420      // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n-  #135 = Methodref          #14.#421      // org/apache/commons/compress/archivers/tar/TarFile.tryToConsumeSecondEOFRecord:()V\n-  #136 = Methodref          #14.#422      // org/apache/commons/compress/archivers/tar/TarFile.consumeRemainderOfLastBlock:()V\n-  #137 = Methodref          #218.#423     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-  #138 = InterfaceMethodref #206.#424     // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-  #139 = Methodref          #425.#426     // org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n-  #140 = Class              #427          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-  #141 = Methodref          #140.#428     // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n-  #142 = Class              #429          // java/lang/RuntimeException\n-  #143 = String             #430          // Corrupted TAR archive. Can\\'t read entry\n-  #144 = InterfaceMethodref #206.#395     // java/nio/channels/SeekableByteChannel.close:()V\n-  #145 = Class              #431          // java/lang/Object\n-  #146 = Class              #432          // java/io/Closeable\n-  #147 = Utf8               BoundedTarEntryInputStream\n-  #148 = Utf8               InnerClasses\n-  #149 = Utf8               SMALL_BUFFER_SIZE\n-  #150 = Utf8               I\n-  #151 = Utf8               ConstantValue\n-  #152 = Integer            256\n-  #153 = Utf8               smallBuf\n-  #154 = Utf8               [B\n-  #155 = Utf8               archive\n-  #156 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #157 = Utf8               zipEncoding\n-  #158 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #159 = Utf8               entries\n-  #160 = Utf8               Ljava/util/LinkedList;\n-  #161 = Utf8               Signature\n-  #162 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n-  #163 = Utf8               blockSize\n-  #164 = Utf8               lenient\n-  #165 = Utf8               Z\n-  #166 = Utf8               recordSize\n-  #167 = Utf8               recordBuffer\n-  #168 = Utf8               Ljava/nio/ByteBuffer;\n-  #169 = Utf8               globalSparseHeaders\n-  #170 = Utf8               Ljava/util/List;\n-  #171 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #172 = Utf8               hasHitEOF\n-  #173 = Utf8               currEntry\n-  #174 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #175 = Utf8               globalPaxHeaders\n-  #176 = Utf8               Ljava/util/Map;\n-  #177 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #178 = Utf8               sparseInputStreams\n-  #179 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/io/InputStream;>;>;\n-  #180 = Utf8               <init>\n-  #181 = Utf8               ([B)V\n-  #182 = Utf8               Code\n-  #183 = Utf8               LineNumberTable\n-  #184 = Utf8               LocalVariableTable\n-  #185 = Utf8               this\n-  #186 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile;\n-  #187 = Utf8               content\n-  #188 = Utf8               Exceptions\n-  #189 = Utf8               ([BLjava/lang/String;)V\n-  #190 = Utf8               encoding\n-  #191 = Utf8               Ljava/lang/String;\n-  #192 = Utf8               ([BZ)V\n-  #193 = Utf8               (Ljava/io/File;)V\n-  #194 = Utf8               Ljava/io/File;\n-  #195 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #196 = Utf8               (Ljava/io/File;Z)V\n-  #197 = Utf8               (Ljava/nio/file/Path;)V\n-  #198 = Utf8               archivePath\n-  #199 = Utf8               Ljava/nio/file/Path;\n-  #200 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;)V\n-  #201 = Utf8               (Ljava/nio/file/Path;Z)V\n-  #202 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-  #203 = Utf8               (Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n-  #204 = Utf8               entry\n-  #205 = Utf8               StackMapTable\n-  #206 = Class              #433          // java/nio/channels/SeekableByteChannel\n-  #207 = Utf8               getNextTarEntry\n-  #208 = Utf8               ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #209 = Utf8               position\n-  #210 = Utf8               J\n-  #211 = Utf8               e\n-  #212 = Utf8               Ljava/lang/IllegalArgumentException;\n-  #213 = Utf8               longLinkData\n-  #214 = Utf8               longNameData\n-  #215 = Utf8               name\n-  #216 = Utf8               Ljava/lang/NumberFormatException;\n-  #217 = Utf8               headerBuf\n-  #218 = Class              #434          // java/nio/ByteBuffer\n-  #219 = Class              #154          // \"[B\"\n-  #220 = Utf8               readOldGNUSparse\n-  #221 = Utf8               ()V\n-  #222 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveSparseEntry;\n-  #223 = Utf8               buildSparseInputStreams\n-  #224 = Utf8               start\n-  #225 = Utf8               zeroBlockSize\n-  #226 = Utf8               sparseHeader\n-  #227 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #228 = Utf8               streams\n-  #229 = Utf8               sparseHeaders\n-  #230 = Utf8               zeroInputStream\n-  #231 = Utf8               Ljava/io/InputStream;\n-  #232 = Utf8               offset\n-  #233 = Utf8               numberOfZeroBytesInSparseEntry\n-  #234 = Utf8               LocalVariableTypeTable\n-  #235 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n-  #236 = Class              #435          // java/util/List\n-  #237 = Class              #436          // java/io/InputStream\n-  #238 = Class              #437          // java/util/Iterator\n-  #239 = Utf8               applyPaxHeadersToCurrentEntry\n-  #240 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n-  #241 = Utf8               headers\n-  #242 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n-  #243 = Utf8               paxHeaders\n-  #244 = Utf8               input\n-  #245 = Class              #438          // java/util/Map\n-  #246 = Utf8               readGlobalPaxHeaders\n-  #247 = Utf8               getLongNameData\n-  #248 = Utf8               ()[B\n-  #249 = Utf8               length\n-  #250 = Utf8               in\n-  #251 = Utf8               l\n-  #252 = Utf8               longName\n-  #253 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #254 = Utf8               skipRecordPadding\n-  #255 = Utf8               numRecords\n-  #256 = Utf8               padding\n-  #257 = Utf8               repositionForwardTo\n-  #258 = Utf8               (J)V\n-  #259 = Utf8               newPosition\n-  #260 = Utf8               currPosition\n-  #261 = Utf8               repositionForwardBy\n-  #262 = Utf8               throwExceptionIfPositionIsNotInArchive\n-  #263 = Utf8               getRecord\n-  #264 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #265 = Utf8               tryToConsumeSecondEOFRecord\n-  #266 = Utf8               shouldReset\n-  #267 = Utf8               consumeRemainderOfLastBlock\n-  #268 = Utf8               bytesReadOfLastBlock\n-  #269 = Utf8               readRecord\n-  #270 = Utf8               readNow\n-  #271 = Utf8               getEntries\n-  #272 = Utf8               ()Ljava/util/List;\n-  #273 = Utf8               ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n-  #274 = Utf8               isEOFRecord\n-  #275 = Utf8               (Ljava/nio/ByteBuffer;)Z\n-  #276 = Utf8               isAtEOF\n-  #277 = Utf8               ()Z\n-  #278 = Utf8               setAtEOF\n-  #279 = Utf8               (Z)V\n-  #280 = Utf8               b\n-  #281 = Utf8               isDirectory\n-  #282 = Utf8               getInputStream\n-  #283 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n-  #284 = Utf8               ex\n-  #285 = Utf8               Ljava/lang/RuntimeException;\n-  #286 = Utf8               close\n-  #287 = Utf8               access$000\n-  #288 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-  #289 = Utf8               x0\n-  #290 = Utf8               SourceFile\n-  #291 = Utf8               TarFile.java\n-  #292 = NameAndType        #178:#176     // sparseInputStreams:Ljava/util/Map;\n-  #293 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-  #294 = NameAndType        #180:#181     // \"<init>\":([B)V\n-  #295 = NameAndType        #180:#202     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n-  #296 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #297 = NameAndType        #180:#203     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n-  #298 = Class              #439          // java/io/File\n-  #299 = NameAndType        #440:#441     // toPath:()Ljava/nio/file/Path;\n-  #300 = NameAndType        #180:#197     // \"<init>\":(Ljava/nio/file/Path;)V\n-  #301 = NameAndType        #180:#200     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-  #302 = NameAndType        #180:#201     // \"<init>\":(Ljava/nio/file/Path;Z)V\n-  #303 = Utf8               java/nio/file/OpenOption\n-  #304 = Class              #442          // java/nio/file/Files\n-  #305 = NameAndType        #443:#444     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #306 = NameAndType        #180:#221     // \"<init>\":()V\n-  #307 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n-  #308 = NameAndType        #153:#154     // smallBuf:[B\n-  #309 = Utf8               java/util/LinkedList\n-  #310 = NameAndType        #159:#160     // entries:Ljava/util/LinkedList;\n-  #311 = Utf8               java/util/ArrayList\n-  #312 = NameAndType        #169:#170     // globalSparseHeaders:Ljava/util/List;\n-  #313 = Utf8               java/util/HashMap\n-  #314 = NameAndType        #175:#176     // globalPaxHeaders:Ljava/util/Map;\n-  #315 = NameAndType        #155:#156     // archive:Ljava/nio/channels/SeekableByteChannel;\n-  #316 = NameAndType        #172:#165     // hasHitEOF:Z\n-  #317 = Class              #445          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #318 = NameAndType        #446:#447     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #319 = NameAndType        #157:#158     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #320 = NameAndType        #166:#150     // recordSize:I\n-  #321 = NameAndType        #448:#449     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #322 = NameAndType        #167:#168     // recordBuffer:Ljava/nio/ByteBuffer;\n-  #323 = NameAndType        #163:#150     // blockSize:I\n-  #324 = NameAndType        #164:#165     // lenient:Z\n-  #325 = NameAndType        #207:#208     // getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #326 = NameAndType        #450:#451     // add:(Ljava/lang/Object;)Z\n-  #327 = NameAndType        #276:#277     // isAtEOF:()Z\n-  #328 = NameAndType        #173:#174     // currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #329 = NameAndType        #452:#453     // getDataOffset:()J\n-  #330 = NameAndType        #454:#453     // getSize:()J\n-  #331 = NameAndType        #257:#258     // repositionForwardTo:(J)V\n-  #332 = NameAndType        #262:#221     // throwExceptionIfPositionIsNotInArchive:()V\n-  #333 = NameAndType        #254:#221     // skipRecordPadding:()V\n-  #334 = NameAndType        #263:#264     // getRecord:()Ljava/nio/ByteBuffer;\n-  #335 = NameAndType        #209:#453     // position:()J\n-  #336 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #337 = NameAndType        #455:#248     // array:()[B\n-  #338 = NameAndType        #180:#456     // \"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-  #339 = Utf8               java/lang/IllegalArgumentException\n-  #340 = Utf8               java/io/IOException\n-  #341 = Utf8               Error detected parsing the header\n-  #342 = NameAndType        #180:#457     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #343 = NameAndType        #458:#277     // isGNULongLinkEntry:()Z\n-  #344 = NameAndType        #247:#248     // getLongNameData:()[B\n-  #345 = Class              #459          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #346 = NameAndType        #460:#461     // decode:([B)Ljava/lang/String;\n-  #347 = NameAndType        #462:#463     // setLinkName:(Ljava/lang/String;)V\n-  #348 = NameAndType        #464:#277     // isGNULongNameEntry:()Z\n-  #349 = NameAndType        #465:#463     // setName:(Ljava/lang/String;)V\n-  #350 = NameAndType        #281:#277     // isDirectory:()Z\n-  #351 = Utf8               /\n-  #352 = NameAndType        #466:#467     // endsWith:(Ljava/lang/String;)Z\n-  #353 = Utf8               java/lang/StringBuilder\n-  #354 = NameAndType        #468:#469     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #355 = NameAndType        #470:#471     // toString:()Ljava/lang/String;\n-  #356 = NameAndType        #472:#277     // isGlobalPaxHeader:()Z\n-  #357 = NameAndType        #246:#221     // readGlobalPaxHeaders:()V\n-  #358 = NameAndType        #473:#277     // isPaxHeader:()Z\n-  #359 = NameAndType        #243:#221     // paxHeaders:()V\n-  #360 = NameAndType        #474:#277     // isEmpty:()Z\n-  #361 = NameAndType        #239:#240     // applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-  #362 = Utf8               java/lang/NumberFormatException\n-  #363 = Utf8               Error detected parsing the pax header\n-  #364 = NameAndType        #475:#277     // isOldGNUSparse:()Z\n-  #365 = NameAndType        #220:#221     // readOldGNUSparse:()V\n-  #366 = NameAndType        #476:#277     // isExtended:()Z\n-  #367 = Utf8               premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n-  #368 = NameAndType        #180:#463     // \"<init>\":(Ljava/lang/String;)V\n-  #369 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-  #370 = NameAndType        #477:#272     // getSparseHeaders:()Ljava/util/List;\n-  #371 = NameAndType        #478:#479     // addAll:(Ljava/util/Collection;)Z\n-  #372 = NameAndType        #480:#258     // setDataOffset:(J)V\n-  #373 = NameAndType        #223:#221     // buildSparseInputStreams:()V\n-  #374 = NameAndType        #481:#272     // getOrderedSparseHeaders:()Ljava/util/List;\n-  #375 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n-  #376 = NameAndType        #482:#483     // iterator:()Ljava/util/Iterator;\n-  #377 = NameAndType        #484:#277     // hasNext:()Z\n-  #378 = NameAndType        #485:#486     // next:()Ljava/lang/Object;\n-  #379 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #380 = NameAndType        #487:#453     // getOffset:()J\n-  #381 = Utf8               Corrupted struct sparse detected\n-  #382 = Utf8               org/apache/commons/compress/utils/BoundedInputStream\n-  #383 = NameAndType        #180:#488     // \"<init>\":(Ljava/io/InputStream;J)V\n-  #384 = NameAndType        #489:#453     // getNumbytes:()J\n-  #385 = Utf8               Unreadable TAR archive, sparse block offset or length too big\n-  #386 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-  #387 = NameAndType        #180:#490     // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-  #388 = NameAndType        #491:#471     // getName:()Ljava/lang/String;\n-  #389 = NameAndType        #492:#493     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #390 = NameAndType        #494:#495     // updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n-  #391 = NameAndType        #496:#497     // setSparseHeaders:(Ljava/util/List;)V\n-  #392 = NameAndType        #282:#283     // getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n-  #393 = Class              #498          // org/apache/commons/compress/archivers/tar/TarUtils\n-  #394 = NameAndType        #499:#500     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #395 = NameAndType        #286:#221     // close:()V\n-  #396 = Utf8               java/lang/Throwable\n-  #397 = NameAndType        #501:#502     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #398 = Utf8               GNU.sparse.map\n-  #399 = NameAndType        #503:#451     // containsKey:(Ljava/lang/Object;)Z\n-  #400 = NameAndType        #504:#505     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #401 = Utf8               java/lang/String\n-  #402 = NameAndType        #506:#507     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #403 = NameAndType        #180:#508     // \"<init>\":(Ljava/util/Collection;)V\n-  #404 = Utf8               premature end of tar archive. Didn\\'t find any entry after PAX header.\n-  #405 = NameAndType        #509:#277     // isPaxGNU1XSparse:()Z\n-  #406 = NameAndType        #510:#511     // parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n-  #407 = Utf8               java/io/ByteArrayOutputStream\n-  #408 = NameAndType        #512:#513     // read:([B)I\n-  #409 = NameAndType        #514:#515     // write:([BII)V\n-  #410 = NameAndType        #516:#248     // toByteArray:()[B\n-  #411 = Class              #517          // java/lang/System\n-  #412 = NameAndType        #518:#519     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #413 = NameAndType        #261:#258     // repositionForwardBy:(J)V\n-  #414 = Utf8               trying to move backwards inside of the archive\n-  #415 = NameAndType        #209:#520     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #416 = NameAndType        #521:#453     // size:()J\n-  #417 = Utf8               Truncated TAR archive\n-  #418 = NameAndType        #269:#264     // readRecord:()Ljava/nio/ByteBuffer;\n-  #419 = NameAndType        #274:#275     // isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n-  #420 = NameAndType        #278:#279     // setAtEOF:(Z)V\n-  #421 = NameAndType        #265:#221     // tryToConsumeSecondEOFRecord:()V\n-  #422 = NameAndType        #267:#221     // consumeRemainderOfLastBlock:()V\n-  #423 = NameAndType        #522:#523     // rewind:()Ljava/nio/Buffer;\n-  #424 = NameAndType        #512:#524     // read:(Ljava/nio/ByteBuffer;)I\n-  #425 = Class              #525          // org/apache/commons/compress/utils/ArchiveUtils\n-  #426 = NameAndType        #526:#527     // isArrayZero:([BI)Z\n-  #427 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-  #428 = NameAndType        #180:#528     // \"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n-  #429 = Utf8               java/lang/RuntimeException\n-  #430 = Utf8               Corrupted TAR archive. Can\\'t read entry\n-  #431 = Utf8               java/lang/Object\n-  #432 = Utf8               java/io/Closeable\n-  #433 = Utf8               java/nio/channels/SeekableByteChannel\n-  #434 = Utf8               java/nio/ByteBuffer\n-  #435 = Utf8               java/util/List\n-  #436 = Utf8               java/io/InputStream\n-  #437 = Utf8               java/util/Iterator\n-  #438 = Utf8               java/util/Map\n-  #439 = Utf8               java/io/File\n-  #440 = Utf8               toPath\n-  #441 = Utf8               ()Ljava/nio/file/Path;\n-  #442 = Utf8               java/nio/file/Files\n-  #443 = Utf8               newByteChannel\n-  #444 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #445 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #446 = Utf8               getZipEncoding\n-  #447 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #448 = Utf8               allocate\n-  #449 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #450 = Utf8               add\n-  #451 = Utf8               (Ljava/lang/Object;)Z\n-  #452 = Utf8               getDataOffset\n-  #453 = Utf8               ()J\n-  #454 = Utf8               getSize\n-  #455 = Utf8               array\n-  #456 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-  #457 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #458 = Utf8               isGNULongLinkEntry\n-  #459 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #460 = Utf8               decode\n-  #461 = Utf8               ([B)Ljava/lang/String;\n-  #462 = Utf8               setLinkName\n-  #463 = Utf8               (Ljava/lang/String;)V\n-  #464 = Utf8               isGNULongNameEntry\n-  #465 = Utf8               setName\n-  #466 = Utf8               endsWith\n-  #467 = Utf8               (Ljava/lang/String;)Z\n-  #468 = Utf8               append\n-  #469 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #470 = Utf8               toString\n-  #471 = Utf8               ()Ljava/lang/String;\n-  #472 = Utf8               isGlobalPaxHeader\n-  #473 = Utf8               isPaxHeader\n-  #474 = Utf8               isEmpty\n-  #475 = Utf8               isOldGNUSparse\n-  #476 = Utf8               isExtended\n-  #477 = Utf8               getSparseHeaders\n-  #478 = Utf8               addAll\n-  #479 = Utf8               (Ljava/util/Collection;)Z\n-  #480 = Utf8               setDataOffset\n-  #481 = Utf8               getOrderedSparseHeaders\n-  #482 = Utf8               iterator\n-  #483 = Utf8               ()Ljava/util/Iterator;\n-  #484 = Utf8               hasNext\n-  #485 = Utf8               next\n-  #486 = Utf8               ()Ljava/lang/Object;\n-  #487 = Utf8               getOffset\n-  #488 = Utf8               (Ljava/io/InputStream;J)V\n-  #489 = Utf8               getNumbytes\n-  #490 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n-  #491 = Utf8               getName\n-  #492 = Utf8               put\n-  #493 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #494 = Utf8               updateEntryFromPaxHeaders\n-  #495 = Utf8               (Ljava/util/Map;)V\n-  #496 = Utf8               setSparseHeaders\n-  #497 = Utf8               (Ljava/util/List;)V\n-  #498 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #499 = Utf8               parsePaxHeaders\n-  #500 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #501 = Utf8               addSuppressed\n-  #502 = Utf8               (Ljava/lang/Throwable;)V\n-  #503 = Utf8               containsKey\n-  #504 = Utf8               get\n-  #505 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #506 = Utf8               parseFromPAX01SparseHeaders\n-  #507 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n-  #508 = Utf8               (Ljava/util/Collection;)V\n-  #509 = Utf8               isPaxGNU1XSparse\n-  #510 = Utf8               parsePAX1XSparseHeaders\n-  #511 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n-  #512 = Utf8               read\n-  #513 = Utf8               ([B)I\n-  #514 = Utf8               write\n-  #515 = Utf8               ([BII)V\n-  #516 = Utf8               toByteArray\n-  #517 = Utf8               java/lang/System\n-  #518 = Utf8               arraycopy\n-  #519 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #520 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #521 = Utf8               size\n-  #522 = Utf8               rewind\n-  #523 = Utf8               ()Ljava/nio/Buffer;\n-  #524 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #525 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #526 = Utf8               isArrayZero\n-  #527 = Utf8               ([BI)Z\n-  #528 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+    #1 = Fieldref           #2.#3         // org/apache/commons/compress/archivers/tar/TarFile.sparseInputStreams:Ljava/util/Map;\n+    #2 = Class              #4            // org/apache/commons/compress/archivers/tar/TarFile\n+    #3 = NameAndType        #5:#6         // sparseInputStreams:Ljava/util/Map;\n+    #4 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n+    #5 = Utf8               sparseInputStreams\n+    #6 = Utf8               Ljava/util/Map;\n+    #7 = Class              #8            // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+    #8 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+    #9 = Methodref          #7.#10        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+   #10 = NameAndType        #11:#12       // \"<init>\":([B)V\n+   #11 = Utf8               <init>\n+   #12 = Utf8               ([B)V\n+   #13 = Methodref          #2.#14        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n+   #14 = NameAndType        #11:#15       // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n+   #15 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+   #16 = Class              #17           // org/apache/commons/compress/archivers/tar/TarConstants\n+   #17 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+   #18 = Methodref          #2.#19        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+   #19 = NameAndType        #11:#20       // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+   #20 = Utf8               (Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+   #21 = Methodref          #22.#23       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #22 = Class              #24           // java/io/File\n+   #23 = NameAndType        #25:#26       // toPath:()Ljava/nio/file/Path;\n+   #24 = Utf8               java/io/File\n+   #25 = Utf8               toPath\n+   #26 = Utf8               ()Ljava/nio/file/Path;\n+   #27 = Methodref          #2.#28        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;)V\n+   #28 = NameAndType        #11:#29       // \"<init>\":(Ljava/nio/file/Path;)V\n+   #29 = Utf8               (Ljava/nio/file/Path;)V\n+   #30 = Methodref          #2.#31        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #31 = NameAndType        #11:#32       // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #32 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #33 = Methodref          #2.#34        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;Z)V\n+   #34 = NameAndType        #11:#35       // \"<init>\":(Ljava/nio/file/Path;Z)V\n+   #35 = Utf8               (Ljava/nio/file/Path;Z)V\n+   #36 = Class              #37           // java/nio/file/OpenOption\n+   #37 = Utf8               java/nio/file/OpenOption\n+   #38 = Methodref          #39.#40       // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #39 = Class              #41           // java/nio/file/Files\n+   #40 = NameAndType        #42:#43       // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #41 = Utf8               java/nio/file/Files\n+   #42 = Utf8               newByteChannel\n+   #43 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #44 = Methodref          #45.#46       // java/lang/Object.\"<init>\":()V\n+   #45 = Class              #47           // java/lang/Object\n+   #46 = NameAndType        #11:#48       // \"<init>\":()V\n+   #47 = Utf8               java/lang/Object\n+   #48 = Utf8               ()V\n+   #49 = Fieldref           #2.#50        // org/apache/commons/compress/archivers/tar/TarFile.smallBuf:[B\n+   #50 = NameAndType        #51:#52       // smallBuf:[B\n+   #51 = Utf8               smallBuf\n+   #52 = Utf8               [B\n+   #53 = Class              #54           // java/util/LinkedList\n+   #54 = Utf8               java/util/LinkedList\n+   #55 = Methodref          #53.#46       // java/util/LinkedList.\"<init>\":()V\n+   #56 = Fieldref           #2.#57        // org/apache/commons/compress/archivers/tar/TarFile.entries:Ljava/util/LinkedList;\n+   #57 = NameAndType        #58:#59       // entries:Ljava/util/LinkedList;\n+   #58 = Utf8               entries\n+   #59 = Utf8               Ljava/util/LinkedList;\n+   #60 = Class              #61           // java/util/ArrayList\n+   #61 = Utf8               java/util/ArrayList\n+   #62 = Methodref          #60.#46       // java/util/ArrayList.\"<init>\":()V\n+   #63 = Fieldref           #2.#64        // org/apache/commons/compress/archivers/tar/TarFile.globalSparseHeaders:Ljava/util/List;\n+   #64 = NameAndType        #65:#66       // globalSparseHeaders:Ljava/util/List;\n+   #65 = Utf8               globalSparseHeaders\n+   #66 = Utf8               Ljava/util/List;\n+   #67 = Class              #68           // java/util/HashMap\n+   #68 = Utf8               java/util/HashMap\n+   #69 = Methodref          #67.#46       // java/util/HashMap.\"<init>\":()V\n+   #70 = Fieldref           #2.#71        // org/apache/commons/compress/archivers/tar/TarFile.globalPaxHeaders:Ljava/util/Map;\n+   #71 = NameAndType        #72:#6        // globalPaxHeaders:Ljava/util/Map;\n+   #72 = Utf8               globalPaxHeaders\n+   #73 = Fieldref           #2.#74        // org/apache/commons/compress/archivers/tar/TarFile.archive:Ljava/nio/channels/SeekableByteChannel;\n+   #74 = NameAndType        #75:#76       // archive:Ljava/nio/channels/SeekableByteChannel;\n+   #75 = Utf8               archive\n+   #76 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+   #77 = Fieldref           #2.#78        // org/apache/commons/compress/archivers/tar/TarFile.hasHitEOF:Z\n+   #78 = NameAndType        #79:#80       // hasHitEOF:Z\n+   #79 = Utf8               hasHitEOF\n+   #80 = Utf8               Z\n+   #81 = Methodref          #82.#83       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #82 = Class              #84           // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #83 = NameAndType        #85:#86       // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #84 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #85 = Utf8               getZipEncoding\n+   #86 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #87 = Fieldref           #2.#88        // org/apache/commons/compress/archivers/tar/TarFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #88 = NameAndType        #89:#90       // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #89 = Utf8               zipEncoding\n+   #90 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #91 = Fieldref           #2.#92        // org/apache/commons/compress/archivers/tar/TarFile.recordSize:I\n+   #92 = NameAndType        #93:#94       // recordSize:I\n+   #93 = Utf8               recordSize\n+   #94 = Utf8               I\n+   #95 = Methodref          #96.#97       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #96 = Class              #98           // java/nio/ByteBuffer\n+   #97 = NameAndType        #99:#100      // allocate:(I)Ljava/nio/ByteBuffer;\n+   #98 = Utf8               java/nio/ByteBuffer\n+   #99 = Utf8               allocate\n+  #100 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #101 = Fieldref           #2.#102       // org/apache/commons/compress/archivers/tar/TarFile.recordBuffer:Ljava/nio/ByteBuffer;\n+  #102 = NameAndType        #103:#104     // recordBuffer:Ljava/nio/ByteBuffer;\n+  #103 = Utf8               recordBuffer\n+  #104 = Utf8               Ljava/nio/ByteBuffer;\n+  #105 = Fieldref           #2.#106       // org/apache/commons/compress/archivers/tar/TarFile.blockSize:I\n+  #106 = NameAndType        #107:#94      // blockSize:I\n+  #107 = Utf8               blockSize\n+  #108 = Fieldref           #2.#109       // org/apache/commons/compress/archivers/tar/TarFile.lenient:Z\n+  #109 = NameAndType        #110:#80      // lenient:Z\n+  #110 = Utf8               lenient\n+  #111 = Methodref          #2.#112       // org/apache/commons/compress/archivers/tar/TarFile.getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #112 = NameAndType        #113:#114     // getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #113 = Utf8               getNextTarEntry\n+  #114 = Utf8               ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #115 = Methodref          #53.#116      // java/util/LinkedList.add:(Ljava/lang/Object;)Z\n+  #116 = NameAndType        #117:#118     // add:(Ljava/lang/Object;)Z\n+  #117 = Utf8               add\n+  #118 = Utf8               (Ljava/lang/Object;)Z\n+  #119 = Methodref          #2.#120       // org/apache/commons/compress/archivers/tar/TarFile.isAtEOF:()Z\n+  #120 = NameAndType        #121:#122     // isAtEOF:()Z\n+  #121 = Utf8               isAtEOF\n+  #122 = Utf8               ()Z\n+  #123 = Fieldref           #2.#124       // org/apache/commons/compress/archivers/tar/TarFile.currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #124 = NameAndType        #125:#126     // currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #125 = Utf8               currEntry\n+  #126 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #127 = Methodref          #128.#129     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+  #128 = Class              #130          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #129 = NameAndType        #131:#132     // getDataOffset:()J\n+  #130 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #131 = Utf8               getDataOffset\n+  #132 = Utf8               ()J\n+  #133 = Methodref          #128.#134     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+  #134 = NameAndType        #135:#132     // getSize:()J\n+  #135 = Utf8               getSize\n+  #136 = Methodref          #2.#137       // org/apache/commons/compress/archivers/tar/TarFile.repositionForwardTo:(J)V\n+  #137 = NameAndType        #138:#139     // repositionForwardTo:(J)V\n+  #138 = Utf8               repositionForwardTo\n+  #139 = Utf8               (J)V\n+  #140 = Methodref          #2.#141       // org/apache/commons/compress/archivers/tar/TarFile.throwExceptionIfPositionIsNotInArchive:()V\n+  #141 = NameAndType        #142:#48      // throwExceptionIfPositionIsNotInArchive:()V\n+  #142 = Utf8               throwExceptionIfPositionIsNotInArchive\n+  #143 = Methodref          #2.#144       // org/apache/commons/compress/archivers/tar/TarFile.skipRecordPadding:()V\n+  #144 = NameAndType        #145:#48      // skipRecordPadding:()V\n+  #145 = Utf8               skipRecordPadding\n+  #146 = Methodref          #2.#147       // org/apache/commons/compress/archivers/tar/TarFile.getRecord:()Ljava/nio/ByteBuffer;\n+  #147 = NameAndType        #148:#149     // getRecord:()Ljava/nio/ByteBuffer;\n+  #148 = Utf8               getRecord\n+  #149 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #150 = InterfaceMethodref #151.#152     // java/nio/channels/SeekableByteChannel.position:()J\n+  #151 = Class              #153          // java/nio/channels/SeekableByteChannel\n+  #152 = NameAndType        #154:#132     // position:()J\n+  #153 = Utf8               java/nio/channels/SeekableByteChannel\n+  #154 = Utf8               position\n+  #155 = Methodref          #96.#156      // java/nio/ByteBuffer.array:()[B\n+  #156 = NameAndType        #157:#158     // array:()[B\n+  #157 = Utf8               array\n+  #158 = Utf8               ()[B\n+  #159 = Methodref          #128.#160     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+  #160 = NameAndType        #11:#161      // \"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+  #161 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+  #162 = Class              #163          // java/lang/IllegalArgumentException\n+  #163 = Utf8               java/lang/IllegalArgumentException\n+  #164 = Class              #165          // java/io/IOException\n+  #165 = Utf8               java/io/IOException\n+  #166 = String             #167          // Error detected parsing the header\n+  #167 = Utf8               Error detected parsing the header\n+  #168 = Methodref          #164.#169     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #169 = NameAndType        #11:#170      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #170 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #171 = Methodref          #128.#172     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n+  #172 = NameAndType        #173:#122     // isGNULongLinkEntry:()Z\n+  #173 = Utf8               isGNULongLinkEntry\n+  #174 = Methodref          #2.#175       // org/apache/commons/compress/archivers/tar/TarFile.getLongNameData:()[B\n+  #175 = NameAndType        #176:#158     // getLongNameData:()[B\n+  #176 = Utf8               getLongNameData\n+  #177 = InterfaceMethodref #178.#179     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #178 = Class              #180          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #179 = NameAndType        #181:#182     // decode:([B)Ljava/lang/String;\n+  #180 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #181 = Utf8               decode\n+  #182 = Utf8               ([B)Ljava/lang/String;\n+  #183 = Methodref          #128.#184     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n+  #184 = NameAndType        #185:#186     // setLinkName:(Ljava/lang/String;)V\n+  #185 = Utf8               setLinkName\n+  #186 = Utf8               (Ljava/lang/String;)V\n+  #187 = Methodref          #128.#188     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n+  #188 = NameAndType        #189:#122     // isGNULongNameEntry:()Z\n+  #189 = Utf8               isGNULongNameEntry\n+  #190 = Methodref          #128.#191     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+  #191 = NameAndType        #192:#186     // setName:(Ljava/lang/String;)V\n+  #192 = Utf8               setName\n+  #193 = Methodref          #128.#194     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+  #194 = NameAndType        #195:#122     // isDirectory:()Z\n+  #195 = Utf8               isDirectory\n+  #196 = String             #197          // /\n+  #197 = Utf8               /\n+  #198 = Methodref          #199.#200     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+  #199 = Class              #201          // java/lang/String\n+  #200 = NameAndType        #202:#203     // endsWith:(Ljava/lang/String;)Z\n+  #201 = Utf8               java/lang/String\n+  #202 = Utf8               endsWith\n+  #203 = Utf8               (Ljava/lang/String;)Z\n+  #204 = Class              #205          // java/lang/StringBuilder\n+  #205 = Utf8               java/lang/StringBuilder\n+  #206 = Methodref          #204.#46      // java/lang/StringBuilder.\"<init>\":()V\n+  #207 = Methodref          #204.#208     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #208 = NameAndType        #209:#210     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #209 = Utf8               append\n+  #210 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #211 = Methodref          #204.#212     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #212 = NameAndType        #213:#214     // toString:()Ljava/lang/String;\n+  #213 = Utf8               toString\n+  #214 = Utf8               ()Ljava/lang/String;\n+  #215 = Methodref          #128.#216     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+  #216 = NameAndType        #217:#122     // isGlobalPaxHeader:()Z\n+  #217 = Utf8               isGlobalPaxHeader\n+  #218 = Methodref          #2.#219       // org/apache/commons/compress/archivers/tar/TarFile.readGlobalPaxHeaders:()V\n+  #219 = NameAndType        #220:#48      // readGlobalPaxHeaders:()V\n+  #220 = Utf8               readGlobalPaxHeaders\n+  #221 = Methodref          #128.#222     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n+  #222 = NameAndType        #223:#122     // isPaxHeader:()Z\n+  #223 = Utf8               isPaxHeader\n+  #224 = Methodref          #2.#225       // org/apache/commons/compress/archivers/tar/TarFile.paxHeaders:()V\n+  #225 = NameAndType        #226:#48      // paxHeaders:()V\n+  #226 = Utf8               paxHeaders\n+  #227 = InterfaceMethodref #228.#229     // java/util/Map.isEmpty:()Z\n+  #228 = Class              #230          // java/util/Map\n+  #229 = NameAndType        #231:#122     // isEmpty:()Z\n+  #230 = Utf8               java/util/Map\n+  #231 = Utf8               isEmpty\n+  #232 = Methodref          #2.#233       // org/apache/commons/compress/archivers/tar/TarFile.applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+  #233 = NameAndType        #234:#235     // applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+  #234 = Utf8               applyPaxHeadersToCurrentEntry\n+  #235 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n+  #236 = Class              #237          // java/lang/NumberFormatException\n+  #237 = Utf8               java/lang/NumberFormatException\n+  #238 = String             #239          // Error detected parsing the pax header\n+  #239 = Utf8               Error detected parsing the pax header\n+  #240 = Methodref          #128.#241     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n+  #241 = NameAndType        #242:#122     // isOldGNUSparse:()Z\n+  #242 = Utf8               isOldGNUSparse\n+  #243 = Methodref          #2.#244       // org/apache/commons/compress/archivers/tar/TarFile.readOldGNUSparse:()V\n+  #244 = NameAndType        #245:#48      // readOldGNUSparse:()V\n+  #245 = Utf8               readOldGNUSparse\n+  #246 = Methodref          #128.#247     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n+  #247 = NameAndType        #248:#122     // isExtended:()Z\n+  #248 = Utf8               isExtended\n+  #249 = String             #250          // premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n+  #250 = Utf8               premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n+  #251 = Methodref          #164.#252     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #252 = NameAndType        #11:#186      // \"<init>\":(Ljava/lang/String;)V\n+  #253 = Class              #254          // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+  #254 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+  #255 = Methodref          #253.#10      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n+  #256 = Methodref          #128.#257     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n+  #257 = NameAndType        #258:#259     // getSparseHeaders:()Ljava/util/List;\n+  #258 = Utf8               getSparseHeaders\n+  #259 = Utf8               ()Ljava/util/List;\n+  #260 = Methodref          #253.#257     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n+  #261 = InterfaceMethodref #262.#263     // java/util/List.addAll:(Ljava/util/Collection;)Z\n+  #262 = Class              #264          // java/util/List\n+  #263 = NameAndType        #265:#266     // addAll:(Ljava/util/Collection;)Z\n+  #264 = Utf8               java/util/List\n+  #265 = Utf8               addAll\n+  #266 = Utf8               (Ljava/util/Collection;)Z\n+  #267 = Methodref          #128.#268     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n+  #268 = NameAndType        #269:#139     // setDataOffset:(J)V\n+  #269 = Utf8               setDataOffset\n+  #270 = Methodref          #253.#247     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n+  #271 = Methodref          #2.#272       // org/apache/commons/compress/archivers/tar/TarFile.buildSparseInputStreams:()V\n+  #272 = NameAndType        #273:#48      // buildSparseInputStreams:()V\n+  #273 = Utf8               buildSparseInputStreams\n+  #274 = Methodref          #128.#275     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getOrderedSparseHeaders:()Ljava/util/List;\n+  #275 = NameAndType        #276:#259     // getOrderedSparseHeaders:()Ljava/util/List;\n+  #276 = Utf8               getOrderedSparseHeaders\n+  #277 = Class              #278          // org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n+  #278 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n+  #279 = Methodref          #277.#46      // org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream.\"<init>\":()V\n+  #280 = InterfaceMethodref #262.#281     // java/util/List.iterator:()Ljava/util/Iterator;\n+  #281 = NameAndType        #282:#283     // iterator:()Ljava/util/Iterator;\n+  #282 = Utf8               iterator\n+  #283 = Utf8               ()Ljava/util/Iterator;\n+  #284 = InterfaceMethodref #285.#286     // java/util/Iterator.hasNext:()Z\n+  #285 = Class              #287          // java/util/Iterator\n+  #286 = NameAndType        #288:#122     // hasNext:()Z\n+  #287 = Utf8               java/util/Iterator\n+  #288 = Utf8               hasNext\n+  #289 = InterfaceMethodref #285.#290     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #290 = NameAndType        #291:#292     // next:()Ljava/lang/Object;\n+  #291 = Utf8               next\n+  #292 = Utf8               ()Ljava/lang/Object;\n+  #293 = Class              #294          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #294 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #295 = Methodref          #293.#296     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+  #296 = NameAndType        #297:#132     // getOffset:()J\n+  #297 = Utf8               getOffset\n+  #298 = String             #299          // Corrupted struct sparse detected\n+  #299 = Utf8               Corrupted struct sparse detected\n+  #300 = Class              #301          // org/apache/commons/compress/utils/BoundedInputStream\n+  #301 = Utf8               org/apache/commons/compress/utils/BoundedInputStream\n+  #302 = Methodref          #300.#303     // org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+  #303 = NameAndType        #11:#304      // \"<init>\":(Ljava/io/InputStream;J)V\n+  #304 = Utf8               (Ljava/io/InputStream;J)V\n+  #305 = InterfaceMethodref #262.#116     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #306 = Methodref          #293.#307     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+  #307 = NameAndType        #308:#132     // getNumbytes:()J\n+  #308 = Utf8               getNumbytes\n+  #309 = String             #310          // Unreadable TAR archive, sparse block offset or length too big\n+  #310 = Utf8               Unreadable TAR archive, sparse block offset or length too big\n+  #311 = Class              #312          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+  #312 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+  #313 = Methodref          #311.#314     // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+  #314 = NameAndType        #11:#315      // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+  #315 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n+  #316 = Methodref          #128.#317     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+  #317 = NameAndType        #318:#214     // getName:()Ljava/lang/String;\n+  #318 = Utf8               getName\n+  #319 = InterfaceMethodref #228.#320     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #320 = NameAndType        #321:#322     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #321 = Utf8               put\n+  #322 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #323 = Methodref          #128.#324     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+  #324 = NameAndType        #325:#326     // updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+  #325 = Utf8               updateEntryFromPaxHeaders\n+  #326 = Utf8               (Ljava/util/Map;)V\n+  #327 = Methodref          #128.#328     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+  #328 = NameAndType        #329:#330     // setSparseHeaders:(Ljava/util/List;)V\n+  #329 = Utf8               setSparseHeaders\n+  #330 = Utf8               (Ljava/util/List;)V\n+  #331 = Methodref          #2.#332       // org/apache/commons/compress/archivers/tar/TarFile.getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+  #332 = NameAndType        #333:#334     // getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+  #333 = Utf8               getInputStream\n+  #334 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+  #335 = Methodref          #336.#337     // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #336 = Class              #338          // org/apache/commons/compress/archivers/tar/TarUtils\n+  #337 = NameAndType        #339:#340     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #338 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+  #339 = Utf8               parsePaxHeaders\n+  #340 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #341 = Methodref          #342.#343     // java/io/InputStream.close:()V\n+  #342 = Class              #344          // java/io/InputStream\n+  #343 = NameAndType        #345:#48      // close:()V\n+  #344 = Utf8               java/io/InputStream\n+  #345 = Utf8               close\n+  #346 = Class              #347          // java/lang/Throwable\n+  #347 = Utf8               java/lang/Throwable\n+  #348 = Methodref          #346.#349     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #349 = NameAndType        #350:#351     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #350 = Utf8               addSuppressed\n+  #351 = Utf8               (Ljava/lang/Throwable;)V\n+  #352 = String             #353          // GNU.sparse.map\n+  #353 = Utf8               GNU.sparse.map\n+  #354 = InterfaceMethodref #228.#355     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+  #355 = NameAndType        #356:#118     // containsKey:(Ljava/lang/Object;)Z\n+  #356 = Utf8               containsKey\n+  #357 = InterfaceMethodref #228.#358     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #358 = NameAndType        #359:#360     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #359 = Utf8               get\n+  #360 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #361 = Methodref          #336.#362     // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #362 = NameAndType        #363:#364     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #363 = Utf8               parseFromPAX01SparseHeaders\n+  #364 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n+  #365 = Methodref          #60.#366      // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+  #366 = NameAndType        #11:#367      // \"<init>\":(Ljava/util/Collection;)V\n+  #367 = Utf8               (Ljava/util/Collection;)V\n+  #368 = String             #369          // premature end of tar archive. Didn\\'t find any entry after PAX header.\n+  #369 = Utf8               premature end of tar archive. Didn\\'t find any entry after PAX header.\n+  #370 = Methodref          #128.#371     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n+  #371 = NameAndType        #372:#122     // isPaxGNU1XSparse:()Z\n+  #372 = Utf8               isPaxGNU1XSparse\n+  #373 = Methodref          #336.#374     // org/apache/commons/compress/archivers/tar/TarUtils.parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n+  #374 = NameAndType        #375:#376     // parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n+  #375 = Utf8               parsePAX1XSparseHeaders\n+  #376 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n+  #377 = Class              #378          // java/io/ByteArrayOutputStream\n+  #378 = Utf8               java/io/ByteArrayOutputStream\n+  #379 = Methodref          #377.#46      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #380 = Methodref          #342.#381     // java/io/InputStream.read:([B)I\n+  #381 = NameAndType        #382:#383     // read:([B)I\n+  #382 = Utf8               read\n+  #383 = Utf8               ([B)I\n+  #384 = Methodref          #377.#385     // java/io/ByteArrayOutputStream.write:([BII)V\n+  #385 = NameAndType        #386:#387     // write:([BII)V\n+  #386 = Utf8               write\n+  #387 = Utf8               ([BII)V\n+  #388 = Methodref          #377.#389     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+  #389 = NameAndType        #390:#158     // toByteArray:()[B\n+  #390 = Utf8               toByteArray\n+  #391 = Methodref          #392.#393     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #392 = Class              #394          // java/lang/System\n+  #393 = NameAndType        #395:#396     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #394 = Utf8               java/lang/System\n+  #395 = Utf8               arraycopy\n+  #396 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #397 = Methodref          #2.#194       // org/apache/commons/compress/archivers/tar/TarFile.isDirectory:()Z\n+  #398 = Methodref          #2.#399       // org/apache/commons/compress/archivers/tar/TarFile.repositionForwardBy:(J)V\n+  #399 = NameAndType        #400:#139     // repositionForwardBy:(J)V\n+  #400 = Utf8               repositionForwardBy\n+  #401 = String             #402          // trying to move backwards inside of the archive\n+  #402 = Utf8               trying to move backwards inside of the archive\n+  #403 = InterfaceMethodref #151.#404     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #404 = NameAndType        #154:#405     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #405 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #406 = InterfaceMethodref #151.#407     // java/nio/channels/SeekableByteChannel.size:()J\n+  #407 = NameAndType        #408:#132     // size:()J\n+  #408 = Utf8               size\n+  #409 = String             #410          // Truncated TAR archive\n+  #410 = Utf8               Truncated TAR archive\n+  #411 = Methodref          #2.#412       // org/apache/commons/compress/archivers/tar/TarFile.readRecord:()Ljava/nio/ByteBuffer;\n+  #412 = NameAndType        #413:#149     // readRecord:()Ljava/nio/ByteBuffer;\n+  #413 = Utf8               readRecord\n+  #414 = Methodref          #2.#415       // org/apache/commons/compress/archivers/tar/TarFile.isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n+  #415 = NameAndType        #416:#417     // isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n+  #416 = Utf8               isEOFRecord\n+  #417 = Utf8               (Ljava/nio/ByteBuffer;)Z\n+  #418 = Methodref          #2.#419       // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n+  #419 = NameAndType        #420:#421     // setAtEOF:(Z)V\n+  #420 = Utf8               setAtEOF\n+  #421 = Utf8               (Z)V\n+  #422 = Methodref          #2.#423       // org/apache/commons/compress/archivers/tar/TarFile.tryToConsumeSecondEOFRecord:()V\n+  #423 = NameAndType        #424:#48      // tryToConsumeSecondEOFRecord:()V\n+  #424 = Utf8               tryToConsumeSecondEOFRecord\n+  #425 = Methodref          #2.#426       // org/apache/commons/compress/archivers/tar/TarFile.consumeRemainderOfLastBlock:()V\n+  #426 = NameAndType        #427:#48      // consumeRemainderOfLastBlock:()V\n+  #427 = Utf8               consumeRemainderOfLastBlock\n+  #428 = Methodref          #96.#429      // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+  #429 = NameAndType        #430:#431     // rewind:()Ljava/nio/Buffer;\n+  #430 = Utf8               rewind\n+  #431 = Utf8               ()Ljava/nio/Buffer;\n+  #432 = InterfaceMethodref #151.#433     // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #433 = NameAndType        #382:#434     // read:(Ljava/nio/ByteBuffer;)I\n+  #434 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #435 = Methodref          #436.#437     // org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n+  #436 = Class              #438          // org/apache/commons/compress/utils/ArchiveUtils\n+  #437 = NameAndType        #439:#440     // isArrayZero:([BI)Z\n+  #438 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+  #439 = Utf8               isArrayZero\n+  #440 = Utf8               ([BI)Z\n+  #441 = Class              #442          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+  #442 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+  #443 = Methodref          #441.#444     // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+  #444 = NameAndType        #11:#445      // \"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+  #445 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+  #446 = Class              #447          // java/lang/RuntimeException\n+  #447 = Utf8               java/lang/RuntimeException\n+  #448 = String             #449          // Corrupted TAR archive. Can\\'t read entry\n+  #449 = Utf8               Corrupted TAR archive. Can\\'t read entry\n+  #450 = InterfaceMethodref #151.#343     // java/nio/channels/SeekableByteChannel.close:()V\n+  #451 = Class              #452          // java/io/Closeable\n+  #452 = Utf8               java/io/Closeable\n+  #453 = Utf8               SMALL_BUFFER_SIZE\n+  #454 = Utf8               ConstantValue\n+  #455 = Integer            256\n+  #456 = Utf8               Signature\n+  #457 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+  #458 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #459 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #460 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/io/InputStream;>;>;\n+  #461 = Utf8               Code\n+  #462 = Utf8               LineNumberTable\n+  #463 = Utf8               LocalVariableTable\n+  #464 = Utf8               this\n+  #465 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile;\n+  #466 = Utf8               content\n+  #467 = Utf8               Exceptions\n+  #468 = Utf8               ([BLjava/lang/String;)V\n+  #469 = Utf8               encoding\n+  #470 = Utf8               Ljava/lang/String;\n+  #471 = Utf8               ([BZ)V\n+  #472 = Utf8               (Ljava/io/File;)V\n+  #473 = Utf8               Ljava/io/File;\n+  #474 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #475 = Utf8               (Ljava/io/File;Z)V\n+  #476 = Utf8               archivePath\n+  #477 = Utf8               Ljava/nio/file/Path;\n+  #478 = Utf8               entry\n+  #479 = Utf8               StackMapTable\n+  #480 = Utf8               J\n+  #481 = Utf8               e\n+  #482 = Utf8               Ljava/lang/IllegalArgumentException;\n+  #483 = Utf8               longLinkData\n+  #484 = Utf8               longNameData\n+  #485 = Utf8               name\n+  #486 = Utf8               Ljava/lang/NumberFormatException;\n+  #487 = Utf8               headerBuf\n+  #488 = Class              #52           // \"[B\"\n+  #489 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveSparseEntry;\n+  #490 = Utf8               start\n+  #491 = Utf8               zeroBlockSize\n+  #492 = Utf8               sparseHeader\n+  #493 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #494 = Utf8               streams\n+  #495 = Utf8               sparseHeaders\n+  #496 = Utf8               zeroInputStream\n+  #497 = Utf8               Ljava/io/InputStream;\n+  #498 = Utf8               offset\n+  #499 = Utf8               numberOfZeroBytesInSparseEntry\n+  #500 = Utf8               LocalVariableTypeTable\n+  #501 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n+  #502 = Utf8               headers\n+  #503 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n+  #504 = Utf8               input\n+  #505 = Utf8               length\n+  #506 = Utf8               in\n+  #507 = Utf8               l\n+  #508 = Utf8               longName\n+  #509 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #510 = Utf8               numRecords\n+  #511 = Utf8               padding\n+  #512 = Utf8               newPosition\n+  #513 = Utf8               currPosition\n+  #514 = Utf8               shouldReset\n+  #515 = Utf8               bytesReadOfLastBlock\n+  #516 = Utf8               readNow\n+  #517 = Utf8               getEntries\n+  #518 = Utf8               ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+  #519 = Utf8               b\n+  #520 = Utf8               ex\n+  #521 = Utf8               Ljava/lang/RuntimeException;\n+  #522 = Utf8               access$000\n+  #523 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+  #524 = Utf8               x0\n+  #525 = Utf8               SourceFile\n+  #526 = Utf8               TarFile.java\n+  #527 = Utf8               InnerClasses\n+  #528 = Utf8               BoundedTarEntryInputStream\n {\n   private static final int SMALL_BUFFER_SIZE = 256;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 256\n \n   private final byte[] smallBuf;\n@@ -553,15 +553,15 @@\n   private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.util.LinkedList<org.apache.commons.compress.archivers.tar.TarArchiveEntry> entries;\n     descriptor: Ljava/util/LinkedList;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #162                         // Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+    Signature: #457                         // Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n \n   private final int blockSize;\n     descriptor: I\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final boolean lenient;\n     descriptor: Z\n@@ -574,45 +574,45 @@\n   private final java.nio.ByteBuffer recordBuffer;\n     descriptor: Ljava/nio/ByteBuffer;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> globalSparseHeaders;\n     descriptor: Ljava/util/List;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #171                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #458                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private boolean hasHitEOF;\n     descriptor: Z\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry;\n     descriptor: Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     flags: (0x0002) ACC_PRIVATE\n \n   private java.util.Map<java.lang.String, java.lang.String> globalPaxHeaders;\n     descriptor: Ljava/util/Map;\n     flags: (0x0002) ACC_PRIVATE\n-    Signature: #177                         // Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #459                         // Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   private final java.util.Map<java.lang.String, java.util.List<java.io.InputStream>> sparseInputStreams;\n     descriptor: Ljava/util/Map;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #179                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/io/InputStream;>;>;\n+    Signature: #460                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/io/InputStream;>;>;\n \n   public org.apache.commons.compress.archivers.tar.TarFile(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: new           #2                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+         1: new           #7                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n          4: dup\n          5: aload_1\n-         6: invokespecial #3                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n-         9: invokespecial #4                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n+         6: invokespecial #9                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+         9: invokespecial #13                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n         12: return\n       LineNumberTable:\n         line 92: 0\n         line 93: 12\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -622,23 +622,23 @@\n \n   public org.apache.commons.compress.archivers.tar.TarFile(byte[], java.lang.String) throws java.io.IOException;\n     descriptor: ([BLjava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n-         1: new           #2                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+         1: new           #7                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n          4: dup\n          5: aload_1\n-         6: invokespecial #3                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+         6: invokespecial #9                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n          9: sipush        10240\n         12: sipush        512\n         15: aload_2\n         16: iconst_0\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 103: 0\n         line 104: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -649,23 +649,23 @@\n \n   public org.apache.commons.compress.archivers.tar.TarFile(byte[], boolean) throws java.io.IOException;\n     descriptor: ([BZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n-         1: new           #2                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+         1: new           #7                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n          4: dup\n          5: aload_1\n-         6: invokespecial #3                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+         6: invokespecial #9                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n          9: sipush        10240\n         12: sipush        512\n         15: aconst_null\n         16: iload_2\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 116: 0\n         line 117: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -677,16 +677,16 @@\n   public org.apache.commons.compress.archivers.tar.TarFile(java.io.File) throws java.io.IOException;\n     descriptor: (Ljava/io/File;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #7                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-         5: invokespecial #8                  // Method \"<init>\":(Ljava/nio/file/Path;)V\n+         2: invokevirtual #21                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         5: invokespecial #27                 // Method \"<init>\":(Ljava/nio/file/Path;)V\n          8: return\n       LineNumberTable:\n         line 126: 0\n         line 127: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -697,17 +697,17 @@\n   public org.apache.commons.compress.archivers.tar.TarFile(java.io.File, java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #7                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         2: invokevirtual #21                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          5: aload_2\n-         6: invokespecial #9                  // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+         6: invokespecial #30                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n          9: return\n       LineNumberTable:\n         line 137: 0\n         line 138: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -719,17 +719,17 @@\n   public org.apache.commons.compress.archivers.tar.TarFile(java.io.File, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #7                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         2: invokevirtual #21                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          5: iload_2\n-         6: invokespecial #10                 // Method \"<init>\":(Ljava/nio/file/Path;Z)V\n+         6: invokespecial #33                 // Method \"<init>\":(Ljava/nio/file/Path;Z)V\n          9: return\n       LineNumberTable:\n         line 150: 0\n         line 151: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -742,21 +742,21 @@\n     descriptor: (Ljava/nio/file/Path;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: anewarray     #11                 // class java/nio/file/OpenOption\n-         6: invokestatic  #12                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+         3: anewarray     #36                 // class java/nio/file/OpenOption\n+         6: invokestatic  #38                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n          9: sipush        10240\n         12: sipush        512\n         15: aconst_null\n         16: iconst_0\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 160: 0\n         line 161: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -768,21 +768,21 @@\n     descriptor: (Ljava/nio/file/Path;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: anewarray     #11                 // class java/nio/file/OpenOption\n-         6: invokestatic  #12                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+         3: anewarray     #36                 // class java/nio/file/OpenOption\n+         6: invokestatic  #38                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n          9: sipush        10240\n         12: sipush        512\n         15: aload_2\n         16: iconst_0\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 171: 0\n         line 172: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -795,21 +795,21 @@\n     descriptor: (Ljava/nio/file/Path;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: anewarray     #11                 // class java/nio/file/OpenOption\n-         6: invokestatic  #12                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+         3: anewarray     #36                 // class java/nio/file/OpenOption\n+         6: invokestatic  #38                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n          9: sipush        10240\n         12: sipush        512\n         15: aconst_null\n         16: iload_2\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 184: 0\n         line 185: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -825,15 +825,15 @@\n       stack=6, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        10240\n          5: sipush        512\n          8: aconst_null\n          9: iconst_0\n-        10: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        10: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         13: return\n       LineNumberTable:\n         line 194: 0\n         line 195: 13\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      14     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -843,72 +843,72 @@\n \n   public org.apache.commons.compress.archivers.tar.TarFile(java.nio.channels.SeekableByteChannel, int, int, java.lang.String, boolean) throws java.io.IOException;\n     descriptor: (Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=7, args_size=6\n          0: aload_0\n-         1: invokespecial #13                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #44                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: sipush        256\n          8: newarray       byte\n-        10: putfield      #15                 // Field smallBuf:[B\n+        10: putfield      #49                 // Field smallBuf:[B\n         13: aload_0\n-        14: new           #16                 // class java/util/LinkedList\n+        14: new           #53                 // class java/util/LinkedList\n         17: dup\n-        18: invokespecial #17                 // Method java/util/LinkedList.\"<init>\":()V\n-        21: putfield      #18                 // Field entries:Ljava/util/LinkedList;\n+        18: invokespecial #55                 // Method java/util/LinkedList.\"<init>\":()V\n+        21: putfield      #56                 // Field entries:Ljava/util/LinkedList;\n         24: aload_0\n-        25: new           #19                 // class java/util/ArrayList\n+        25: new           #60                 // class java/util/ArrayList\n         28: dup\n-        29: invokespecial #20                 // Method java/util/ArrayList.\"<init>\":()V\n-        32: putfield      #21                 // Field globalSparseHeaders:Ljava/util/List;\n+        29: invokespecial #62                 // Method java/util/ArrayList.\"<init>\":()V\n+        32: putfield      #63                 // Field globalSparseHeaders:Ljava/util/List;\n         35: aload_0\n-        36: new           #22                 // class java/util/HashMap\n+        36: new           #67                 // class java/util/HashMap\n         39: dup\n-        40: invokespecial #23                 // Method java/util/HashMap.\"<init>\":()V\n-        43: putfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        40: invokespecial #69                 // Method java/util/HashMap.\"<init>\":()V\n+        43: putfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         46: aload_0\n-        47: new           #22                 // class java/util/HashMap\n+        47: new           #67                 // class java/util/HashMap\n         50: dup\n-        51: invokespecial #23                 // Method java/util/HashMap.\"<init>\":()V\n+        51: invokespecial #69                 // Method java/util/HashMap.\"<init>\":()V\n         54: putfield      #1                  // Field sparseInputStreams:Ljava/util/Map;\n         57: aload_0\n         58: aload_1\n-        59: putfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        59: putfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         62: aload_0\n         63: iconst_0\n-        64: putfield      #26                 // Field hasHitEOF:Z\n+        64: putfield      #77                 // Field hasHitEOF:Z\n         67: aload_0\n         68: aload         4\n-        70: invokestatic  #27                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        73: putfield      #28                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        70: invokestatic  #81                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        73: putfield      #87                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         76: aload_0\n         77: iload_3\n-        78: putfield      #29                 // Field recordSize:I\n+        78: putfield      #91                 // Field recordSize:I\n         81: aload_0\n         82: aload_0\n-        83: getfield      #29                 // Field recordSize:I\n-        86: invokestatic  #30                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        89: putfield      #31                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n+        83: getfield      #91                 // Field recordSize:I\n+        86: invokestatic  #95                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        89: putfield      #101                // Field recordBuffer:Ljava/nio/ByteBuffer;\n         92: aload_0\n         93: iload_2\n-        94: putfield      #32                 // Field blockSize:I\n+        94: putfield      #105                // Field blockSize:I\n         97: aload_0\n         98: iload         5\n-       100: putfield      #33                 // Field lenient:Z\n+       100: putfield      #108                // Field lenient:Z\n        103: aload_0\n-       104: invokespecial #34                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       104: invokespecial #111                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n        107: dup\n        108: astore        6\n        110: ifnull        126\n        113: aload_0\n-       114: getfield      #18                 // Field entries:Ljava/util/LinkedList;\n+       114: getfield      #56                 // Field entries:Ljava/util/LinkedList;\n        117: aload         6\n-       119: invokevirtual #35                 // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z\n+       119: invokevirtual #115                // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z\n        122: pop\n        123: goto          103\n        126: return\n       LineNumberTable:\n         line 209: 0\n         line 51: 4\n         line 60: 13\n@@ -947,167 +947,167 @@\n \n   private org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=9, locals=4, args_size=1\n          0: aload_0\n-         1: invokevirtual #36                 // Method isAtEOF:()Z\n+         1: invokevirtual #119                // Method isAtEOF:()Z\n          4: ifeq          9\n          7: aconst_null\n          8: areturn\n          9: aload_0\n-        10: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        10: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         13: ifnull        43\n         16: aload_0\n         17: aload_0\n-        18: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        21: invokevirtual #38                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+        18: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        21: invokevirtual #127                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n         24: aload_0\n-        25: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        28: invokevirtual #39                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        25: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        28: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         31: ladd\n-        32: invokespecial #40                 // Method repositionForwardTo:(J)V\n+        32: invokespecial #136                // Method repositionForwardTo:(J)V\n         35: aload_0\n-        36: invokespecial #41                 // Method throwExceptionIfPositionIsNotInArchive:()V\n+        36: invokespecial #140                // Method throwExceptionIfPositionIsNotInArchive:()V\n         39: aload_0\n-        40: invokespecial #42                 // Method skipRecordPadding:()V\n+        40: invokespecial #143                // Method skipRecordPadding:()V\n         43: aload_0\n-        44: invokespecial #43                 // Method getRecord:()Ljava/nio/ByteBuffer;\n+        44: invokespecial #146                // Method getRecord:()Ljava/nio/ByteBuffer;\n         47: astore_1\n         48: aconst_null\n         49: aload_1\n         50: if_acmpne     60\n         53: aload_0\n         54: aconst_null\n-        55: putfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        55: putfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         58: aconst_null\n         59: areturn\n         60: aload_0\n-        61: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        64: invokeinterface #44,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        61: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        64: invokeinterface #150,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         69: lstore_2\n         70: aload_0\n-        71: new           #45                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+        71: new           #128                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n         74: dup\n         75: aload_0\n-        76: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        76: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         79: aload_1\n-        80: invokevirtual #46                 // Method java/nio/ByteBuffer.array:()[B\n+        80: invokevirtual #155                // Method java/nio/ByteBuffer.array:()[B\n         83: aload_0\n-        84: getfield      #28                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        84: getfield      #87                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         87: aload_0\n-        88: getfield      #33                 // Field lenient:Z\n+        88: getfield      #108                // Field lenient:Z\n         91: lload_2\n-        92: invokespecial #47                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-        95: putfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        92: invokespecial #159                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+        95: putfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         98: goto          113\n        101: astore_2\n-       102: new           #49                 // class java/io/IOException\n+       102: new           #164                // class java/io/IOException\n        105: dup\n-       106: ldc           #50                 // String Error detected parsing the header\n+       106: ldc           #166                // String Error detected parsing the header\n        108: aload_2\n-       109: invokespecial #51                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       109: invokespecial #168                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n        112: athrow\n        113: aload_0\n-       114: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       117: invokevirtual #52                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n+       114: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       117: invokevirtual #171                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n        120: ifeq          151\n        123: aload_0\n-       124: invokespecial #53                 // Method getLongNameData:()[B\n+       124: invokespecial #174                // Method getLongNameData:()[B\n        127: astore_2\n        128: aload_2\n        129: ifnonnull     134\n        132: aconst_null\n        133: areturn\n        134: aload_0\n-       135: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       135: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n        138: aload_0\n-       139: getfield      #28                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       139: getfield      #87                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        142: aload_2\n-       143: invokeinterface #54,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       148: invokevirtual #55                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n+       143: invokeinterface #177,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       148: invokevirtual #183                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n        151: aload_0\n-       152: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       155: invokevirtual #56                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n+       152: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       155: invokevirtual #187                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n        158: ifeq          236\n        161: aload_0\n-       162: invokespecial #53                 // Method getLongNameData:()[B\n+       162: invokespecial #174                // Method getLongNameData:()[B\n        165: astore_2\n        166: aload_2\n        167: ifnonnull     172\n        170: aconst_null\n        171: areturn\n        172: aload_0\n-       173: getfield      #28                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       173: getfield      #87                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        176: aload_2\n-       177: invokeinterface #54,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       177: invokeinterface #177,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n        182: astore_3\n        183: aload_0\n-       184: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       184: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n        187: aload_3\n-       188: invokevirtual #57                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+       188: invokevirtual #190                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n        191: aload_0\n-       192: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       195: invokevirtual #58                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+       192: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       195: invokevirtual #193                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n        198: ifeq          236\n        201: aload_3\n-       202: ldc           #59                 // String /\n-       204: invokevirtual #60                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z\n+       202: ldc           #196                // String /\n+       204: invokevirtual #198                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z\n        207: ifne          236\n        210: aload_0\n-       211: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       214: new           #61                 // class java/lang/StringBuilder\n+       211: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       214: new           #204                // class java/lang/StringBuilder\n        217: dup\n-       218: invokespecial #62                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       218: invokespecial #206                // Method java/lang/StringBuilder.\"<init>\":()V\n        221: aload_3\n-       222: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       225: ldc           #59                 // String /\n-       227: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       230: invokevirtual #64                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       233: invokevirtual #57                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+       222: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       225: ldc           #196                // String /\n+       227: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       230: invokevirtual #211                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       233: invokevirtual #190                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n        236: aload_0\n-       237: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       240: invokevirtual #65                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+       237: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       240: invokevirtual #215                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n        243: ifeq          250\n        246: aload_0\n-       247: invokespecial #66                 // Method readGlobalPaxHeaders:()V\n+       247: invokespecial #218                // Method readGlobalPaxHeaders:()V\n        250: aload_0\n-       251: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       254: invokevirtual #67                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n+       251: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       254: invokevirtual #221                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n        257: ifeq          267\n        260: aload_0\n-       261: invokespecial #68                 // Method paxHeaders:()V\n+       261: invokespecial #224                // Method paxHeaders:()V\n        264: goto          291\n        267: aload_0\n-       268: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n-       271: invokeinterface #69,  1           // InterfaceMethod java/util/Map.isEmpty:()Z\n+       268: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n+       271: invokeinterface #227,  1          // InterfaceMethod java/util/Map.isEmpty:()Z\n        276: ifne          291\n        279: aload_0\n        280: aload_0\n-       281: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+       281: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n        284: aload_0\n-       285: getfield      #21                 // Field globalSparseHeaders:Ljava/util/List;\n-       288: invokespecial #70                 // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+       285: getfield      #63                 // Field globalSparseHeaders:Ljava/util/List;\n+       288: invokespecial #232                // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n        291: goto          306\n        294: astore_2\n-       295: new           #49                 // class java/io/IOException\n+       295: new           #164                // class java/io/IOException\n        298: dup\n-       299: ldc           #72                 // String Error detected parsing the pax header\n+       299: ldc           #238                // String Error detected parsing the pax header\n        301: aload_2\n-       302: invokespecial #51                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       302: invokespecial #168                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n        305: athrow\n        306: aload_0\n-       307: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       310: invokevirtual #73                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n+       307: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       310: invokevirtual #240                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n        313: ifeq          320\n        316: aload_0\n-       317: invokespecial #74                 // Method readOldGNUSparse:()V\n+       317: invokespecial #243                // Method readOldGNUSparse:()V\n        320: aload_0\n-       321: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       321: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n        324: areturn\n       Exception table:\n          from    to  target type\n             60    98   101   Class java/lang/IllegalArgumentException\n            250   291   294   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 238: 0\n@@ -1191,55 +1191,55 @@\n \n   private void readOldGNUSparse() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-         4: invokevirtual #75                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n+         1: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         4: invokevirtual #246                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n          7: ifeq          85\n         10: aload_0\n-        11: invokespecial #43                 // Method getRecord:()Ljava/nio/ByteBuffer;\n+        11: invokespecial #146                // Method getRecord:()Ljava/nio/ByteBuffer;\n         14: astore_2\n         15: aload_2\n         16: ifnonnull     29\n-        19: new           #49                 // class java/io/IOException\n+        19: new           #164                // class java/io/IOException\n         22: dup\n-        23: ldc           #76                 // String premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n-        25: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        23: ldc           #249                // String premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n+        25: invokespecial #251                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         28: athrow\n-        29: new           #78                 // class org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+        29: new           #253                // class org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n         32: dup\n         33: aload_2\n-        34: invokevirtual #46                 // Method java/nio/ByteBuffer.array:()[B\n-        37: invokespecial #79                 // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n+        34: invokevirtual #155                // Method java/nio/ByteBuffer.array:()[B\n+        37: invokespecial #255                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n         40: astore_1\n         41: aload_0\n-        42: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        45: invokevirtual #80                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n+        42: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        45: invokevirtual #256                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n         48: aload_1\n-        49: invokevirtual #81                 // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n-        52: invokeinterface #82,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z\n+        49: invokevirtual #260                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n+        52: invokeinterface #261,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z\n         57: pop\n         58: aload_0\n-        59: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        59: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         62: aload_0\n-        63: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        66: invokevirtual #38                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+        63: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        66: invokevirtual #127                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n         69: aload_0\n-        70: getfield      #29                 // Field recordSize:I\n+        70: getfield      #91                 // Field recordSize:I\n         73: i2l\n         74: ladd\n-        75: invokevirtual #83                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n+        75: invokevirtual #267                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n         78: aload_1\n-        79: invokevirtual #84                 // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n+        79: invokevirtual #270                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n         82: ifne          10\n         85: aload_0\n-        86: invokespecial #85                 // Method buildSparseInputStreams:()V\n+        86: invokespecial #271                // Method buildSparseInputStreams:()V\n         89: return\n       LineNumberTable:\n         line 319: 0\n         line 322: 10\n         line 323: 15\n         line 324: 19\n         line 326: 29\n@@ -1264,193 +1264,193 @@\n       throws java.io.IOException\n \n   private void buildSparseInputStreams() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=8, locals=14, args_size=1\n-         0: new           #19                 // class java/util/ArrayList\n+         0: new           #60                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #20                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #62                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        12: invokevirtual #86                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getOrderedSparseHeaders:()Ljava/util/List;\n+         9: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        12: invokevirtual #274                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getOrderedSparseHeaders:()Ljava/util/List;\n         15: astore_2\n-        16: new           #87                 // class org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n+        16: new           #277                // class org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n         19: dup\n-        20: invokespecial #88                 // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream.\"<init>\":()V\n+        20: invokespecial #279                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream.\"<init>\":()V\n         23: astore_3\n         24: lconst_0\n         25: lstore        4\n         27: lconst_0\n         28: lstore        6\n         30: aload_2\n-        31: invokeinterface #89,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+        31: invokeinterface #280,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n         36: astore        8\n         38: aload         8\n-        40: invokeinterface #90,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n-        45: ifeq          211\n+        40: invokeinterface #284,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        45: ifeq          213\n         48: aload         8\n-        50: invokeinterface #91,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        55: checkcast     #92                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        50: invokeinterface #289,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        55: checkcast     #293                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         58: astore        9\n         60: aload         9\n-        62: invokevirtual #93                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+        62: invokevirtual #295                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n         65: lload         4\n         67: lsub\n         68: lstore        10\n         70: lload         10\n         72: lconst_0\n         73: lcmp\n-        74: ifge          87\n-        77: new           #49                 // class java/io/IOException\n+        74: ifge          88\n+        77: new           #164                // class java/io/IOException\n         80: dup\n-        81: ldc           #94                 // String Corrupted struct sparse detected\n-        83: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        86: athrow\n-        87: lload         10\n-        89: lconst_0\n-        90: lcmp\n-        91: ifle          118\n-        94: aload_1\n-        95: new           #95                 // class org/apache/commons/compress/utils/BoundedInputStream\n-        98: dup\n-        99: aload_3\n-       100: lload         10\n-       102: invokespecial #96                 // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n-       105: invokeinterface #97,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       110: pop\n-       111: lload         6\n-       113: lload         10\n-       115: ladd\n-       116: lstore        6\n-       118: aload         9\n-       120: invokevirtual #98                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-       123: lconst_0\n-       124: lcmp\n-       125: ifle          195\n-       128: aload_0\n-       129: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       132: invokevirtual #38                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-       135: aload         9\n-       137: invokevirtual #93                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-       140: ladd\n-       141: lload         6\n-       143: lsub\n-       144: lstore        12\n-       146: lload         12\n-       148: aload         9\n-       150: invokevirtual #98                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-       153: ladd\n-       154: lload         12\n-       156: lcmp\n-       157: ifge          170\n-       160: new           #49                 // class java/io/IOException\n-       163: dup\n-       164: ldc           #99                 // String Unreadable TAR archive, sparse block offset or length too big\n-       166: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       169: athrow\n-       170: aload_1\n-       171: new           #100                // class org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-       174: dup\n-       175: lload         12\n-       177: aload         9\n-       179: invokevirtual #98                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-       182: aload_0\n-       183: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       186: invokespecial #101                // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-       189: invokeinterface #97,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       194: pop\n-       195: aload         9\n-       197: invokevirtual #93                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-       200: aload         9\n-       202: invokevirtual #98                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-       205: ladd\n-       206: lstore        4\n-       208: goto          38\n-       211: aload_0\n-       212: getfield      #1                  // Field sparseInputStreams:Ljava/util/Map;\n-       215: aload_0\n-       216: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       219: invokevirtual #102                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-       222: aload_1\n-       223: invokeinterface #103,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-       228: pop\n-       229: return\n+        81: ldc_w         #298                // String Corrupted struct sparse detected\n+        84: invokespecial #251                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        87: athrow\n+        88: lload         10\n+        90: lconst_0\n+        91: lcmp\n+        92: ifle          119\n+        95: aload_1\n+        96: new           #300                // class org/apache/commons/compress/utils/BoundedInputStream\n+        99: dup\n+       100: aload_3\n+       101: lload         10\n+       103: invokespecial #302                // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+       106: invokeinterface #305,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       111: pop\n+       112: lload         6\n+       114: lload         10\n+       116: ladd\n+       117: lstore        6\n+       119: aload         9\n+       121: invokevirtual #306                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       124: lconst_0\n+       125: lcmp\n+       126: ifle          197\n+       129: aload_0\n+       130: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       133: invokevirtual #127                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+       136: aload         9\n+       138: invokevirtual #295                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+       141: ladd\n+       142: lload         6\n+       144: lsub\n+       145: lstore        12\n+       147: lload         12\n+       149: aload         9\n+       151: invokevirtual #306                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       154: ladd\n+       155: lload         12\n+       157: lcmp\n+       158: ifge          172\n+       161: new           #164                // class java/io/IOException\n+       164: dup\n+       165: ldc_w         #309                // String Unreadable TAR archive, sparse block offset or length too big\n+       168: invokespecial #251                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       171: athrow\n+       172: aload_1\n+       173: new           #311                // class org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+       176: dup\n+       177: lload         12\n+       179: aload         9\n+       181: invokevirtual #306                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       184: aload_0\n+       185: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       188: invokespecial #313                // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+       191: invokeinterface #305,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       196: pop\n+       197: aload         9\n+       199: invokevirtual #295                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+       202: aload         9\n+       204: invokevirtual #306                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       207: ladd\n+       208: lstore        4\n+       210: goto          38\n+       213: aload_0\n+       214: getfield      #1                  // Field sparseInputStreams:Ljava/util/Map;\n+       217: aload_0\n+       218: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       221: invokevirtual #316                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+       224: aload_1\n+       225: invokeinterface #319,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       230: pop\n+       231: return\n       LineNumberTable:\n         line 346: 0\n         line 348: 8\n         line 351: 16\n         line 353: 24\n         line 354: 27\n         line 355: 30\n         line 356: 60\n         line 357: 70\n         line 359: 77\n-        line 363: 87\n-        line 364: 94\n-        line 365: 111\n-        line 369: 118\n-        line 370: 128\n-        line 371: 132\n-        line 372: 146\n-        line 374: 160\n-        line 376: 170\n-        line 379: 195\n-        line 380: 208\n-        line 382: 211\n-        line 383: 229\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          146      49    12 start   J\n-           70     138    10 zeroBlockSize   J\n-           60     148     9 sparseHeader   Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-            0     230     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-            8     222     1 streams   Ljava/util/List;\n-           16     214     2 sparseHeaders   Ljava/util/List;\n-           24     206     3 zeroInputStream   Ljava/io/InputStream;\n-           27     203     4 offset   J\n-           30     200     6 numberOfZeroBytesInSparseEntry   J\n+        line 363: 88\n+        line 364: 95\n+        line 365: 112\n+        line 369: 119\n+        line 370: 129\n+        line 371: 133\n+        line 372: 147\n+        line 374: 161\n+        line 376: 172\n+        line 379: 197\n+        line 380: 210\n+        line 382: 213\n+        line 383: 231\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          147      50    12 start   J\n+           70     140    10 zeroBlockSize   J\n+           60     150     9 sparseHeader   Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+            0     232     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            8     224     1 streams   Ljava/util/List;\n+           16     216     2 sparseHeaders   Ljava/util/List;\n+           24     208     3 zeroInputStream   Ljava/io/InputStream;\n+           27     205     4 offset   J\n+           30     202     6 numberOfZeroBytesInSparseEntry   J\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-            8     222     1 streams   Ljava/util/List<Ljava/io/InputStream;>;\n-           16     214     2 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+            8     224     1 streams   Ljava/util/List<Ljava/io/InputStream;>;\n+           16     216     2 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n       StackMapTable: number_of_entries = 6\n         frame_type = 255 /* full_frame */\n           offset_delta = 38\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, class java/util/List, class java/io/InputStream, long, long, class java/util/Iterator ]\n           stack = []\n         frame_type = 253 /* append */\n-          offset_delta = 48\n+          offset_delta = 49\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse, long ]\n         frame_type = 30 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 51\n+          offset_delta = 52\n           locals = [ long ]\n         frame_type = 250 /* chop */\n           offset_delta = 24\n         frame_type = 248 /* chop */\n           offset_delta = 15\n     Exceptions:\n       throws java.io.IOException\n \n   private void applyPaxHeadersToCurrentEntry(java.util.Map<java.lang.String, java.lang.String>, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;Ljava/util/List;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n-         1: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         1: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          4: aload_1\n-         5: invokevirtual #104                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+         5: invokevirtual #323                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n          8: aload_0\n-         9: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         9: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         12: aload_2\n-        13: invokevirtual #105                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+        13: invokevirtual #327                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n         16: return\n       LineNumberTable:\n         line 392: 0\n         line 393: 8\n         line 394: 16\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -1459,188 +1459,188 @@\n             0      17     2 sparseHeaders   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      17     1 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n             0      17     2 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #242                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n+    Signature: #503                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n \n   private void paxHeaders() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=1\n-         0: new           #19                 // class java/util/ArrayList\n+         0: new           #60                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #20                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #62                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n          9: aload_0\n-        10: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        13: invokevirtual #106                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+        10: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        13: invokevirtual #331                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n         16: astore_3\n         17: aload_3\n         18: aload_1\n         19: aload_0\n-        20: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        20: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         23: aload_0\n-        24: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        27: invokevirtual #39                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-        30: invokestatic  #107                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+        24: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        27: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        30: invokestatic  #335                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n         33: astore_2\n         34: aload_3\n         35: ifnull        70\n         38: aload_3\n-        39: invokevirtual #108                // Method java/io/InputStream.close:()V\n+        39: invokevirtual #341                // Method java/io/InputStream.close:()V\n         42: goto          70\n         45: astore        4\n         47: aload_3\n         48: ifnull        67\n         51: aload_3\n-        52: invokevirtual #108                // Method java/io/InputStream.close:()V\n+        52: invokevirtual #341                // Method java/io/InputStream.close:()V\n         55: goto          67\n         58: astore        5\n         60: aload         4\n         62: aload         5\n-        64: invokevirtual #110                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        64: invokevirtual #348                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         67: aload         4\n         69: athrow\n         70: aload_2\n-        71: ldc           #111                // String GNU.sparse.map\n-        73: invokeinterface #112,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-        78: ifeq          103\n-        81: new           #19                 // class java/util/ArrayList\n-        84: dup\n-        85: aload_2\n-        86: ldc           #111                // String GNU.sparse.map\n-        88: invokeinterface #113,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        93: checkcast     #114                // class java/lang/String\n-        96: invokestatic  #115                // Method org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-        99: invokespecial #116                // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-       102: astore_1\n-       103: aload_0\n-       104: invokespecial #34                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       107: pop\n-       108: aload_0\n-       109: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       112: ifnonnull     125\n-       115: new           #49                 // class java/io/IOException\n-       118: dup\n-       119: ldc           #117                // String premature end of tar archive. Didn\\'t find any entry after PAX header.\n-       121: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       124: athrow\n-       125: aload_0\n-       126: aload_2\n-       127: aload_1\n-       128: invokespecial #70                 // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-       131: aload_0\n-       132: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       135: invokevirtual #118                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n-       138: ifeq          223\n-       141: aload_0\n-       142: aload_0\n-       143: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       146: invokevirtual #106                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n-       149: astore_3\n-       150: aload_3\n-       151: aload_0\n-       152: getfield      #29                 // Field recordSize:I\n-       155: invokestatic  #119                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n-       158: astore_1\n-       159: aload_3\n-       160: ifnull        195\n-       163: aload_3\n-       164: invokevirtual #108                // Method java/io/InputStream.close:()V\n-       167: goto          195\n-       170: astore        4\n-       172: aload_3\n-       173: ifnull        192\n-       176: aload_3\n-       177: invokevirtual #108                // Method java/io/InputStream.close:()V\n-       180: goto          192\n-       183: astore        5\n-       185: aload         4\n-       187: aload         5\n-       189: invokevirtual #110                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       192: aload         4\n-       194: athrow\n-       195: aload_0\n-       196: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       199: aload_1\n-       200: invokevirtual #105                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n-       203: aload_0\n-       204: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       207: aload_0\n-       208: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       211: invokevirtual #38                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-       214: aload_0\n-       215: getfield      #29                 // Field recordSize:I\n-       218: i2l\n-       219: ladd\n-       220: invokevirtual #83                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n-       223: aload_0\n-       224: invokespecial #85                 // Method buildSparseInputStreams:()V\n-       227: return\n+        71: ldc_w         #352                // String GNU.sparse.map\n+        74: invokeinterface #354,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+        79: ifeq          105\n+        82: new           #60                 // class java/util/ArrayList\n+        85: dup\n+        86: aload_2\n+        87: ldc_w         #352                // String GNU.sparse.map\n+        90: invokeinterface #357,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        95: checkcast     #199                // class java/lang/String\n+        98: invokestatic  #361                // Method org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+       101: invokespecial #365                // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+       104: astore_1\n+       105: aload_0\n+       106: invokespecial #111                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       109: pop\n+       110: aload_0\n+       111: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       114: ifnonnull     128\n+       117: new           #164                // class java/io/IOException\n+       120: dup\n+       121: ldc_w         #368                // String premature end of tar archive. Didn\\'t find any entry after PAX header.\n+       124: invokespecial #251                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       127: athrow\n+       128: aload_0\n+       129: aload_2\n+       130: aload_1\n+       131: invokespecial #232                // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+       134: aload_0\n+       135: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       138: invokevirtual #370                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n+       141: ifeq          226\n+       144: aload_0\n+       145: aload_0\n+       146: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       149: invokevirtual #331                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+       152: astore_3\n+       153: aload_3\n+       154: aload_0\n+       155: getfield      #91                 // Field recordSize:I\n+       158: invokestatic  #373                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n+       161: astore_1\n+       162: aload_3\n+       163: ifnull        198\n+       166: aload_3\n+       167: invokevirtual #341                // Method java/io/InputStream.close:()V\n+       170: goto          198\n+       173: astore        4\n+       175: aload_3\n+       176: ifnull        195\n+       179: aload_3\n+       180: invokevirtual #341                // Method java/io/InputStream.close:()V\n+       183: goto          195\n+       186: astore        5\n+       188: aload         4\n+       190: aload         5\n+       192: invokevirtual #348                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       195: aload         4\n+       197: athrow\n+       198: aload_0\n+       199: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       202: aload_1\n+       203: invokevirtual #327                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+       206: aload_0\n+       207: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       210: aload_0\n+       211: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       214: invokevirtual #127                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+       217: aload_0\n+       218: getfield      #91                 // Field recordSize:I\n+       221: i2l\n+       222: ladd\n+       223: invokevirtual #267                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n+       226: aload_0\n+       227: invokespecial #271                // Method buildSparseInputStreams:()V\n+       230: return\n       Exception table:\n          from    to  target type\n             17    34    45   Class java/lang/Throwable\n             51    55    58   Class java/lang/Throwable\n-           150   159   170   Class java/lang/Throwable\n-           176   180   183   Class java/lang/Throwable\n+           153   162   173   Class java/lang/Throwable\n+           179   183   186   Class java/lang/Throwable\n       LineNumberTable:\n         line 426: 0\n         line 428: 8\n         line 429: 17\n         line 430: 34\n         line 428: 45\n         line 433: 70\n-        line 434: 81\n-        line 436: 103\n-        line 437: 108\n-        line 438: 115\n-        line 440: 125\n-        line 443: 131\n-        line 444: 141\n-        line 445: 150\n-        line 446: 159\n-        line 444: 170\n-        line 447: 195\n-        line 449: 203\n-        line 454: 223\n-        line 455: 227\n+        line 434: 82\n+        line 436: 105\n+        line 437: 110\n+        line 438: 117\n+        line 440: 128\n+        line 443: 134\n+        line 444: 144\n+        line 445: 153\n+        line 446: 162\n+        line 444: 173\n+        line 447: 198\n+        line 449: 206\n+        line 454: 226\n+        line 455: 230\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n            34      11     2 headers   Ljava/util/Map;\n            17      53     3 input   Ljava/io/InputStream;\n-          150      45     3 input   Ljava/io/InputStream;\n-            0     228     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-            8     220     1 sparseHeaders   Ljava/util/List;\n-           70     158     2 headers   Ljava/util/Map;\n+          153      45     3 input   Ljava/io/InputStream;\n+            0     231     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            8     223     1 sparseHeaders   Ljava/util/List;\n+           70     161     2 headers   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            34      11     2 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-            8     220     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-           70     158     2 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+            8     223     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+           70     161     2 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 11\n         frame_type = 255 /* full_frame */\n           offset_delta = 45\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, top, class java/io/InputStream ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 12\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, top, class java/io/InputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 8 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 2\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, class java/util/Map ]\n           stack = []\n-        frame_type = 32 /* same */\n-        frame_type = 21 /* same */\n+        frame_type = 34 /* same */\n+        frame_type = 22 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 44\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, class java/util/Map, class java/io/InputStream ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 12\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, class java/util/Map, class java/io/InputStream, class java/lang/Throwable ]\n@@ -1655,55 +1655,55 @@\n   private void readGlobalPaxHeaders() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=4, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-         5: invokevirtual #106                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+         2: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         5: invokevirtual #331                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n          8: astore_1\n          9: aload_0\n         10: aload_1\n         11: aload_0\n-        12: getfield      #21                 // Field globalSparseHeaders:Ljava/util/List;\n+        12: getfield      #63                 // Field globalSparseHeaders:Ljava/util/List;\n         15: aload_0\n-        16: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        16: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         19: aload_0\n-        20: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        23: invokevirtual #39                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-        26: invokestatic  #107                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-        29: putfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        20: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        23: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        26: invokestatic  #335                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+        29: putfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         32: aload_1\n         33: ifnull        63\n         36: aload_1\n-        37: invokevirtual #108                // Method java/io/InputStream.close:()V\n+        37: invokevirtual #341                // Method java/io/InputStream.close:()V\n         40: goto          63\n         43: astore_2\n         44: aload_1\n         45: ifnull        61\n         48: aload_1\n-        49: invokevirtual #108                // Method java/io/InputStream.close:()V\n+        49: invokevirtual #341                // Method java/io/InputStream.close:()V\n         52: goto          61\n         55: astore_3\n         56: aload_2\n         57: aload_3\n-        58: invokevirtual #110                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        58: invokevirtual #348                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         61: aload_2\n         62: athrow\n         63: aload_0\n-        64: invokespecial #34                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        64: invokespecial #111                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         67: pop\n         68: aload_0\n-        69: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        69: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         72: ifnonnull     85\n-        75: new           #49                 // class java/io/IOException\n+        75: new           #164                // class java/io/IOException\n         78: dup\n-        79: ldc           #72                 // String Error detected parsing the pax header\n-        81: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        79: ldc           #238                // String Error detected parsing the pax header\n+        81: invokespecial #251                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         84: athrow\n         85: return\n       Exception table:\n          from    to  target type\n              9    32    43   Class java/lang/Throwable\n             48    52    55   Class java/lang/Throwable\n       LineNumberTable:\n@@ -1738,64 +1738,64 @@\n       throws java.io.IOException\n \n   private byte[] getLongNameData() throws java.io.IOException;\n     descriptor: ()[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=1\n-         0: new           #120                // class java/io/ByteArrayOutputStream\n+         0: new           #377                // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #121                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #379                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n          9: aload_0\n-        10: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        13: invokevirtual #106                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+        10: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        13: invokevirtual #331                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n         16: astore_3\n         17: aload_3\n         18: aload_0\n-        19: getfield      #15                 // Field smallBuf:[B\n-        22: invokevirtual #122                // Method java/io/InputStream.read:([B)I\n+        19: getfield      #49                 // Field smallBuf:[B\n+        22: invokevirtual #380                // Method java/io/InputStream.read:([B)I\n         25: dup\n         26: istore_2\n         27: iflt          43\n         30: aload_1\n         31: aload_0\n-        32: getfield      #15                 // Field smallBuf:[B\n+        32: getfield      #49                 // Field smallBuf:[B\n         35: iconst_0\n         36: iload_2\n-        37: invokevirtual #123                // Method java/io/ByteArrayOutputStream.write:([BII)V\n+        37: invokevirtual #384                // Method java/io/ByteArrayOutputStream.write:([BII)V\n         40: goto          17\n         43: aload_3\n         44: ifnull        79\n         47: aload_3\n-        48: invokevirtual #108                // Method java/io/InputStream.close:()V\n+        48: invokevirtual #341                // Method java/io/InputStream.close:()V\n         51: goto          79\n         54: astore        4\n         56: aload_3\n         57: ifnull        76\n         60: aload_3\n-        61: invokevirtual #108                // Method java/io/InputStream.close:()V\n+        61: invokevirtual #341                // Method java/io/InputStream.close:()V\n         64: goto          76\n         67: astore        5\n         69: aload         4\n         71: aload         5\n-        73: invokevirtual #110                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        73: invokevirtual #348                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         76: aload         4\n         78: athrow\n         79: aload_0\n-        80: invokespecial #34                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        80: invokespecial #111                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         83: pop\n         84: aload_0\n-        85: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        85: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         88: ifnonnull     93\n         91: aconst_null\n         92: areturn\n         93: aload_1\n-        94: invokevirtual #124                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        94: invokevirtual #388                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         97: astore_3\n         98: aload_3\n         99: arraylength\n        100: istore_2\n        101: iload_2\n        102: ifle          119\n        105: aload_3\n@@ -1814,15 +1814,15 @@\n        126: newarray       byte\n        128: astore        4\n        130: aload_3\n        131: iconst_0\n        132: aload         4\n        134: iconst_0\n        135: iload_2\n-       136: invokestatic  #125                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       136: invokestatic  #391                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        139: aload         4\n        141: astore_3\n        142: aload_3\n        143: areturn\n       Exception table:\n          from    to  target type\n             17    43    54   Class java/lang/Throwable\n@@ -1887,57 +1887,57 @@\n \n   private void skipRecordPadding() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=1\n          0: aload_0\n-         1: invokespecial #126                // Method isDirectory:()Z\n+         1: invokespecial #397                // Method isDirectory:()Z\n          4: ifne          78\n          7: aload_0\n-         8: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        11: invokevirtual #39                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+         8: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        11: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         14: lconst_0\n         15: lcmp\n         16: ifle          78\n         19: aload_0\n-        20: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        23: invokevirtual #39                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        20: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        23: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         26: aload_0\n-        27: getfield      #29                 // Field recordSize:I\n+        27: getfield      #91                 // Field recordSize:I\n         30: i2l\n         31: lrem\n         32: lconst_0\n         33: lcmp\n         34: ifeq          78\n         37: aload_0\n-        38: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        41: invokevirtual #39                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        38: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        41: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         44: aload_0\n-        45: getfield      #29                 // Field recordSize:I\n+        45: getfield      #91                 // Field recordSize:I\n         48: i2l\n         49: ldiv\n         50: lconst_1\n         51: ladd\n         52: lstore_1\n         53: lload_1\n         54: aload_0\n-        55: getfield      #29                 // Field recordSize:I\n+        55: getfield      #91                 // Field recordSize:I\n         58: i2l\n         59: lmul\n         60: aload_0\n-        61: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        64: invokevirtual #39                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        61: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        64: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         67: lsub\n         68: lstore_3\n         69: aload_0\n         70: lload_3\n-        71: invokespecial #127                // Method repositionForwardBy:(J)V\n+        71: invokespecial #398                // Method repositionForwardBy:(J)V\n         74: aload_0\n-        75: invokespecial #41                 // Method throwExceptionIfPositionIsNotInArchive:()V\n+        75: invokespecial #140                // Method throwExceptionIfPositionIsNotInArchive:()V\n         78: return\n       LineNumberTable:\n         line 510: 0\n         line 511: 37\n         line 512: 53\n         line 513: 69\n         line 514: 74\n@@ -1955,62 +1955,62 @@\n \n   private void repositionForwardTo(long) throws java.io.IOException;\n     descriptor: (J)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=2\n          0: aload_0\n-         1: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #44,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         1: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #150,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n          9: lstore_3\n         10: lload_1\n         11: lload_3\n         12: lcmp\n-        13: ifge          26\n-        16: new           #49                 // class java/io/IOException\n+        13: ifge          27\n+        16: new           #164                // class java/io/IOException\n         19: dup\n-        20: ldc           #128                // String trying to move backwards inside of the archive\n-        22: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        25: athrow\n-        26: aload_0\n-        27: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        30: lload_1\n-        31: invokeinterface #129,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-        36: pop\n-        37: return\n+        20: ldc_w         #401                // String trying to move backwards inside of the archive\n+        23: invokespecial #251                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        26: athrow\n+        27: aload_0\n+        28: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        31: lload_1\n+        32: invokeinterface #403,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        37: pop\n+        38: return\n       LineNumberTable:\n         line 519: 0\n         line 520: 10\n         line 521: 16\n-        line 523: 26\n-        line 524: 37\n+        line 523: 27\n+        line 524: 38\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      38     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-            0      38     1 newPosition   J\n-           10      28     3 currPosition   J\n+            0      39     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            0      39     1 newPosition   J\n+           10      29     3 currPosition   J\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n-          offset_delta = 26\n+          offset_delta = 27\n           locals = [ long ]\n     Exceptions:\n       throws java.io.IOException\n \n   private void repositionForwardBy(long) throws java.io.IOException;\n     descriptor: (J)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=2\n          0: aload_0\n          1: aload_0\n-         2: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         5: invokeinterface #44,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         2: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         5: invokeinterface #150,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         10: lload_1\n         11: ladd\n-        12: invokespecial #40                 // Method repositionForwardTo:(J)V\n+        12: invokespecial #136                // Method repositionForwardTo:(J)V\n         15: return\n       LineNumberTable:\n         line 527: 0\n         line 528: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -2020,61 +2020,61 @@\n \n   private void throwExceptionIfPositionIsNotInArchive() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #130,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+         1: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #406,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n          9: aload_0\n-        10: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        13: invokeinterface #44,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        10: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        13: invokeinterface #150,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         18: lcmp\n-        19: ifge          32\n-        22: new           #49                 // class java/io/IOException\n+        19: ifge          33\n+        22: new           #164                // class java/io/IOException\n         25: dup\n-        26: ldc           #131                // String Truncated TAR archive\n-        28: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        31: athrow\n-        32: return\n+        26: ldc_w         #409                // String Truncated TAR archive\n+        29: invokespecial #251                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        32: athrow\n+        33: return\n       LineNumberTable:\n         line 535: 0\n         line 536: 22\n-        line 538: 32\n+        line 538: 33\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      33     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            0      34     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n       StackMapTable: number_of_entries = 1\n-        frame_type = 32 /* same */\n+        frame_type = 33 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private java.nio.ByteBuffer getRecord() throws java.io.IOException;\n     descriptor: ()Ljava/nio/ByteBuffer;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #132                // Method readRecord:()Ljava/nio/ByteBuffer;\n+         1: invokespecial #411                // Method readRecord:()Ljava/nio/ByteBuffer;\n          4: astore_1\n          5: aload_0\n          6: aload_0\n          7: aload_1\n-         8: invokespecial #133                // Method isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n-        11: invokevirtual #134                // Method setAtEOF:(Z)V\n+         8: invokespecial #414                // Method isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n+        11: invokevirtual #418                // Method setAtEOF:(Z)V\n         14: aload_0\n-        15: invokevirtual #36                 // Method isAtEOF:()Z\n+        15: invokevirtual #119                // Method isAtEOF:()Z\n         18: ifeq          35\n         21: aload_1\n         22: ifnull        35\n         25: aload_0\n-        26: invokespecial #135                // Method tryToConsumeSecondEOFRecord:()V\n+        26: invokespecial #422                // Method tryToConsumeSecondEOFRecord:()V\n         29: aload_0\n-        30: invokespecial #136                // Method consumeRemainderOfLastBlock:()V\n+        30: invokespecial #425                // Method consumeRemainderOfLastBlock:()V\n         33: aconst_null\n         34: astore_1\n         35: aload_1\n         36: areturn\n       LineNumberTable:\n         line 555: 0\n         line 556: 5\n@@ -2099,48 +2099,48 @@\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: iconst_1\n          1: istore_1\n          2: aload_0\n          3: aload_0\n-         4: invokespecial #132                // Method readRecord:()Ljava/nio/ByteBuffer;\n-         7: invokespecial #133                // Method isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n+         4: invokespecial #411                // Method readRecord:()Ljava/nio/ByteBuffer;\n+         7: invokespecial #414                // Method isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n         10: ifne          17\n         13: iconst_1\n         14: goto          18\n         17: iconst_0\n         18: istore_1\n         19: iload_1\n         20: ifeq          83\n         23: aload_0\n-        24: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        24: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         27: aload_0\n-        28: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        31: invokeinterface #44,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        28: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        31: invokeinterface #150,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         36: aload_0\n-        37: getfield      #29                 // Field recordSize:I\n+        37: getfield      #91                 // Field recordSize:I\n         40: i2l\n         41: lsub\n-        42: invokeinterface #129,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        42: invokeinterface #403,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         47: pop\n         48: goto          83\n         51: astore_2\n         52: iload_1\n         53: ifeq          81\n         56: aload_0\n-        57: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        57: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         60: aload_0\n-        61: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        64: invokeinterface #44,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        61: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        64: invokeinterface #150,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         69: aload_0\n-        70: getfield      #29                 // Field recordSize:I\n+        70: getfield      #91                 // Field recordSize:I\n         73: i2l\n         74: lsub\n-        75: invokeinterface #129,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        75: invokeinterface #403,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         80: pop\n         81: aload_2\n         82: athrow\n         83: return\n       Exception table:\n          from    to  target type\n              2    19    51   any\n@@ -2175,32 +2175,32 @@\n \n   private void consumeRemainderOfLastBlock() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #44,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         1: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #150,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n          9: aload_0\n-        10: getfield      #32                 // Field blockSize:I\n+        10: getfield      #105                // Field blockSize:I\n         13: i2l\n         14: lrem\n         15: lstore_1\n         16: lload_1\n         17: lconst_0\n         18: lcmp\n         19: ifle          33\n         22: aload_0\n         23: aload_0\n-        24: getfield      #32                 // Field blockSize:I\n+        24: getfield      #105                // Field blockSize:I\n         27: i2l\n         28: lload_1\n         29: lsub\n-        30: invokespecial #127                // Method repositionForwardBy:(J)V\n+        30: invokespecial #398                // Method repositionForwardBy:(J)V\n         33: return\n       LineNumberTable:\n         line 596: 0\n         line 597: 16\n         line 598: 22\n         line 600: 33\n       LocalVariableTable:\n@@ -2216,31 +2216,31 @@\n \n   private java.nio.ByteBuffer readRecord() throws java.io.IOException;\n     descriptor: ()Ljava/nio/ByteBuffer;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #31                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #137                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         1: getfield      #101                // Field recordBuffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #428                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n          7: pop\n          8: aload_0\n-         9: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         9: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         12: aload_0\n-        13: getfield      #31                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n-        16: invokeinterface #138,  2          // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        13: getfield      #101                // Field recordBuffer:Ljava/nio/ByteBuffer;\n+        16: invokeinterface #432,  2          // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         21: istore_1\n         22: iload_1\n         23: aload_0\n-        24: getfield      #29                 // Field recordSize:I\n+        24: getfield      #91                 // Field recordSize:I\n         27: if_icmpeq     32\n         30: aconst_null\n         31: areturn\n         32: aload_0\n-        33: getfield      #31                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n+        33: getfield      #101                // Field recordBuffer:Ljava/nio/ByteBuffer;\n         36: areturn\n       LineNumberTable:\n         line 609: 0\n         line 610: 8\n         line 611: 22\n         line 612: 30\n         line 614: 32\n@@ -2256,39 +2256,39 @@\n       throws java.io.IOException\n \n   public java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveEntry> getEntries();\n     descriptor: ()Ljava/util/List;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #19                 // class java/util/ArrayList\n+         0: new           #60                 // class java/util/ArrayList\n          3: dup\n          4: aload_0\n-         5: getfield      #18                 // Field entries:Ljava/util/LinkedList;\n-         8: invokespecial #116                // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+         5: getfield      #56                 // Field entries:Ljava/util/LinkedList;\n+         8: invokespecial #365                // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n         11: areturn\n       LineNumberTable:\n         line 623: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-    Signature: #273                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+    Signature: #518                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n \n   private boolean isEOFRecord(java.nio.ByteBuffer);\n     descriptor: (Ljava/nio/ByteBuffer;)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n          1: ifnull        18\n          4: aload_1\n-         5: invokevirtual #46                 // Method java/nio/ByteBuffer.array:()[B\n+         5: invokevirtual #155                // Method java/nio/ByteBuffer.array:()[B\n          8: aload_0\n-         9: getfield      #29                 // Field recordSize:I\n-        12: invokestatic  #139                // Method org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n+         9: getfield      #91                 // Field recordSize:I\n+        12: invokestatic  #435                // Method org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n         15: ifeq          22\n         18: iconst_1\n         19: goto          23\n         22: iconst_0\n         23: ireturn\n       LineNumberTable:\n         line 627: 0\n@@ -2304,30 +2304,30 @@\n \n   protected final boolean isAtEOF();\n     descriptor: ()Z\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #26                 // Field hasHitEOF:Z\n+         1: getfield      #77                 // Field hasHitEOF:Z\n          4: ireturn\n       LineNumberTable:\n         line 631: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n \n   protected final void setAtEOF(boolean);\n     descriptor: (Z)V\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #26                 // Field hasHitEOF:Z\n+         2: putfield      #77                 // Field hasHitEOF:Z\n          5: return\n       LineNumberTable:\n         line 635: 0\n         line 636: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -2335,19 +2335,19 @@\n \n   private boolean isDirectory();\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         1: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          4: ifnull        21\n          7: aload_0\n-         8: getfield      #37                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        11: invokevirtual #58                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+         8: getfield      #123                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        11: invokevirtual #193                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n         14: ifeq          21\n         17: iconst_1\n         18: goto          22\n         21: iconst_0\n         22: ireturn\n       LineNumberTable:\n         line 639: 0\n@@ -2360,55 +2360,55 @@\n           stack = [ int ]\n \n   public java.io.InputStream getInputStream(org.apache.commons.compress.archivers.tar.TarArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=2\n-         0: new           #140                // class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+         0: new           #441                // class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n          3: dup\n          4: aload_0\n          5: aload_1\n          6: aload_0\n-         7: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        10: invokespecial #141                // Method org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+         7: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        10: invokespecial #443                // Method org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n         13: areturn\n         14: astore_2\n-        15: new           #49                 // class java/io/IOException\n+        15: new           #164                // class java/io/IOException\n         18: dup\n-        19: ldc           #143                // String Corrupted TAR archive. Can\\'t read entry\n-        21: aload_2\n-        22: invokespecial #51                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-        25: athrow\n+        19: ldc_w         #448                // String Corrupted TAR archive. Can\\'t read entry\n+        22: aload_2\n+        23: invokespecial #168                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        26: athrow\n       Exception table:\n          from    to  target type\n              0    13    14   Class java/lang/RuntimeException\n       LineNumberTable:\n         line 650: 0\n         line 651: 14\n         line 652: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           15      11     2    ex   Ljava/lang/RuntimeException;\n-            0      26     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-            0      26     1 entry   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+           15      12     2    ex   Ljava/lang/RuntimeException;\n+            0      27     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            0      27     1 entry   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n       StackMapTable: number_of_entries = 1\n         frame_type = 78 /* same_locals_1_stack_item */\n           stack = [ class java/lang/RuntimeException ]\n     Exceptions:\n       throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #144,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V\n+         1: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #450,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V\n          9: return\n       LineNumberTable:\n         line 658: 0\n         line 659: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -2427,8 +2427,8 @@\n         line 47: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   Lorg/apache/commons/compress/archivers/tar/TarFile;\n }\n SourceFile: \"TarFile.java\"\n InnerClasses:\n-  private final #147= #140 of #14;        // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n+  private final #528= #441 of #2;         // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n"}]}
