{"diffoscope-json-version": 1, "source1": "first/PropertiesConfiguration.class", "source2": "second/PropertiesConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -37,14 +37,26 @@\n     private static final int UNICODE_LEN = 4;\n     private PropertiesConfigurationLayout layout;\n     private ConfigurationConsumer<ConfigurationException> includeListener;\n     private PropertiesConfiguration.IOFactory ioFactory;\n     private FileLocator locator;\n     private boolean includesAllowed;\n     \n+    static {\n+        DEFAULT_INCLUDE_LISTENER = (e -> {\n+            throw e;\n+        });\n+        NOOP_INCLUDE_LISTENER = (e -> {});\n+        PropertiesConfiguration.include = \"include\";\n+        PropertiesConfiguration.includeOptional = \"includeoptional\";\n+        SEPARATORS = new char[] { '=', ':' };\n+        WHITE_SPACE = new char[] { ' ', '\\t', '\\f' };\n+        LINE_SEPARATOR = System.lineSeparator();\n+    }\n+    \n     public PropertiesConfiguration() {\n         this.includesAllowed = true;\n         this.installLayout(this.createLayout());\n     }\n     \n     private static int countTrailingBS(final String line) {\n         int bsCount = 0;\n@@ -253,21 +265,23 @@\n                 seenStack.add(url);\n                 try {\n                     fh.load(url);\n                 }\n                 finally {\n                     seenStack.pop();\n                 }\n+                seenStack.pop();\n             }\n             catch (final ConfigurationException e) {\n                 this.getIncludeListener().accept((Object)e);\n             }\n             finally {\n                 this.locator = orgLocator;\n             }\n+            this.locator = orgLocator;\n         }\n     }\n     \n     private URL locateIncludeFile(final String basePath, final String fileName) {\n         final FileLocator includeLocator = FileLocatorUtils.fileLocator(this.locator).sourceURL((URL)null).basePath(basePath).fileName(fileName).create();\n         return FileLocatorUtils.locate(includeLocator);\n     }\n@@ -307,24 +321,26 @@\n         this.beginWrite(false);\n         try {\n             this.getLayout().setFooterComment(footer);\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     public void setHeader(final String header) {\n         this.beginWrite(false);\n         try {\n             this.getLayout().setHeaderComment(header);\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     public void setIncludeListener(final ConfigurationConsumer<ConfigurationException> includeListener) {\n         if (includeListener == null) {\n             throw new IllegalArgumentException(\"includeListener must not be null.\");\n         }\n         this.includeListener = includeListener;\n@@ -344,20 +360,8 @@\n     public void setLayout(final PropertiesConfigurationLayout layout) {\n         this.installLayout(layout);\n     }\n     \n     public void write(final Writer out) throws ConfigurationException, IOException {\n         this.getLayout().save(this, out);\n     }\n-    \n-    static {\n-        DEFAULT_INCLUDE_LISTENER = (e -> {\n-            throw e;\n-        });\n-        NOOP_INCLUDE_LISTENER = (e -> {});\n-        PropertiesConfiguration.include = \"include\";\n-        PropertiesConfiguration.includeOptional = \"includeoptional\";\n-        SEPARATORS = new char[] { '=', ':' };\n-        WHITE_SPACE = new char[] { ' ', '\\t', '\\f' };\n-        LINE_SEPARATOR = System.lineSeparator();\n-    }\n }\n"}]}
