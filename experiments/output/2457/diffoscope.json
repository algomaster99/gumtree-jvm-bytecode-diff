{"diffoscope-json-version": 1, "source1": "first/BlockLZ4CompressorOutputStream$Pair.class", "source2": "second/BlockLZ4CompressorOutputStream$Pair.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,12 +1,12 @@\n-  SHA-256 checksum d43032cdea1dd128b4c23edaabb4f7f7024382ffa3f1567085ac01c351136c42\n+  SHA-256 checksum 05f82572ebc1d406aa5b7aebc9494de768553f36f7c424370e50e7ff9c3ecf18\n   Compiled from \"BlockLZ4CompressorOutputStream.java\"\n final class org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n   this_class: #37                         // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair\n   super_class: #40                        // java/lang/Object\n   interfaces: 0, fields: 4, methods: 20, attributes: 2\n Constant pool:\n     #1 = Class              #126          // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream\n     #2 = Methodref          #37.#127      // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair.prependTo:(Lorg/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair;)V\n@@ -34,24 +34,24 @@\n    #24 = Methodref          #37.#147      // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair.literalLength:()I\n    #25 = Fieldref           #37.#148      // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair.written:Z\n    #26 = Methodref          #37.#149      // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair.lengths:(II)I\n    #27 = Methodref          #150.#151     // java/io/OutputStream.write:(I)V\n    #28 = Class              #152          // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream\n    #29 = Methodref          #37.#153      // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair.writeLength:(ILjava/io/OutputStream;)V\n    #30 = InterfaceMethodref #135.#154     // java/util/Deque.iterator:()Ljava/util/Iterator;\n-   #31 = InterfaceMethodref #155.#156     // java/util/Iterator.hasNext:()Z\n-   #32 = InterfaceMethodref #155.#157     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #31 = InterfaceMethodref #90.#155      // java/util/Iterator.hasNext:()Z\n+   #32 = InterfaceMethodref #90.#156      // java/util/Iterator.next:()Ljava/lang/Object;\n    #33 = Class              #62           // \"[B\"\n-   #34 = Methodref          #150.#158     // java/io/OutputStream.write:([B)V\n-   #35 = Methodref          #159.#160     // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:(Ljava/io/OutputStream;JI)V\n-   #36 = InterfaceMethodref #135.#161     // java/util/Deque.descendingIterator:()Ljava/util/Iterator;\n-   #37 = Class              #162          // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair\n+   #34 = Methodref          #150.#157     // java/io/OutputStream.write:([B)V\n+   #35 = Methodref          #158.#159     // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:(Ljava/io/OutputStream;JI)V\n+   #36 = InterfaceMethodref #135.#160     // java/util/Deque.descendingIterator:()Ljava/util/Iterator;\n+   #37 = Class              #161          // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair\n    #38 = Methodref          #37.#132      // org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair.\"<init>\":()V\n-   #39 = InterfaceMethodref #135.#163     // java/util/Deque.addAll:(Ljava/util/Collection;)Z\n-   #40 = Class              #164          // java/lang/Object\n+   #39 = InterfaceMethodref #135.#162     // java/util/Deque.addAll:(Ljava/util/Collection;)Z\n+   #40 = Class              #163          // java/lang/Object\n    #41 = Utf8               literals\n    #42 = Utf8               Ljava/util/Deque;\n    #43 = Utf8               Signature\n    #44 = Utf8               Ljava/util/Deque<[B>;\n    #45 = Utf8               brOffset\n    #46 = Utf8               I\n    #47 = Utf8               brLength\n@@ -67,22 +67,22 @@\n    #57 = Utf8               InnerClasses\n    #58 = Utf8               Lorg/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair;\n    #59 = Utf8               prependLiteral\n    #60 = Utf8               ([B)V\n    #61 = Utf8               data\n    #62 = Utf8               [B\n    #63 = Utf8               addLiteral\n-   #64 = Class              #166          // org/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock\n+   #64 = Class              #165          // org/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock\n    #65 = Utf8               LiteralBlock\n    #66 = Utf8               (Lorg/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock;)[B\n    #67 = Utf8               block\n    #68 = Utf8               Lorg/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock;\n    #69 = Utf8               copy\n    #70 = Utf8               setBackReference\n-   #71 = Class              #167          // org/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference\n+   #71 = Class              #166          // org/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference\n    #72 = Utf8               BackReference\n    #73 = Utf8               (Lorg/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference;)V\n    #74 = Utf8               Lorg/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference;\n    #75 = Utf8               StackMapTable\n    #76 = Utf8               hasBackReference\n    #77 = Utf8               ()Z\n    #78 = Utf8               canBeWritten\n@@ -93,17 +93,17 @@\n    #83 = Utf8               hasBeenWritten\n    #84 = Utf8               writeTo\n    #85 = Utf8               (Ljava/io/OutputStream;)V\n    #86 = Utf8               b\n    #87 = Utf8               out\n    #88 = Utf8               Ljava/io/OutputStream;\n    #89 = Utf8               litLength\n-   #90 = Class              #168          // java/util/Iterator\n+   #90 = Class              #167          // java/util/Iterator\n    #91 = Utf8               Exceptions\n-   #92 = Class              #169          // java/io/IOException\n+   #92 = Class              #168          // java/io/IOException\n    #93 = Utf8               literalLength\n    #94 = Utf8               lengths\n    #95 = Utf8               (II)I\n    #96 = Utf8               l\n    #97 = Utf8               br\n    #98 = Utf8               writeLength\n    #99 = Utf8               (ILjava/io/OutputStream;)V\n@@ -138,76 +138,75 @@\n   #128 = NameAndType        #108:#109     // splitWithNewBackReferenceLengthOf:(I)Lorg/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair;\n   #129 = NameAndType        #100:#82      // backReferenceLength:()I\n   #130 = NameAndType        #59:#60       // prependLiteral:([B)V\n   #131 = NameAndType        #83:#77       // hasBeenWritten:()Z\n   #132 = NameAndType        #50:#51       // \"<init>\":()V\n   #133 = Utf8               java/util/LinkedList\n   #134 = NameAndType        #41:#42       // literals:Ljava/util/Deque;\n-  #135 = Class              #170          // java/util/Deque\n-  #136 = NameAndType        #171:#172     // addFirst:(Ljava/lang/Object;)V\n-  #137 = NameAndType        #173:#174     // getData:()[B\n-  #138 = NameAndType        #175:#82      // getOffset:()I\n-  #139 = NameAndType        #176:#82      // getLength:()I\n-  #140 = Class              #177          // java/util/Arrays\n-  #141 = NameAndType        #178:#179     // copyOfRange:([BII)[B\n-  #142 = NameAndType        #180:#181     // add:(Ljava/lang/Object;)Z\n+  #135 = Class              #169          // java/util/Deque\n+  #136 = NameAndType        #170:#171     // addFirst:(Ljava/lang/Object;)V\n+  #137 = NameAndType        #172:#173     // getData:()[B\n+  #138 = NameAndType        #174:#82      // getOffset:()I\n+  #139 = NameAndType        #175:#82      // getLength:()I\n+  #140 = Class              #176          // java/util/Arrays\n+  #141 = NameAndType        #177:#178     // copyOfRange:([BII)[B\n+  #142 = NameAndType        #179:#180     // add:(Ljava/lang/Object;)Z\n   #143 = NameAndType        #76:#77       // hasBackReference:()Z\n   #144 = Utf8               java/lang/IllegalStateException\n   #145 = NameAndType        #45:#46       // brOffset:I\n   #146 = NameAndType        #47:#46       // brLength:I\n   #147 = NameAndType        #93:#82       // literalLength:()I\n   #148 = NameAndType        #48:#49       // written:Z\n   #149 = NameAndType        #94:#95       // lengths:(II)I\n-  #150 = Class              #182          // java/io/OutputStream\n-  #151 = NameAndType        #183:#184     // write:(I)V\n+  #150 = Class              #181          // java/io/OutputStream\n+  #151 = NameAndType        #182:#183     // write:(I)V\n   #152 = Utf8               org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream\n   #153 = NameAndType        #98:#99       // writeLength:(ILjava/io/OutputStream;)V\n-  #154 = NameAndType        #185:#186     // iterator:()Ljava/util/Iterator;\n-  #155 = Class              #168          // java/util/Iterator\n-  #156 = NameAndType        #187:#77      // hasNext:()Z\n-  #157 = NameAndType        #188:#189     // next:()Ljava/lang/Object;\n-  #158 = NameAndType        #183:#60      // write:([B)V\n-  #159 = Class              #190          // org/apache/commons/compress/utils/ByteUtils\n-  #160 = NameAndType        #191:#192     // toLittleEndian:(Ljava/io/OutputStream;JI)V\n-  #161 = NameAndType        #193:#186     // descendingIterator:()Ljava/util/Iterator;\n-  #162 = Utf8               org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair\n-  #163 = NameAndType        #194:#195     // addAll:(Ljava/util/Collection;)Z\n-  #164 = Utf8               java/lang/Object\n-  #165 = Class              #196          // org/apache/commons/compress/compressors/lz77support/LZ77Compressor\n-  #166 = Utf8               org/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock\n-  #167 = Utf8               org/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference\n-  #168 = Utf8               java/util/Iterator\n-  #169 = Utf8               java/io/IOException\n-  #170 = Utf8               java/util/Deque\n-  #171 = Utf8               addFirst\n-  #172 = Utf8               (Ljava/lang/Object;)V\n-  #173 = Utf8               getData\n-  #174 = Utf8               ()[B\n-  #175 = Utf8               getOffset\n-  #176 = Utf8               getLength\n-  #177 = Utf8               java/util/Arrays\n-  #178 = Utf8               copyOfRange\n-  #179 = Utf8               ([BII)[B\n-  #180 = Utf8               add\n-  #181 = Utf8               (Ljava/lang/Object;)Z\n-  #182 = Utf8               java/io/OutputStream\n-  #183 = Utf8               write\n-  #184 = Utf8               (I)V\n-  #185 = Utf8               iterator\n-  #186 = Utf8               ()Ljava/util/Iterator;\n-  #187 = Utf8               hasNext\n-  #188 = Utf8               next\n-  #189 = Utf8               ()Ljava/lang/Object;\n-  #190 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #191 = Utf8               toLittleEndian\n-  #192 = Utf8               (Ljava/io/OutputStream;JI)V\n-  #193 = Utf8               descendingIterator\n-  #194 = Utf8               addAll\n-  #195 = Utf8               (Ljava/util/Collection;)Z\n-  #196 = Utf8               org/apache/commons/compress/compressors/lz77support/LZ77Compressor\n+  #154 = NameAndType        #184:#185     // iterator:()Ljava/util/Iterator;\n+  #155 = NameAndType        #186:#77      // hasNext:()Z\n+  #156 = NameAndType        #187:#188     // next:()Ljava/lang/Object;\n+  #157 = NameAndType        #182:#60      // write:([B)V\n+  #158 = Class              #189          // org/apache/commons/compress/utils/ByteUtils\n+  #159 = NameAndType        #190:#191     // toLittleEndian:(Ljava/io/OutputStream;JI)V\n+  #160 = NameAndType        #192:#185     // descendingIterator:()Ljava/util/Iterator;\n+  #161 = Utf8               org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair\n+  #162 = NameAndType        #193:#194     // addAll:(Ljava/util/Collection;)Z\n+  #163 = Utf8               java/lang/Object\n+  #164 = Class              #195          // org/apache/commons/compress/compressors/lz77support/LZ77Compressor\n+  #165 = Utf8               org/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock\n+  #166 = Utf8               org/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference\n+  #167 = Utf8               java/util/Iterator\n+  #168 = Utf8               java/io/IOException\n+  #169 = Utf8               java/util/Deque\n+  #170 = Utf8               addFirst\n+  #171 = Utf8               (Ljava/lang/Object;)V\n+  #172 = Utf8               getData\n+  #173 = Utf8               ()[B\n+  #174 = Utf8               getOffset\n+  #175 = Utf8               getLength\n+  #176 = Utf8               java/util/Arrays\n+  #177 = Utf8               copyOfRange\n+  #178 = Utf8               ([BII)[B\n+  #179 = Utf8               add\n+  #180 = Utf8               (Ljava/lang/Object;)Z\n+  #181 = Utf8               java/io/OutputStream\n+  #182 = Utf8               write\n+  #183 = Utf8               (I)V\n+  #184 = Utf8               iterator\n+  #185 = Utf8               ()Ljava/util/Iterator;\n+  #186 = Utf8               hasNext\n+  #187 = Utf8               next\n+  #188 = Utf8               ()Ljava/lang/Object;\n+  #189 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #190 = Utf8               toLittleEndian\n+  #191 = Utf8               (Ljava/io/OutputStream;JI)V\n+  #192 = Utf8               descendingIterator\n+  #193 = Utf8               addAll\n+  #194 = Utf8               (Ljava/util/Collection;)Z\n+  #195 = Utf8               org/apache/commons/compress/compressors/lz77support/LZ77Compressor\n {\n   private final java.util.Deque<byte[]> literals;\n     descriptor: Ljava/util/Deque;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n     Signature: #44                          // Ljava/util/Deque<[B>;\n \n   private int brOffset;\n@@ -798,9 +797,9 @@\n         Start  Length  Slot  Name   Signature\n             0       6     0    x0   Lorg/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair;\n             0       6     1    x1   Lorg/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair;\n }\n SourceFile: \"BlockLZ4CompressorOutputStream.java\"\n InnerClasses:\n   static final #56= #37 of #1;            // Pair=class org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair of class org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream\n-  public static final #65= #64 of #165;   // LiteralBlock=class org/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock of class org/apache/commons/compress/compressors/lz77support/LZ77Compressor\n-  public static final #72= #71 of #165;   // BackReference=class org/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference of class org/apache/commons/compress/compressors/lz77support/LZ77Compressor\n+  public static final #65= #64 of #164;   // LiteralBlock=class org/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock of class org/apache/commons/compress/compressors/lz77support/LZ77Compressor\n+  public static final #72= #71 of #164;   // BackReference=class org/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference of class org/apache/commons/compress/compressors/lz77support/LZ77Compressor\n"}]}
