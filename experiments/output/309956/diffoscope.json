{"diffoscope-json-version": 1, "source1": "first/Zip64ExtendedInformationExtraField.class", "source2": "second/Zip64ExtendedInformationExtraField.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,157 +1,157 @@\n-  SHA-256 checksum 3147160dcf52afaf3b08dd42663c33546fe7893e90da02e1c638bd3e26e5f273\n+  SHA-256 checksum 81439e50cf93ceec384ebde1936c9e302c4b415d444bbe43427e9350a38fff91\n   Compiled from \"Zip64ExtendedInformationExtraField.java\"\n public class org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #12                         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  super_class: #31                        // java/lang/Object\n+  this_class: #10                         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  super_class: #4                         // java/lang/Object\n   interfaces: 1, fields: 8, methods: 21, attributes: 3\n Constant pool:\n-    #1 = Class              #85           // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #31.#86       // java/lang/Object.\"<init>\":()V\n-    #3 = Methodref          #12.#87       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-    #4 = Fieldref           #12.#88       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #5 = Fieldref           #12.#89       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #6 = Fieldref           #12.#90       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #7 = Fieldref           #12.#91       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-    #8 = Fieldref           #12.#92       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-    #9 = Class              #93           // org/apache/commons/compress/archivers/zip/ZipShort\n-   #10 = Methodref          #9.#94        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #11 = Class              #95           // java/lang/IllegalArgumentException\n-   #12 = Class              #96           // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #13 = String             #97           // Zip64 extended information must contain both size values in the local file header.\n-   #14 = Methodref          #11.#98       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = Methodref          #12.#99       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.addSizes:([B)I\n-   #16 = Fieldref           #12.#100      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.EMPTY:[B\n-   #17 = Methodref          #12.#101      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #18 = Methodref          #9.#102       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n-   #19 = Methodref          #24.#103      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n-   #20 = Methodref          #104.#105     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #21 = Methodref          #26.#103      // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-   #22 = Class              #106          // java/util/zip/ZipException\n-   #23 = Methodref          #22.#98       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Class              #107          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #25 = Methodref          #24.#108      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-   #26 = Class              #109          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #27 = Methodref          #26.#108      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-   #28 = Fieldref           #12.#110      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.rawCentralDirectoryData:[B\n-   #29 = Methodref          #12.#111      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.parseFromLocalFileData:([BII)V\n-   #30 = InvokeDynamic      #0:#115       // #0:makeConcatWithConstants:(II)Ljava/lang/String;\n-   #31 = Class              #116          // java/lang/Object\n-   #32 = Class              #117          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #33 = Utf8               HEADER_ID\n-   #34 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #35 = Utf8               LFH_MUST_HAVE_BOTH_SIZES_MSG\n-   #36 = Utf8               Ljava/lang/String;\n-   #37 = Utf8               ConstantValue\n-   #38 = Utf8               EMPTY\n-   #39 = Utf8               [B\n-   #40 = Utf8               size\n-   #41 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #42 = Utf8               compressedSize\n-   #43 = Utf8               relativeHeaderOffset\n-   #44 = Utf8               diskStart\n-   #45 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #46 = Utf8               rawCentralDirectoryData\n-   #47 = Utf8               <init>\n-   #48 = Utf8               ()V\n-   #49 = Utf8               Code\n-   #50 = Utf8               LineNumberTable\n-   #51 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #52 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #53 = Utf8               getHeaderId\n-   #54 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #55 = Utf8               getLocalFileDataLength\n-   #56 = Utf8               StackMapTable\n-   #57 = Utf8               getCentralDirectoryLength\n-   #58 = Utf8               getLocalFileDataData\n-   #59 = Utf8               ()[B\n-   #60 = Utf8               getCentralDirectoryData\n-   #61 = Class              #39           // \"[B\"\n-   #62 = Utf8               parseFromLocalFileData\n-   #63 = Utf8               ([BII)V\n-   #64 = Utf8               Exceptions\n-   #65 = Utf8               parseFromCentralDirectoryData\n-   #66 = Utf8               reparseCentralDirectoryData\n-   #67 = Utf8               (ZZZZ)V\n-   #68 = Utf8               getSize\n-   #69 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #70 = Utf8               setSize\n-   #71 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #72 = Utf8               getCompressedSize\n-   #73 = Utf8               setCompressedSize\n-   #74 = Utf8               getRelativeHeaderOffset\n-   #75 = Utf8               setRelativeHeaderOffset\n-   #76 = Utf8               getDiskStartNumber\n-   #77 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #78 = Utf8               setDiskStartNumber\n-   #79 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #80 = Utf8               addSizes\n-   #81 = Utf8               ([B)I\n-   #82 = Utf8               <clinit>\n-   #83 = Utf8               SourceFile\n-   #84 = Utf8               Zip64ExtendedInformationExtraField.java\n-   #85 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #86 = NameAndType        #47:#48       // \"<init>\":()V\n-   #87 = NameAndType        #47:#52       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #88 = NameAndType        #40:#41       // size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #89 = NameAndType        #42:#41       // compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #90 = NameAndType        #43:#41       // relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #91 = NameAndType        #44:#45       // diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #92 = NameAndType        #33:#34       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #93 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #94 = NameAndType        #47:#118      // \"<init>\":(I)V\n-   #95 = Utf8               java/lang/IllegalArgumentException\n-   #96 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #97 = Utf8               Zip64 extended information must contain both size values in the local file header.\n-   #98 = NameAndType        #47:#119      // \"<init>\":(Ljava/lang/String;)V\n-   #99 = NameAndType        #80:#81       // addSizes:([B)I\n-  #100 = NameAndType        #38:#39       // EMPTY:[B\n-  #101 = NameAndType        #57:#54       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #102 = NameAndType        #120:#121     // getValue:()I\n-  #103 = NameAndType        #122:#59      // getBytes:()[B\n-  #104 = Class              #123          // java/lang/System\n-  #105 = NameAndType        #124:#125     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #106 = Utf8               java/util/zip/ZipException\n-  #107 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #108 = NameAndType        #47:#126      // \"<init>\":([BI)V\n-  #109 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #110 = NameAndType        #46:#39       // rawCentralDirectoryData:[B\n-  #111 = NameAndType        #62:#63       // parseFromLocalFileData:([BII)V\n-  #112 = Utf8               BootstrapMethods\n-  #113 = MethodHandle       6:#127        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #114 = String             #128          // Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n-  #115 = NameAndType        #129:#130     // makeConcatWithConstants:(II)Ljava/lang/String;\n-  #116 = Utf8               java/lang/Object\n-  #117 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #118 = Utf8               (I)V\n-  #119 = Utf8               (Ljava/lang/String;)V\n-  #120 = Utf8               getValue\n-  #121 = Utf8               ()I\n-  #122 = Utf8               getBytes\n-  #123 = Utf8               java/lang/System\n-  #124 = Utf8               arraycopy\n-  #125 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #126 = Utf8               ([BI)V\n-  #127 = Methodref          #131.#132     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #128 = Utf8               Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n-  #129 = Utf8               makeConcatWithConstants\n-  #130 = Utf8               (II)Ljava/lang/String;\n-  #131 = Class              #133          // java/lang/invoke/StringConcatFactory\n-  #132 = NameAndType        #129:#137     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #133 = Utf8               java/lang/invoke/StringConcatFactory\n-  #134 = Class              #139          // java/lang/invoke/MethodHandles$Lookup\n-  #135 = Utf8               Lookup\n-  #136 = Utf8               InnerClasses\n-  #137 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #138 = Class              #140          // java/lang/invoke/MethodHandles\n-  #139 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #140 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Methodref          #10.#11       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #10 = Class              #12           // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #11 = NameAndType        #7:#13        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #12 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #13 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #14 = Fieldref           #10.#15       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #15 = NameAndType        #16:#17       // size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #16 = Utf8               size\n+   #17 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #18 = Fieldref           #10.#19       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #19 = NameAndType        #20:#17       // compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #20 = Utf8               compressedSize\n+   #21 = Fieldref           #10.#22       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #22 = NameAndType        #23:#17       // relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #23 = Utf8               relativeHeaderOffset\n+   #24 = Fieldref           #10.#25       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #25 = NameAndType        #26:#27       // diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #26 = Utf8               diskStart\n+   #27 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #28 = Fieldref           #10.#29       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #29 = NameAndType        #30:#31       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #30 = Utf8               HEADER_ID\n+   #31 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #32 = Class              #33           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #33 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #34 = Methodref          #32.#35       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #35 = NameAndType        #7:#36        // \"<init>\":(I)V\n+   #36 = Utf8               (I)V\n+   #37 = Class              #38           // java/lang/IllegalArgumentException\n+   #38 = Utf8               java/lang/IllegalArgumentException\n+   #39 = String             #40           // Zip64 extended information must contain both size values in the local file header.\n+   #40 = Utf8               Zip64 extended information must contain both size values in the local file header.\n+   #41 = Methodref          #37.#42       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #42 = NameAndType        #7:#43        // \"<init>\":(Ljava/lang/String;)V\n+   #43 = Utf8               (Ljava/lang/String;)V\n+   #44 = Methodref          #10.#45       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.addSizes:([B)I\n+   #45 = NameAndType        #46:#47       // addSizes:([B)I\n+   #46 = Utf8               addSizes\n+   #47 = Utf8               ([B)I\n+   #48 = Fieldref           #10.#49       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.EMPTY:[B\n+   #49 = NameAndType        #50:#51       // EMPTY:[B\n+   #50 = Utf8               EMPTY\n+   #51 = Utf8               [B\n+   #52 = Methodref          #10.#53       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #53 = NameAndType        #54:#55       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #54 = Utf8               getCentralDirectoryLength\n+   #55 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #56 = Methodref          #32.#57       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n+   #57 = NameAndType        #58:#59       // getValue:()I\n+   #58 = Utf8               getValue\n+   #59 = Utf8               ()I\n+   #60 = Methodref          #61.#62       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+   #61 = Class              #63           // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #62 = NameAndType        #64:#65       // getBytes:()[B\n+   #63 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #64 = Utf8               getBytes\n+   #65 = Utf8               ()[B\n+   #66 = Methodref          #67.#68       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #67 = Class              #69           // java/lang/System\n+   #68 = NameAndType        #70:#71       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #69 = Utf8               java/lang/System\n+   #70 = Utf8               arraycopy\n+   #71 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #72 = Methodref          #73.#62       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+   #73 = Class              #74           // org/apache/commons/compress/archivers/zip/ZipLong\n+   #74 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #75 = Class              #76           // java/util/zip/ZipException\n+   #76 = Utf8               java/util/zip/ZipException\n+   #77 = Methodref          #75.#42       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #78 = Methodref          #61.#79       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+   #79 = NameAndType        #7:#80        // \"<init>\":([BI)V\n+   #80 = Utf8               ([BI)V\n+   #81 = Methodref          #73.#79       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+   #82 = Fieldref           #10.#83       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.rawCentralDirectoryData:[B\n+   #83 = NameAndType        #84:#51       // rawCentralDirectoryData:[B\n+   #84 = Utf8               rawCentralDirectoryData\n+   #85 = Methodref          #10.#86       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.parseFromLocalFileData:([BII)V\n+   #86 = NameAndType        #87:#88       // parseFromLocalFileData:([BII)V\n+   #87 = Utf8               parseFromLocalFileData\n+   #88 = Utf8               ([BII)V\n+   #89 = InvokeDynamic      #0:#90        // #0:makeConcatWithConstants:(II)Ljava/lang/String;\n+   #90 = NameAndType        #91:#92       // makeConcatWithConstants:(II)Ljava/lang/String;\n+   #91 = Utf8               makeConcatWithConstants\n+   #92 = Utf8               (II)Ljava/lang/String;\n+   #93 = Class              #94           // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #94 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #95 = Utf8               LFH_MUST_HAVE_BOTH_SIZES_MSG\n+   #96 = Utf8               Ljava/lang/String;\n+   #97 = Utf8               ConstantValue\n+   #98 = Utf8               Code\n+   #99 = Utf8               LineNumberTable\n+  #100 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #101 = Utf8               getHeaderId\n+  #102 = Utf8               getLocalFileDataLength\n+  #103 = Utf8               StackMapTable\n+  #104 = Utf8               getLocalFileDataData\n+  #105 = Utf8               getCentralDirectoryData\n+  #106 = Class              #51           // \"[B\"\n+  #107 = Utf8               Exceptions\n+  #108 = Utf8               parseFromCentralDirectoryData\n+  #109 = Utf8               reparseCentralDirectoryData\n+  #110 = Utf8               (ZZZZ)V\n+  #111 = Utf8               getSize\n+  #112 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #113 = Utf8               setSize\n+  #114 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #115 = Utf8               getCompressedSize\n+  #116 = Utf8               setCompressedSize\n+  #117 = Utf8               getRelativeHeaderOffset\n+  #118 = Utf8               setRelativeHeaderOffset\n+  #119 = Utf8               getDiskStartNumber\n+  #120 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #121 = Utf8               setDiskStartNumber\n+  #122 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #123 = Utf8               <clinit>\n+  #124 = Utf8               SourceFile\n+  #125 = Utf8               Zip64ExtendedInformationExtraField.java\n+  #126 = Utf8               BootstrapMethods\n+  #127 = MethodHandle       6:#128        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #128 = Methodref          #129.#130     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #129 = Class              #131          // java/lang/invoke/StringConcatFactory\n+  #130 = NameAndType        #91:#132      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #131 = Utf8               java/lang/invoke/StringConcatFactory\n+  #132 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #133 = String             #134          // Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n+  #134 = Utf8               Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n+  #135 = Utf8               InnerClasses\n+  #136 = Class              #137          // java/lang/invoke/MethodHandles$Lookup\n+  #137 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #138 = Class              #139          // java/lang/invoke/MethodHandles\n+  #139 = Utf8               java/lang/invoke/MethodHandles\n+  #140 = Utf8               Lookup\n {\n   static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private static final java.lang.String LFH_MUST_HAVE_BOTH_SIZES_MSG = \"Zip64 extended information must contain both size values in the local file header.\";\n     descriptor: Ljava/lang/String;\n@@ -184,87 +184,87 @@\n \n   public org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 71: 0\n \n   public org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: aconst_null\n          4: aconst_null\n-         5: invokespecial #3                  // Method \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+         5: invokespecial #9                  // Method \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n          8: return\n       LineNumberTable:\n         line 83: 0\n         line 84: 8\n \n   public org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipLong);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=5, args_size=5\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         6: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          9: aload_0\n         10: aload_2\n-        11: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        11: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         14: aload_0\n         15: aload_3\n-        16: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        16: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         19: aload_0\n         20: aload         4\n-        22: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        22: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         25: return\n       LineNumberTable:\n         line 99: 0\n         line 100: 4\n         line 101: 9\n         line 102: 14\n         line 103: 19\n         line 104: 25\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n-         0: getstatic     #8                  // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         0: getstatic     #28                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n          3: areturn\n       LineNumberTable:\n         line 108: 0\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #9                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #32                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: aload_0\n-         5: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         5: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          8: ifnull        16\n         11: bipush        16\n         13: goto          17\n         16: iconst_0\n-        17: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        17: invokespecial #34                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         20: areturn\n       LineNumberTable:\n         line 113: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 16\n           locals = [ class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField ]\n@@ -275,44 +275,44 @@\n           stack = [ uninitialized 0, uninitialized 0, int ]\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n-         0: new           #9                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #32                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: aload_0\n-         5: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         5: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          8: ifnull        16\n         11: bipush        8\n         13: goto          17\n         16: iconst_0\n         17: aload_0\n-        18: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        18: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         21: ifnull        29\n         24: bipush        8\n         26: goto          30\n         29: iconst_0\n         30: iadd\n         31: aload_0\n-        32: getfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        32: getfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         35: ifnull        43\n         38: bipush        8\n         40: goto          44\n         43: iconst_0\n         44: iadd\n         45: aload_0\n-        46: getfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        46: getfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         49: ifnull        56\n         52: iconst_4\n         53: goto          57\n         56: iconst_0\n         57: iadd\n-        58: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        58: invokespecial #34                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         61: areturn\n       LineNumberTable:\n         line 118: 0\n         line 119: 17\n         line 120: 31\n         line 121: 45\n         line 118: 61\n@@ -352,40 +352,40 @@\n \n   public byte[] getLocalFileDataData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         1: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          4: ifnonnull     14\n          7: aload_0\n-         8: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         8: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         11: ifnull        51\n         14: aload_0\n-        15: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        15: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         18: ifnull        28\n         21: aload_0\n-        22: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        22: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         25: ifnonnull     38\n-        28: new           #11                 // class java/lang/IllegalArgumentException\n+        28: new           #37                 // class java/lang/IllegalArgumentException\n         31: dup\n-        32: ldc           #13                 // String Zip64 extended information must contain both size values in the local file header.\n-        34: invokespecial #14                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        32: ldc           #39                 // String Zip64 extended information must contain both size values in the local file header.\n+        34: invokespecial #41                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         37: athrow\n         38: bipush        16\n         40: newarray       byte\n         42: astore_1\n         43: aload_0\n         44: aload_1\n-        45: invokespecial #15                 // Method addSizes:([B)I\n+        45: invokespecial #44                 // Method addSizes:([B)I\n         48: pop\n         49: aload_1\n         50: areturn\n-        51: getstatic     #16                 // Field EMPTY:[B\n+        51: getstatic     #48                 // Field EMPTY:[B\n         54: areturn\n       LineNumberTable:\n         line 126: 0\n         line 127: 14\n         line 128: 28\n         line 130: 38\n         line 131: 43\n@@ -399,45 +399,45 @@\n \n   public byte[] getCentralDirectoryData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: invokevirtual #17                 // Method getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-         4: invokevirtual #18                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n+         1: invokevirtual #52                 // Method getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         4: invokevirtual #56                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n          7: newarray       byte\n          9: astore_1\n         10: aload_0\n         11: aload_1\n-        12: invokespecial #15                 // Method addSizes:([B)I\n+        12: invokespecial #44                 // Method addSizes:([B)I\n         15: istore_2\n         16: aload_0\n-        17: getfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        17: getfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         20: ifnull        41\n         23: aload_0\n-        24: getfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        27: invokevirtual #19                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+        24: getfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        27: invokevirtual #60                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n         30: iconst_0\n         31: aload_1\n         32: iload_2\n         33: bipush        8\n-        35: invokestatic  #20                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        35: invokestatic  #66                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         38: iinc          2, 8\n         41: aload_0\n-        42: getfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        42: getfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         45: ifnull        65\n         48: aload_0\n-        49: getfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        52: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+        49: getfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        52: invokevirtual #72                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n         55: iconst_0\n         56: aload_1\n         57: iload_2\n         58: iconst_4\n-        59: invokestatic  #20                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        59: invokestatic  #66                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         62: iinc          2, 4\n         65: aload_1\n         66: areturn\n       LineNumberTable:\n         line 139: 0\n         line 140: 10\n         line 141: 16\n@@ -460,61 +460,61 @@\n       stack=5, locals=5, args_size=4\n          0: iload_3\n          1: ifne          5\n          4: return\n          5: iload_3\n          6: bipush        16\n          8: if_icmpge     21\n-        11: new           #22                 // class java/util/zip/ZipException\n+        11: new           #75                 // class java/util/zip/ZipException\n         14: dup\n-        15: ldc           #13                 // String Zip64 extended information must contain both size values in the local file header.\n-        17: invokespecial #23                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        15: ldc           #39                 // String Zip64 extended information must contain both size values in the local file header.\n+        17: invokespecial #77                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         20: athrow\n         21: aload_0\n-        22: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        22: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         25: dup\n         26: aload_1\n         27: iload_2\n-        28: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        31: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        28: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        31: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         34: iinc          2, 8\n         37: aload_0\n-        38: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        38: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         41: dup\n         42: aload_1\n         43: iload_2\n-        44: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        47: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        44: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        47: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         50: iinc          2, 8\n         53: iload_3\n         54: bipush        16\n         56: isub\n         57: istore        4\n         59: iload         4\n         61: bipush        8\n         63: if_icmplt     85\n         66: aload_0\n-        67: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        67: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         70: dup\n         71: aload_1\n         72: iload_2\n-        73: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        76: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        73: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        76: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         79: iinc          2, 8\n         82: iinc          4, -8\n         85: iload         4\n         87: iconst_4\n         88: if_icmplt     110\n         91: aload_0\n-        92: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        92: new           #73                 // class org/apache/commons/compress/archivers/zip/ZipLong\n         95: dup\n         96: aload_1\n         97: iload_2\n-        98: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-       101: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        98: invokespecial #81                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       101: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n        104: iinc          2, 4\n        107: iinc          4, -4\n        110: return\n       LineNumberTable:\n         line 155: 0\n         line 160: 4\n         line 162: 5\n@@ -547,74 +547,74 @@\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=4, args_size=4\n          0: aload_0\n          1: iload_3\n          2: newarray       byte\n-         4: putfield      #28                 // Field rawCentralDirectoryData:[B\n+         4: putfield      #82                 // Field rawCentralDirectoryData:[B\n          7: aload_1\n          8: iload_2\n          9: aload_0\n-        10: getfield      #28                 // Field rawCentralDirectoryData:[B\n+        10: getfield      #82                 // Field rawCentralDirectoryData:[B\n         13: iconst_0\n         14: iload_3\n-        15: invokestatic  #20                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        15: invokestatic  #66                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         18: iload_3\n         19: bipush        28\n         21: if_icmplt     34\n         24: aload_0\n         25: aload_1\n         26: iload_2\n         27: iload_3\n-        28: invokevirtual #29                 // Method parseFromLocalFileData:([BII)V\n+        28: invokevirtual #85                 // Method parseFromLocalFileData:([BII)V\n         31: goto          113\n         34: iload_3\n         35: bipush        24\n         37: if_icmpne     88\n         40: aload_0\n-        41: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        41: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         44: dup\n         45: aload_1\n         46: iload_2\n-        47: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        50: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        47: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        50: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         53: iinc          2, 8\n         56: aload_0\n-        57: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        57: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         60: dup\n         61: aload_1\n         62: iload_2\n-        63: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        66: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        63: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        66: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         69: iinc          2, 8\n         72: aload_0\n-        73: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        73: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         76: dup\n         77: aload_1\n         78: iload_2\n-        79: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        82: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        79: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        82: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         85: goto          113\n         88: iload_3\n         89: bipush        8\n         91: irem\n         92: iconst_4\n         93: if_icmpne     113\n         96: aload_0\n-        97: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        97: new           #73                 // class org/apache/commons/compress/archivers/zip/ZipLong\n        100: dup\n        101: aload_1\n        102: iload_2\n        103: iload_3\n        104: iadd\n        105: iconst_4\n        106: isub\n-       107: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-       110: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       107: invokespecial #81                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       110: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n        113: return\n       LineNumberTable:\n         line 187: 0\n         line 188: 7\n         line 196: 18\n         line 197: 24\n         line 198: 34\n@@ -635,15 +635,15 @@\n \n   public void reparseCentralDirectoryData(boolean, boolean, boolean, boolean) throws java.util.zip.ZipException;\n     descriptor: (ZZZZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=7, args_size=5\n          0: aload_0\n-         1: getfield      #28                 // Field rawCentralDirectoryData:[B\n+         1: getfield      #82                 // Field rawCentralDirectoryData:[B\n          4: ifnull        182\n          7: iload_1\n          8: ifeq          16\n         11: bipush        8\n         13: goto          17\n         16: iconst_0\n         17: iload_2\n@@ -662,72 +662,72 @@\n         41: ifeq          48\n         44: iconst_4\n         45: goto          49\n         48: iconst_0\n         49: iadd\n         50: istore        5\n         52: aload_0\n-        53: getfield      #28                 // Field rawCentralDirectoryData:[B\n+        53: getfield      #82                 // Field rawCentralDirectoryData:[B\n         56: arraylength\n         57: iload         5\n         59: if_icmpge     82\n-        62: new           #22                 // class java/util/zip/ZipException\n+        62: new           #75                 // class java/util/zip/ZipException\n         65: dup\n         66: iload         5\n         68: aload_0\n-        69: getfield      #28                 // Field rawCentralDirectoryData:[B\n+        69: getfield      #82                 // Field rawCentralDirectoryData:[B\n         72: arraylength\n-        73: invokedynamic #30,  0             // InvokeDynamic #0:makeConcatWithConstants:(II)Ljava/lang/String;\n-        78: invokespecial #23                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        73: invokedynamic #89,  0             // InvokeDynamic #0:makeConcatWithConstants:(II)Ljava/lang/String;\n+        78: invokespecial #77                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         81: athrow\n         82: iconst_0\n         83: istore        6\n         85: iload_1\n         86: ifeq          109\n         89: aload_0\n-        90: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        90: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         93: dup\n         94: aload_0\n-        95: getfield      #28                 // Field rawCentralDirectoryData:[B\n+        95: getfield      #82                 // Field rawCentralDirectoryData:[B\n         98: iload         6\n-       100: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       103: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       100: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       103: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n        106: iinc          6, 8\n        109: iload_2\n        110: ifeq          133\n        113: aload_0\n-       114: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       114: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        117: dup\n        118: aload_0\n-       119: getfield      #28                 // Field rawCentralDirectoryData:[B\n+       119: getfield      #82                 // Field rawCentralDirectoryData:[B\n        122: iload         6\n-       124: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       127: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       124: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       127: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n        130: iinc          6, 8\n        133: iload_3\n        134: ifeq          157\n        137: aload_0\n-       138: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       138: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        141: dup\n        142: aload_0\n-       143: getfield      #28                 // Field rawCentralDirectoryData:[B\n+       143: getfield      #82                 // Field rawCentralDirectoryData:[B\n        146: iload         6\n-       148: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       151: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       148: invokespecial #78                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       151: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n        154: iinc          6, 8\n        157: iload         4\n        159: ifeq          182\n        162: aload_0\n-       163: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+       163: new           #73                 // class org/apache/commons/compress/archivers/zip/ZipLong\n        166: dup\n        167: aload_0\n-       168: getfield      #28                 // Field rawCentralDirectoryData:[B\n+       168: getfield      #82                 // Field rawCentralDirectoryData:[B\n        171: iload         6\n-       173: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-       176: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       173: invokespecial #81                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       176: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n        179: iinc          6, 4\n        182: return\n       LineNumberTable:\n         line 229: 0\n         line 230: 7\n         line 231: 17\n         line 232: 28\n@@ -785,134 +785,134 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getSize();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         1: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          4: areturn\n       LineNumberTable:\n         line 269: 0\n \n   public void setSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         2: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          5: return\n       LineNumberTable:\n         line 277: 0\n         line 278: 5\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getCompressedSize();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         1: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          4: areturn\n       LineNumberTable:\n         line 285: 0\n \n   public void setCompressedSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         2: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          5: return\n       LineNumberTable:\n         line 293: 0\n         line 294: 5\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getRelativeHeaderOffset();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         1: getfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          4: areturn\n       LineNumberTable:\n         line 301: 0\n \n   public void setRelativeHeaderOffset(org.apache.commons.compress.archivers.zip.ZipEightByteInteger);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         2: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          5: return\n       LineNumberTable:\n         line 309: 0\n         line 310: 5\n \n   public org.apache.commons.compress.archivers.zip.ZipLong getDiskStartNumber();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+         1: getfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n          4: areturn\n       LineNumberTable:\n         line 317: 0\n \n   public void setDiskStartNumber(org.apache.commons.compress.archivers.zip.ZipLong);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+         2: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n          5: return\n       LineNumberTable:\n         line 325: 0\n         line 326: 5\n \n   private int addSizes(byte[]);\n     descriptor: ([B)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=2\n          0: iconst_0\n          1: istore_2\n          2: aload_0\n-         3: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         3: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          6: ifnull        27\n          9: aload_0\n-        10: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        13: invokevirtual #19                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+        10: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        13: invokevirtual #60                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n         16: iconst_0\n         17: aload_1\n         18: iconst_0\n         19: bipush        8\n-        21: invokestatic  #20                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        21: invokestatic  #66                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         24: iinc          2, 8\n         27: aload_0\n-        28: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        28: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         31: ifnull        52\n         34: aload_0\n-        35: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        38: invokevirtual #19                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+        35: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        38: invokevirtual #60                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n         41: iconst_0\n         42: aload_1\n         43: iload_2\n         44: bipush        8\n-        46: invokestatic  #20                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        46: invokestatic  #66                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         49: iinc          2, 8\n         52: iload_2\n         53: ireturn\n       LineNumberTable:\n         line 329: 0\n         line 330: 2\n         line 331: 9\n@@ -928,27 +928,27 @@\n         frame_type = 24 /* same */\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=3, locals=0, args_size=0\n-         0: new           #9                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #32                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: iconst_1\n-         5: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-         8: putstatic     #8                  // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         5: invokespecial #34                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+         8: putstatic     #28                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n         11: iconst_0\n         12: newarray       byte\n-        14: putstatic     #16                 // Field EMPTY:[B\n+        14: putstatic     #48                 // Field EMPTY:[B\n         17: return\n       LineNumberTable:\n         line 45: 0\n         line 50: 11\n }\n SourceFile: \"Zip64ExtendedInformationExtraField.java\"\n-InnerClasses:\n-  public static final #135= #134 of #138; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #113 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #127 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #114 Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n+      #133 Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n+InnerClasses:\n+  public static final #140= #136 of #138; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
