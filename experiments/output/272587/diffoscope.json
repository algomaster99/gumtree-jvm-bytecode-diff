{"diffoscope-json-version": 1, "source1": "first/AvoidDoubleBraceInitializationCheck.class", "source2": "second/AvoidDoubleBraceInitializationCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,23 +23,22 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 6 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (ast.getParent().getType() == 136 && hasOnlyInitialization(ast)) {\n-            this.log(ast, \"avoid.double.brace.init\", new Object[0]);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (detailAST.getParent().getType() == 136 && hasOnlyInitialization(detailAST)) {\n+            this.log(detailAST, \"avoid.double.brace.init\", new Object[0]);\n         }\n     }\n     \n-    private static boolean hasOnlyInitialization(final DetailAST objBlock) {\n-        final boolean hasInitBlock = objBlock.findFirstToken(11) != null;\n-        return hasInitBlock && TokenUtil.findFirstTokenByPredicate(objBlock, (Predicate)AvoidDoubleBraceInitializationCheck.HAS_MEMBERS).isEmpty();\n+    private static boolean hasOnlyInitialization(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(11) != null && TokenUtil.findFirstTokenByPredicate(detailAST, (Predicate)AvoidDoubleBraceInitializationCheck.HAS_MEMBERS).isEmpty();\n     }\n     \n     static {\n         IGNORED_TYPES = TokenUtil.asBitSet(new int[] { 11, 45, 72, 73 });\n-        HAS_MEMBERS = (token -> !AvoidDoubleBraceInitializationCheck.IGNORED_TYPES.get(token.getType()));\n+        HAS_MEMBERS = (detailAST -> !AvoidDoubleBraceInitializationCheck.IGNORED_TYPES.get(detailAST.getType()));\n     }\n }\n"}]}
