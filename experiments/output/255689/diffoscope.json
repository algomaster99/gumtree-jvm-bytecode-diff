{"diffoscope-json-version": 1, "source1": "first/GeneralPurposeBit.class", "source2": "second/GeneralPurposeBit.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,91 +16,91 @@\n     private int slidingDictionarySize;\n     private int numberOfShannonFanoTrees;\n     \n     public boolean usesUTF8ForNames() {\n         return this.languageEncodingFlag;\n     }\n     \n-    public void useUTF8ForNames(final boolean b) {\n-        this.languageEncodingFlag = b;\n+    public void useUTF8ForNames(final boolean languageEncodingFlag) {\n+        this.languageEncodingFlag = languageEncodingFlag;\n     }\n     \n     public boolean usesDataDescriptor() {\n         return this.dataDescriptorFlag;\n     }\n     \n-    public void useDataDescriptor(final boolean b) {\n-        this.dataDescriptorFlag = b;\n+    public void useDataDescriptor(final boolean dataDescriptorFlag) {\n+        this.dataDescriptorFlag = dataDescriptorFlag;\n     }\n     \n     public boolean usesEncryption() {\n         return this.encryptionFlag;\n     }\n     \n-    public void useEncryption(final boolean b) {\n-        this.encryptionFlag = b;\n+    public void useEncryption(final boolean encryptionFlag) {\n+        this.encryptionFlag = encryptionFlag;\n     }\n     \n     public boolean usesStrongEncryption() {\n         return this.encryptionFlag && this.strongEncryptionFlag;\n     }\n     \n-    public void useStrongEncryption(final boolean b) {\n-        this.strongEncryptionFlag = b;\n-        if (b) {\n+    public void useStrongEncryption(final boolean strongEncryptionFlag) {\n+        this.strongEncryptionFlag = strongEncryptionFlag;\n+        if (strongEncryptionFlag) {\n             this.useEncryption(true);\n         }\n     }\n     \n     int getSlidingDictionarySize() {\n         return this.slidingDictionarySize;\n     }\n     \n     int getNumberOfShannonFanoTrees() {\n         return this.numberOfShannonFanoTrees;\n     }\n     \n     public byte[] encode() {\n-        final byte[] result = new byte[2];\n-        this.encode(result, 0);\n-        return result;\n-    }\n-    \n-    public void encode(final byte[] buf, final int offset) {\n-        ZipShort.putShort((this.dataDescriptorFlag ? 8 : 0) | (this.languageEncodingFlag ? 2048 : 0) | (this.encryptionFlag ? 1 : 0) | (this.strongEncryptionFlag ? 64 : 0), buf, offset);\n-    }\n-    \n-    public static GeneralPurposeBit parse(final byte[] data, final int offset) {\n-        final int generalPurposeFlag = ZipShort.getValue(data, offset);\n-        final GeneralPurposeBit b = new GeneralPurposeBit();\n-        b.useDataDescriptor((generalPurposeFlag & 0x8) != 0x0);\n-        b.useUTF8ForNames((generalPurposeFlag & 0x800) != 0x0);\n-        b.useStrongEncryption((generalPurposeFlag & 0x40) != 0x0);\n-        b.useEncryption((generalPurposeFlag & 0x1) != 0x0);\n-        b.slidingDictionarySize = (((generalPurposeFlag & 0x2) != 0x0) ? 8192 : 4096);\n-        b.numberOfShannonFanoTrees = (((generalPurposeFlag & 0x4) != 0x0) ? 3 : 2);\n-        return b;\n+        final byte[] array = new byte[2];\n+        this.encode(array, 0);\n+        return array;\n+    }\n+    \n+    public void encode(final byte[] array, final int n) {\n+        ZipShort.putShort((this.dataDescriptorFlag ? 8 : 0) | (this.languageEncodingFlag ? 2048 : 0) | (this.encryptionFlag ? 1 : 0) | (this.strongEncryptionFlag ? 64 : 0), array, n);\n+    }\n+    \n+    public static GeneralPurposeBit parse(final byte[] array, final int n) {\n+        final int value = ZipShort.getValue(array, n);\n+        final GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();\n+        generalPurposeBit.useDataDescriptor((value & 0x8) != 0x0);\n+        generalPurposeBit.useUTF8ForNames((value & 0x800) != 0x0);\n+        generalPurposeBit.useStrongEncryption((value & 0x40) != 0x0);\n+        generalPurposeBit.useEncryption((value & 0x1) != 0x0);\n+        generalPurposeBit.slidingDictionarySize = (((value & 0x2) != 0x0) ? 8192 : 4096);\n+        generalPurposeBit.numberOfShannonFanoTrees = (((value & 0x4) != 0x0) ? 3 : 2);\n+        return generalPurposeBit;\n     }\n     \n     @Override\n     public int hashCode() {\n         return 3 * (7 * (13 * (17 * (this.encryptionFlag ? 1 : 0) + (this.strongEncryptionFlag ? 1 : 0)) + (this.languageEncodingFlag ? 1 : 0)) + (this.dataDescriptorFlag ? 1 : 0));\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n         if (!(o instanceof GeneralPurposeBit)) {\n             return false;\n         }\n-        final GeneralPurposeBit g = (GeneralPurposeBit)o;\n-        return g.encryptionFlag == this.encryptionFlag && g.strongEncryptionFlag == this.strongEncryptionFlag && g.languageEncodingFlag == this.languageEncodingFlag && g.dataDescriptorFlag == this.dataDescriptorFlag;\n+        final GeneralPurposeBit generalPurposeBit = (GeneralPurposeBit)o;\n+        return generalPurposeBit.encryptionFlag == this.encryptionFlag && generalPurposeBit.strongEncryptionFlag == this.strongEncryptionFlag && generalPurposeBit.languageEncodingFlag == this.languageEncodingFlag && generalPurposeBit.dataDescriptorFlag == this.dataDescriptorFlag;\n     }\n     \n     public Object clone() {\n         try {\n             return super.clone();\n         }\n-        catch (final CloneNotSupportedException ex) {\n-            throw new RuntimeException(\"GeneralPurposeBit is not Cloneable?\", ex);\n+        catch (final CloneNotSupportedException cause) {\n+            throw new RuntimeException(\"GeneralPurposeBit is not Cloneable?\", cause);\n         }\n     }\n }\n"}]}
