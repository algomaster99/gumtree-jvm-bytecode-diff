{"diffoscope-json-version": 1, "source1": "first/FileHandler.class", "source2": "second/FileHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,14 +28,18 @@\n     private static final String FILE_SCHEME = \"file:\";\n     private static final String FILE_SCHEME_SLASH = \"file://\";\n     private static final SynchronizerSupport DUMMY_SYNC_SUPPORT;\n     private final FileBased content;\n     private final AtomicReference<FileLocator> fileLocator;\n     private final List<FileHandlerListener> listeners;\n     \n+    static {\n+        DUMMY_SYNC_SUPPORT = (SynchronizerSupport)new FileHandler.FileHandler$1();\n+    }\n+    \n     public FileHandler() {\n         this(null);\n     }\n     \n     public FileHandler(final FileBased obj) {\n         this(obj, emptyFileLocator());\n     }\n@@ -78,15 +82,15 @@\n             return FileLocatorUtils.getFileName(locator.getSourceURL());\n         }\n         return null;\n     }\n     \n     public void setFileName(final String fileName) {\n         final String name = normalizeFileURL(fileName);\n-        new FileHandler.FileHandler$2(this, name).update();\n+        new FileHandler.FileHandler$2(this, this, name).update();\n     }\n     \n     public String getBasePath() {\n         final FileLocator locator = this.getFileLocator();\n         if (locator.getBasePath() != null) {\n             return locator.getBasePath();\n         }\n@@ -94,25 +98,25 @@\n             return FileLocatorUtils.getBasePath(locator.getSourceURL());\n         }\n         return null;\n     }\n     \n     public void setBasePath(final String basePath) {\n         final String path = normalizeFileURL(basePath);\n-        new FileHandler.FileHandler$3(this, path).update();\n+        new FileHandler.FileHandler$3(this, this, path).update();\n     }\n     \n     public File getFile() {\n         return createFile(this.getFileLocator());\n     }\n     \n     public void setFile(final File file) {\n         final String fileName = file.getName();\n         final String basePath = (file.getParentFile() != null) ? file.getParentFile().getAbsolutePath() : null;\n-        new FileHandler.FileHandler$4(this, fileName, basePath).update();\n+        new FileHandler.FileHandler$4(this, this, fileName, basePath).update();\n     }\n     \n     public String getPath() {\n         final FileLocator locator = this.getFileLocator();\n         final File file = createFile(locator);\n         return FileLocatorUtils.obtainFileSystem(locator).getPath(file, locator.getSourceURL(), locator.getBasePath(), locator.getFileName());\n     }\n@@ -123,15 +127,15 @@\n     \n     public URL getURL() {\n         final FileLocator locator = this.getFileLocator();\n         return (locator.getSourceURL() != null) ? locator.getSourceURL() : FileLocatorUtils.locate(locator);\n     }\n     \n     public void setURL(final URL url) {\n-        new FileHandler.FileHandler$5(this, url).update();\n+        new FileHandler.FileHandler$5(this, this, url).update();\n     }\n     \n     public FileLocator getFileLocator() {\n         return this.fileLocator.get();\n     }\n     \n     public void setFileLocator(final FileLocator locator) {\n@@ -143,43 +147,43 @@\n     }\n     \n     public boolean isLocationDefined() {\n         return FileLocatorUtils.isLocationDefined(this.getFileLocator());\n     }\n     \n     public void clearLocation() {\n-        new FileHandler.FileHandler$6(this).update();\n+        new FileHandler.FileHandler$6(this, this).update();\n     }\n     \n     public String getEncoding() {\n         return this.getFileLocator().getEncoding();\n     }\n     \n     public void setEncoding(final String encoding) {\n-        new FileHandler.FileHandler$7(this, encoding).update();\n+        new FileHandler.FileHandler$7(this, this, encoding).update();\n     }\n     \n     public FileSystem getFileSystem() {\n         return FileLocatorUtils.obtainFileSystem(this.getFileLocator());\n     }\n     \n     public void setFileSystem(final FileSystem fileSystem) {\n-        new FileHandler.FileHandler$8(this, fileSystem).update();\n+        new FileHandler.FileHandler$8(this, this, fileSystem).update();\n     }\n     \n     public void resetFileSystem() {\n         this.setFileSystem(null);\n     }\n     \n     public FileLocationStrategy getLocationStrategy() {\n         return FileLocatorUtils.obtainLocationStrategy(this.getFileLocator());\n     }\n     \n     public void setLocationStrategy(final FileLocationStrategy strategy) {\n-        new FileHandler.FileHandler$9(this, strategy).update();\n+        new FileHandler.FileHandler$9(this, this, strategy).update();\n     }\n     \n     public boolean locate() {\n         boolean done;\n         boolean result;\n         do {\n             final FileLocator locator = this.getFileLocator();\n@@ -205,15 +209,15 @@\n     }\n     \n     public void load(final File file) throws ConfigurationException {\n         URL url;\n         try {\n             url = FileLocatorUtils.toURL(file);\n         }\n-        catch (final MalformedURLException e1) {\n+        catch (final MalformedURLException ex) {\n             throw new ConfigurationException(\"Cannot create URL from file \" + file);\n         }\n         this.load(url);\n     }\n     \n     public void load(final URL url) throws ConfigurationException {\n         this.load(url, this.checkContentAndGetLocator());\n@@ -307,14 +311,15 @@\n         }\n         catch (final Exception e2) {\n             throw new ConfigurationException(\"Unable to load the configuration from the URL \" + url, (Throwable)e2);\n         }\n         finally {\n             closeSilent(in);\n         }\n+        closeSilent(in);\n     }\n     \n     private void load(final String fileName, final FileLocator locator) throws ConfigurationException {\n         final FileLocator locFileName = this.createLocatorWithFileName(fileName, locator);\n         final URL url = FileLocatorUtils.locateOrThrow(locFileName);\n         this.load(url, locator);\n     }\n@@ -335,14 +340,15 @@\n             else {\n                 this.loadFromTransformedStream(in, encoding);\n             }\n         }\n         finally {\n             syncSupport.unlock(LockMode.WRITE);\n         }\n+        syncSupport.unlock(LockMode.WRITE);\n     }\n     \n     private void loadFromStreamDirectly(final InputStream in) throws ConfigurationException {\n         try {\n             ((InputStreamSupport)this.getContent()).read(in);\n         }\n         catch (final IOException e) {\n@@ -373,14 +379,15 @@\n         }\n         catch (final IOException ioex) {\n             throw new ConfigurationException((Throwable)ioex);\n         }\n         finally {\n             this.fireLoadedEvent();\n         }\n+        this.fireLoadedEvent();\n     }\n     \n     private void save(final FileLocator locator) throws ConfigurationException {\n         if (!FileLocatorUtils.isLocationDefined(locator)) {\n             throw new ConfigurationException(\"No file location has been set!\");\n         }\n         if (locator.getSourceURL() != null) {\n@@ -418,28 +425,30 @@\n                     throw new ConfigurationException((Throwable)e);\n                 }\n             }\n         }\n         finally {\n             closeSilent(out);\n         }\n+        closeSilent(out);\n     }\n     \n     private void save(final File file, final FileLocator locator) throws ConfigurationException {\n         OutputStream out = null;\n         try {\n             out = FileLocatorUtils.obtainFileSystem(locator).getOutputStream(file);\n             this.saveToStream(out, locator.getEncoding(), file.toURI().toURL());\n         }\n         catch (final MalformedURLException muex) {\n             throw new ConfigurationException((Throwable)muex);\n         }\n         finally {\n             closeSilent(out);\n         }\n+        closeSilent(out);\n     }\n     \n     private void save(final OutputStream out, final FileLocator locator) throws ConfigurationException {\n         this.save(out, locator.getEncoding());\n     }\n     \n     private void saveToStream(final OutputStream out, final String encoding, final URL url) throws ConfigurationException {\n@@ -461,27 +470,29 @@\n                 writer = new OutputStreamWriter(out);\n             }\n             this.saveToWriter(writer);\n         }\n         finally {\n             syncSupport.unlock(LockMode.WRITE);\n         }\n+        syncSupport.unlock(LockMode.WRITE);\n     }\n     \n     private void saveToWriter(final Writer out) throws ConfigurationException {\n         this.fireSavingEvent();\n         try {\n             this.getContent().write(out);\n         }\n         catch (final IOException ioex) {\n             throw new ConfigurationException((Throwable)ioex);\n         }\n         finally {\n             this.fireSavedEvent();\n         }\n+        this.fireSavedEvent();\n     }\n     \n     private FileLocator createLocatorWithFileName(final String fileName, final FileLocator locator) {\n         return FileLocatorUtils.fileLocator(locator).sourceURL((URL)null).fileName(fileName).create();\n     }\n     \n     private void checkContent() throws ConfigurationException {\n@@ -559,12 +570,8 @@\n     \n     private static FileHandler checkSourceHandler(final FileHandler c) {\n         if (c == null) {\n             throw new IllegalArgumentException(\"FileHandler to assign must not be null!\");\n         }\n         return c;\n     }\n-    \n-    static {\n-        DUMMY_SYNC_SUPPORT = (SynchronizerSupport)new FileHandler.FileHandler$1();\n-    }\n }\n"}]}
