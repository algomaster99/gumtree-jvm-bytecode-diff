{"diffoscope-json-version": 1, "source1": "first/JSONObject.class", "source2": "second/JSONObject.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,1042 +1,1006 @@\n-  SHA-256 checksum 502dcf4ddd2d93e4ec6565cc58796c1472b8087b0ac0e9d3c20a5f39fd610b94\n+  SHA-256 checksum b8d003e72cd1c616ad9de9da11c4a1ced7caa9ec6b20a37b2ea8fe74dc5e171a\n   Compiled from \"JSONObject.java\"\n public class org.json.JSONObject\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #60                         // org/json/JSONObject\n   super_class: #201                       // java/lang/Object\n   interfaces: 0, fields: 3, methods: 109, attributes: 2\n Constant pool:\n-     #1 = Methodref          #201.#554    // java/lang/Object.\"<init>\":()V\n-     #2 = Class              #555         // java/util/HashMap\n-     #3 = Methodref          #2.#554      // java/util/HashMap.\"<init>\":()V\n-     #4 = Fieldref           #60.#556     // org/json/JSONObject.map:Ljava/util/Map;\n-     #5 = Methodref          #60.#557     // org/json/JSONObject.\"<init>\":(I)V\n-     #6 = Methodref          #60.#558     // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-     #7 = Methodref          #60.#559     // org/json/JSONObject.putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-     #8 = Class              #560         // java/lang/Exception\n-     #9 = Methodref          #60.#554     // org/json/JSONObject.\"<init>\":()V\n-    #10 = Methodref          #47.#561     // org/json/JSONTokener.nextClean:()C\n-    #11 = String             #562         // A JSONObject text must begin with \\'{\\'\n-    #12 = Methodref          #47.#563     // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-    #13 = String             #564         // A JSONObject text must end with \\'}\\'\n-    #14 = Methodref          #47.#565     // org/json/JSONTokener.back:()V\n-    #15 = Methodref          #47.#566     // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n-    #16 = Methodref          #201.#567    // java/lang/Object.toString:()Ljava/lang/String;\n-    #17 = String             #568         // Expected a \\':\\' after a key\n-    #18 = Class              #569         // java/lang/StringBuilder\n-    #19 = Methodref          #18.#554     // java/lang/StringBuilder.\"<init>\":()V\n-    #20 = String             #570         // Duplicate key \\\"\n-    #21 = Methodref          #18.#571     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #22 = String             #572         // \\\"\n-    #23 = Methodref          #18.#567     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #24 = Methodref          #60.#573     // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-    #25 = String             #574         // Expected a \\',\\' or \\'}\\'\n-    #26 = InterfaceMethodref #304.#575    // java/util/Map.size:()I\n-    #27 = Methodref          #2.#557      // java/util/HashMap.\"<init>\":(I)V\n-    #28 = InterfaceMethodref #304.#576    // java/util/Map.entrySet:()Ljava/util/Set;\n-    #29 = InterfaceMethodref #577.#578    // java/util/Set.iterator:()Ljava/util/Iterator;\n-    #30 = InterfaceMethodref #579.#580    // java/util/Iterator.hasNext:()Z\n-    #31 = InterfaceMethodref #579.#581    // java/util/Iterator.next:()Ljava/lang/Object;\n-    #32 = Class              #582         // java/util/Map$Entry\n-    #33 = InterfaceMethodref #32.#583     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-    #34 = Class              #584         // java/lang/NullPointerException\n-    #35 = String             #585         // Null key.\n-    #36 = Methodref          #34.#586     // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n-    #37 = InterfaceMethodref #32.#587     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-    #38 = Methodref          #56.#588     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n-    #39 = Methodref          #60.#589     // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #40 = InterfaceMethodref #304.#590    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-    #41 = Methodref          #60.#591     // org/json/JSONObject.populateMap:(Ljava/lang/Object;)V\n-    #42 = Methodref          #60.#592     // org/json/JSONObject.populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n-    #43 = Methodref          #201.#593    // java/lang/Object.getClass:()Ljava/lang/Class;\n-    #44 = Methodref          #594.#595    // java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-    #45 = Methodref          #596.#597    // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #46 = Methodref          #60.#598     // org/json/JSONObject.putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-    #47 = Class              #599         // org/json/JSONTokener\n-    #48 = Methodref          #47.#586     // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n-    #49 = Methodref          #60.#600     // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n-    #50 = Methodref          #601.#602    // java/lang/Thread.currentThread:()Ljava/lang/Thread;\n-    #51 = Methodref          #601.#603    // java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;\n-    #52 = Methodref          #604.#605    // java/util/ResourceBundle.getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-    #53 = Methodref          #604.#606    // java/util/ResourceBundle.getKeys:()Ljava/util/Enumeration;\n-    #54 = InterfaceMethodref #607.#608    // java/util/Enumeration.hasMoreElements:()Z\n-    #55 = InterfaceMethodref #607.#609    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-    #56 = Class              #610         // java/lang/String\n-    #57 = String             #611         // \\\\.\n-    #58 = Methodref          #56.#612     // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-    #59 = Methodref          #60.#613     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n-    #60 = Class              #614         // org/json/JSONObject\n-    #61 = Methodref          #604.#615    // java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;\n-    #62 = Methodref          #60.#616     // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n-    #63 = Class              #617         // org/json/JSONArray\n-    #64 = Methodref          #63.#554     // org/json/JSONArray.\"<init>\":()V\n-    #65 = Methodref          #63.#618     // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-    #66 = String             #619         // JSONArray\n-    #67 = Methodref          #60.#620     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-    #68 = Methodref          #136.#621    // java/lang/Double.isInfinite:(D)Z\n-    #69 = Methodref          #136.#622    // java/lang/Double.isNaN:(D)Z\n-    #70 = String             #623         // null\n-    #71 = Methodref          #136.#624    // java/lang/Double.toString:(D)Ljava/lang/String;\n-    #72 = Methodref          #56.#625     // java/lang/String.indexOf:(I)I\n-    #73 = String             #626         // 0\n-    #74 = Methodref          #56.#627     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-    #75 = Methodref          #56.#628     // java/lang/String.length:()I\n-    #76 = Methodref          #56.#629     // java/lang/String.substring:(II)Ljava/lang/String;\n-    #77 = String             #630         // .\n-    #78 = Class              #631         // org/json/JSONException\n-    #79 = Methodref          #78.#586     // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-    #80 = String             #632         // JSONObject[\n-    #81 = Methodref          #60.#633     // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n-    #82 = String             #634         // ] not found.\n-    #83 = Methodref          #60.#635     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-    #84 = String             #636         // enum of type\n-    #85 = Methodref          #594.#637    // java/lang/Class.getSimpleName:()Ljava/lang/String;\n-    #86 = Methodref          #60.#638     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-    #87 = Methodref          #60.#639     // org/json/JSONObject.get:(Ljava/lang/String;)Ljava/lang/Object;\n-    #88 = Fieldref           #157.#640    // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-    #89 = Methodref          #201.#641    // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-    #90 = String             #642         // false\n-    #91 = Methodref          #56.#643     // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-    #92 = Fieldref           #157.#644    // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-    #93 = String             #645         // true\n-    #94 = String             #646         // Boolean\n-    #95 = Methodref          #60.#647     // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-    #96 = String             #648         // BigInteger\n-    #97 = Methodref          #60.#649     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-    #98 = String             #650         // BigDecimal\n-    #99 = Class              #651         // java/lang/Number\n-   #100 = Methodref          #99.#652     // java/lang/Number.doubleValue:()D\n-   #101 = Methodref          #136.#653    // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-   #102 = String             #654         // double\n-   #103 = Methodref          #99.#655     // java/lang/Number.floatValue:()F\n-   #104 = Methodref          #133.#656    // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n-   #105 = String             #657         // float\n-   #106 = Methodref          #60.#658     // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #107 = String             #659         // number\n-   #108 = Methodref          #99.#660     // java/lang/Number.intValue:()I\n-   #109 = Methodref          #125.#661    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #110 = String             #662         // int\n-   #111 = String             #663         // JSONObject\n-   #112 = Methodref          #99.#664     // java/lang/Number.longValue:()J\n-   #113 = Methodref          #127.#665    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #114 = String             #666         // long\n-   #115 = Methodref          #60.#667     // org/json/JSONObject.isEmpty:()Z\n-   #116 = Methodref          #60.#668     // org/json/JSONObject.keySet:()Ljava/util/Set;\n-   #117 = Methodref          #60.#628     // org/json/JSONObject.length:()I\n-   #118 = InterfaceMethodref #577.#669    // java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #119 = Class              #670         // \"[Ljava/lang/String;\"\n-   #120 = Methodref          #594.#671    // java/lang/Class.getFields:()[Ljava/lang/reflect/Field;\n-   #121 = Methodref          #596.#672    // java/lang/reflect/Field.getName:()Ljava/lang/String;\n-   #122 = String             #673         // string\n-   #123 = InterfaceMethodref #304.#674    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #124 = Methodref          #60.#675     // org/json/JSONObject.put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #125 = Class              #676         // java/lang/Integer\n-   #126 = Methodref          #125.#660    // java/lang/Integer.intValue:()I\n-   #127 = Class              #677         // java/lang/Long\n-   #128 = Methodref          #127.#664    // java/lang/Long.longValue:()J\n-   #129 = Methodref          #60.#678     // org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #130 = Class              #679         // java/math/BigInteger\n-   #131 = Fieldref           #130.#680    // java/math/BigInteger.ONE:Ljava/math/BigInteger;\n-   #132 = Methodref          #130.#681    // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #133 = Class              #682         // java/lang/Float\n-   #134 = Methodref          #133.#655    // java/lang/Float.floatValue:()F\n-   #135 = Methodref          #60.#683     // org/json/JSONObject.put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #136 = Class              #684         // java/lang/Double\n-   #137 = Methodref          #136.#652    // java/lang/Double.doubleValue:()D\n-   #138 = Methodref          #60.#685     // org/json/JSONObject.put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #139 = Class              #686         // java/math/BigDecimal\n-   #140 = Fieldref           #139.#687    // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n-   #141 = Methodref          #139.#688    // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #142 = String             #689         // Unable to increment [\n-   #143 = String             #690         // ].\n-   #144 = Fieldref           #60.#691     // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #145 = InterfaceMethodref #304.#668    // java/util/Map.keySet:()Ljava/util/Set;\n-   #146 = InterfaceMethodref #304.#692    // java/util/Map.clear:()V\n-   #147 = InterfaceMethodref #304.#667    // java/util/Map.isEmpty:()Z\n-   #148 = Methodref          #63.#693     // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n-   #149 = String             #694         // Null pointer\n-   #150 = InterfaceMethodref #304.#597    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #151 = Methodref          #60.#695     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #152 = Methodref          #594.#696    // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n-   #153 = Class              #697         // java/lang/Enum\n-   #154 = Methodref          #153.#698    // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #155 = Class              #699         // java/lang/IllegalArgumentException\n-   #156 = Methodref          #60.#700     // org/json/JSONObject.optBoolean:(Ljava/lang/String;Z)Z\n-   #157 = Class              #701         // java/lang/Boolean\n-   #158 = Methodref          #157.#702    // java/lang/Boolean.booleanValue:()Z\n-   #159 = Methodref          #60.#703     // org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z\n-   #160 = Methodref          #60.#704     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #161 = Methodref          #139.#705    // java/math/BigDecimal.\"<init>\":(Ljava/math/BigInteger;)V\n-   #162 = Methodref          #60.#706     // org/json/JSONObject.numberIsFinite:(Ljava/lang/Number;)Z\n-   #163 = Methodref          #139.#707    // java/math/BigDecimal.\"<init>\":(D)V\n-   #164 = Methodref          #139.#586    // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n-   #165 = Class              #708         // java/lang/Short\n-   #166 = Class              #709         // java/lang/Byte\n-   #167 = Methodref          #139.#710    // java/math/BigDecimal.\"<init>\":(J)V\n-   #168 = Methodref          #139.#711    // java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;\n-   #169 = Methodref          #130.#712    // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #170 = Methodref          #60.#713     // org/json/JSONObject.isDecimalNotation:(Ljava/lang/String;)Z\n-   #171 = Methodref          #130.#586    // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n-   #172 = Double             NaNd\n-   #174 = Methodref          #60.#714     // org/json/JSONObject.optDouble:(Ljava/lang/String;D)D\n-   #175 = Methodref          #60.#715     // org/json/JSONObject.optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #176 = Float              NaNf\n-   #177 = Methodref          #60.#716     // org/json/JSONObject.optFloat:(Ljava/lang/String;F)F\n-   #178 = Methodref          #60.#717     // org/json/JSONObject.optInt:(Ljava/lang/String;I)I\n-   #179 = Methodref          #60.#718     // org/json/JSONObject.optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #180 = Methodref          #60.#719     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #181 = Methodref          #60.#720     // org/json/JSONObject.optLong:(Ljava/lang/String;J)J\n-   #182 = String             #721         //\n-   #183 = Methodref          #60.#722     // org/json/JSONObject.optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #184 = Class              #723         // java/util/IdentityHashMap\n-   #185 = Methodref          #184.#554    // java/util/IdentityHashMap.\"<init>\":()V\n-   #186 = Methodref          #724.#725    // java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n-   #187 = Methodref          #594.#726    // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;\n-   #188 = Methodref          #594.#727    // java/lang/Class.getMethods:()[Ljava/lang/reflect/Method;\n-   #189 = Methodref          #594.#728    // java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;\n-   #190 = Methodref          #729.#730    // java/lang/reflect/Method.getModifiers:()I\n-   #191 = Methodref          #731.#732    // java/lang/reflect/Modifier.isPublic:(I)Z\n-   #192 = Methodref          #731.#733    // java/lang/reflect/Modifier.isStatic:(I)Z\n-   #193 = Methodref          #729.#734    // java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;\n-   #194 = Methodref          #729.#735    // java/lang/reflect/Method.isBridge:()Z\n-   #195 = Methodref          #729.#736    // java/lang/reflect/Method.getReturnType:()Ljava/lang/Class;\n-   #196 = Fieldref           #737.#738    // java/lang/Void.TYPE:Ljava/lang/Class;\n-   #197 = Methodref          #729.#672    // java/lang/reflect/Method.getName:()Ljava/lang/String;\n-   #198 = Methodref          #60.#739     // org/json/JSONObject.isValidMethodName:(Ljava/lang/String;)Z\n-   #199 = Methodref          #60.#740     // org/json/JSONObject.getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #200 = Methodref          #56.#667     // java/lang/String.isEmpty:()Z\n-   #201 = Class              #741         // java/lang/Object\n-   #202 = Methodref          #729.#742    // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #203 = InterfaceMethodref #577.#743    // java/util/Set.contains:(Ljava/lang/Object;)Z\n-   #204 = Methodref          #60.#744     // org/json/JSONObject.recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #205 = InterfaceMethodref #577.#745    // java/util/Set.add:(Ljava/lang/Object;)Z\n-   #206 = Methodref          #60.#746     // org/json/JSONObject.wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #207 = InterfaceMethodref #577.#747    // java/util/Set.remove:(Ljava/lang/Object;)Z\n-   #208 = Class              #748         // java/io/Closeable\n-   #209 = InterfaceMethodref #208.#749    // java/io/Closeable.close:()V\n-   #210 = Class              #750         // java/io/IOException\n-   #211 = Class              #751         // java/lang/IllegalAccessException\n-   #212 = Class              #752         // java/lang/reflect/InvocationTargetException\n-   #213 = String             #753         // getClass\n-   #214 = Methodref          #56.#641     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #215 = String             #754         // getDeclaringClass\n-   #216 = Class              #755         // org/json/JSONPropertyIgnore\n-   #217 = Methodref          #60.#756     // org/json/JSONObject.getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #218 = Class              #757         // org/json/JSONPropertyName\n-   #219 = Methodref          #60.#758     // org/json/JSONObject.getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #220 = InterfaceMethodref #218.#759    // org/json/JSONPropertyName.value:()Ljava/lang/String;\n-   #221 = String             #379         // get\n-   #222 = Methodref          #56.#760     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-   #223 = Methodref          #56.#761     // java/lang/String.substring:(I)Ljava/lang/String;\n-   #224 = String             #762         // is\n-   #225 = Methodref          #56.#763     // java/lang/String.charAt:(I)C\n-   #226 = Methodref          #300.#764    // java/lang/Character.isLowerCase:(C)Z\n-   #227 = Fieldref           #765.#766    // java/util/Locale.ROOT:Ljava/util/Locale;\n-   #228 = Methodref          #56.#767     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #229 = Methodref          #300.#768    // java/lang/Character.isUpperCase:(C)Z\n-   #230 = Methodref          #729.#769    // java/lang/reflect/Method.isAnnotationPresent:(Ljava/lang/Class;)Z\n-   #231 = Methodref          #729.#770    // java/lang/reflect/Method.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #232 = Methodref          #729.#771    // java/lang/reflect/Method.getDeclaringClass:()Ljava/lang/Class;\n-   #233 = Methodref          #594.#772    // java/lang/Class.getSuperclass:()Ljava/lang/Class;\n-   #234 = Methodref          #594.#773    // java/lang/Class.getInterfaces:()[Ljava/lang/Class;\n-   #235 = Methodref          #594.#774    // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #236 = Class              #775         // java/lang/SecurityException\n-   #237 = Class              #776         // java/lang/NoSuchMethodException\n-   #238 = Methodref          #136.#777    // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-   #239 = Methodref          #133.#778    // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n-   #240 = Methodref          #125.#779    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #241 = Methodref          #127.#780    // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-   #242 = Methodref          #60.#781     // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n-   #243 = Methodref          #60.#782     // org/json/JSONObject.remove:(Ljava/lang/String;)Ljava/lang/Object;\n-   #244 = Class              #783         // org/json/JSONPointer\n-   #245 = Methodref          #244.#586    // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n-   #246 = Methodref          #60.#784     // org/json/JSONObject.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #247 = Methodref          #244.#785    // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #248 = Methodref          #60.#786     // org/json/JSONObject.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #249 = Class              #787         // org/json/JSONPointerException\n-   #250 = Class              #788         // java/io/StringWriter\n-   #251 = Methodref          #250.#554    // java/io/StringWriter.\"<init>\":()V\n-   #252 = Methodref          #250.#789    // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n-   #253 = Methodref          #60.#790     // org/json/JSONObject.quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #254 = String             #791         // \\\"\\\"\n-   #255 = Methodref          #792.#793    // java/io/Writer.write:(Ljava/lang/String;)V\n-   #256 = Methodref          #792.#794    // java/io/Writer.write:(I)V\n-   #257 = String             #795         // \\\\b\n-   #258 = String             #796         // \\\\t\n-   #259 = String             #797         // \\\\n\n-   #260 = String             #798         // \\\\f\n-   #261 = String             #799         // \\\\r\n-   #262 = String             #800         // \\\\u\n-   #263 = Methodref          #125.#801    // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n-   #264 = String             #802         // 0000\n-   #265 = Methodref          #792.#803    // java/io/Writer.write:(Ljava/lang/String;II)V\n-   #266 = InterfaceMethodref #304.#804    // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #267 = InterfaceMethodref #577.#641    // java/util/Set.equals:(Ljava/lang/Object;)Z\n-   #268 = Methodref          #60.#576     // org/json/JSONObject.entrySet:()Ljava/util/Set;\n-   #269 = Methodref          #60.#805     // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n-   #270 = Methodref          #63.#805     // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n-   #271 = Methodref          #60.#806     // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #272 = Class              #807         // java/lang/Throwable\n-   #273 = Class              #808         // java/lang/Comparable\n-   #274 = InterfaceMethodref #273.#809    // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I\n-   #275 = Methodref          #139.#810    // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n-   #276 = Methodref          #136.#811    // java/lang/Double.isInfinite:()Z\n-   #277 = Methodref          #136.#812    // java/lang/Double.isNaN:()Z\n-   #278 = Methodref          #133.#811    // java/lang/Float.isInfinite:()Z\n-   #279 = Methodref          #133.#812    // java/lang/Float.isNaN:()Z\n-   #280 = String             #813         // -0\n-   #281 = Fieldref           #139.#814    // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n-   #282 = Double             -0.0d\n-   #284 = Class              #815         // java/lang/NumberFormatException\n-   #285 = Methodref          #136.#816    // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-   #286 = String             #817         // val [\n-   #287 = String             #818         // ] is not a valid number.\n-   #288 = Methodref          #284.#586    // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #289 = Methodref          #130.#819    // java/math/BigInteger.bitLength:()I\n-   #290 = Methodref          #130.#660    // java/math/BigInteger.intValue:()I\n-   #291 = Methodref          #130.#664    // java/math/BigInteger.longValue:()J\n-   #292 = String             #820         // JSON does not allow non-finite numbers.\n-   #293 = Methodref          #63.#667     // org/json/JSONArray.isEmpty:()Z\n-   #294 = Methodref          #63.#628     // org/json/JSONArray.length:()I\n-   #295 = Methodref          #63.#821     // org/json/JSONArray.getString:(I)Ljava/lang/String;\n-   #296 = Methodref          #60.#822     // org/json/JSONObject.toString:(I)Ljava/lang/String;\n-   #297 = Methodref          #60.#823     // org/json/JSONObject.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #298 = Methodref          #824.#825    // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #299 = Class              #826         // org/json/JSONString\n-   #300 = Class              #827         // java/lang/Character\n-   #301 = Class              #828         // java/util/Collection\n-   #302 = Methodref          #594.#829    // java/lang/Class.isArray:()Z\n-   #303 = Methodref          #63.#830     // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n-   #304 = Class              #831         // java/util/Map\n-   #305 = Methodref          #594.#832    // java/lang/Class.getPackage:()Ljava/lang/Package;\n-   #306 = Methodref          #833.#672    // java/lang/Package.getName:()Ljava/lang/String;\n-   #307 = String             #834         // java.\n-   #308 = String             #835         // javax.\n-   #309 = Methodref          #60.#836     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n-   #310 = Methodref          #60.#830     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;)V\n-   #311 = InterfaceMethodref #299.#837    // org/json/JSONString.toJSONString:()Ljava/lang/String;\n-   #312 = Methodref          #78.#838     // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #313 = Methodref          #60.#839     // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #314 = Fieldref           #60.#840     // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #315 = Methodref          #841.#842    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #316 = Methodref          #843.#844    // java/util/regex/Matcher.matches:()Z\n-   #317 = Methodref          #153.#845    // java/lang/Enum.name:()Ljava/lang/String;\n-   #318 = Methodref          #63.#823     // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #319 = Methodref          #60.#846     // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #320 = String             #847         // Unable to write JSONObject value for key:\n-   #321 = Methodref          #78.#848     // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #322 = Methodref          #60.#849     // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n-   #323 = Methodref          #60.#850     // org/json/JSONObject.toMap:()Ljava/util/Map;\n-   #324 = Methodref          #63.#851     // org/json/JSONArray.toList:()Ljava/util/List;\n-   #325 = String             #852         // ] is not a\n-   #326 = String             #853         //  (\n-   #327 = Methodref          #18.#854     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #328 = String             #855         // ).\n-   #329 = String             #856         // JavaBean object contains recursively defined member variable of key\n-   #330 = String             #857         // -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n-   #331 = Methodref          #841.#858    // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #332 = Class              #859         // org/json/JSONObject$Null\n-   #333 = Methodref          #332.#860    // org/json/JSONObject$Null.\"<init>\":(Lorg/json/JSONObject$1;)V\n-   #334 = Class              #861         // org/json/JSONObject$1\n-   #335 = Utf8               InnerClasses\n-   #336 = Utf8               Null\n-   #337 = Utf8               NUMBER_PATTERN\n-   #338 = Utf8               Ljava/util/regex/Pattern;\n-   #339 = Utf8               map\n-   #340 = Utf8               Ljava/util/Map;\n-   #341 = Utf8               Signature\n-   #342 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n-   #343 = Utf8               NULL\n-   #344 = Utf8               Ljava/lang/Object;\n-   #345 = Utf8               <init>\n-   #346 = Utf8               ()V\n-   #347 = Utf8               Code\n-   #348 = Utf8               LineNumberTable\n-   #349 = Utf8               (Lorg/json/JSONObject;[Ljava/lang/String;)V\n-   #350 = Utf8               StackMapTable\n-   #351 = Class              #614         // org/json/JSONObject\n-   #352 = Class              #560         // java/lang/Exception\n-   #353 = Utf8               (Lorg/json/JSONTokener;)V\n-   #354 = Class              #599         // org/json/JSONTokener\n-   #355 = Class              #610         // java/lang/String\n-   #356 = Utf8               Exceptions\n-   #357 = Utf8               (Ljava/util/Map;)V\n-   #358 = Class              #831         // java/util/Map\n-   #359 = Class              #862         // java/util/Iterator\n-   #360 = Class              #582         // java/util/Map$Entry\n-   #361 = Utf8               (Ljava/util/Map<**>;)V\n-   #362 = Utf8               (Ljava/lang/Object;)V\n-   #363 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)V\n-   #364 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n-   #365 = Utf8               (Ljava/lang/Object;[Ljava/lang/String;)V\n-   #366 = Class              #741         // java/lang/Object\n-   #367 = Class              #863         // java/lang/Class\n-   #368 = Utf8               (Ljava/lang/String;)V\n-   #369 = Utf8               (Ljava/lang/String;Ljava/util/Locale;)V\n-   #370 = Class              #864         // java/util/Locale\n-   #371 = Class              #865         // java/util/ResourceBundle\n-   #372 = Class              #866         // java/util/Enumeration\n-   #373 = Utf8               (I)V\n-   #374 = Utf8               accumulate\n-   #375 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #376 = Utf8               append\n-   #377 = Utf8               doubleToString\n-   #378 = Utf8               (D)Ljava/lang/String;\n-   #379 = Utf8               get\n-   #380 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-   #381 = Utf8               getEnum\n-   #382 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #383 = Class              #697         // java/lang/Enum\n-   #384 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n-   #385 = Utf8               getBoolean\n-   #386 = Utf8               (Ljava/lang/String;)Z\n-   #387 = Utf8               getBigInteger\n-   #388 = Utf8               (Ljava/lang/String;)Ljava/math/BigInteger;\n-   #389 = Class              #679         // java/math/BigInteger\n-   #390 = Utf8               getBigDecimal\n-   #391 = Utf8               (Ljava/lang/String;)Ljava/math/BigDecimal;\n-   #392 = Class              #686         // java/math/BigDecimal\n-   #393 = Utf8               getDouble\n-   #394 = Utf8               (Ljava/lang/String;)D\n-   #395 = Utf8               getFloat\n-   #396 = Utf8               (Ljava/lang/String;)F\n-   #397 = Utf8               getNumber\n-   #398 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-   #399 = Utf8               getInt\n-   #400 = Utf8               (Ljava/lang/String;)I\n-   #401 = Utf8               getJSONArray\n-   #402 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n-   #403 = Utf8               getJSONObject\n-   #404 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-   #405 = Utf8               getLong\n-   #406 = Utf8               (Ljava/lang/String;)J\n-   #407 = Utf8               getNames\n-   #408 = Utf8               (Lorg/json/JSONObject;)[Ljava/lang/String;\n-   #409 = Utf8               (Ljava/lang/Object;)[Ljava/lang/String;\n-   #410 = Class              #867         // \"[Ljava/lang/reflect/Field;\"\n-   #411 = Utf8               getString\n-   #412 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #413 = Utf8               has\n-   #414 = Utf8               increment\n-   #415 = Utf8               isNull\n-   #416 = Utf8               keys\n-   #417 = Utf8               ()Ljava/util/Iterator;\n-   #418 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n-   #419 = Utf8               keySet\n-   #420 = Utf8               ()Ljava/util/Set;\n-   #421 = Utf8               ()Ljava/util/Set<Ljava/lang/String;>;\n-   #422 = Utf8               entrySet\n-   #423 = Utf8               Entry\n-   #424 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n-   #425 = Utf8               length\n-   #426 = Utf8               ()I\n-   #427 = Utf8               clear\n-   #428 = Utf8               isEmpty\n-   #429 = Utf8               ()Z\n-   #430 = Utf8               names\n-   #431 = Utf8               ()Lorg/json/JSONArray;\n-   #432 = Utf8               numberToString\n-   #433 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n-   #434 = Utf8               opt\n-   #435 = Utf8               optEnum\n-   #436 = Utf8               (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #437 = Class              #699         // java/lang/IllegalArgumentException\n-   #438 = Class              #584         // java/lang/NullPointerException\n-   #439 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n-   #440 = Utf8               optBoolean\n-   #441 = Utf8               (Ljava/lang/String;Z)Z\n-   #442 = Utf8               optBigDecimal\n-   #443 = Utf8               (Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #444 = Utf8               objectToBigDecimal\n-   #445 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #446 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #447 = Utf8               optBigInteger\n-   #448 = Utf8               (Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #449 = Utf8               objectToBigInteger\n-   #450 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #451 = Utf8               optDouble\n-   #452 = Utf8               (Ljava/lang/String;D)D\n-   #453 = Class              #651         // java/lang/Number\n-   #454 = Utf8               optFloat\n-   #455 = Utf8               (Ljava/lang/String;F)F\n-   #456 = Utf8               optInt\n-   #457 = Utf8               (Ljava/lang/String;I)I\n-   #458 = Utf8               optJSONArray\n-   #459 = Class              #617         // org/json/JSONArray\n-   #460 = Utf8               optJSONObject\n-   #461 = Utf8               (Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #462 = Utf8               optLong\n-   #463 = Utf8               (Ljava/lang/String;J)J\n-   #464 = Utf8               optNumber\n-   #465 = Utf8               (Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #466 = Utf8               optString\n-   #467 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #468 = Utf8               populateMap\n-   #469 = Class              #868         // \"[Ljava/lang/reflect/Method;\"\n-   #470 = Class              #869         // java/util/Set\n-   #471 = Class              #870         // java/lang/reflect/Method\n-   #472 = Class              #750         // java/io/IOException\n-   #473 = Class              #751         // java/lang/IllegalAccessException\n-   #474 = Class              #752         // java/lang/reflect/InvocationTargetException\n-   #475 = Utf8               isValidMethodName\n-   #476 = Utf8               getKeyNameFromMethod\n-   #477 = Utf8               (Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #478 = Class              #757         // org/json/JSONPropertyName\n-   #479 = Utf8               getAnnotation\n-   #480 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #481 = Class              #871         // \"[Ljava/lang/Class;\"\n-   #482 = Class              #775         // java/lang/SecurityException\n-   #483 = Class              #776         // java/lang/NoSuchMethodException\n-   #484 = Utf8               <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n-   #485 = Utf8               getAnnotationDepth\n-   #486 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #487 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n-   #488 = Utf8               put\n-   #489 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-   #490 = Class              #701         // java/lang/Boolean\n-   #491 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Lorg/json/JSONObject;\n-   #492 = Utf8               (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n-   #493 = Utf8               (Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #494 = Utf8               (Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #495 = Utf8               (Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #496 = Utf8               (Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #497 = Utf8               (Ljava/lang/String;Ljava/util/Map;)Lorg/json/JSONObject;\n-   #498 = Utf8               (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n-   #499 = Utf8               putOnce\n-   #500 = Utf8               putOpt\n-   #501 = Utf8               query\n-   #502 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #503 = Utf8               optQuery\n-   #504 = Class              #787         // org/json/JSONPointerException\n-   #505 = Utf8               quote\n-   #506 = Class              #788         // java/io/StringWriter\n-   #507 = Class              #807         // java/lang/Throwable\n-   #508 = Utf8               (Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #509 = Class              #872         // java/io/Writer\n-   #510 = Utf8               remove\n-   #511 = Utf8               similar\n-   #512 = Utf8               (Ljava/lang/Object;)Z\n-   #513 = Utf8               isNumberSimilar\n-   #514 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #515 = Utf8               numberIsFinite\n-   #516 = Utf8               (Ljava/lang/Number;)Z\n-   #517 = Utf8               isDecimalNotation\n-   #518 = Utf8               stringToNumber\n-   #519 = Class              #815         // java/lang/NumberFormatException\n-   #520 = Class              #684         // java/lang/Double\n-   #521 = Utf8               stringToValue\n-   #522 = Utf8               testValidity\n-   #523 = Utf8               toJSONArray\n-   #524 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n-   #525 = Utf8               toString\n-   #526 = Utf8               ()Ljava/lang/String;\n-   #527 = Utf8               (I)Ljava/lang/String;\n-   #528 = Utf8               valueToString\n-   #529 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-   #530 = Utf8               wrap\n-   #531 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-   #532 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #533 = Class              #873         // java/lang/Package\n-   #534 = Class              #631         // org/json/JSONException\n-   #535 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n-   #536 = Utf8               write\n-   #537 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n-   #538 = Utf8               writeValue\n-   #539 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #540 = Utf8               indent\n-   #541 = Utf8               (Ljava/io/Writer;I)V\n-   #542 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n-   #543 = Utf8               toMap\n-   #544 = Utf8               ()Ljava/util/Map;\n-   #545 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n-   #546 = Utf8               wrongValueFormatException\n-   #547 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #548 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #549 = Utf8               recursivelyDefinedObjectException\n-   #550 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-   #551 = Utf8               <clinit>\n-   #552 = Utf8               SourceFile\n-   #553 = Utf8               JSONObject.java\n-   #554 = NameAndType        #345:#346    // \"<init>\":()V\n-   #555 = Utf8               java/util/HashMap\n-   #556 = NameAndType        #339:#340    // map:Ljava/util/Map;\n-   #557 = NameAndType        #345:#373    // \"<init>\":(I)V\n-   #558 = NameAndType        #434:#380    // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-   #559 = NameAndType        #499:#375    // putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #560 = Utf8               java/lang/Exception\n-   #561 = NameAndType        #874:#875    // nextClean:()C\n-   #562 = Utf8               A JSONObject text must begin with \\'{\\'\n-   #563 = NameAndType        #876:#550    // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #564 = Utf8               A JSONObject text must end with \\'}\\'\n-   #565 = NameAndType        #877:#346    // back:()V\n-   #566 = NameAndType        #878:#879    // nextValue:()Ljava/lang/Object;\n-   #567 = NameAndType        #525:#526    // toString:()Ljava/lang/String;\n-   #568 = Utf8               Expected a \\':\\' after a key\n-   #569 = Utf8               java/lang/StringBuilder\n-   #570 = Utf8               Duplicate key \\\"\n-   #571 = NameAndType        #376:#880    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #572 = Utf8               \\\"\n-   #573 = NameAndType        #488:#375    // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #574 = Utf8               Expected a \\',\\' or \\'}\\'\n-   #575 = NameAndType        #881:#426    // size:()I\n-   #576 = NameAndType        #422:#420    // entrySet:()Ljava/util/Set;\n-   #577 = Class              #869         // java/util/Set\n-   #578 = NameAndType        #882:#417    // iterator:()Ljava/util/Iterator;\n-   #579 = Class              #862         // java/util/Iterator\n-   #580 = NameAndType        #883:#429    // hasNext:()Z\n-   #581 = NameAndType        #884:#879    // next:()Ljava/lang/Object;\n-   #582 = Utf8               java/util/Map$Entry\n-   #583 = NameAndType        #885:#879    // getKey:()Ljava/lang/Object;\n-   #584 = Utf8               java/lang/NullPointerException\n-   #585 = Utf8               Null key.\n-   #586 = NameAndType        #345:#368    // \"<init>\":(Ljava/lang/String;)V\n-   #587 = NameAndType        #886:#879    // getValue:()Ljava/lang/Object;\n-   #588 = NameAndType        #887:#529    // valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n-   #589 = NameAndType        #530:#531    // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #590 = NameAndType        #488:#888    // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #591 = NameAndType        #468:#362    // populateMap:(Ljava/lang/Object;)V\n-   #592 = NameAndType        #468:#363    // populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n-   #593 = NameAndType        #753:#889    // getClass:()Ljava/lang/Class;\n-   #594 = Class              #863         // java/lang/Class\n-   #595 = NameAndType        #890:#891    // getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-   #596 = Class              #892         // java/lang/reflect/Field\n-   #597 = NameAndType        #379:#531    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #598 = NameAndType        #500:#375    // putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #599 = Utf8               org/json/JSONTokener\n-   #600 = NameAndType        #345:#353    // \"<init>\":(Lorg/json/JSONTokener;)V\n-   #601 = Class              #893         // java/lang/Thread\n-   #602 = NameAndType        #894:#895    // currentThread:()Ljava/lang/Thread;\n-   #603 = NameAndType        #896:#897    // getContextClassLoader:()Ljava/lang/ClassLoader;\n-   #604 = Class              #865         // java/util/ResourceBundle\n-   #605 = NameAndType        #898:#899    // getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-   #606 = NameAndType        #900:#901    // getKeys:()Ljava/util/Enumeration;\n-   #607 = Class              #866         // java/util/Enumeration\n-   #608 = NameAndType        #902:#429    // hasMoreElements:()Z\n-   #609 = NameAndType        #903:#879    // nextElement:()Ljava/lang/Object;\n-   #610 = Utf8               java/lang/String\n-   #611 = Utf8               \\\\.\n-   #612 = NameAndType        #904:#905    // split:(Ljava/lang/String;)[Ljava/lang/String;\n-   #613 = NameAndType        #460:#404    // optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n-   #614 = Utf8               org/json/JSONObject\n-   #615 = NameAndType        #411:#412    // getString:(Ljava/lang/String;)Ljava/lang/String;\n-   #616 = NameAndType        #522:#362    // testValidity:(Ljava/lang/Object;)V\n-   #617 = Utf8               org/json/JSONArray\n-   #618 = NameAndType        #488:#906    // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-   #619 = Utf8               JSONArray\n-   #620 = NameAndType        #546:#548    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #621 = NameAndType        #907:#908    // isInfinite:(D)Z\n-   #622 = NameAndType        #909:#908    // isNaN:(D)Z\n-   #623 = Utf8               null\n-   #624 = NameAndType        #525:#378    // toString:(D)Ljava/lang/String;\n-   #625 = NameAndType        #910:#911    // indexOf:(I)I\n-   #626 = Utf8               0\n-   #627 = NameAndType        #912:#386    // endsWith:(Ljava/lang/String;)Z\n-   #628 = NameAndType        #425:#426    // length:()I\n-   #629 = NameAndType        #913:#914    // substring:(II)Ljava/lang/String;\n-   #630 = Utf8               .\n-   #631 = Utf8               org/json/JSONException\n-   #632 = Utf8               JSONObject[\n-   #633 = NameAndType        #505:#412    // quote:(Ljava/lang/String;)Ljava/lang/String;\n-   #634 = Utf8               ] not found.\n-   #635 = NameAndType        #435:#382    // optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #636 = Utf8               enum of type\n-   #637 = NameAndType        #915:#526    // getSimpleName:()Ljava/lang/String;\n-   #638 = NameAndType        #546:#547    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #639 = NameAndType        #379:#380    // get:(Ljava/lang/String;)Ljava/lang/Object;\n-   #640 = NameAndType        #916:#917    // FALSE:Ljava/lang/Boolean;\n-   #641 = NameAndType        #918:#512    // equals:(Ljava/lang/Object;)Z\n-   #642 = Utf8               false\n-   #643 = NameAndType        #919:#386    // equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #644 = NameAndType        #920:#917    // TRUE:Ljava/lang/Boolean;\n-   #645 = Utf8               true\n-   #646 = Utf8               Boolean\n-   #647 = NameAndType        #449:#450    // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #648 = Utf8               BigInteger\n-   #649 = NameAndType        #444:#445    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #650 = Utf8               BigDecimal\n-   #651 = Utf8               java/lang/Number\n-   #652 = NameAndType        #921:#922    // doubleValue:()D\n-   #653 = NameAndType        #923:#394    // parseDouble:(Ljava/lang/String;)D\n-   #654 = Utf8               double\n-   #655 = NameAndType        #924:#925    // floatValue:()F\n-   #656 = NameAndType        #926:#396    // parseFloat:(Ljava/lang/String;)F\n-   #657 = Utf8               float\n-   #658 = NameAndType        #518:#398    // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #659 = Utf8               number\n-   #660 = NameAndType        #927:#426    // intValue:()I\n-   #661 = NameAndType        #928:#400    // parseInt:(Ljava/lang/String;)I\n-   #662 = Utf8               int\n-   #663 = Utf8               JSONObject\n-   #664 = NameAndType        #929:#930    // longValue:()J\n-   #665 = NameAndType        #931:#406    // parseLong:(Ljava/lang/String;)J\n-   #666 = Utf8               long\n-   #667 = NameAndType        #428:#429    // isEmpty:()Z\n-   #668 = NameAndType        #419:#420    // keySet:()Ljava/util/Set;\n-   #669 = NameAndType        #932:#933    // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #670 = Utf8               [Ljava/lang/String;\n-   #671 = NameAndType        #934:#935    // getFields:()[Ljava/lang/reflect/Field;\n-   #672 = NameAndType        #936:#526    // getName:()Ljava/lang/String;\n-   #673 = Utf8               string\n-   #674 = NameAndType        #937:#512    // containsKey:(Ljava/lang/Object;)Z\n-   #675 = NameAndType        #488:#495    // put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #676 = Utf8               java/lang/Integer\n-   #677 = Utf8               java/lang/Long\n-   #678 = NameAndType        #488:#496    // put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #679 = Utf8               java/math/BigInteger\n-   #680 = NameAndType        #938:#939    // ONE:Ljava/math/BigInteger;\n-   #681 = NameAndType        #940:#941    // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #682 = Utf8               java/lang/Float\n-   #683 = NameAndType        #488:#494    // put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #684 = Utf8               java/lang/Double\n-   #685 = NameAndType        #488:#493    // put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #686 = Utf8               java/math/BigDecimal\n-   #687 = NameAndType        #938:#942    // ONE:Ljava/math/BigDecimal;\n-   #688 = NameAndType        #940:#943    // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #689 = Utf8               Unable to increment [\n-   #690 = Utf8               ].\n-   #691 = NameAndType        #343:#344    // NULL:Ljava/lang/Object;\n-   #692 = NameAndType        #427:#346    // clear:()V\n-   #693 = NameAndType        #345:#944    // \"<init>\":(Ljava/util/Collection;)V\n-   #694 = Utf8               Null pointer\n-   #695 = NameAndType        #435:#436    // optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #696 = NameAndType        #945:#946    // isAssignableFrom:(Ljava/lang/Class;)Z\n-   #697 = Utf8               java/lang/Enum\n-   #698 = NameAndType        #887:#382    // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #699 = Utf8               java/lang/IllegalArgumentException\n-   #700 = NameAndType        #440:#441    // optBoolean:(Ljava/lang/String;Z)Z\n-   #701 = Utf8               java/lang/Boolean\n-   #702 = NameAndType        #947:#429    // booleanValue:()Z\n-   #703 = NameAndType        #385:#386    // getBoolean:(Ljava/lang/String;)Z\n-   #704 = NameAndType        #444:#446    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #705 = NameAndType        #345:#948    // \"<init>\":(Ljava/math/BigInteger;)V\n-   #706 = NameAndType        #515:#516    // numberIsFinite:(Ljava/lang/Number;)Z\n-   #707 = NameAndType        #345:#949    // \"<init>\":(D)V\n-   #708 = Utf8               java/lang/Short\n-   #709 = Utf8               java/lang/Byte\n-   #710 = NameAndType        #345:#950    // \"<init>\":(J)V\n-   #711 = NameAndType        #951:#952    // toBigInteger:()Ljava/math/BigInteger;\n-   #712 = NameAndType        #887:#953    // valueOf:(J)Ljava/math/BigInteger;\n-   #713 = NameAndType        #517:#386    // isDecimalNotation:(Ljava/lang/String;)Z\n-   #714 = NameAndType        #451:#452    // optDouble:(Ljava/lang/String;D)D\n-   #715 = NameAndType        #464:#398    // optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #716 = NameAndType        #454:#455    // optFloat:(Ljava/lang/String;F)F\n-   #717 = NameAndType        #456:#457    // optInt:(Ljava/lang/String;I)I\n-   #718 = NameAndType        #464:#465    // optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #719 = NameAndType        #460:#461    // optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #720 = NameAndType        #462:#463    // optLong:(Ljava/lang/String;J)J\n-   #721 = Utf8\n-   #722 = NameAndType        #466:#467    // optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #723 = Utf8               java/util/IdentityHashMap\n-   #724 = Class              #954         // java/util/Collections\n-   #725 = NameAndType        #955:#956    // newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n-   #726 = NameAndType        #957:#897    // getClassLoader:()Ljava/lang/ClassLoader;\n-   #727 = NameAndType        #958:#959    // getMethods:()[Ljava/lang/reflect/Method;\n-   #728 = NameAndType        #960:#959    // getDeclaredMethods:()[Ljava/lang/reflect/Method;\n-   #729 = Class              #870         // java/lang/reflect/Method\n-   #730 = NameAndType        #961:#426    // getModifiers:()I\n-   #731 = Class              #962         // java/lang/reflect/Modifier\n-   #732 = NameAndType        #963:#964    // isPublic:(I)Z\n-   #733 = NameAndType        #965:#964    // isStatic:(I)Z\n-   #734 = NameAndType        #966:#967    // getParameterTypes:()[Ljava/lang/Class;\n-   #735 = NameAndType        #968:#429    // isBridge:()Z\n-   #736 = NameAndType        #969:#889    // getReturnType:()Ljava/lang/Class;\n-   #737 = Class              #970         // java/lang/Void\n-   #738 = NameAndType        #971:#972    // TYPE:Ljava/lang/Class;\n-   #739 = NameAndType        #475:#386    // isValidMethodName:(Ljava/lang/String;)Z\n-   #740 = NameAndType        #476:#477    // getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #741 = Utf8               java/lang/Object\n-   #742 = NameAndType        #973:#974    // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #743 = NameAndType        #975:#512    // contains:(Ljava/lang/Object;)Z\n-   #744 = NameAndType        #549:#550    // recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #745 = NameAndType        #940:#512    // add:(Ljava/lang/Object;)Z\n-   #746 = NameAndType        #530:#532    // wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #747 = NameAndType        #510:#512    // remove:(Ljava/lang/Object;)Z\n-   #748 = Utf8               java/io/Closeable\n-   #749 = NameAndType        #976:#346    // close:()V\n-   #750 = Utf8               java/io/IOException\n-   #751 = Utf8               java/lang/IllegalAccessException\n-   #752 = Utf8               java/lang/reflect/InvocationTargetException\n-   #753 = Utf8               getClass\n-   #754 = Utf8               getDeclaringClass\n-   #755 = Utf8               org/json/JSONPropertyIgnore\n-   #756 = NameAndType        #485:#486    // getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #757 = Utf8               org/json/JSONPropertyName\n-   #758 = NameAndType        #479:#480    // getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #759 = NameAndType        #977:#526    // value:()Ljava/lang/String;\n-   #760 = NameAndType        #978:#386    // startsWith:(Ljava/lang/String;)Z\n-   #761 = NameAndType        #913:#527    // substring:(I)Ljava/lang/String;\n-   #762 = Utf8               is\n-   #763 = NameAndType        #979:#980    // charAt:(I)C\n-   #764 = NameAndType        #981:#982    // isLowerCase:(C)Z\n-   #765 = Class              #864         // java/util/Locale\n-   #766 = NameAndType        #983:#984    // ROOT:Ljava/util/Locale;\n-   #767 = NameAndType        #985:#986    // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #768 = NameAndType        #987:#982    // isUpperCase:(C)Z\n-   #769 = NameAndType        #988:#946    // isAnnotationPresent:(Ljava/lang/Class;)Z\n-   #770 = NameAndType        #479:#989    // getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #771 = NameAndType        #754:#889    // getDeclaringClass:()Ljava/lang/Class;\n-   #772 = NameAndType        #990:#889    // getSuperclass:()Ljava/lang/Class;\n-   #773 = NameAndType        #991:#967    // getInterfaces:()[Ljava/lang/Class;\n-   #774 = NameAndType        #992:#993    // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #775 = Utf8               java/lang/SecurityException\n-   #776 = Utf8               java/lang/NoSuchMethodException\n-   #777 = NameAndType        #887:#994    // valueOf:(D)Ljava/lang/Double;\n-   #778 = NameAndType        #887:#995    // valueOf:(F)Ljava/lang/Float;\n-   #779 = NameAndType        #887:#996    // valueOf:(I)Ljava/lang/Integer;\n-   #780 = NameAndType        #887:#997    // valueOf:(J)Ljava/lang/Long;\n-   #781 = NameAndType        #345:#357    // \"<init>\":(Ljava/util/Map;)V\n-   #782 = NameAndType        #510:#380    // remove:(Ljava/lang/String;)Ljava/lang/Object;\n-   #783 = Utf8               org/json/JSONPointer\n-   #784 = NameAndType        #501:#502    // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #785 = NameAndType        #998:#531    // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #786 = NameAndType        #503:#502    // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #787 = Utf8               org/json/JSONPointerException\n-   #788 = Utf8               java/io/StringWriter\n-   #789 = NameAndType        #999:#1000   // getBuffer:()Ljava/lang/StringBuffer;\n-   #790 = NameAndType        #505:#508    // quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #791 = Utf8               \\\"\\\"\n-   #792 = Class              #872         // java/io/Writer\n-   #793 = NameAndType        #536:#368    // write:(Ljava/lang/String;)V\n-   #794 = NameAndType        #536:#373    // write:(I)V\n-   #795 = Utf8               \\\\b\n-   #796 = Utf8               \\\\t\n-   #797 = Utf8               \\\\n\n-   #798 = Utf8               \\\\f\n-   #799 = Utf8               \\\\r\n-   #800 = Utf8               \\\\u\n-   #801 = NameAndType        #1001:#527   // toHexString:(I)Ljava/lang/String;\n-   #802 = Utf8               0000\n-   #803 = NameAndType        #536:#1002   // write:(Ljava/lang/String;II)V\n-   #804 = NameAndType        #510:#531    // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #805 = NameAndType        #511:#512    // similar:(Ljava/lang/Object;)Z\n-   #806 = NameAndType        #513:#514    // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #807 = Utf8               java/lang/Throwable\n-   #808 = Utf8               java/lang/Comparable\n-   #809 = NameAndType        #1003:#1004  // compareTo:(Ljava/lang/Object;)I\n-   #810 = NameAndType        #1003:#1005  // compareTo:(Ljava/math/BigDecimal;)I\n-   #811 = NameAndType        #907:#429    // isInfinite:()Z\n-   #812 = NameAndType        #909:#429    // isNaN:()Z\n-   #813 = Utf8               -0\n-   #814 = NameAndType        #1006:#942   // ZERO:Ljava/math/BigDecimal;\n-   #815 = Utf8               java/lang/NumberFormatException\n-   #816 = NameAndType        #887:#1007   // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-   #817 = Utf8               val [\n-   #818 = Utf8               ] is not a valid number.\n-   #819 = NameAndType        #1008:#426   // bitLength:()I\n-   #820 = Utf8               JSON does not allow non-finite numbers.\n-   #821 = NameAndType        #411:#527    // getString:(I)Ljava/lang/String;\n-   #822 = NameAndType        #525:#527    // toString:(I)Ljava/lang/String;\n-   #823 = NameAndType        #536:#542    // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #824 = Class              #1009        // org/json/JSONWriter\n-   #825 = NameAndType        #528:#529    // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #826 = Utf8               org/json/JSONString\n-   #827 = Utf8               java/lang/Character\n-   #828 = Utf8               java/util/Collection\n-   #829 = NameAndType        #1010:#429   // isArray:()Z\n-   #830 = NameAndType        #345:#362    // \"<init>\":(Ljava/lang/Object;)V\n-   #831 = Utf8               java/util/Map\n-   #832 = NameAndType        #1011:#1012  // getPackage:()Ljava/lang/Package;\n-   #833 = Class              #873         // java/lang/Package\n-   #834 = Utf8               java.\n-   #835 = Utf8               javax.\n-   #836 = NameAndType        #345:#363    // \"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n-   #837 = NameAndType        #1013:#526   // toJSONString:()Ljava/lang/String;\n-   #838 = NameAndType        #345:#1014   // \"<init>\":(Ljava/lang/Throwable;)V\n-   #839 = NameAndType        #432:#433    // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #840 = NameAndType        #337:#338    // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #841 = Class              #1015        // java/util/regex/Pattern\n-   #842 = NameAndType        #1016:#1017  // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #843 = Class              #1018        // java/util/regex/Matcher\n-   #844 = NameAndType        #1019:#429   // matches:()Z\n-   #845 = NameAndType        #1020:#526   // name:()Ljava/lang/String;\n-   #846 = NameAndType        #538:#539    // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #847 = Utf8               Unable to write JSONObject value for key:\n-   #848 = NameAndType        #345:#1021   // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #849 = NameAndType        #540:#541    // indent:(Ljava/io/Writer;I)V\n-   #850 = NameAndType        #543:#544    // toMap:()Ljava/util/Map;\n-   #851 = NameAndType        #1022:#1023  // toList:()Ljava/util/List;\n-   #852 = Utf8               ] is not a\n-   #853 = Utf8                (\n-   #854 = NameAndType        #376:#1024   // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #855 = Utf8               ).\n-   #856 = Utf8               JavaBean object contains recursively defined member variable of key\n-   #857 = Utf8               -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n-   #858 = NameAndType        #1025:#1026  // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #859 = Utf8               org/json/JSONObject$Null\n-   #860 = NameAndType        #345:#1027   // \"<init>\":(Lorg/json/JSONObject$1;)V\n-   #861 = Utf8               org/json/JSONObject$1\n-   #862 = Utf8               java/util/Iterator\n-   #863 = Utf8               java/lang/Class\n-   #864 = Utf8               java/util/Locale\n-   #865 = Utf8               java/util/ResourceBundle\n-   #866 = Utf8               java/util/Enumeration\n-   #867 = Utf8               [Ljava/lang/reflect/Field;\n-   #868 = Utf8               [Ljava/lang/reflect/Method;\n-   #869 = Utf8               java/util/Set\n-   #870 = Utf8               java/lang/reflect/Method\n-   #871 = Utf8               [Ljava/lang/Class;\n-   #872 = Utf8               java/io/Writer\n-   #873 = Utf8               java/lang/Package\n-   #874 = Utf8               nextClean\n-   #875 = Utf8               ()C\n-   #876 = Utf8               syntaxError\n-   #877 = Utf8               back\n-   #878 = Utf8               nextValue\n-   #879 = Utf8               ()Ljava/lang/Object;\n-   #880 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #881 = Utf8               size\n-   #882 = Utf8               iterator\n-   #883 = Utf8               hasNext\n-   #884 = Utf8               next\n-   #885 = Utf8               getKey\n-   #886 = Utf8               getValue\n-   #887 = Utf8               valueOf\n-   #888 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #889 = Utf8               ()Ljava/lang/Class;\n-   #890 = Utf8               getField\n-   #891 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n-   #892 = Utf8               java/lang/reflect/Field\n-   #893 = Utf8               java/lang/Thread\n-   #894 = Utf8               currentThread\n-   #895 = Utf8               ()Ljava/lang/Thread;\n-   #896 = Utf8               getContextClassLoader\n-   #897 = Utf8               ()Ljava/lang/ClassLoader;\n-   #898 = Utf8               getBundle\n-   #899 = Utf8               (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-   #900 = Utf8               getKeys\n-   #901 = Utf8               ()Ljava/util/Enumeration;\n-   #902 = Utf8               hasMoreElements\n-   #903 = Utf8               nextElement\n-   #904 = Utf8               split\n-   #905 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-   #906 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n-   #907 = Utf8               isInfinite\n-   #908 = Utf8               (D)Z\n-   #909 = Utf8               isNaN\n-   #910 = Utf8               indexOf\n-   #911 = Utf8               (I)I\n-   #912 = Utf8               endsWith\n-   #913 = Utf8               substring\n-   #914 = Utf8               (II)Ljava/lang/String;\n-   #915 = Utf8               getSimpleName\n-   #916 = Utf8               FALSE\n-   #917 = Utf8               Ljava/lang/Boolean;\n-   #918 = Utf8               equals\n-   #919 = Utf8               equalsIgnoreCase\n-   #920 = Utf8               TRUE\n-   #921 = Utf8               doubleValue\n-   #922 = Utf8               ()D\n-   #923 = Utf8               parseDouble\n-   #924 = Utf8               floatValue\n-   #925 = Utf8               ()F\n-   #926 = Utf8               parseFloat\n-   #927 = Utf8               intValue\n-   #928 = Utf8               parseInt\n-   #929 = Utf8               longValue\n-   #930 = Utf8               ()J\n-   #931 = Utf8               parseLong\n-   #932 = Utf8               toArray\n-   #933 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #934 = Utf8               getFields\n-   #935 = Utf8               ()[Ljava/lang/reflect/Field;\n-   #936 = Utf8               getName\n-   #937 = Utf8               containsKey\n-   #938 = Utf8               ONE\n-   #939 = Utf8               Ljava/math/BigInteger;\n-   #940 = Utf8               add\n-   #941 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #942 = Utf8               Ljava/math/BigDecimal;\n-   #943 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #944 = Utf8               (Ljava/util/Collection;)V\n-   #945 = Utf8               isAssignableFrom\n-   #946 = Utf8               (Ljava/lang/Class;)Z\n-   #947 = Utf8               booleanValue\n-   #948 = Utf8               (Ljava/math/BigInteger;)V\n-   #949 = Utf8               (D)V\n-   #950 = Utf8               (J)V\n-   #951 = Utf8               toBigInteger\n-   #952 = Utf8               ()Ljava/math/BigInteger;\n-   #953 = Utf8               (J)Ljava/math/BigInteger;\n-   #954 = Utf8               java/util/Collections\n-   #955 = Utf8               newSetFromMap\n-   #956 = Utf8               (Ljava/util/Map;)Ljava/util/Set;\n-   #957 = Utf8               getClassLoader\n-   #958 = Utf8               getMethods\n-   #959 = Utf8               ()[Ljava/lang/reflect/Method;\n-   #960 = Utf8               getDeclaredMethods\n-   #961 = Utf8               getModifiers\n-   #962 = Utf8               java/lang/reflect/Modifier\n-   #963 = Utf8               isPublic\n-   #964 = Utf8               (I)Z\n-   #965 = Utf8               isStatic\n-   #966 = Utf8               getParameterTypes\n-   #967 = Utf8               ()[Ljava/lang/Class;\n-   #968 = Utf8               isBridge\n-   #969 = Utf8               getReturnType\n-   #970 = Utf8               java/lang/Void\n-   #971 = Utf8               TYPE\n-   #972 = Utf8               Ljava/lang/Class;\n-   #973 = Utf8               invoke\n-   #974 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #975 = Utf8               contains\n-   #976 = Utf8               close\n-   #977 = Utf8               value\n-   #978 = Utf8               startsWith\n-   #979 = Utf8               charAt\n-   #980 = Utf8               (I)C\n-   #981 = Utf8               isLowerCase\n-   #982 = Utf8               (C)Z\n-   #983 = Utf8               ROOT\n-   #984 = Utf8               Ljava/util/Locale;\n-   #985 = Utf8               toLowerCase\n-   #986 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n-   #987 = Utf8               isUpperCase\n-   #988 = Utf8               isAnnotationPresent\n-   #989 = Utf8               (Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #990 = Utf8               getSuperclass\n-   #991 = Utf8               getInterfaces\n-   #992 = Utf8               getMethod\n-   #993 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #994 = Utf8               (D)Ljava/lang/Double;\n-   #995 = Utf8               (F)Ljava/lang/Float;\n-   #996 = Utf8               (I)Ljava/lang/Integer;\n-   #997 = Utf8               (J)Ljava/lang/Long;\n-   #998 = Utf8               queryFrom\n-   #999 = Utf8               getBuffer\n-  #1000 = Utf8               ()Ljava/lang/StringBuffer;\n-  #1001 = Utf8               toHexString\n-  #1002 = Utf8               (Ljava/lang/String;II)V\n-  #1003 = Utf8               compareTo\n-  #1004 = Utf8               (Ljava/lang/Object;)I\n-  #1005 = Utf8               (Ljava/math/BigDecimal;)I\n-  #1006 = Utf8               ZERO\n-  #1007 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n-  #1008 = Utf8               bitLength\n-  #1009 = Utf8               org/json/JSONWriter\n-  #1010 = Utf8               isArray\n-  #1011 = Utf8               getPackage\n-  #1012 = Utf8               ()Ljava/lang/Package;\n-  #1013 = Utf8               toJSONString\n-  #1014 = Utf8               (Ljava/lang/Throwable;)V\n-  #1015 = Utf8               java/util/regex/Pattern\n-  #1016 = Utf8               matcher\n-  #1017 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #1018 = Utf8               java/util/regex/Matcher\n-  #1019 = Utf8               matches\n-  #1020 = Utf8               name\n-  #1021 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #1022 = Utf8               toList\n-  #1023 = Utf8               ()Ljava/util/List;\n-  #1024 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #1025 = Utf8               compile\n-  #1026 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #1027 = Utf8               (Lorg/json/JSONObject$1;)V\n+    #1 = Methodref          #201.#527     // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #528          // java/util/HashMap\n+    #3 = Methodref          #2.#527       // java/util/HashMap.\"<init>\":()V\n+    #4 = Fieldref           #60.#529      // org/json/JSONObject.map:Ljava/util/Map;\n+    #5 = Methodref          #60.#530      // org/json/JSONObject.\"<init>\":(I)V\n+    #6 = Methodref          #60.#531      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+    #7 = Methodref          #60.#532      // org/json/JSONObject.putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+    #8 = Class              #533          // java/lang/Exception\n+    #9 = Methodref          #60.#527      // org/json/JSONObject.\"<init>\":()V\n+   #10 = Methodref          #47.#534      // org/json/JSONTokener.nextClean:()C\n+   #11 = String             #535          // A JSONObject text must begin with \\'{\\'\n+   #12 = Methodref          #47.#536      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #13 = String             #537          // A JSONObject text must end with \\'}\\'\n+   #14 = Methodref          #47.#538      // org/json/JSONTokener.back:()V\n+   #15 = Methodref          #47.#539      // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n+   #16 = Methodref          #201.#540     // java/lang/Object.toString:()Ljava/lang/String;\n+   #17 = String             #541          // Expected a \\':\\' after a key\n+   #18 = Class              #542          // java/lang/StringBuilder\n+   #19 = Methodref          #18.#527      // java/lang/StringBuilder.\"<init>\":()V\n+   #20 = String             #543          // Duplicate key \\\"\n+   #21 = Methodref          #18.#544      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #22 = String             #545          // \\\"\n+   #23 = Methodref          #18.#540      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #24 = Methodref          #60.#546      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #25 = String             #547          // Expected a \\',\\' or \\'}\\'\n+   #26 = InterfaceMethodref #304.#548     // java/util/Map.size:()I\n+   #27 = Methodref          #2.#530       // java/util/HashMap.\"<init>\":(I)V\n+   #28 = InterfaceMethodref #304.#549     // java/util/Map.entrySet:()Ljava/util/Set;\n+   #29 = InterfaceMethodref #456.#550     // java/util/Set.iterator:()Ljava/util/Iterator;\n+   #30 = InterfaceMethodref #354.#551     // java/util/Iterator.hasNext:()Z\n+   #31 = InterfaceMethodref #354.#552     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #32 = Class              #553          // java/util/Map$Entry\n+   #33 = InterfaceMethodref #32.#554      // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+   #34 = Class              #555          // java/lang/NullPointerException\n+   #35 = String             #556          // Null key.\n+   #36 = Methodref          #34.#557      // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+   #37 = InterfaceMethodref #32.#558      // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+   #38 = Methodref          #56.#559      // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n+   #39 = Methodref          #60.#560      // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #40 = InterfaceMethodref #304.#561     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #41 = Methodref          #60.#562      // org/json/JSONObject.populateMap:(Ljava/lang/Object;)V\n+   #42 = Methodref          #60.#563      // org/json/JSONObject.populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n+   #43 = Methodref          #201.#564     // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #44 = Methodref          #360.#565     // java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+   #45 = Methodref          #566.#567     // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #46 = Methodref          #60.#568      // org/json/JSONObject.putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #47 = Class              #569          // org/json/JSONTokener\n+   #48 = Methodref          #47.#557      // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n+   #49 = Methodref          #60.#570      // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n+   #50 = Methodref          #571.#572     // java/lang/Thread.currentThread:()Ljava/lang/Thread;\n+   #51 = Methodref          #571.#573     // java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;\n+   #52 = Methodref          #364.#574     // java/util/ResourceBundle.getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+   #53 = Methodref          #364.#575     // java/util/ResourceBundle.getKeys:()Ljava/util/Enumeration;\n+   #54 = InterfaceMethodref #365.#576     // java/util/Enumeration.hasMoreElements:()Z\n+   #55 = InterfaceMethodref #365.#577     // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+   #56 = Class              #578          // java/lang/String\n+   #57 = String             #579          // \\\\.\n+   #58 = Methodref          #56.#580      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+   #59 = Methodref          #60.#581      // org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n+   #60 = Class              #582          // org/json/JSONObject\n+   #61 = Methodref          #364.#583     // java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;\n+   #62 = Methodref          #60.#584      // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n+   #63 = Class              #585          // org/json/JSONArray\n+   #64 = Methodref          #63.#527      // org/json/JSONArray.\"<init>\":()V\n+   #65 = Methodref          #63.#586      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+   #66 = String             #587          // JSONArray\n+   #67 = Methodref          #60.#588      // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #68 = Methodref          #136.#589     // java/lang/Double.isInfinite:(D)Z\n+   #69 = Methodref          #136.#590     // java/lang/Double.isNaN:(D)Z\n+   #70 = String             #591          // null\n+   #71 = Methodref          #136.#592     // java/lang/Double.toString:(D)Ljava/lang/String;\n+   #72 = Methodref          #56.#593      // java/lang/String.indexOf:(I)I\n+   #73 = String             #594          // 0\n+   #74 = Methodref          #56.#595      // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+   #75 = Methodref          #56.#596      // java/lang/String.length:()I\n+   #76 = Methodref          #56.#597      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #77 = String             #598          // .\n+   #78 = Class              #599          // org/json/JSONException\n+   #79 = Methodref          #78.#557      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #80 = String             #600          // JSONObject[\n+   #81 = Methodref          #60.#601      // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n+   #82 = String             #602          // ] not found.\n+   #83 = Methodref          #60.#603      // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #84 = String             #604          // enum of type\n+   #85 = Methodref          #360.#605     // java/lang/Class.getSimpleName:()Ljava/lang/String;\n+   #86 = Methodref          #60.#606      // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #87 = Methodref          #60.#607      // org/json/JSONObject.get:(Ljava/lang/String;)Ljava/lang/Object;\n+   #88 = Fieldref           #157.#608     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+   #89 = Methodref          #201.#609     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #90 = String             #610          // false\n+   #91 = Methodref          #56.#611      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+   #92 = Fieldref           #157.#612     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+   #93 = String             #613          // true\n+   #94 = String             #614          // Boolean\n+   #95 = Methodref          #60.#615      // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #96 = String             #616          // BigInteger\n+   #97 = Methodref          #60.#617      // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #98 = String             #618          // BigDecimal\n+   #99 = Class              #619          // java/lang/Number\n+  #100 = Methodref          #99.#620      // java/lang/Number.doubleValue:()D\n+  #101 = Methodref          #136.#621     // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+  #102 = String             #622          // double\n+  #103 = Methodref          #99.#623      // java/lang/Number.floatValue:()F\n+  #104 = Methodref          #133.#624     // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n+  #105 = String             #625          // float\n+  #106 = Methodref          #60.#626      // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #107 = String             #627          // number\n+  #108 = Methodref          #99.#628      // java/lang/Number.intValue:()I\n+  #109 = Methodref          #125.#629     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+  #110 = String             #630          // int\n+  #111 = String             #631          // JSONObject\n+  #112 = Methodref          #99.#632      // java/lang/Number.longValue:()J\n+  #113 = Methodref          #127.#633     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+  #114 = String             #634          // long\n+  #115 = Methodref          #60.#635      // org/json/JSONObject.isEmpty:()Z\n+  #116 = Methodref          #60.#636      // org/json/JSONObject.keySet:()Ljava/util/Set;\n+  #117 = Methodref          #60.#596      // org/json/JSONObject.length:()I\n+  #118 = InterfaceMethodref #456.#637     // java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #119 = Class              #638          // \"[Ljava/lang/String;\"\n+  #120 = Methodref          #360.#639     // java/lang/Class.getFields:()[Ljava/lang/reflect/Field;\n+  #121 = Methodref          #566.#640     // java/lang/reflect/Field.getName:()Ljava/lang/String;\n+  #122 = String             #641          // string\n+  #123 = InterfaceMethodref #304.#642     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+  #124 = Methodref          #60.#643      // org/json/JSONObject.put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n+  #125 = Class              #644          // java/lang/Integer\n+  #126 = Methodref          #125.#628     // java/lang/Integer.intValue:()I\n+  #127 = Class              #645          // java/lang/Long\n+  #128 = Methodref          #127.#632     // java/lang/Long.longValue:()J\n+  #129 = Methodref          #60.#646      // org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n+  #130 = Class              #647          // java/math/BigInteger\n+  #131 = Fieldref           #130.#648     // java/math/BigInteger.ONE:Ljava/math/BigInteger;\n+  #132 = Methodref          #130.#649     // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #133 = Class              #650          // java/lang/Float\n+  #134 = Methodref          #133.#623     // java/lang/Float.floatValue:()F\n+  #135 = Methodref          #60.#651      // org/json/JSONObject.put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n+  #136 = Class              #652          // java/lang/Double\n+  #137 = Methodref          #136.#620     // java/lang/Double.doubleValue:()D\n+  #138 = Methodref          #60.#653      // org/json/JSONObject.put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n+  #139 = Class              #654          // java/math/BigDecimal\n+  #140 = Fieldref           #139.#655     // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n+  #141 = Methodref          #139.#656     // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #142 = String             #657          // Unable to increment [\n+  #143 = String             #658          // ].\n+  #144 = Fieldref           #60.#659      // org/json/JSONObject.NULL:Ljava/lang/Object;\n+  #145 = InterfaceMethodref #304.#636     // java/util/Map.keySet:()Ljava/util/Set;\n+  #146 = InterfaceMethodref #304.#660     // java/util/Map.clear:()V\n+  #147 = InterfaceMethodref #304.#635     // java/util/Map.isEmpty:()Z\n+  #148 = Methodref          #63.#661      // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n+  #149 = String             #662          // Null pointer\n+  #150 = InterfaceMethodref #304.#567     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #151 = Methodref          #60.#663      // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+  #152 = Methodref          #360.#664     // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n+  #153 = Class              #665          // java/lang/Enum\n+  #154 = Methodref          #153.#666     // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #155 = Class              #667          // java/lang/IllegalArgumentException\n+  #156 = Methodref          #60.#668      // org/json/JSONObject.optBoolean:(Ljava/lang/String;Z)Z\n+  #157 = Class              #669          // java/lang/Boolean\n+  #158 = Methodref          #157.#670     // java/lang/Boolean.booleanValue:()Z\n+  #159 = Methodref          #60.#671      // org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z\n+  #160 = Methodref          #60.#672      // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+  #161 = Methodref          #139.#673     // java/math/BigDecimal.\"<init>\":(Ljava/math/BigInteger;)V\n+  #162 = Methodref          #60.#674      // org/json/JSONObject.numberIsFinite:(Ljava/lang/Number;)Z\n+  #163 = Methodref          #139.#675     // java/math/BigDecimal.\"<init>\":(D)V\n+  #164 = Methodref          #139.#557     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n+  #165 = Class              #676          // java/lang/Short\n+  #166 = Class              #677          // java/lang/Byte\n+  #167 = Methodref          #139.#678     // java/math/BigDecimal.\"<init>\":(J)V\n+  #168 = Methodref          #139.#679     // java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;\n+  #169 = Methodref          #130.#680     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+  #170 = Methodref          #60.#681      // org/json/JSONObject.isDecimalNotation:(Ljava/lang/String;)Z\n+  #171 = Methodref          #130.#557     // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n+  #172 = Double             NaNd\n+  #174 = Methodref          #60.#682      // org/json/JSONObject.optDouble:(Ljava/lang/String;D)D\n+  #175 = Methodref          #60.#683      // org/json/JSONObject.optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #176 = Float              NaNf\n+  #177 = Methodref          #60.#684      // org/json/JSONObject.optFloat:(Ljava/lang/String;F)F\n+  #178 = Methodref          #60.#685      // org/json/JSONObject.optInt:(Ljava/lang/String;I)I\n+  #179 = Methodref          #60.#686      // org/json/JSONObject.optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+  #180 = Methodref          #60.#687      // org/json/JSONObject.optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+  #181 = Methodref          #60.#688      // org/json/JSONObject.optLong:(Ljava/lang/String;J)J\n+  #182 = String             #689          //\n+  #183 = Methodref          #60.#690      // org/json/JSONObject.optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #184 = Class              #691          // java/util/IdentityHashMap\n+  #185 = Methodref          #184.#527     // java/util/IdentityHashMap.\"<init>\":()V\n+  #186 = Methodref          #692.#693     // java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n+  #187 = Methodref          #360.#694     // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;\n+  #188 = Methodref          #360.#695     // java/lang/Class.getMethods:()[Ljava/lang/reflect/Method;\n+  #189 = Methodref          #360.#696     // java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;\n+  #190 = Methodref          #457.#697     // java/lang/reflect/Method.getModifiers:()I\n+  #191 = Methodref          #698.#699     // java/lang/reflect/Modifier.isPublic:(I)Z\n+  #192 = Methodref          #698.#700     // java/lang/reflect/Modifier.isStatic:(I)Z\n+  #193 = Methodref          #457.#701     // java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;\n+  #194 = Methodref          #457.#702     // java/lang/reflect/Method.isBridge:()Z\n+  #195 = Methodref          #457.#703     // java/lang/reflect/Method.getReturnType:()Ljava/lang/Class;\n+  #196 = Fieldref           #704.#705     // java/lang/Void.TYPE:Ljava/lang/Class;\n+  #197 = Methodref          #457.#640     // java/lang/reflect/Method.getName:()Ljava/lang/String;\n+  #198 = Methodref          #60.#706      // org/json/JSONObject.isValidMethodName:(Ljava/lang/String;)Z\n+  #199 = Methodref          #60.#707      // org/json/JSONObject.getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n+  #200 = Methodref          #56.#635      // java/lang/String.isEmpty:()Z\n+  #201 = Class              #708          // java/lang/Object\n+  #202 = Methodref          #457.#709     // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #203 = InterfaceMethodref #456.#710     // java/util/Set.contains:(Ljava/lang/Object;)Z\n+  #204 = Methodref          #60.#711      // org/json/JSONObject.recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #205 = InterfaceMethodref #456.#712     // java/util/Set.add:(Ljava/lang/Object;)Z\n+  #206 = Methodref          #60.#713      // org/json/JSONObject.wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+  #207 = InterfaceMethodref #456.#714     // java/util/Set.remove:(Ljava/lang/Object;)Z\n+  #208 = Class              #715          // java/io/Closeable\n+  #209 = InterfaceMethodref #208.#716     // java/io/Closeable.close:()V\n+  #210 = Class              #717          // java/io/IOException\n+  #211 = Class              #718          // java/lang/IllegalAccessException\n+  #212 = Class              #719          // java/lang/reflect/InvocationTargetException\n+  #213 = String             #720          // getClass\n+  #214 = Methodref          #56.#609      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #215 = String             #721          // getDeclaringClass\n+  #216 = Class              #722          // org/json/JSONPropertyIgnore\n+  #217 = Methodref          #60.#723      // org/json/JSONObject.getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+  #218 = Class              #724          // org/json/JSONPropertyName\n+  #219 = Methodref          #60.#725      // org/json/JSONObject.getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #220 = InterfaceMethodref #218.#726     // org/json/JSONPropertyName.value:()Ljava/lang/String;\n+  #221 = String             #372          // get\n+  #222 = Methodref          #56.#727      // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+  #223 = Methodref          #56.#728      // java/lang/String.substring:(I)Ljava/lang/String;\n+  #224 = String             #729          // is\n+  #225 = Methodref          #56.#730      // java/lang/String.charAt:(I)C\n+  #226 = Methodref          #300.#731     // java/lang/Character.isLowerCase:(C)Z\n+  #227 = Fieldref           #363.#732     // java/util/Locale.ROOT:Ljava/util/Locale;\n+  #228 = Methodref          #56.#733      // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+  #229 = Methodref          #300.#734     // java/lang/Character.isUpperCase:(C)Z\n+  #230 = Methodref          #457.#735     // java/lang/reflect/Method.isAnnotationPresent:(Ljava/lang/Class;)Z\n+  #231 = Methodref          #457.#736     // java/lang/reflect/Method.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #232 = Methodref          #457.#737     // java/lang/reflect/Method.getDeclaringClass:()Ljava/lang/Class;\n+  #233 = Methodref          #360.#738     // java/lang/Class.getSuperclass:()Ljava/lang/Class;\n+  #234 = Methodref          #360.#739     // java/lang/Class.getInterfaces:()[Ljava/lang/Class;\n+  #235 = Methodref          #360.#740     // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #236 = Class              #741          // java/lang/SecurityException\n+  #237 = Class              #742          // java/lang/NoSuchMethodException\n+  #238 = Methodref          #136.#743     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+  #239 = Methodref          #133.#744     // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+  #240 = Methodref          #125.#745     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #241 = Methodref          #127.#746     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+  #242 = Methodref          #60.#747      // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n+  #243 = Methodref          #60.#748      // org/json/JSONObject.remove:(Ljava/lang/String;)Ljava/lang/Object;\n+  #244 = Class              #749          // org/json/JSONPointer\n+  #245 = Methodref          #244.#557     // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n+  #246 = Methodref          #60.#750      // org/json/JSONObject.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #247 = Methodref          #244.#751     // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #248 = Methodref          #60.#752      // org/json/JSONObject.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #249 = Class              #753          // org/json/JSONPointerException\n+  #250 = Class              #754          // java/io/StringWriter\n+  #251 = Methodref          #250.#527     // java/io/StringWriter.\"<init>\":()V\n+  #252 = Methodref          #250.#755     // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n+  #253 = Methodref          #60.#756      // org/json/JSONObject.quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+  #254 = String             #757          // \\\"\\\"\n+  #255 = Methodref          #485.#758     // java/io/Writer.write:(Ljava/lang/String;)V\n+  #256 = Methodref          #485.#759     // java/io/Writer.write:(I)V\n+  #257 = String             #760          // \\\\b\n+  #258 = String             #761          // \\\\t\n+  #259 = String             #762          // \\\\n\n+  #260 = String             #763          // \\\\f\n+  #261 = String             #764          // \\\\r\n+  #262 = String             #765          // \\\\u\n+  #263 = Methodref          #125.#766     // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n+  #264 = String             #767          // 0000\n+  #265 = Methodref          #485.#768     // java/io/Writer.write:(Ljava/lang/String;II)V\n+  #266 = InterfaceMethodref #304.#769     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #267 = InterfaceMethodref #456.#609     // java/util/Set.equals:(Ljava/lang/Object;)Z\n+  #268 = Methodref          #60.#549      // org/json/JSONObject.entrySet:()Ljava/util/Set;\n+  #269 = Methodref          #60.#770      // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n+  #270 = Methodref          #63.#770      // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n+  #271 = Methodref          #60.#771      // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #272 = Class              #772          // java/lang/Throwable\n+  #273 = Class              #773          // java/lang/Comparable\n+  #274 = InterfaceMethodref #273.#774     // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I\n+  #275 = Methodref          #139.#775     // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n+  #276 = Methodref          #136.#776     // java/lang/Double.isInfinite:()Z\n+  #277 = Methodref          #136.#777     // java/lang/Double.isNaN:()Z\n+  #278 = Methodref          #133.#776     // java/lang/Float.isInfinite:()Z\n+  #279 = Methodref          #133.#777     // java/lang/Float.isNaN:()Z\n+  #280 = String             #778          // -0\n+  #281 = Fieldref           #139.#779     // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n+  #282 = Double             -0.0d\n+  #284 = Class              #780          // java/lang/NumberFormatException\n+  #285 = Methodref          #136.#781     // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+  #286 = String             #782          // val [\n+  #287 = String             #783          // ] is not a valid number.\n+  #288 = Methodref          #284.#557     // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+  #289 = Methodref          #130.#784     // java/math/BigInteger.bitLength:()I\n+  #290 = Methodref          #130.#628     // java/math/BigInteger.intValue:()I\n+  #291 = Methodref          #130.#632     // java/math/BigInteger.longValue:()J\n+  #292 = String             #785          // JSON does not allow non-finite numbers.\n+  #293 = Methodref          #63.#635      // org/json/JSONArray.isEmpty:()Z\n+  #294 = Methodref          #63.#596      // org/json/JSONArray.length:()I\n+  #295 = Methodref          #63.#786      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n+  #296 = Methodref          #60.#787      // org/json/JSONObject.toString:(I)Ljava/lang/String;\n+  #297 = Methodref          #60.#788      // org/json/JSONObject.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+  #298 = Methodref          #789.#790     // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+  #299 = Class              #791          // org/json/JSONString\n+  #300 = Class              #792          // java/lang/Character\n+  #301 = Class              #793          // java/util/Collection\n+  #302 = Methodref          #360.#794     // java/lang/Class.isArray:()Z\n+  #303 = Methodref          #63.#795      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n+  #304 = Class              #796          // java/util/Map\n+  #305 = Methodref          #360.#797     // java/lang/Class.getPackage:()Ljava/lang/Package;\n+  #306 = Methodref          #507.#640     // java/lang/Package.getName:()Ljava/lang/String;\n+  #307 = String             #798          // java.\n+  #308 = String             #799          // javax.\n+  #309 = Methodref          #60.#800      // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n+  #310 = Methodref          #60.#795      // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;)V\n+  #311 = InterfaceMethodref #299.#801     // org/json/JSONString.toJSONString:()Ljava/lang/String;\n+  #312 = Methodref          #78.#802      // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n+  #313 = Methodref          #60.#803      // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+  #314 = Fieldref           #60.#804      // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+  #315 = Methodref          #805.#806     // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #316 = Methodref          #807.#808     // java/util/regex/Matcher.matches:()Z\n+  #317 = Methodref          #153.#809     // java/lang/Enum.name:()Ljava/lang/String;\n+  #318 = Methodref          #63.#788      // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+  #319 = Methodref          #60.#810      // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #320 = String             #811          // Unable to write JSONObject value for key:\n+  #321 = Methodref          #78.#812      // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #322 = Methodref          #60.#813      // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n+  #323 = Methodref          #60.#814      // org/json/JSONObject.toMap:()Ljava/util/Map;\n+  #324 = Methodref          #63.#815      // org/json/JSONArray.toList:()Ljava/util/List;\n+  #325 = String             #816          // ] is not a\n+  #326 = String             #817          //  (\n+  #327 = Methodref          #18.#818      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #328 = String             #819          // ).\n+  #329 = String             #820          // JavaBean object contains recursively defined member variable of key\n+  #330 = String             #821          // -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n+  #331 = Methodref          #805.#822     // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #332 = Class              #823          // org/json/JSONObject$Null\n+  #333 = Methodref          #332.#824     // org/json/JSONObject$Null.\"<init>\":(Lorg/json/JSONObject$1;)V\n+  #334 = Class              #825          // org/json/JSONObject$1\n+  #335 = Utf8               InnerClasses\n+  #336 = Utf8               Null\n+  #337 = Utf8               NUMBER_PATTERN\n+  #338 = Utf8               Ljava/util/regex/Pattern;\n+  #339 = Utf8               map\n+  #340 = Utf8               Ljava/util/Map;\n+  #341 = Utf8               Signature\n+  #342 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+  #343 = Utf8               NULL\n+  #344 = Utf8               Ljava/lang/Object;\n+  #345 = Utf8               <init>\n+  #346 = Utf8               ()V\n+  #347 = Utf8               Code\n+  #348 = Utf8               LineNumberTable\n+  #349 = Utf8               (Lorg/json/JSONObject;[Ljava/lang/String;)V\n+  #350 = Utf8               StackMapTable\n+  #351 = Utf8               (Lorg/json/JSONTokener;)V\n+  #352 = Utf8               Exceptions\n+  #353 = Utf8               (Ljava/util/Map;)V\n+  #354 = Class              #826          // java/util/Iterator\n+  #355 = Utf8               (Ljava/util/Map<**>;)V\n+  #356 = Utf8               (Ljava/lang/Object;)V\n+  #357 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)V\n+  #358 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+  #359 = Utf8               (Ljava/lang/Object;[Ljava/lang/String;)V\n+  #360 = Class              #827          // java/lang/Class\n+  #361 = Utf8               (Ljava/lang/String;)V\n+  #362 = Utf8               (Ljava/lang/String;Ljava/util/Locale;)V\n+  #363 = Class              #828          // java/util/Locale\n+  #364 = Class              #829          // java/util/ResourceBundle\n+  #365 = Class              #830          // java/util/Enumeration\n+  #366 = Utf8               (I)V\n+  #367 = Utf8               accumulate\n+  #368 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #369 = Utf8               append\n+  #370 = Utf8               doubleToString\n+  #371 = Utf8               (D)Ljava/lang/String;\n+  #372 = Utf8               get\n+  #373 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #374 = Utf8               getEnum\n+  #375 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #376 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+  #377 = Utf8               getBoolean\n+  #378 = Utf8               (Ljava/lang/String;)Z\n+  #379 = Utf8               getBigInteger\n+  #380 = Utf8               (Ljava/lang/String;)Ljava/math/BigInteger;\n+  #381 = Utf8               getBigDecimal\n+  #382 = Utf8               (Ljava/lang/String;)Ljava/math/BigDecimal;\n+  #383 = Utf8               getDouble\n+  #384 = Utf8               (Ljava/lang/String;)D\n+  #385 = Utf8               getFloat\n+  #386 = Utf8               (Ljava/lang/String;)F\n+  #387 = Utf8               getNumber\n+  #388 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+  #389 = Utf8               getInt\n+  #390 = Utf8               (Ljava/lang/String;)I\n+  #391 = Utf8               getJSONArray\n+  #392 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n+  #393 = Utf8               getJSONObject\n+  #394 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+  #395 = Utf8               getLong\n+  #396 = Utf8               (Ljava/lang/String;)J\n+  #397 = Utf8               getNames\n+  #398 = Utf8               (Lorg/json/JSONObject;)[Ljava/lang/String;\n+  #399 = Utf8               (Ljava/lang/Object;)[Ljava/lang/String;\n+  #400 = Class              #831          // \"[Ljava/lang/reflect/Field;\"\n+  #401 = Utf8               getString\n+  #402 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #403 = Utf8               has\n+  #404 = Utf8               increment\n+  #405 = Utf8               isNull\n+  #406 = Utf8               keys\n+  #407 = Utf8               ()Ljava/util/Iterator;\n+  #408 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n+  #409 = Utf8               keySet\n+  #410 = Utf8               ()Ljava/util/Set;\n+  #411 = Utf8               ()Ljava/util/Set<Ljava/lang/String;>;\n+  #412 = Utf8               entrySet\n+  #413 = Utf8               Entry\n+  #414 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n+  #415 = Utf8               length\n+  #416 = Utf8               ()I\n+  #417 = Utf8               clear\n+  #418 = Utf8               isEmpty\n+  #419 = Utf8               ()Z\n+  #420 = Utf8               names\n+  #421 = Utf8               ()Lorg/json/JSONArray;\n+  #422 = Utf8               numberToString\n+  #423 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n+  #424 = Utf8               opt\n+  #425 = Utf8               optEnum\n+  #426 = Utf8               (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+  #427 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n+  #428 = Utf8               optBoolean\n+  #429 = Utf8               (Ljava/lang/String;Z)Z\n+  #430 = Utf8               optBigDecimal\n+  #431 = Utf8               (Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #432 = Utf8               objectToBigDecimal\n+  #433 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #434 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+  #435 = Utf8               optBigInteger\n+  #436 = Utf8               (Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #437 = Utf8               objectToBigInteger\n+  #438 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #439 = Utf8               optDouble\n+  #440 = Utf8               (Ljava/lang/String;D)D\n+  #441 = Utf8               optFloat\n+  #442 = Utf8               (Ljava/lang/String;F)F\n+  #443 = Utf8               optInt\n+  #444 = Utf8               (Ljava/lang/String;I)I\n+  #445 = Utf8               optJSONArray\n+  #446 = Utf8               optJSONObject\n+  #447 = Utf8               (Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+  #448 = Utf8               optLong\n+  #449 = Utf8               (Ljava/lang/String;J)J\n+  #450 = Utf8               optNumber\n+  #451 = Utf8               (Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+  #452 = Utf8               optString\n+  #453 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #454 = Utf8               populateMap\n+  #455 = Class              #832          // \"[Ljava/lang/reflect/Method;\"\n+  #456 = Class              #833          // java/util/Set\n+  #457 = Class              #834          // java/lang/reflect/Method\n+  #458 = Utf8               isValidMethodName\n+  #459 = Utf8               getKeyNameFromMethod\n+  #460 = Utf8               (Ljava/lang/reflect/Method;)Ljava/lang/String;\n+  #461 = Utf8               getAnnotation\n+  #462 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #463 = Class              #835          // \"[Ljava/lang/Class;\"\n+  #464 = Utf8               <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n+  #465 = Utf8               getAnnotationDepth\n+  #466 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+  #467 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n+  #468 = Utf8               put\n+  #469 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+  #470 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Lorg/json/JSONObject;\n+  #471 = Utf8               (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n+  #472 = Utf8               (Ljava/lang/String;D)Lorg/json/JSONObject;\n+  #473 = Utf8               (Ljava/lang/String;F)Lorg/json/JSONObject;\n+  #474 = Utf8               (Ljava/lang/String;I)Lorg/json/JSONObject;\n+  #475 = Utf8               (Ljava/lang/String;J)Lorg/json/JSONObject;\n+  #476 = Utf8               (Ljava/lang/String;Ljava/util/Map;)Lorg/json/JSONObject;\n+  #477 = Utf8               (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n+  #478 = Utf8               putOnce\n+  #479 = Utf8               putOpt\n+  #480 = Utf8               query\n+  #481 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #482 = Utf8               optQuery\n+  #483 = Utf8               quote\n+  #484 = Utf8               (Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+  #485 = Class              #836          // java/io/Writer\n+  #486 = Utf8               remove\n+  #487 = Utf8               similar\n+  #488 = Utf8               (Ljava/lang/Object;)Z\n+  #489 = Utf8               isNumberSimilar\n+  #490 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #491 = Utf8               numberIsFinite\n+  #492 = Utf8               (Ljava/lang/Number;)Z\n+  #493 = Utf8               isDecimalNotation\n+  #494 = Utf8               stringToNumber\n+  #495 = Utf8               stringToValue\n+  #496 = Utf8               testValidity\n+  #497 = Utf8               toJSONArray\n+  #498 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n+  #499 = Utf8               toString\n+  #500 = Utf8               ()Ljava/lang/String;\n+  #501 = Utf8               (I)Ljava/lang/String;\n+  #502 = Utf8               valueToString\n+  #503 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+  #504 = Utf8               wrap\n+  #505 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #506 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+  #507 = Class              #837          // java/lang/Package\n+  #508 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n+  #509 = Utf8               write\n+  #510 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n+  #511 = Utf8               writeValue\n+  #512 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #513 = Utf8               indent\n+  #514 = Utf8               (Ljava/io/Writer;I)V\n+  #515 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n+  #516 = Utf8               toMap\n+  #517 = Utf8               ()Ljava/util/Map;\n+  #518 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+  #519 = Utf8               wrongValueFormatException\n+  #520 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #521 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #522 = Utf8               recursivelyDefinedObjectException\n+  #523 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #524 = Utf8               <clinit>\n+  #525 = Utf8               SourceFile\n+  #526 = Utf8               JSONObject.java\n+  #527 = NameAndType        #345:#346     // \"<init>\":()V\n+  #528 = Utf8               java/util/HashMap\n+  #529 = NameAndType        #339:#340     // map:Ljava/util/Map;\n+  #530 = NameAndType        #345:#366     // \"<init>\":(I)V\n+  #531 = NameAndType        #424:#373     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #532 = NameAndType        #478:#368     // putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #533 = Utf8               java/lang/Exception\n+  #534 = NameAndType        #838:#839     // nextClean:()C\n+  #535 = Utf8               A JSONObject text must begin with \\'{\\'\n+  #536 = NameAndType        #840:#523     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #537 = Utf8               A JSONObject text must end with \\'}\\'\n+  #538 = NameAndType        #841:#346     // back:()V\n+  #539 = NameAndType        #842:#843     // nextValue:()Ljava/lang/Object;\n+  #540 = NameAndType        #499:#500     // toString:()Ljava/lang/String;\n+  #541 = Utf8               Expected a \\':\\' after a key\n+  #542 = Utf8               java/lang/StringBuilder\n+  #543 = Utf8               Duplicate key \\\"\n+  #544 = NameAndType        #369:#844     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #545 = Utf8               \\\"\n+  #546 = NameAndType        #468:#368     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #547 = Utf8               Expected a \\',\\' or \\'}\\'\n+  #548 = NameAndType        #845:#416     // size:()I\n+  #549 = NameAndType        #412:#410     // entrySet:()Ljava/util/Set;\n+  #550 = NameAndType        #846:#407     // iterator:()Ljava/util/Iterator;\n+  #551 = NameAndType        #847:#419     // hasNext:()Z\n+  #552 = NameAndType        #848:#843     // next:()Ljava/lang/Object;\n+  #553 = Utf8               java/util/Map$Entry\n+  #554 = NameAndType        #849:#843     // getKey:()Ljava/lang/Object;\n+  #555 = Utf8               java/lang/NullPointerException\n+  #556 = Utf8               Null key.\n+  #557 = NameAndType        #345:#361     // \"<init>\":(Ljava/lang/String;)V\n+  #558 = NameAndType        #850:#843     // getValue:()Ljava/lang/Object;\n+  #559 = NameAndType        #851:#503     // valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n+  #560 = NameAndType        #504:#505     // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #561 = NameAndType        #468:#852     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #562 = NameAndType        #454:#356     // populateMap:(Ljava/lang/Object;)V\n+  #563 = NameAndType        #454:#357     // populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n+  #564 = NameAndType        #720:#853     // getClass:()Ljava/lang/Class;\n+  #565 = NameAndType        #854:#855     // getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+  #566 = Class              #856          // java/lang/reflect/Field\n+  #567 = NameAndType        #372:#505     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #568 = NameAndType        #479:#368     // putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #569 = Utf8               org/json/JSONTokener\n+  #570 = NameAndType        #345:#351     // \"<init>\":(Lorg/json/JSONTokener;)V\n+  #571 = Class              #857          // java/lang/Thread\n+  #572 = NameAndType        #858:#859     // currentThread:()Ljava/lang/Thread;\n+  #573 = NameAndType        #860:#861     // getContextClassLoader:()Ljava/lang/ClassLoader;\n+  #574 = NameAndType        #862:#863     // getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+  #575 = NameAndType        #864:#865     // getKeys:()Ljava/util/Enumeration;\n+  #576 = NameAndType        #866:#419     // hasMoreElements:()Z\n+  #577 = NameAndType        #867:#843     // nextElement:()Ljava/lang/Object;\n+  #578 = Utf8               java/lang/String\n+  #579 = Utf8               \\\\.\n+  #580 = NameAndType        #868:#869     // split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #581 = NameAndType        #446:#394     // optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n+  #582 = Utf8               org/json/JSONObject\n+  #583 = NameAndType        #401:#402     // getString:(Ljava/lang/String;)Ljava/lang/String;\n+  #584 = NameAndType        #496:#356     // testValidity:(Ljava/lang/Object;)V\n+  #585 = Utf8               org/json/JSONArray\n+  #586 = NameAndType        #468:#870     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #587 = Utf8               JSONArray\n+  #588 = NameAndType        #519:#521     // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #589 = NameAndType        #871:#872     // isInfinite:(D)Z\n+  #590 = NameAndType        #873:#872     // isNaN:(D)Z\n+  #591 = Utf8               null\n+  #592 = NameAndType        #499:#371     // toString:(D)Ljava/lang/String;\n+  #593 = NameAndType        #874:#875     // indexOf:(I)I\n+  #594 = Utf8               0\n+  #595 = NameAndType        #876:#378     // endsWith:(Ljava/lang/String;)Z\n+  #596 = NameAndType        #415:#416     // length:()I\n+  #597 = NameAndType        #877:#878     // substring:(II)Ljava/lang/String;\n+  #598 = Utf8               .\n+  #599 = Utf8               org/json/JSONException\n+  #600 = Utf8               JSONObject[\n+  #601 = NameAndType        #483:#402     // quote:(Ljava/lang/String;)Ljava/lang/String;\n+  #602 = Utf8               ] not found.\n+  #603 = NameAndType        #425:#375     // optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #604 = Utf8               enum of type\n+  #605 = NameAndType        #879:#500     // getSimpleName:()Ljava/lang/String;\n+  #606 = NameAndType        #519:#520     // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #607 = NameAndType        #372:#373     // get:(Ljava/lang/String;)Ljava/lang/Object;\n+  #608 = NameAndType        #880:#881     // FALSE:Ljava/lang/Boolean;\n+  #609 = NameAndType        #882:#488     // equals:(Ljava/lang/Object;)Z\n+  #610 = Utf8               false\n+  #611 = NameAndType        #883:#378     // equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #612 = NameAndType        #884:#881     // TRUE:Ljava/lang/Boolean;\n+  #613 = Utf8               true\n+  #614 = Utf8               Boolean\n+  #615 = NameAndType        #437:#438     // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #616 = Utf8               BigInteger\n+  #617 = NameAndType        #432:#433     // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #618 = Utf8               BigDecimal\n+  #619 = Utf8               java/lang/Number\n+  #620 = NameAndType        #885:#886     // doubleValue:()D\n+  #621 = NameAndType        #887:#384     // parseDouble:(Ljava/lang/String;)D\n+  #622 = Utf8               double\n+  #623 = NameAndType        #888:#889     // floatValue:()F\n+  #624 = NameAndType        #890:#386     // parseFloat:(Ljava/lang/String;)F\n+  #625 = Utf8               float\n+  #626 = NameAndType        #494:#388     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #627 = Utf8               number\n+  #628 = NameAndType        #891:#416     // intValue:()I\n+  #629 = NameAndType        #892:#390     // parseInt:(Ljava/lang/String;)I\n+  #630 = Utf8               int\n+  #631 = Utf8               JSONObject\n+  #632 = NameAndType        #893:#894     // longValue:()J\n+  #633 = NameAndType        #895:#396     // parseLong:(Ljava/lang/String;)J\n+  #634 = Utf8               long\n+  #635 = NameAndType        #418:#419     // isEmpty:()Z\n+  #636 = NameAndType        #409:#410     // keySet:()Ljava/util/Set;\n+  #637 = NameAndType        #896:#897     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #638 = Utf8               [Ljava/lang/String;\n+  #639 = NameAndType        #898:#899     // getFields:()[Ljava/lang/reflect/Field;\n+  #640 = NameAndType        #900:#500     // getName:()Ljava/lang/String;\n+  #641 = Utf8               string\n+  #642 = NameAndType        #901:#488     // containsKey:(Ljava/lang/Object;)Z\n+  #643 = NameAndType        #468:#474     // put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n+  #644 = Utf8               java/lang/Integer\n+  #645 = Utf8               java/lang/Long\n+  #646 = NameAndType        #468:#475     // put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n+  #647 = Utf8               java/math/BigInteger\n+  #648 = NameAndType        #902:#903     // ONE:Ljava/math/BigInteger;\n+  #649 = NameAndType        #904:#905     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #650 = Utf8               java/lang/Float\n+  #651 = NameAndType        #468:#473     // put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n+  #652 = Utf8               java/lang/Double\n+  #653 = NameAndType        #468:#472     // put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n+  #654 = Utf8               java/math/BigDecimal\n+  #655 = NameAndType        #902:#906     // ONE:Ljava/math/BigDecimal;\n+  #656 = NameAndType        #904:#907     // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #657 = Utf8               Unable to increment [\n+  #658 = Utf8               ].\n+  #659 = NameAndType        #343:#344     // NULL:Ljava/lang/Object;\n+  #660 = NameAndType        #417:#346     // clear:()V\n+  #661 = NameAndType        #345:#908     // \"<init>\":(Ljava/util/Collection;)V\n+  #662 = Utf8               Null pointer\n+  #663 = NameAndType        #425:#426     // optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+  #664 = NameAndType        #909:#910     // isAssignableFrom:(Ljava/lang/Class;)Z\n+  #665 = Utf8               java/lang/Enum\n+  #666 = NameAndType        #851:#375     // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #667 = Utf8               java/lang/IllegalArgumentException\n+  #668 = NameAndType        #428:#429     // optBoolean:(Ljava/lang/String;Z)Z\n+  #669 = Utf8               java/lang/Boolean\n+  #670 = NameAndType        #911:#419     // booleanValue:()Z\n+  #671 = NameAndType        #377:#378     // getBoolean:(Ljava/lang/String;)Z\n+  #672 = NameAndType        #432:#434     // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+  #673 = NameAndType        #345:#912     // \"<init>\":(Ljava/math/BigInteger;)V\n+  #674 = NameAndType        #491:#492     // numberIsFinite:(Ljava/lang/Number;)Z\n+  #675 = NameAndType        #345:#913     // \"<init>\":(D)V\n+  #676 = Utf8               java/lang/Short\n+  #677 = Utf8               java/lang/Byte\n+  #678 = NameAndType        #345:#914     // \"<init>\":(J)V\n+  #679 = NameAndType        #915:#916     // toBigInteger:()Ljava/math/BigInteger;\n+  #680 = NameAndType        #851:#917     // valueOf:(J)Ljava/math/BigInteger;\n+  #681 = NameAndType        #493:#378     // isDecimalNotation:(Ljava/lang/String;)Z\n+  #682 = NameAndType        #439:#440     // optDouble:(Ljava/lang/String;D)D\n+  #683 = NameAndType        #450:#388     // optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #684 = NameAndType        #441:#442     // optFloat:(Ljava/lang/String;F)F\n+  #685 = NameAndType        #443:#444     // optInt:(Ljava/lang/String;I)I\n+  #686 = NameAndType        #450:#451     // optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+  #687 = NameAndType        #446:#447     // optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+  #688 = NameAndType        #448:#449     // optLong:(Ljava/lang/String;J)J\n+  #689 = Utf8\n+  #690 = NameAndType        #452:#453     // optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #691 = Utf8               java/util/IdentityHashMap\n+  #692 = Class              #918          // java/util/Collections\n+  #693 = NameAndType        #919:#920     // newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n+  #694 = NameAndType        #921:#861     // getClassLoader:()Ljava/lang/ClassLoader;\n+  #695 = NameAndType        #922:#923     // getMethods:()[Ljava/lang/reflect/Method;\n+  #696 = NameAndType        #924:#923     // getDeclaredMethods:()[Ljava/lang/reflect/Method;\n+  #697 = NameAndType        #925:#416     // getModifiers:()I\n+  #698 = Class              #926          // java/lang/reflect/Modifier\n+  #699 = NameAndType        #927:#928     // isPublic:(I)Z\n+  #700 = NameAndType        #929:#928     // isStatic:(I)Z\n+  #701 = NameAndType        #930:#931     // getParameterTypes:()[Ljava/lang/Class;\n+  #702 = NameAndType        #932:#419     // isBridge:()Z\n+  #703 = NameAndType        #933:#853     // getReturnType:()Ljava/lang/Class;\n+  #704 = Class              #934          // java/lang/Void\n+  #705 = NameAndType        #935:#936     // TYPE:Ljava/lang/Class;\n+  #706 = NameAndType        #458:#378     // isValidMethodName:(Ljava/lang/String;)Z\n+  #707 = NameAndType        #459:#460     // getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n+  #708 = Utf8               java/lang/Object\n+  #709 = NameAndType        #937:#938     // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #710 = NameAndType        #939:#488     // contains:(Ljava/lang/Object;)Z\n+  #711 = NameAndType        #522:#523     // recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #712 = NameAndType        #904:#488     // add:(Ljava/lang/Object;)Z\n+  #713 = NameAndType        #504:#506     // wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+  #714 = NameAndType        #486:#488     // remove:(Ljava/lang/Object;)Z\n+  #715 = Utf8               java/io/Closeable\n+  #716 = NameAndType        #940:#346     // close:()V\n+  #717 = Utf8               java/io/IOException\n+  #718 = Utf8               java/lang/IllegalAccessException\n+  #719 = Utf8               java/lang/reflect/InvocationTargetException\n+  #720 = Utf8               getClass\n+  #721 = Utf8               getDeclaringClass\n+  #722 = Utf8               org/json/JSONPropertyIgnore\n+  #723 = NameAndType        #465:#466     // getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+  #724 = Utf8               org/json/JSONPropertyName\n+  #725 = NameAndType        #461:#462     // getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #726 = NameAndType        #941:#500     // value:()Ljava/lang/String;\n+  #727 = NameAndType        #942:#378     // startsWith:(Ljava/lang/String;)Z\n+  #728 = NameAndType        #877:#501     // substring:(I)Ljava/lang/String;\n+  #729 = Utf8               is\n+  #730 = NameAndType        #943:#944     // charAt:(I)C\n+  #731 = NameAndType        #945:#946     // isLowerCase:(C)Z\n+  #732 = NameAndType        #947:#948     // ROOT:Ljava/util/Locale;\n+  #733 = NameAndType        #949:#950     // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+  #734 = NameAndType        #951:#946     // isUpperCase:(C)Z\n+  #735 = NameAndType        #952:#910     // isAnnotationPresent:(Ljava/lang/Class;)Z\n+  #736 = NameAndType        #461:#953     // getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #737 = NameAndType        #721:#853     // getDeclaringClass:()Ljava/lang/Class;\n+  #738 = NameAndType        #954:#853     // getSuperclass:()Ljava/lang/Class;\n+  #739 = NameAndType        #955:#931     // getInterfaces:()[Ljava/lang/Class;\n+  #740 = NameAndType        #956:#957     // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #741 = Utf8               java/lang/SecurityException\n+  #742 = Utf8               java/lang/NoSuchMethodException\n+  #743 = NameAndType        #851:#958     // valueOf:(D)Ljava/lang/Double;\n+  #744 = NameAndType        #851:#959     // valueOf:(F)Ljava/lang/Float;\n+  #745 = NameAndType        #851:#960     // valueOf:(I)Ljava/lang/Integer;\n+  #746 = NameAndType        #851:#961     // valueOf:(J)Ljava/lang/Long;\n+  #747 = NameAndType        #345:#353     // \"<init>\":(Ljava/util/Map;)V\n+  #748 = NameAndType        #486:#373     // remove:(Ljava/lang/String;)Ljava/lang/Object;\n+  #749 = Utf8               org/json/JSONPointer\n+  #750 = NameAndType        #480:#481     // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #751 = NameAndType        #962:#505     // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #752 = NameAndType        #482:#481     // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #753 = Utf8               org/json/JSONPointerException\n+  #754 = Utf8               java/io/StringWriter\n+  #755 = NameAndType        #963:#964     // getBuffer:()Ljava/lang/StringBuffer;\n+  #756 = NameAndType        #483:#484     // quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+  #757 = Utf8               \\\"\\\"\n+  #758 = NameAndType        #509:#361     // write:(Ljava/lang/String;)V\n+  #759 = NameAndType        #509:#366     // write:(I)V\n+  #760 = Utf8               \\\\b\n+  #761 = Utf8               \\\\t\n+  #762 = Utf8               \\\\n\n+  #763 = Utf8               \\\\f\n+  #764 = Utf8               \\\\r\n+  #765 = Utf8               \\\\u\n+  #766 = NameAndType        #965:#501     // toHexString:(I)Ljava/lang/String;\n+  #767 = Utf8               0000\n+  #768 = NameAndType        #509:#966     // write:(Ljava/lang/String;II)V\n+  #769 = NameAndType        #486:#505     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #770 = NameAndType        #487:#488     // similar:(Ljava/lang/Object;)Z\n+  #771 = NameAndType        #489:#490     // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #772 = Utf8               java/lang/Throwable\n+  #773 = Utf8               java/lang/Comparable\n+  #774 = NameAndType        #967:#968     // compareTo:(Ljava/lang/Object;)I\n+  #775 = NameAndType        #967:#969     // compareTo:(Ljava/math/BigDecimal;)I\n+  #776 = NameAndType        #871:#419     // isInfinite:()Z\n+  #777 = NameAndType        #873:#419     // isNaN:()Z\n+  #778 = Utf8               -0\n+  #779 = NameAndType        #970:#906     // ZERO:Ljava/math/BigDecimal;\n+  #780 = Utf8               java/lang/NumberFormatException\n+  #781 = NameAndType        #851:#971     // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+  #782 = Utf8               val [\n+  #783 = Utf8               ] is not a valid number.\n+  #784 = NameAndType        #972:#416     // bitLength:()I\n+  #785 = Utf8               JSON does not allow non-finite numbers.\n+  #786 = NameAndType        #401:#501     // getString:(I)Ljava/lang/String;\n+  #787 = NameAndType        #499:#501     // toString:(I)Ljava/lang/String;\n+  #788 = NameAndType        #509:#515     // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+  #789 = Class              #973          // org/json/JSONWriter\n+  #790 = NameAndType        #502:#503     // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+  #791 = Utf8               org/json/JSONString\n+  #792 = Utf8               java/lang/Character\n+  #793 = Utf8               java/util/Collection\n+  #794 = NameAndType        #974:#419     // isArray:()Z\n+  #795 = NameAndType        #345:#356     // \"<init>\":(Ljava/lang/Object;)V\n+  #796 = Utf8               java/util/Map\n+  #797 = NameAndType        #975:#976     // getPackage:()Ljava/lang/Package;\n+  #798 = Utf8               java.\n+  #799 = Utf8               javax.\n+  #800 = NameAndType        #345:#357     // \"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n+  #801 = NameAndType        #977:#500     // toJSONString:()Ljava/lang/String;\n+  #802 = NameAndType        #345:#978     // \"<init>\":(Ljava/lang/Throwable;)V\n+  #803 = NameAndType        #422:#423     // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+  #804 = NameAndType        #337:#338     // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+  #805 = Class              #979          // java/util/regex/Pattern\n+  #806 = NameAndType        #980:#981     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #807 = Class              #982          // java/util/regex/Matcher\n+  #808 = NameAndType        #983:#419     // matches:()Z\n+  #809 = NameAndType        #984:#500     // name:()Ljava/lang/String;\n+  #810 = NameAndType        #511:#512     // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #811 = Utf8               Unable to write JSONObject value for key:\n+  #812 = NameAndType        #345:#985     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #813 = NameAndType        #513:#514     // indent:(Ljava/io/Writer;I)V\n+  #814 = NameAndType        #516:#517     // toMap:()Ljava/util/Map;\n+  #815 = NameAndType        #986:#987     // toList:()Ljava/util/List;\n+  #816 = Utf8               ] is not a\n+  #817 = Utf8                (\n+  #818 = NameAndType        #369:#988     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #819 = Utf8               ).\n+  #820 = Utf8               JavaBean object contains recursively defined member variable of key\n+  #821 = Utf8               -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n+  #822 = NameAndType        #989:#990     // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #823 = Utf8               org/json/JSONObject$Null\n+  #824 = NameAndType        #345:#991     // \"<init>\":(Lorg/json/JSONObject$1;)V\n+  #825 = Utf8               org/json/JSONObject$1\n+  #826 = Utf8               java/util/Iterator\n+  #827 = Utf8               java/lang/Class\n+  #828 = Utf8               java/util/Locale\n+  #829 = Utf8               java/util/ResourceBundle\n+  #830 = Utf8               java/util/Enumeration\n+  #831 = Utf8               [Ljava/lang/reflect/Field;\n+  #832 = Utf8               [Ljava/lang/reflect/Method;\n+  #833 = Utf8               java/util/Set\n+  #834 = Utf8               java/lang/reflect/Method\n+  #835 = Utf8               [Ljava/lang/Class;\n+  #836 = Utf8               java/io/Writer\n+  #837 = Utf8               java/lang/Package\n+  #838 = Utf8               nextClean\n+  #839 = Utf8               ()C\n+  #840 = Utf8               syntaxError\n+  #841 = Utf8               back\n+  #842 = Utf8               nextValue\n+  #843 = Utf8               ()Ljava/lang/Object;\n+  #844 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #845 = Utf8               size\n+  #846 = Utf8               iterator\n+  #847 = Utf8               hasNext\n+  #848 = Utf8               next\n+  #849 = Utf8               getKey\n+  #850 = Utf8               getValue\n+  #851 = Utf8               valueOf\n+  #852 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #853 = Utf8               ()Ljava/lang/Class;\n+  #854 = Utf8               getField\n+  #855 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n+  #856 = Utf8               java/lang/reflect/Field\n+  #857 = Utf8               java/lang/Thread\n+  #858 = Utf8               currentThread\n+  #859 = Utf8               ()Ljava/lang/Thread;\n+  #860 = Utf8               getContextClassLoader\n+  #861 = Utf8               ()Ljava/lang/ClassLoader;\n+  #862 = Utf8               getBundle\n+  #863 = Utf8               (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+  #864 = Utf8               getKeys\n+  #865 = Utf8               ()Ljava/util/Enumeration;\n+  #866 = Utf8               hasMoreElements\n+  #867 = Utf8               nextElement\n+  #868 = Utf8               split\n+  #869 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #870 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #871 = Utf8               isInfinite\n+  #872 = Utf8               (D)Z\n+  #873 = Utf8               isNaN\n+  #874 = Utf8               indexOf\n+  #875 = Utf8               (I)I\n+  #876 = Utf8               endsWith\n+  #877 = Utf8               substring\n+  #878 = Utf8               (II)Ljava/lang/String;\n+  #879 = Utf8               getSimpleName\n+  #880 = Utf8               FALSE\n+  #881 = Utf8               Ljava/lang/Boolean;\n+  #882 = Utf8               equals\n+  #883 = Utf8               equalsIgnoreCase\n+  #884 = Utf8               TRUE\n+  #885 = Utf8               doubleValue\n+  #886 = Utf8               ()D\n+  #887 = Utf8               parseDouble\n+  #888 = Utf8               floatValue\n+  #889 = Utf8               ()F\n+  #890 = Utf8               parseFloat\n+  #891 = Utf8               intValue\n+  #892 = Utf8               parseInt\n+  #893 = Utf8               longValue\n+  #894 = Utf8               ()J\n+  #895 = Utf8               parseLong\n+  #896 = Utf8               toArray\n+  #897 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #898 = Utf8               getFields\n+  #899 = Utf8               ()[Ljava/lang/reflect/Field;\n+  #900 = Utf8               getName\n+  #901 = Utf8               containsKey\n+  #902 = Utf8               ONE\n+  #903 = Utf8               Ljava/math/BigInteger;\n+  #904 = Utf8               add\n+  #905 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #906 = Utf8               Ljava/math/BigDecimal;\n+  #907 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #908 = Utf8               (Ljava/util/Collection;)V\n+  #909 = Utf8               isAssignableFrom\n+  #910 = Utf8               (Ljava/lang/Class;)Z\n+  #911 = Utf8               booleanValue\n+  #912 = Utf8               (Ljava/math/BigInteger;)V\n+  #913 = Utf8               (D)V\n+  #914 = Utf8               (J)V\n+  #915 = Utf8               toBigInteger\n+  #916 = Utf8               ()Ljava/math/BigInteger;\n+  #917 = Utf8               (J)Ljava/math/BigInteger;\n+  #918 = Utf8               java/util/Collections\n+  #919 = Utf8               newSetFromMap\n+  #920 = Utf8               (Ljava/util/Map;)Ljava/util/Set;\n+  #921 = Utf8               getClassLoader\n+  #922 = Utf8               getMethods\n+  #923 = Utf8               ()[Ljava/lang/reflect/Method;\n+  #924 = Utf8               getDeclaredMethods\n+  #925 = Utf8               getModifiers\n+  #926 = Utf8               java/lang/reflect/Modifier\n+  #927 = Utf8               isPublic\n+  #928 = Utf8               (I)Z\n+  #929 = Utf8               isStatic\n+  #930 = Utf8               getParameterTypes\n+  #931 = Utf8               ()[Ljava/lang/Class;\n+  #932 = Utf8               isBridge\n+  #933 = Utf8               getReturnType\n+  #934 = Utf8               java/lang/Void\n+  #935 = Utf8               TYPE\n+  #936 = Utf8               Ljava/lang/Class;\n+  #937 = Utf8               invoke\n+  #938 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #939 = Utf8               contains\n+  #940 = Utf8               close\n+  #941 = Utf8               value\n+  #942 = Utf8               startsWith\n+  #943 = Utf8               charAt\n+  #944 = Utf8               (I)C\n+  #945 = Utf8               isLowerCase\n+  #946 = Utf8               (C)Z\n+  #947 = Utf8               ROOT\n+  #948 = Utf8               Ljava/util/Locale;\n+  #949 = Utf8               toLowerCase\n+  #950 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n+  #951 = Utf8               isUpperCase\n+  #952 = Utf8               isAnnotationPresent\n+  #953 = Utf8               (Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #954 = Utf8               getSuperclass\n+  #955 = Utf8               getInterfaces\n+  #956 = Utf8               getMethod\n+  #957 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #958 = Utf8               (D)Ljava/lang/Double;\n+  #959 = Utf8               (F)Ljava/lang/Float;\n+  #960 = Utf8               (I)Ljava/lang/Integer;\n+  #961 = Utf8               (J)Ljava/lang/Long;\n+  #962 = Utf8               queryFrom\n+  #963 = Utf8               getBuffer\n+  #964 = Utf8               ()Ljava/lang/StringBuffer;\n+  #965 = Utf8               toHexString\n+  #966 = Utf8               (Ljava/lang/String;II)V\n+  #967 = Utf8               compareTo\n+  #968 = Utf8               (Ljava/lang/Object;)I\n+  #969 = Utf8               (Ljava/math/BigDecimal;)I\n+  #970 = Utf8               ZERO\n+  #971 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n+  #972 = Utf8               bitLength\n+  #973 = Utf8               org/json/JSONWriter\n+  #974 = Utf8               isArray\n+  #975 = Utf8               getPackage\n+  #976 = Utf8               ()Ljava/lang/Package;\n+  #977 = Utf8               toJSONString\n+  #978 = Utf8               (Ljava/lang/Throwable;)V\n+  #979 = Utf8               java/util/regex/Pattern\n+  #980 = Utf8               matcher\n+  #981 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #982 = Utf8               java/util/regex/Matcher\n+  #983 = Utf8               matches\n+  #984 = Utf8               name\n+  #985 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #986 = Utf8               toList\n+  #987 = Utf8               ()Ljava/util/List;\n+  #988 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #989 = Utf8               compile\n+  #990 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #991 = Utf8               (Lorg/json/JSONObject$1;)V\n {\n   static final java.util.regex.Pattern NUMBER_PATTERN;\n     descriptor: Ljava/util/regex/Pattern;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private final java.util.Map<java.lang.String, java.lang.Object> map;\n     descriptor: Ljava/util/Map;\n@@ -1342,15 +1306,15 @@\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/util/Map$Entry ]\n         frame_type = 250 /* chop */\n           offset_delta = 36\n         frame_type = 250 /* chop */\n           offset_delta = 2\n-    Signature: #361                         // (Ljava/util/Map<**>;)V\n+    Signature: #355                         // (Ljava/util/Map<**>;)V\n \n   public org.json.JSONObject(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -1376,15 +1340,15 @@\n          6: aload_2\n          7: invokespecial #42                 // Method populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n         10: return\n       LineNumberTable:\n         line 371: 0\n         line 372: 4\n         line 373: 10\n-    Signature: #364                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+    Signature: #358                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n \n   public org.json.JSONObject(java.lang.Object, java.lang.String...);\n     descriptor: (Ljava/lang/Object;[Ljava/lang/String;)V\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=4, locals=7, args_size=3\n          0: aload_0\n@@ -1654,15 +1618,16 @@\n         85: aload_0\n         86: areturn\n       LineNumberTable:\n         line 493: 0\n         line 494: 4\n         line 495: 10\n         line 496: 14\n-        line 497: 31\n+        line 497: 16\n+        line 498: 37\n         line 496: 38\n         line 499: 45\n         line 500: 52\n         line 502: 64\n         line 504: 85\n       StackMapTable: number_of_entries = 5\n         frame_type = 255 /* full_frame */\n@@ -1900,15 +1865,15 @@\n         line 607: 42\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 42\n           locals = [ class java/lang/Enum ]\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #384                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+    Signature: #376                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n \n   public boolean getBoolean(java.lang.String) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n@@ -2626,41 +2591,41 @@\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: invokevirtual #116                // Method keySet:()Ljava/util/Set;\n          4: invokeinterface #29,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;\n          9: areturn\n       LineNumberTable:\n         line 944: 0\n-    Signature: #418                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n+    Signature: #408                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n \n   public java.util.Set<java.lang.String> keySet();\n     descriptor: ()Ljava/util/Set;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #4                  // Field map:Ljava/util/Map;\n          4: invokeinterface #145,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;\n          9: areturn\n       LineNumberTable:\n         line 956: 0\n-    Signature: #421                         // ()Ljava/util/Set<Ljava/lang/String;>;\n+    Signature: #411                         // ()Ljava/util/Set<Ljava/lang/String;>;\n \n   protected java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet();\n     descriptor: ()Ljava/util/Set;\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #4                  // Field map:Ljava/util/Map;\n          4: invokeinterface #28,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;\n          9: areturn\n       LineNumberTable:\n         line 972: 0\n-    Signature: #424                         // ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n+    Signature: #414                         // ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n \n   public int length();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -2828,15 +2793,15 @@\n          1: aload_1\n          2: aload_2\n          3: aconst_null\n          4: invokevirtual #151                // Method optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n          7: areturn\n       LineNumberTable:\n         line 1068: 0\n-    Signature: #384                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+    Signature: #376                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n \n   public <E extends java.lang.Enum<E>> E optEnum(java.lang.Class<E>, java.lang.String, E);\n     descriptor: (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=4\n          0: aload_0\n@@ -2897,15 +2862,15 @@\n         frame_type = 21 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/json/JSONObject, class java/lang/Class, class java/lang/String, class java/lang/Enum ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NullPointerException ]\n-    Signature: #439                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n+    Signature: #427                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n \n   public boolean optBoolean(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -3783,15 +3748,15 @@\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 68 /* same_locals_1_stack_item */\n           stack = [ class java/lang/reflect/InvocationTargetException ]\n         frame_type = 248 /* chop */\n           offset_delta = 1\n         frame_type = 248 /* chop */\n           offset_delta = 5\n-    Signature: #364                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+    Signature: #358                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n \n   private static boolean isValidMethodName(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: ldc           #213                // String getClass\n@@ -4093,15 +4058,15 @@\n           offset_delta = 4\n         frame_type = 248 /* chop */\n           offset_delta = 5\n         frame_type = 83 /* same_locals_1_stack_item */\n           stack = [ class java/lang/SecurityException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NoSuchMethodException ]\n-    Signature: #484                         // <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n+    Signature: #464                         // <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n \n   private static int getAnnotationDepth(java.lang.reflect.Method, java.lang.Class<? extends java.lang.annotation.Annotation>);\n     descriptor: (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=3, locals=9, args_size=2\n          0: aload_0\n@@ -4250,15 +4215,15 @@\n           locals = [ int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 1\n           locals = [ class java/lang/reflect/Method, class java/lang/Class, class java/lang/Class ]\n           stack = [ class java/lang/SecurityException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NoSuchMethodException ]\n-    Signature: #487                         // (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n+    Signature: #467                         // (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n \n   public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;Z)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n@@ -4297,15 +4262,15 @@\n          7: invokespecial #148                // Method org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n         10: invokevirtual #24                 // Method put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n         13: areturn\n       LineNumberTable:\n         line 1771: 0\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #492                         // (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n+    Signature: #471                         // (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n \n   public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;D)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n@@ -4380,15 +4345,15 @@\n          7: invokespecial #242                // Method \"<init>\":(Ljava/util/Map;)V\n         10: invokevirtual #24                 // Method put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n         13: areturn\n       LineNumberTable:\n         line 1857: 0\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #498                         // (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n+    Signature: #477                         // (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n \n   public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_1\n@@ -5827,15 +5792,15 @@\n         line 2480: 152\n         line 2481: 162\n         line 2483: 171\n         line 2484: 178\n         line 2485: 183\n         line 2487: 192\n         line 2488: 200\n-        line 2489: 205\n+        line 2489: 204\n         line 2490: 214\n         line 2491: 228\n         line 2492: 235\n         line 2493: 244\n         line 2495: 249\n         line 2496: 253\n         line 2499: 263\n@@ -5863,15 +5828,15 @@\n         frame_type = 13 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 8\n           locals = [ class java/lang/Object, class java/util/Set ]\n           stack = [ class org/json/JSONException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Exception ]\n-    Signature: #535                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n+    Signature: #508                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n \n   public java.io.Writer write(java.io.Writer) throws org.json.JSONException;\n     descriptor: (Ljava/io/Writer;)Ljava/io/Writer;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n@@ -6456,15 +6421,15 @@\n         frame_type = 28 /* same */\n         frame_type = 28 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ class java/lang/Object ]\n         frame_type = 248 /* chop */\n           offset_delta = 17\n-    Signature: #545                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+    Signature: #518                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n \n   private static org.json.JSONException wrongValueFormatException(java.lang.String, java.lang.String, java.lang.Throwable);\n     descriptor: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: new           #78                 // class org/json/JSONException\n@@ -6567,8 +6532,8 @@\n         line 162: 0\n         line 175: 9\n }\n SourceFile: \"JSONObject.java\"\n InnerClasses:\n   static #334;                            // class org/json/JSONObject$1\n   private static final #336= #332 of #60; // Null=class org/json/JSONObject$Null of class org/json/JSONObject\n-  public static #423= #32 of #304;        // Entry=class java/util/Map$Entry of class java/util/Map\n+  public static #413= #32 of #304;        // Entry=class java/util/Map$Entry of class java/util/Map\n"}]}
