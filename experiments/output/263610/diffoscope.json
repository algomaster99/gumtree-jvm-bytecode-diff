{"diffoscope-json-version": 1, "source1": "first/FTPClient$CSL.class", "source2": "second/FTPClient$CSL.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,51 +13,51 @@\n     private final long idle;\n     private final int currentSoTimeout;\n     private long time;\n     private int notAcked;\n     private int acksAcked;\n     private int ioErrors;\n     \n-    CSL(final FTPClient parent, final long idleTime, final int maxWait) throws SocketException {\n+    CSL(final FTPClient parent, final long idle, final int soTimeout) throws SocketException {\n         this.time = System.currentTimeMillis();\n-        this.idle = idleTime;\n+        this.idle = idle;\n         this.parent = parent;\n         this.currentSoTimeout = parent.getSoTimeout();\n-        parent.setSoTimeout(maxWait);\n+        parent.setSoTimeout(soTimeout);\n     }\n     \n-    public void bytesTransferred(final CopyStreamEvent event) {\n-        this.bytesTransferred(event.getTotalBytesTransferred(), event.getBytesTransferred(), event.getStreamSize());\n+    public void bytesTransferred(final CopyStreamEvent copyStreamEvent) {\n+        this.bytesTransferred(copyStreamEvent.getTotalBytesTransferred(), copyStreamEvent.getBytesTransferred(), copyStreamEvent.getStreamSize());\n     }\n     \n-    public void bytesTransferred(final long totalBytesTransferred, final int bytesTransferred, final long streamSize) {\n-        final long now = System.currentTimeMillis();\n-        if (now - this.time > this.idle) {\n+    public void bytesTransferred(final long n, final int n2, final long n3) {\n+        final long currentTimeMillis = System.currentTimeMillis();\n+        if (currentTimeMillis - this.time > this.idle) {\n             try {\n                 this.parent.__noop();\n                 ++this.acksAcked;\n             }\n-            catch (final SocketTimeoutException e) {\n+            catch (final SocketTimeoutException ex) {\n                 ++this.notAcked;\n             }\n-            catch (final IOException e2) {\n+            catch (final IOException ex2) {\n                 ++this.ioErrors;\n             }\n-            this.time = now;\n+            this.time = currentTimeMillis;\n         }\n     }\n     \n     int[] cleanUp() throws IOException {\n-        final int remain = this.notAcked;\n+        final int notAcked = this.notAcked;\n         try {\n             while (this.notAcked > 0) {\n                 this.parent.getReply();\n                 --this.notAcked;\n             }\n         }\n         catch (final SocketTimeoutException ex) {}\n         finally {\n             this.parent.setSoTimeout(this.currentSoTimeout);\n         }\n-        return new int[] { this.acksAcked, remain, this.notAcked, this.ioErrors };\n+        return new int[] { this.acksAcked, notAcked, this.notAcked, this.ioErrors };\n     }\n }\n"}]}
