{"diffoscope-json-version": 1, "source1": "first/ImmutablePair.class", "source2": "second/ImmutablePair.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,42 +11,42 @@\n     public final L left;\n     public final R right;\n     \n     public static <L, R> ImmutablePair<L, R>[] emptyArray() {\n         return (ImmutablePair[])ImmutablePair.EMPTY_ARRAY;\n     }\n     \n-    public static <L, R> Pair<L, R> left(final L left) {\n-        return (Pair<L, R>)of(left, (Object)null);\n+    public static <L, R> Pair<L, R> left(final L l) {\n+        return (Pair<L, R>)of(l, (Object)null);\n     }\n     \n     public static <L, R> ImmutablePair<L, R> nullPair() {\n         return ImmutablePair.NULL;\n     }\n     \n-    public static <L, R> ImmutablePair<L, R> of(final L left, final R right) {\n-        return new ImmutablePair<L, R>(left, right);\n+    public static <L, R> ImmutablePair<L, R> of(final L l, final R r) {\n+        return new ImmutablePair<L, R>(l, r);\n     }\n     \n-    public static <L, R> ImmutablePair<L, R> of(final Map.Entry<L, R> pair) {\n-        L left;\n-        R right;\n-        if (pair != null) {\n-            left = pair.getKey();\n-            right = pair.getValue();\n+    public static <L, R> ImmutablePair<L, R> of(final Map.Entry<L, R> entry) {\n+        L key;\n+        R value;\n+        if (entry != null) {\n+            key = entry.getKey();\n+            value = entry.getValue();\n         }\n         else {\n-            left = null;\n-            right = null;\n+            key = null;\n+            value = null;\n         }\n-        return new ImmutablePair<L, R>(left, right);\n+        return new ImmutablePair<L, R>(key, value);\n     }\n     \n-    public static <L, R> Pair<L, R> right(final R right) {\n-        return (Pair<L, R>)of((Object)null, right);\n+    public static <L, R> Pair<L, R> right(final R r) {\n+        return (Pair<L, R>)of((Object)null, r);\n     }\n     \n     public ImmutablePair(final L left, final R right) {\n         this.left = left;\n         this.right = right;\n     }\n     \n@@ -54,15 +54,15 @@\n         return this.left;\n     }\n     \n     public R getRight() {\n         return this.right;\n     }\n     \n-    public R setValue(final R value) {\n+    public R setValue(final R r) {\n         throw new UnsupportedOperationException();\n     }\n     \n     static {\n         EMPTY_ARRAY = new ImmutablePair[0];\n         NULL = of((Object)null, (Object)null);\n     }\n"}]}
