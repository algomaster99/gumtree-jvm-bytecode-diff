{"diffoscope-json-version": 1, "source1": "first/RuntimeVisibleorInvisibleAnnotationsAttribute.class", "source2": "second/RuntimeVisibleorInvisibleAnnotationsAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,59 +1,60 @@\n \n package org.apache.commons.compress.harmony.unpack200.bytecode;\n \n import java.io.IOException;\n import java.io.DataOutputStream;\n-import java.util.List;\n import java.util.Collection;\n import java.util.ArrayList;\n \n public class RuntimeVisibleorInvisibleAnnotationsAttribute extends AnnotationsAttribute\n {\n     private final int numAnnotations;\n     private final AnnotationsAttribute.Annotation[] annotations;\n     \n-    public RuntimeVisibleorInvisibleAnnotationsAttribute(final CPUTF8 name, final AnnotationsAttribute.Annotation[] annotations) {\n-        super(name);\n+    public RuntimeVisibleorInvisibleAnnotationsAttribute(final CPUTF8 cputf8, final AnnotationsAttribute.Annotation[] annotations) {\n+        super(cputf8);\n         this.numAnnotations = annotations.length;\n         this.annotations = annotations;\n     }\n     \n     protected int getLength() {\n-        int length = 2;\n+        int n = 2;\n         for (int i = 0; i < this.numAnnotations; ++i) {\n-            length += this.annotations[i].getLength();\n+            n += this.annotations[i].getLength();\n         }\n-        return length;\n+        return n;\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final List<Object> nested = new ArrayList<Object>();\n-        nested.add(this.attributeName);\n-        for (final AnnotationsAttribute.Annotation annotation : this.annotations) {\n-            nested.addAll(annotation.getClassFileEntries());\n+        final ArrayList list = new ArrayList();\n+        list.add(this.attributeName);\n+        final AnnotationsAttribute.Annotation[] annotations = this.annotations;\n+        for (int length = annotations.length, i = 0; i < length; ++i) {\n+            list.addAll(annotations[i].getClassFileEntries());\n         }\n-        return nested.toArray(ClassFileEntry.NONE);\n+        return (ClassFileEntry[])list.toArray(ClassFileEntry.NONE);\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        for (final AnnotationsAttribute.Annotation annotation : this.annotations) {\n-            annotation.resolve(pool);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        final AnnotationsAttribute.Annotation[] annotations = this.annotations;\n+        for (int length = annotations.length, i = 0; i < length; ++i) {\n+            annotations[i].resolve(classConstantPool);\n         }\n     }\n     \n     public String toString() {\n         return this.attributeName.underlyingString() + \": \" + this.numAnnotations + \" annotations\";\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        final int size = dos.size();\n-        dos.writeShort(this.numAnnotations);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        final int size = dataOutputStream.size();\n+        dataOutputStream.writeShort(this.numAnnotations);\n         for (int i = 0; i < this.numAnnotations; ++i) {\n-            this.annotations[i].writeBody(dos);\n+            this.annotations[i].writeBody(dataOutputStream);\n         }\n-        if (dos.size() - size != this.getLength()) {\n+        if (dataOutputStream.size() - size != this.getLength()) {\n             throw new Error();\n         }\n     }\n }\n"}]}
