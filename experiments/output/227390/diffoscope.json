{"diffoscope-json-version": 1, "source1": "first/VariableDeclarationUsageDistanceCheck.class", "source2": "second/VariableDeclarationUsageDistanceCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle.checks.coding;\n \n-import java.util.regex.Matcher;\n import java.util.Optional;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.AbstractMap;\n import com.puppycrawl.tools.checkstyle.api.FullIdent;\n import java.util.Map;\n@@ -31,16 +30,16 @@\n         this.ignoreFinal = true;\n     }\n     \n     public void setAllowedDistance(final int allowedDistance) {\n         this.allowedDistance = allowedDistance;\n     }\n     \n-    public void setIgnoreVariablePattern(final Pattern pattern) {\n-        this.ignoreVariablePattern = pattern;\n+    public void setIgnoreVariablePattern(final Pattern ignoreVariablePattern) {\n+        this.ignoreVariablePattern = ignoreVariablePattern;\n     }\n     \n     public void setValidateBetweenScopes(final boolean validateBetweenScopes) {\n         this.validateBetweenScopes = validateBetweenScopes;\n     }\n     \n     public void setIgnoreFinal(final boolean ignoreFinal) {\n@@ -55,341 +54,339 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 10 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final int parentType = ast.getParent().getType();\n-        final DetailAST modifiers = ast.getFirstChild();\n-        if (parentType != 6 && (!this.ignoreFinal || modifiers.findFirstToken(39) == null)) {\n-            final DetailAST variable = ast.findFirstToken(58);\n-            if (!this.isVariableMatchesIgnorePattern(variable.getText())) {\n-                final DetailAST semicolonAst = ast.getNextSibling();\n+    public void visitToken(final DetailAST detailAST) {\n+        final int type = detailAST.getParent().getType();\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        if (type != 6 && (!this.ignoreFinal || firstChild.findFirstToken(39) == null)) {\n+            final DetailAST firstToken = detailAST.findFirstToken(58);\n+            if (!this.isVariableMatchesIgnorePattern(firstToken.getText())) {\n+                final DetailAST nextSibling = detailAST.getNextSibling();\n                 Map.Entry<DetailAST, Integer> entry;\n                 if (this.validateBetweenScopes) {\n-                    entry = calculateDistanceBetweenScopes(semicolonAst, variable);\n+                    entry = calculateDistanceBetweenScopes(nextSibling, firstToken);\n                 }\n                 else {\n-                    entry = calculateDistanceInSingleScope(semicolonAst, variable);\n+                    entry = calculateDistanceInSingleScope(nextSibling, firstToken);\n                 }\n-                final DetailAST variableUsageAst = (DetailAST)entry.getKey();\n-                final int dist = (int)Integer.valueOf(entry.getValue());\n-                if (dist > this.allowedDistance && !isInitializationSequence(variableUsageAst, variable.getText())) {\n+                final DetailAST detailAST2 = (DetailAST)entry.getKey();\n+                final int intValue = (int)Integer.valueOf(entry.getValue());\n+                if (intValue > this.allowedDistance && !isInitializationSequence(detailAST2, firstToken.getText())) {\n                     if (this.ignoreFinal) {\n-                        this.log(ast, \"variable.declaration.usage.distance.extend\", new Object[] { variable.getText(), Integer.valueOf(dist), Integer.valueOf(this.allowedDistance) });\n+                        this.log(detailAST, \"variable.declaration.usage.distance.extend\", new Object[] { firstToken.getText(), Integer.valueOf(intValue), Integer.valueOf(this.allowedDistance) });\n                     }\n                     else {\n-                        this.log(ast, \"variable.declaration.usage.distance\", new Object[] { variable.getText(), Integer.valueOf(dist), Integer.valueOf(this.allowedDistance) });\n+                        this.log(detailAST, \"variable.declaration.usage.distance\", new Object[] { firstToken.getText(), Integer.valueOf(intValue), Integer.valueOf(this.allowedDistance) });\n                     }\n                 }\n             }\n         }\n     }\n     \n-    private static String getInstanceName(final DetailAST methodCallAst) {\n-        final String methodCallName = FullIdent.createFullIdentBelow(methodCallAst).getText();\n-        final int lastDotIndex = methodCallName.lastIndexOf(46);\n-        String instanceName = \"\";\n-        if (lastDotIndex != -1) {\n-            instanceName = methodCallName.substring(0, lastDotIndex);\n-        }\n-        return instanceName;\n-    }\n-    \n-    private static boolean isInitializationSequence(final DetailAST variableUsageAst, final String variableName) {\n-        boolean result = true;\n-        boolean isUsedVariableDeclarationFound = false;\n-        DetailAST currentSiblingAst = variableUsageAst;\n-        String initInstanceName = \"\";\n-        while (result && !isUsedVariableDeclarationFound && currentSiblingAst != null) {\n-            if (currentSiblingAst.getType() == 28 && currentSiblingAst.getFirstChild().getType() == 27) {\n-                final DetailAST methodCallAst = currentSiblingAst.getFirstChild();\n-                final String instanceName = getInstanceName(methodCallAst);\n+    private static String getInstanceName(final DetailAST detailAST) {\n+        final String text = FullIdent.createFullIdentBelow(detailAST).getText();\n+        final int lastIndex = text.lastIndexOf(46);\n+        String substring = \"\";\n+        if (lastIndex != -1) {\n+            substring = text.substring(0, lastIndex);\n+        }\n+        return substring;\n+    }\n+    \n+    private static boolean isInitializationSequence(final DetailAST detailAST, final String s) {\n+        boolean b = true;\n+        boolean equals = false;\n+        DetailAST previousSibling = detailAST;\n+        String anObject = \"\";\n+        while (b && !equals && previousSibling != null) {\n+            if (previousSibling.getType() == 28 && previousSibling.getFirstChild().getType() == 27) {\n+                final String instanceName = getInstanceName(previousSibling.getFirstChild());\n                 if (instanceName.isEmpty()) {\n-                    result = false;\n+                    b = false;\n                 }\n-                else if (!instanceName.equals(initInstanceName)) {\n-                    if (initInstanceName.isEmpty()) {\n-                        initInstanceName = instanceName;\n+                else if (!instanceName.equals(anObject)) {\n+                    if (anObject.isEmpty()) {\n+                        anObject = instanceName;\n                     }\n                     else {\n-                        result = false;\n+                        b = false;\n                     }\n                 }\n             }\n-            else if (currentSiblingAst.getType() == 10) {\n-                final String currentVariableName = currentSiblingAst.findFirstToken(58).getText();\n-                isUsedVariableDeclarationFound = variableName.equals(currentVariableName);\n+            else if (previousSibling.getType() == 10) {\n+                equals = s.equals(previousSibling.findFirstToken(58).getText());\n             }\n             else {\n-                result = (currentSiblingAst.getType() == 45);\n+                b = (previousSibling.getType() == 45);\n             }\n-            currentSiblingAst = currentSiblingAst.getPreviousSibling();\n+            previousSibling = previousSibling.getPreviousSibling();\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static Map.Entry<DetailAST, Integer> calculateDistanceInSingleScope(final DetailAST semicolonAst, final DetailAST variableIdentAst) {\n-        int dist = 0;\n-        boolean firstUsageFound = false;\n-        DetailAST currentAst = semicolonAst;\n-        DetailAST variableUsageAst = null;\n-        while (!firstUsageFound && currentAst != null) {\n-            if (currentAst.getFirstChild() != null) {\n-                if (isChild(currentAst, variableIdentAst)) {\n-                    dist = getDistToVariableUsageInChildNode(currentAst, variableIdentAst, dist);\n-                    variableUsageAst = currentAst;\n-                    firstUsageFound = true;\n+    private static Map.Entry<DetailAST, Integer> calculateDistanceInSingleScope(final DetailAST detailAST, final DetailAST detailAST2) {\n+        int distToVariableUsageInChildNode = 0;\n+        int n = 0;\n+        DetailAST nextSibling = detailAST;\n+        DetailAST key = null;\n+        while (n == 0 && nextSibling != null) {\n+            if (nextSibling.getFirstChild() != null) {\n+                if (isChild(nextSibling, detailAST2)) {\n+                    distToVariableUsageInChildNode = getDistToVariableUsageInChildNode(nextSibling, detailAST2, distToVariableUsageInChildNode);\n+                    key = nextSibling;\n+                    n = 1;\n                 }\n-                else if (currentAst.getType() != 10) {\n-                    ++dist;\n+                else if (nextSibling.getType() != 10) {\n+                    ++distToVariableUsageInChildNode;\n                 }\n             }\n-            currentAst = currentAst.getNextSibling();\n+            nextSibling = nextSibling.getNextSibling();\n         }\n-        return new AbstractMap.SimpleEntry<DetailAST, Integer>(variableUsageAst, Integer.valueOf(dist));\n+        return new AbstractMap.SimpleEntry<DetailAST, Integer>(key, Integer.valueOf(distToVariableUsageInChildNode));\n     }\n     \n-    private static int getDistToVariableUsageInChildNode(final DetailAST childNode, final DetailAST varIdent, final int currentDistToVarUsage) {\n-        DetailAST examineNode = childNode;\n-        if (examineNode.getType() == 22) {\n-            examineNode = examineNode.getFirstChild().getNextSibling();\n+    private static int getDistToVariableUsageInChildNode(final DetailAST detailAST, final DetailAST detailAST2, final int n) {\n+        DetailAST nextSibling = detailAST;\n+        if (nextSibling.getType() == 22) {\n+            nextSibling = nextSibling.getFirstChild().getNextSibling();\n         }\n-        int resultDist = currentDistToVarUsage;\n-        switch (examineNode.getType()) {\n+        int n2 = n;\n+        switch (nextSibling.getType()) {\n             case 7: {\n-                resultDist = 0;\n+                n2 = 0;\n                 break;\n             }\n             case 83:\n             case 84:\n             case 85:\n             case 89:\n             case 91: {\n-                if (isVariableInOperatorExpr(examineNode, varIdent)) {\n-                    ++resultDist;\n+                if (isVariableInOperatorExpr(nextSibling, detailAST2)) {\n+                    ++n2;\n                     break;\n                 }\n-                resultDist = 0;\n+                n2 = 0;\n                 break;\n             }\n             default: {\n-                if (examineNode.findFirstToken(7) == null) {\n-                    ++resultDist;\n+                if (nextSibling.findFirstToken(7) == null) {\n+                    ++n2;\n                     break;\n                 }\n-                resultDist = 0;\n+                n2 = 0;\n                 break;\n             }\n         }\n-        return resultDist;\n+        return n2;\n     }\n     \n-    private static Map.Entry<DetailAST, Integer> calculateDistanceBetweenScopes(final DetailAST ast, final DetailAST variable) {\n-        int dist = 0;\n-        DetailAST currentScopeAst = ast;\n-        DetailAST variableUsageAst = null;\n-        while (currentScopeAst != null) {\n-            final Map.Entry<List<DetailAST>, Integer> searchResult = searchVariableUsageExpressions(variable, currentScopeAst);\n-            currentScopeAst = null;\n-            final List<DetailAST> variableUsageExpressions = (List<DetailAST>)searchResult.getKey();\n-            dist += Integer.valueOf(searchResult.getValue());\n-            if (variableUsageExpressions.size() == 1) {\n-                final DetailAST blockWithVariableUsage = (DetailAST)variableUsageExpressions.get(0);\n-                DetailAST exprWithVariableUsage = null;\n-                switch (blockWithVariableUsage.getType()) {\n+    private static Map.Entry<DetailAST, Integer> calculateDistanceBetweenScopes(final DetailAST detailAST, final DetailAST detailAST2) {\n+        int i = 0;\n+        DetailAST detailAST3 = detailAST;\n+        DetailAST key = null;\n+        while (detailAST3 != null) {\n+            final Map.Entry<List<DetailAST>, Integer> searchVariableUsageExpressions = searchVariableUsageExpressions(detailAST2, detailAST3);\n+            detailAST3 = null;\n+            final List list = (List)searchVariableUsageExpressions.getKey();\n+            i += Integer.valueOf(searchVariableUsageExpressions.getValue());\n+            if (list.size() == 1) {\n+                final DetailAST detailAST4 = (DetailAST)list.get(0);\n+                DetailAST detailAST5 = null;\n+                switch (detailAST4.getType()) {\n                     case 10:\n                     case 28: {\n-                        ++dist;\n+                        ++i;\n                         break;\n                     }\n                     case 84:\n                     case 85:\n                     case 91: {\n-                        exprWithVariableUsage = getFirstNodeInsideForWhileDoWhileBlocks(blockWithVariableUsage, variable);\n+                        detailAST5 = getFirstNodeInsideForWhileDoWhileBlocks(detailAST4, detailAST2);\n                         break;\n                     }\n                     case 83: {\n-                        exprWithVariableUsage = getFirstNodeInsideIfBlock(blockWithVariableUsage, variable);\n+                        detailAST5 = getFirstNodeInsideIfBlock(detailAST4, detailAST2);\n                         break;\n                     }\n                     case 89: {\n-                        exprWithVariableUsage = getFirstNodeInsideSwitchBlock(blockWithVariableUsage, variable);\n+                        detailAST5 = getFirstNodeInsideSwitchBlock(detailAST4, detailAST2);\n                         break;\n                     }\n                     case 95: {\n-                        exprWithVariableUsage = getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage, variable);\n+                        detailAST5 = getFirstNodeInsideTryCatchFinallyBlocks(detailAST4, detailAST2);\n                         break;\n                     }\n                     default: {\n-                        exprWithVariableUsage = blockWithVariableUsage.getFirstChild();\n+                        detailAST5 = detailAST4.getFirstChild();\n                         break;\n                     }\n                 }\n-                currentScopeAst = exprWithVariableUsage;\n-                variableUsageAst = blockWithVariableUsage;\n+                detailAST3 = detailAST5;\n+                key = detailAST4;\n             }\n-            else if (variableUsageExpressions.isEmpty()) {\n-                variableUsageAst = null;\n+            else if (list.isEmpty()) {\n+                key = null;\n             }\n             else {\n-                ++dist;\n-                variableUsageAst = variableUsageExpressions.get(0);\n+                ++i;\n+                key = (DetailAST)list.get(0);\n             }\n         }\n-        return new AbstractMap.SimpleEntry<DetailAST, Integer>(variableUsageAst, Integer.valueOf(dist));\n+        return new AbstractMap.SimpleEntry<DetailAST, Integer>(key, Integer.valueOf(i));\n     }\n     \n-    private static Map.Entry<List<DetailAST>, Integer> searchVariableUsageExpressions(final DetailAST variableAst, final DetailAST statementAst) {\n-        final List<DetailAST> variableUsageExpressions = new ArrayList<DetailAST>();\n-        int distance = 0;\n-        for (DetailAST currentStatementAst = statementAst; currentStatementAst != null; currentStatementAst = currentStatementAst.getNextSibling()) {\n-            if (currentStatementAst.getFirstChild() != null) {\n-                if (isChild(currentStatementAst, variableAst)) {\n-                    variableUsageExpressions.add(currentStatementAst);\n+    private static Map.Entry<List<DetailAST>, Integer> searchVariableUsageExpressions(final DetailAST detailAST, final DetailAST detailAST2) {\n+        final ArrayList key = new ArrayList();\n+        int i = 0;\n+        for (DetailAST nextSibling = detailAST2; nextSibling != null; nextSibling = nextSibling.getNextSibling()) {\n+            if (nextSibling.getFirstChild() != null) {\n+                if (isChild(nextSibling, detailAST)) {\n+                    key.add(nextSibling);\n                 }\n-                else if (variableUsageExpressions.isEmpty() && !isZeroDistanceToken(currentStatementAst.getType())) {\n-                    ++distance;\n+                else if (key.isEmpty() && !isZeroDistanceToken(nextSibling.getType())) {\n+                    ++i;\n                 }\n             }\n         }\n-        return new AbstractMap.SimpleEntry<List<DetailAST>, Integer>(variableUsageExpressions, Integer.valueOf(distance));\n+        return new AbstractMap.SimpleEntry<List<DetailAST>, Integer>(key, Integer.valueOf(i));\n     }\n     \n-    private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(final DetailAST block, final DetailAST variable) {\n-        DetailAST firstNodeInsideBlock = null;\n-        if (!isVariableInOperatorExpr(block, variable)) {\n-            DetailAST currentNode;\n-            if (block.getType() == 85) {\n-                currentNode = block.getFirstChild();\n+    private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(final DetailAST detailAST, final DetailAST detailAST2) {\n+        DetailAST detailAST3 = null;\n+        if (!isVariableInOperatorExpr(detailAST, detailAST2)) {\n+            DetailAST detailAST4;\n+            if (detailAST.getType() == 85) {\n+                detailAST4 = detailAST.getFirstChild();\n             }\n             else {\n-                currentNode = block.findFirstToken(77).getNextSibling();\n+                detailAST4 = detailAST.findFirstToken(77).getNextSibling();\n             }\n-            final int currentNodeType = currentNode.getType();\n-            if (currentNodeType != 28) {\n-                firstNodeInsideBlock = currentNode;\n+            if (detailAST4.getType() != 28) {\n+                detailAST3 = detailAST4;\n             }\n         }\n-        return firstNodeInsideBlock;\n+        return detailAST3;\n     }\n     \n-    private static DetailAST getFirstNodeInsideIfBlock(final DetailAST block, final DetailAST variable) {\n-        DetailAST firstNodeInsideBlock = null;\n-        if (!isVariableInOperatorExpr(block, variable)) {\n-            final Optional<DetailAST> slistToken = TokenUtil.findFirstTokenByPredicate(block, token -> token.getType() == 7);\n-            final DetailAST lastNode = block.getLastChild();\n-            DetailAST previousNode = lastNode.getPreviousSibling();\n-            if (slistToken.isEmpty() && lastNode.getType() == 92) {\n-                previousNode = previousNode.getPreviousSibling();\n+    private static DetailAST getFirstNodeInsideIfBlock(final DetailAST detailAST, final DetailAST detailAST2) {\n+        DetailAST detailAST3 = null;\n+        if (!isVariableInOperatorExpr(detailAST, detailAST2)) {\n+            final Optional firstTokenByPredicate = TokenUtil.findFirstTokenByPredicate(detailAST, detailAST5 -> detailAST5.getType() == 7);\n+            final DetailAST lastChild = detailAST.getLastChild();\n+            DetailAST detailAST4 = lastChild.getPreviousSibling();\n+            if (firstTokenByPredicate.isEmpty() && lastChild.getType() == 92) {\n+                detailAST4 = detailAST4.getPreviousSibling();\n             }\n-            final List<DetailAST> variableUsageExpressions = new ArrayList<DetailAST>();\n-            if (isChild(previousNode, variable)) {\n-                variableUsageExpressions.add(previousNode);\n+            final ArrayList list = new ArrayList();\n+            if (isChild(detailAST4, detailAST2)) {\n+                list.add(detailAST4);\n             }\n-            if (isChild(lastNode, variable)) {\n-                variableUsageExpressions.add(lastNode);\n+            if (isChild(lastChild, detailAST2)) {\n+                list.add(lastChild);\n             }\n-            if (variableUsageExpressions.size() == 1) {\n-                firstNodeInsideBlock = variableUsageExpressions.get(0);\n+            if (list.size() == 1) {\n+                detailAST3 = (DetailAST)list.get(0);\n             }\n         }\n-        return firstNodeInsideBlock;\n+        return detailAST3;\n     }\n     \n-    private static DetailAST getFirstNodeInsideSwitchBlock(final DetailAST block, final DetailAST variable) {\n-        final List<DetailAST> variableUsageExpressions = getVariableUsageExpressionsInsideSwitchBlock(block, variable);\n-        DetailAST firstNodeInsideBlock = null;\n-        if (variableUsageExpressions.size() == 1) {\n-            firstNodeInsideBlock = variableUsageExpressions.get(0);\n+    private static DetailAST getFirstNodeInsideSwitchBlock(final DetailAST detailAST, final DetailAST detailAST2) {\n+        final List<DetailAST> variableUsageExpressionsInsideSwitchBlock = getVariableUsageExpressionsInsideSwitchBlock(detailAST, detailAST2);\n+        DetailAST detailAST3 = null;\n+        if (variableUsageExpressionsInsideSwitchBlock.size() == 1) {\n+            detailAST3 = variableUsageExpressionsInsideSwitchBlock.get(0);\n         }\n-        return firstNodeInsideBlock;\n+        return detailAST3;\n     }\n     \n-    private static List<DetailAST> getVariableUsageExpressionsInsideSwitchBlock(final DetailAST block, final DetailAST variable) {\n-        final Optional<DetailAST> firstToken = TokenUtil.findFirstTokenByPredicate(block, child -> child.getType() == 208 || child.getType() == 33);\n-        final List<DetailAST> variableUsageExpressions = new ArrayList<DetailAST>();\n-        firstToken.ifPresent(token -> TokenUtil.forEachChild(block, token.getType(), child -> {\n-            final DetailAST lastNodeInCaseGroup = child.getLastChild();\n-            if (isChild(lastNodeInCaseGroup, variable)) {\n-                variableUsageExpressions.add(lastNodeInCaseGroup);\n+    private static List<DetailAST> getVariableUsageExpressionsInsideSwitchBlock(final DetailAST detailAST, final DetailAST detailAST2) {\n+        final Optional firstTokenByPredicate = TokenUtil.findFirstTokenByPredicate(detailAST, detailAST3 -> detailAST3.getType() == 208 || detailAST3.getType() == 33);\n+        final ArrayList list = new ArrayList();\n+        firstTokenByPredicate.ifPresent(detailAST5 -> TokenUtil.forEachChild(detailAST4, detailAST5.getType(), detailAST7 -> {\n+            detailAST7.getLastChild();\n+            final DetailAST detailAST8;\n+            if (isChild(detailAST8, detailAST6)) {\n+                list2.add(detailAST8);\n             }\n         }));\n-        return variableUsageExpressions;\n+        return list;\n     }\n     \n-    private static DetailAST getFirstNodeInsideTryCatchFinallyBlocks(final DetailAST block, final DetailAST variable) {\n-        DetailAST currentNode = block.getFirstChild();\n-        final List<DetailAST> variableUsageExpressions = new ArrayList<DetailAST>();\n-        if (isChild(currentNode, variable)) {\n-            variableUsageExpressions.add(currentNode);\n+    private static DetailAST getFirstNodeInsideTryCatchFinallyBlocks(final DetailAST detailAST, final DetailAST detailAST2) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        final ArrayList list = new ArrayList();\n+        if (isChild(firstChild, detailAST2)) {\n+            list.add(firstChild);\n         }\n-        for (currentNode = currentNode.getNextSibling(); currentNode != null && currentNode.getType() == 96; currentNode = currentNode.getNextSibling()) {\n-            final DetailAST catchBlock = currentNode.getLastChild();\n-            if (isChild(catchBlock, variable)) {\n-                variableUsageExpressions.add(catchBlock);\n+        DetailAST detailAST3;\n+        for (detailAST3 = firstChild.getNextSibling(); detailAST3 != null && detailAST3.getType() == 96; detailAST3 = detailAST3.getNextSibling()) {\n+            final DetailAST lastChild = detailAST3.getLastChild();\n+            if (isChild(lastChild, detailAST2)) {\n+                list.add(lastChild);\n             }\n         }\n-        if (currentNode != null) {\n-            final DetailAST finalBlock = currentNode.getLastChild();\n-            if (isChild(finalBlock, variable)) {\n-                variableUsageExpressions.add(finalBlock);\n+        if (detailAST3 != null) {\n+            final DetailAST lastChild2 = detailAST3.getLastChild();\n+            if (isChild(lastChild2, detailAST2)) {\n+                list.add(lastChild2);\n             }\n         }\n-        DetailAST variableUsageNode = null;\n-        if (variableUsageExpressions.size() == 1) {\n-            variableUsageNode = ((DetailAST)variableUsageExpressions.get(0)).getFirstChild();\n+        DetailAST firstChild2 = null;\n+        if (list.size() == 1) {\n+            firstChild2 = ((DetailAST)list.get(0)).getFirstChild();\n         }\n-        return variableUsageNode;\n+        return firstChild2;\n     }\n     \n-    private static boolean isVariableInOperatorExpr(final DetailAST operator, final DetailAST variable) {\n-        boolean isVarInOperatorDeclaration = false;\n-        for (DetailAST ast = operator.findFirstToken(76); ast.getType() != 77; ast = ast.getNextSibling()) {\n-            if (isChild(ast, variable)) {\n-                isVarInOperatorDeclaration = true;\n+    private static boolean isVariableInOperatorExpr(final DetailAST detailAST, final DetailAST detailAST2) {\n+        boolean variableInOperatorExpr = false;\n+        for (DetailAST detailAST3 = detailAST.findFirstToken(76); detailAST3.getType() != 77; detailAST3 = detailAST3.getNextSibling()) {\n+            if (isChild(detailAST3, detailAST2)) {\n+                variableInOperatorExpr = true;\n                 break;\n             }\n         }\n-        if (!isVarInOperatorDeclaration) {\n-            final DetailAST elseBlock = operator.getLastChild();\n-            if (elseBlock.getType() == 92) {\n-                final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();\n-                if (firstNodeInsideElseBlock.getType() == 83) {\n-                    isVarInOperatorDeclaration = isVariableInOperatorExpr(firstNodeInsideElseBlock, variable);\n+        if (!variableInOperatorExpr) {\n+            final DetailAST lastChild = detailAST.getLastChild();\n+            if (lastChild.getType() == 92) {\n+                final DetailAST firstChild = lastChild.getFirstChild();\n+                if (firstChild.getType() == 83) {\n+                    variableInOperatorExpr = isVariableInOperatorExpr(firstChild, detailAST2);\n                 }\n             }\n         }\n-        return isVarInOperatorDeclaration;\n+        return variableInOperatorExpr;\n     }\n     \n-    private static boolean isChild(final DetailAST parent, final DetailAST ast) {\n-        boolean isChild = false;\n-        DetailAST toVisit;\n-        for (DetailAST curNode = parent.getFirstChild(); curNode != null; curNode = toVisit) {\n-            if (curNode.getType() == ast.getType() && curNode.getText().equals(ast.getText())) {\n-                isChild = true;\n+    private static boolean isChild(final DetailAST detailAST, final DetailAST detailAST2) {\n+        boolean b = false;\n+        DetailAST detailAST4;\n+        for (DetailAST detailAST3 = detailAST.getFirstChild(); detailAST3 != null; detailAST3 = detailAST4) {\n+            if (detailAST3.getType() == detailAST2.getType() && detailAST3.getText().equals(detailAST2.getText())) {\n+                b = true;\n                 break;\n             }\n-            toVisit = curNode.getFirstChild();\n-            while (toVisit == null) {\n-                toVisit = curNode.getNextSibling();\n-                curNode = curNode.getParent();\n-                if (curNode == parent) {\n+            detailAST4 = detailAST3.getFirstChild();\n+            while (detailAST4 == null) {\n+                detailAST4 = detailAST3.getNextSibling();\n+                detailAST3 = detailAST3.getParent();\n+                if (detailAST3 == detailAST) {\n                     break;\n                 }\n             }\n         }\n-        return isChild;\n+        return b;\n     }\n     \n-    private boolean isVariableMatchesIgnorePattern(final String variable) {\n-        final Matcher matcher = this.ignoreVariablePattern.matcher(variable);\n-        return matcher.matches();\n+    private boolean isVariableMatchesIgnorePattern(final String input) {\n+        return this.ignoreVariablePattern.matcher(input).matches();\n     }\n     \n-    private static boolean isZeroDistanceToken(final int type) {\n-        return type == 10 || type == 13 || type == 5 || type == 178 || type == 18 || type == 19;\n+    private static boolean isZeroDistanceToken(final int n) {\n+        return n == 10 || n == 13 || n == 5 || n == 178 || n == 18 || n == 19;\n     }\n }\n"}]}
