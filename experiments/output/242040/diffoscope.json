{"diffoscope-json-version": 1, "source1": "first/Deprecated.class", "source2": "second/Deprecated.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,49 +6,49 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class Deprecated extends Attribute\n {\n     private byte[] bytes;\n     \n-    public Deprecated(final Deprecated c) {\n-        this(c.getNameIndex(), c.getLength(), c.getBytes(), c.getConstantPool());\n+    public Deprecated(final Deprecated deprecated) {\n+        this(deprecated.getNameIndex(), deprecated.getLength(), deprecated.getBytes(), deprecated.getConstantPool());\n     }\n     \n-    public Deprecated(final int name_index, final int length, final byte[] bytes, final ConstantPool constant_pool) {\n-        super((byte)8, name_index, length, constant_pool);\n+    public Deprecated(final int n, final int n2, final byte[] bytes, final ConstantPool constantPool) {\n+        super((byte)8, n, n2, constantPool);\n         this.bytes = bytes;\n     }\n     \n-    Deprecated(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, (byte[])null, constant_pool);\n-        if (length > 0) {\n-            input.readFully(this.bytes = new byte[length]);\n+    Deprecated(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (byte[])null, constantPool);\n+        if (n2 > 0) {\n+            dataInput.readFully(this.bytes = new byte[n2]);\n             println(\"Deprecated attribute with length > 0\");\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitDeprecated(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitDeprecated(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final Deprecated c = (Deprecated)this.clone();\n+        final Deprecated deprecated = (Deprecated)this.clone();\n         if (this.bytes != null) {\n-            c.bytes = new byte[this.bytes.length];\n-            System.arraycopy(this.bytes, 0, c.bytes, 0, this.bytes.length);\n+            deprecated.bytes = new byte[this.bytes.length];\n+            System.arraycopy(this.bytes, 0, deprecated.bytes, 0, this.bytes.length);\n         }\n-        c.setConstantPool(constantPool);\n-        return c;\n+        deprecated.setConstantPool(constantPool);\n+        return deprecated;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n         if (super.getLength() > 0) {\n-            file.write(this.bytes, 0, super.getLength());\n+            dataOutputStream.write(this.bytes, 0, super.getLength());\n         }\n     }\n     \n     public byte[] getBytes() {\n         return this.bytes;\n     }\n     \n"}]}
