{"diffoscope-json-version": 1, "source1": "first/AtomicSafeInitializer.class", "source2": "second/AtomicSafeInitializer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,163 +1,168 @@\n-  SHA-256 checksum c28af7ebaaac55dbc15bf8ce77e5a376b992f3c8275a03e65f5cfb728c07a648\n+  SHA-256 checksum 09e5e080c0297552605d80af585544aaf2776291e5b68e5673f55276d9cfff23\n   Compiled from \"AtomicSafeInitializer.java\"\n public abstract class org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T extends java.lang.Object> extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T>\n   minor version: 0\n   major version: 51\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #10                         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  super_class: #11                        // java/lang/Object\n+  this_class: #1                          // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+  super_class: #3                         // java/lang/Object\n   interfaces: 1, fields: 2, methods: 3, attributes: 2\n Constant pool:\n-   #1 = Methodref          #11.#42        // java/lang/Object.\"<init>\":()V\n-   #2 = Class              #43            // java/util/concurrent/atomic/AtomicReference\n-   #3 = Methodref          #2.#42         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-   #4 = Fieldref           #10.#44        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;\n-   #5 = Fieldref           #10.#45        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n-   #6 = Methodref          #2.#46         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-   #7 = Methodref          #2.#47         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #8 = Methodref          #10.#48        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;\n-   #9 = Methodref          #2.#49         // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n-  #10 = Class              #50            // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  #11 = Class              #51            // java/lang/Object\n-  #12 = Class              #52            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n-  #13 = Utf8               factory\n-  #14 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n-  #15 = Utf8               Signature\n-  #16 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n-  #17 = Utf8               reference\n-  #18 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n-  #19 = Utf8               <init>\n-  #20 = Utf8               ()V\n-  #21 = Utf8               Code\n-  #22 = Utf8               LineNumberTable\n-  #23 = Utf8               LocalVariableTable\n-  #24 = Utf8               this\n-  #25 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;\n-  #26 = Utf8               LocalVariableTypeTable\n-  #27 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;\n-  #28 = Utf8               get\n-  #29 = Utf8               ()Ljava/lang/Object;\n-  #30 = Utf8               result\n-  #31 = Utf8               Ljava/lang/Object;\n-  #32 = Utf8               TT;\n-  #33 = Utf8               StackMapTable\n-  #34 = Class              #51            // java/lang/Object\n-  #35 = Utf8               Exceptions\n-  #36 = Class              #53            // org/apache/commons/lang3/concurrent/ConcurrentException\n-  #37 = Utf8               ()TT;\n-  #38 = Utf8               initialize\n-  #39 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n-  #40 = Utf8               SourceFile\n-  #41 = Utf8               AtomicSafeInitializer.java\n-  #42 = NameAndType        #19:#20        // \"<init>\":()V\n-  #43 = Utf8               java/util/concurrent/atomic/AtomicReference\n-  #44 = NameAndType        #13:#14        // factory:Ljava/util/concurrent/atomic/AtomicReference;\n-  #45 = NameAndType        #17:#14        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n-  #46 = NameAndType        #28:#29        // get:()Ljava/lang/Object;\n-  #47 = NameAndType        #54:#55        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #48 = NameAndType        #38:#29        // initialize:()Ljava/lang/Object;\n-  #49 = NameAndType        #56:#57        // set:(Ljava/lang/Object;)V\n-  #50 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  #51 = Utf8               java/lang/Object\n-  #52 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n-  #53 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n-  #54 = Utf8               compareAndSet\n-  #55 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #56 = Utf8               set\n-  #57 = Utf8               (Ljava/lang/Object;)V\n+   #1 = Class              #2             // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+   #2 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+   #3 = Class              #4             // java/lang/Object\n+   #4 = Utf8               java/lang/Object\n+   #5 = Class              #6             // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+   #6 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+   #7 = Utf8               factory\n+   #8 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n+   #9 = Utf8               Signature\n+  #10 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n+  #11 = Utf8               reference\n+  #12 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n+  #13 = Utf8               <init>\n+  #14 = Utf8               ()V\n+  #15 = Utf8               Code\n+  #16 = Methodref          #3.#17         // java/lang/Object.\"<init>\":()V\n+  #17 = NameAndType        #13:#14        // \"<init>\":()V\n+  #18 = Class              #19            // java/util/concurrent/atomic/AtomicReference\n+  #19 = Utf8               java/util/concurrent/atomic/AtomicReference\n+  #20 = Methodref          #18.#17        // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+  #21 = Fieldref           #1.#22         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;\n+  #22 = NameAndType        #7:#8          // factory:Ljava/util/concurrent/atomic/AtomicReference;\n+  #23 = Fieldref           #1.#24         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #24 = NameAndType        #11:#8         // reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #25 = Utf8               LineNumberTable\n+  #26 = Utf8               LocalVariableTable\n+  #27 = Utf8               this\n+  #28 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;\n+  #29 = Utf8               LocalVariableTypeTable\n+  #30 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;\n+  #31 = Utf8               get\n+  #32 = Utf8               ()Ljava/lang/Object;\n+  #33 = Utf8               Exceptions\n+  #34 = Class              #35            // org/apache/commons/lang3/concurrent/ConcurrentException\n+  #35 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n+  #36 = Utf8               ()TT;\n+  #37 = Methodref          #18.#38        // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #38 = NameAndType        #39:#40        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #39 = Utf8               compareAndSet\n+  #40 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #41 = Methodref          #1.#42         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;\n+  #42 = NameAndType        #43:#32        // initialize:()Ljava/lang/Object;\n+  #43 = Utf8               initialize\n+  #44 = Methodref          #18.#45        // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+  #45 = NameAndType        #46:#47        // set:(Ljava/lang/Object;)V\n+  #46 = Utf8               set\n+  #47 = Utf8               (Ljava/lang/Object;)V\n+  #48 = Methodref          #18.#49        // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+  #49 = NameAndType        #31:#32        // get:()Ljava/lang/Object;\n+  #50 = Utf8               result\n+  #51 = Utf8               Ljava/lang/Object;\n+  #52 = Utf8               TT;\n+  #53 = Utf8               StackMapTable\n+  #54 = Utf8               SourceFile\n+  #55 = Utf8               AtomicSafeInitializer.java\n+  #56 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n {\n   private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T>> factory;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #16                          // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n+    Signature: #10                          // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n \n   private final java.util.concurrent.atomic.AtomicReference<T> reference;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #18                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n+    Signature: #12                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n \n   public org.apache.commons.lang3.concurrent.AtomicSafeInitializer();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #16                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class java/util/concurrent/atomic/AtomicReference\n+         5: new           #18                 // class java/util/concurrent/atomic/AtomicReference\n          8: dup\n-         9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-        12: putfield      #4                  // Field factory:Ljava/util/concurrent/atomic/AtomicReference;\n+         9: invokespecial #20                 // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+        12: putfield      #21                 // Field factory:Ljava/util/concurrent/atomic/AtomicReference;\n         15: aload_0\n-        16: new           #2                  // class java/util/concurrent/atomic/AtomicReference\n+        16: new           #18                 // class java/util/concurrent/atomic/AtomicReference\n         19: dup\n-        20: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-        23: putfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+        20: invokespecial #20                 // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+        23: putfield      #23                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n         26: return\n       LineNumberTable:\n         line 55: 0\n         line 58: 4\n+        line 59: 5\n         line 62: 15\n+        line 55: 26\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      27     0  this   Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      27     0  this   Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;\n \n   public final T get() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0011) ACC_PUBLIC, ACC_FINAL\n+    Exceptions:\n+      throws org.apache.commons.lang3.concurrent.ConcurrentException\n+    Signature: #36                          // ()TT;\n     Code:\n       stack=3, locals=2, args_size=1\n-         0: aload_0\n-         1: getfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n-         4: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-         7: dup\n-         8: astore_1\n-         9: ifnonnull     38\n-        12: aload_0\n-        13: getfield      #4                  // Field factory:Ljava/util/concurrent/atomic/AtomicReference;\n-        16: aconst_null\n-        17: aload_0\n-        18: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-        21: ifeq          0\n-        24: aload_0\n-        25: getfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n-        28: aload_0\n-        29: invokevirtual #8                  // Method initialize:()Ljava/lang/Object;\n-        32: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n-        35: goto          0\n+         0: goto          26\n+         3: aload_0\n+         4: getfield      #21                 // Field factory:Ljava/util/concurrent/atomic/AtomicReference;\n+         7: aconst_null\n+         8: aload_0\n+         9: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+        12: ifeq          26\n+        15: aload_0\n+        16: getfield      #23                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+        19: aload_0\n+        20: invokevirtual #41                 // Method initialize:()Ljava/lang/Object;\n+        23: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+        26: aload_0\n+        27: getfield      #23                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+        30: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+        33: dup\n+        34: astore_1\n+        35: ifnull        3\n         38: aload_1\n         39: areturn\n       LineNumberTable:\n         line 75: 0\n-        line 76: 12\n-        line 77: 24\n+        line 76: 3\n+        line 77: 15\n+        line 75: 26\n         line 81: 38\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      40     0  this   Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;\n-            9      31     1 result   Ljava/lang/Object;\n+            3      23     1 result   Ljava/lang/Object;\n+           35       5     1 result   Ljava/lang/Object;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      40     0  this   Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;\n-            9      31     1 result   TT;\n+            3      23     1 result   TT;\n+           35       5     1 result   TT;\n       StackMapTable: number_of_entries = 2\n-        frame_type = 0 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 37\n+          offset_delta = 3\n           locals = [ class java/lang/Object ]\n-    Exceptions:\n-      throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #37                          // ()TT;\n+        frame_type = 250 /* chop */\n+          offset_delta = 22\n \n   protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #37                          // ()TT;\n+    Signature: #36                          // ()TT;\n }\n-Signature: #39                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n SourceFile: \"AtomicSafeInitializer.java\"\n+Signature: #56                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n"}]}
