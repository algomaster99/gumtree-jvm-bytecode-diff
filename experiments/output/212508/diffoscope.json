{"diffoscope-json-version": 1, "source1": "first/CharUtils.class", "source2": "second/CharUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,134 +6,134 @@\n     private static final String[] CHAR_STRING_ARRAY;\n     private static final char[] HEX_DIGITS;\n     public static final char LF = '\\n';\n     public static final char CR = '\\r';\n     public static final char NUL = '\\0';\n     \n     @Deprecated\n-    public static Character toCharacterObject(final char ch) {\n-        return Character.valueOf(ch);\n+    public static Character toCharacterObject(final char c) {\n+        return Character.valueOf(c);\n     }\n     \n-    public static Character toCharacterObject(final String str) {\n-        if (StringUtils.isEmpty((CharSequence)str)) {\n+    public static Character toCharacterObject(final String s) {\n+        if (StringUtils.isEmpty((CharSequence)s)) {\n             return null;\n         }\n-        return Character.valueOf(str.charAt(0));\n+        return Character.valueOf(s.charAt(0));\n     }\n     \n-    public static char toChar(final Character ch) {\n-        Validate.isTrue(ch != null, \"The Character must not be null\", new Object[0]);\n-        return ch;\n+    public static char toChar(final Character c) {\n+        Validate.isTrue(c != null, \"The Character must not be null\", new Object[0]);\n+        return c;\n     }\n     \n-    public static char toChar(final Character ch, final char defaultValue) {\n-        if (ch == null) {\n-            return defaultValue;\n+    public static char toChar(final Character c, final char c2) {\n+        if (c == null) {\n+            return c2;\n         }\n-        return ch;\n+        return c;\n     }\n     \n-    public static char toChar(final String str) {\n-        Validate.isTrue(StringUtils.isNotEmpty((CharSequence)str), \"The String must not be empty\", new Object[0]);\n-        return str.charAt(0);\n+    public static char toChar(final String s) {\n+        Validate.isTrue(StringUtils.isNotEmpty((CharSequence)s), \"The String must not be empty\", new Object[0]);\n+        return s.charAt(0);\n     }\n     \n-    public static char toChar(final String str, final char defaultValue) {\n-        if (StringUtils.isEmpty((CharSequence)str)) {\n-            return defaultValue;\n+    public static char toChar(final String s, final char c) {\n+        if (StringUtils.isEmpty((CharSequence)s)) {\n+            return c;\n         }\n-        return str.charAt(0);\n+        return s.charAt(0);\n     }\n     \n-    public static int toIntValue(final char ch) {\n-        if (!isAsciiNumeric(ch)) {\n-            throw new IllegalArgumentException(\"The character \" + ch + \" is not in the range '0' - '9'\");\n+    public static int toIntValue(final char c) {\n+        if (!isAsciiNumeric(c)) {\n+            throw new IllegalArgumentException(\"The character \" + c + \" is not in the range '0' - '9'\");\n         }\n-        return ch - '0';\n+        return c - '0';\n     }\n     \n-    public static int toIntValue(final char ch, final int defaultValue) {\n-        if (!isAsciiNumeric(ch)) {\n-            return defaultValue;\n+    public static int toIntValue(final char c, final int n) {\n+        if (!isAsciiNumeric(c)) {\n+            return n;\n         }\n-        return ch - '0';\n+        return c - '0';\n     }\n     \n-    public static int toIntValue(final Character ch) {\n-        Validate.isTrue(ch != null, \"The character must not be null\", new Object[0]);\n-        return toIntValue((char)ch);\n+    public static int toIntValue(final Character c) {\n+        Validate.isTrue(c != null, \"The character must not be null\", new Object[0]);\n+        return toIntValue((char)c);\n     }\n     \n-    public static int toIntValue(final Character ch, final int defaultValue) {\n-        if (ch == null) {\n-            return defaultValue;\n+    public static int toIntValue(final Character c, final int n) {\n+        if (c == null) {\n+            return n;\n         }\n-        return toIntValue((char)ch, defaultValue);\n+        return toIntValue((char)c, n);\n     }\n     \n-    public static String toString(final char ch) {\n-        if (ch < '\\u0080') {\n-            return CharUtils.CHAR_STRING_ARRAY[ch];\n+    public static String toString(final char c) {\n+        if (c < '\\u0080') {\n+            return CharUtils.CHAR_STRING_ARRAY[c];\n         }\n-        return new String(new char[] { ch });\n+        return new String(new char[] { c });\n     }\n     \n-    public static String toString(final Character ch) {\n-        if (ch == null) {\n+    public static String toString(final Character c) {\n+        if (c == null) {\n             return null;\n         }\n-        return toString((char)ch);\n+        return toString((char)c);\n     }\n     \n-    public static String unicodeEscaped(final char ch) {\n-        return \"\\\\u\" + CharUtils.HEX_DIGITS[ch >> 12 & 0xF] + CharUtils.HEX_DIGITS[ch >> 8 & 0xF] + CharUtils.HEX_DIGITS[ch >> 4 & 0xF] + CharUtils.HEX_DIGITS[ch & '\\u000f'];\n+    public static String unicodeEscaped(final char c) {\n+        return \"\\\\u\" + CharUtils.HEX_DIGITS[c >> 12 & 0xF] + CharUtils.HEX_DIGITS[c >> 8 & 0xF] + CharUtils.HEX_DIGITS[c >> 4 & 0xF] + CharUtils.HEX_DIGITS[c & '\\u000f'];\n     }\n     \n-    public static String unicodeEscaped(final Character ch) {\n-        if (ch == null) {\n+    public static String unicodeEscaped(final Character c) {\n+        if (c == null) {\n             return null;\n         }\n-        return unicodeEscaped((char)ch);\n+        return unicodeEscaped((char)c);\n     }\n     \n-    public static boolean isAscii(final char ch) {\n-        return ch < '\\u0080';\n+    public static boolean isAscii(final char c) {\n+        return c < '\\u0080';\n     }\n     \n-    public static boolean isAsciiPrintable(final char ch) {\n-        return ch >= ' ' && ch < '\\u007f';\n+    public static boolean isAsciiPrintable(final char c) {\n+        return c >= ' ' && c < '\\u007f';\n     }\n     \n-    public static boolean isAsciiControl(final char ch) {\n-        return ch < ' ' || ch == '\\u007f';\n+    public static boolean isAsciiControl(final char c) {\n+        return c < ' ' || c == '\\u007f';\n     }\n     \n-    public static boolean isAsciiAlpha(final char ch) {\n-        return isAsciiAlphaUpper(ch) || isAsciiAlphaLower(ch);\n+    public static boolean isAsciiAlpha(final char c) {\n+        return isAsciiAlphaUpper(c) || isAsciiAlphaLower(c);\n     }\n     \n-    public static boolean isAsciiAlphaUpper(final char ch) {\n-        return ch >= 'A' && ch <= 'Z';\n+    public static boolean isAsciiAlphaUpper(final char c) {\n+        return c >= 'A' && c <= 'Z';\n     }\n     \n-    public static boolean isAsciiAlphaLower(final char ch) {\n-        return ch >= 'a' && ch <= 'z';\n+    public static boolean isAsciiAlphaLower(final char c) {\n+        return c >= 'a' && c <= 'z';\n     }\n     \n-    public static boolean isAsciiNumeric(final char ch) {\n-        return ch >= '0' && ch <= '9';\n+    public static boolean isAsciiNumeric(final char c) {\n+        return c >= '0' && c <= '9';\n     }\n     \n-    public static boolean isAsciiAlphanumeric(final char ch) {\n-        return isAsciiAlpha(ch) || isAsciiNumeric(ch);\n+    public static boolean isAsciiAlphanumeric(final char c) {\n+        return isAsciiAlpha(c) || isAsciiNumeric(c);\n     }\n     \n-    public static int compare(final char x, final char y) {\n-        return x - y;\n+    public static int compare(final char c, final char c2) {\n+        return c - c2;\n     }\n     \n     static {\n         CHAR_STRING_ARRAY = new String[128];\n         HEX_DIGITS = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n         for (char c = '\\0'; c < CharUtils.CHAR_STRING_ARRAY.length; ++c) {\n             CharUtils.CHAR_STRING_ARRAY[c] = String.valueOf(c);\n"}]}
