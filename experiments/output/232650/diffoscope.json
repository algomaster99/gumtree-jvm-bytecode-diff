{"diffoscope-json-version": 1, "source1": "first/PropertiesConfiguration$PropertiesWriter.class", "source2": "second/PropertiesConfiguration$PropertiesWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,21 +25,21 @@\n     private static final ValueTransformer DEFAULT_TRANSFORMER;\n     private final ValueTransformer valueTransformer;\n     private final ListDelimiterHandler delimiterHandler;\n     private String currentSeparator;\n     private String globalSeparator;\n     private String lineSeparator;\n     \n-    public PropertiesWriter(final Writer writer, final ListDelimiterHandler delHandler) {\n-        this(writer, delHandler, PropertiesWriter.DEFAULT_TRANSFORMER);\n+    public PropertiesWriter(final Writer writer, final ListDelimiterHandler listDelimiterHandler) {\n+        this(writer, listDelimiterHandler, PropertiesWriter.DEFAULT_TRANSFORMER);\n     }\n     \n-    public PropertiesWriter(final Writer writer, final ListDelimiterHandler delHandler, final ValueTransformer valueTransformer) {\n-        super(writer);\n-        this.delimiterHandler = delHandler;\n+    public PropertiesWriter(final Writer out, final ListDelimiterHandler delimiterHandler, final ValueTransformer valueTransformer) {\n+        super(out);\n+        this.delimiterHandler = delimiterHandler;\n         this.valueTransformer = valueTransformer;\n     }\n     \n     public ListDelimiterHandler getDelimiterHandler() {\n         return this.delimiterHandler;\n     }\n     \n@@ -63,80 +63,80 @@\n         return (this.lineSeparator != null) ? this.lineSeparator : PropertiesConfiguration.access$200();\n     }\n     \n     public void setLineSeparator(final String lineSeparator) {\n         this.lineSeparator = lineSeparator;\n     }\n     \n-    public void writeProperty(final String key, final Object value) throws IOException {\n-        this.writeProperty(key, value, false);\n+    public void writeProperty(final String s, final Object o) throws IOException {\n+        this.writeProperty(s, o, false);\n     }\n     \n-    public void writeProperty(final String key, final List<?> values) throws IOException {\n-        for (int i = 0; i < values.size(); ++i) {\n-            this.writeProperty(key, values.get(i));\n+    public void writeProperty(final String s, final List<?> list) throws IOException {\n+        for (int i = 0; i < list.size(); ++i) {\n+            this.writeProperty(s, list.get(i));\n         }\n     }\n     \n-    public void writeProperty(final String key, final Object value, final boolean forceSingleLine) throws IOException {\n-        String v;\n-        if (value instanceof List) {\n-            v = null;\n-            final List<?> values = (List)value;\n-            if (forceSingleLine) {\n+    public void writeProperty(final String s, final Object o, final boolean b) throws IOException {\n+        String s2;\n+        if (o instanceof List) {\n+            s2 = null;\n+            final List list = (List)o;\n+            if (b) {\n                 try {\n-                    v = String.valueOf(this.getDelimiterHandler().escapeList((List)values, this.valueTransformer));\n+                    s2 = String.valueOf(this.getDelimiterHandler().escapeList(list, this.valueTransformer));\n                 }\n                 catch (final UnsupportedOperationException ex) {}\n             }\n-            if (v == null) {\n-                this.writeProperty(key, values);\n+            if (s2 == null) {\n+                this.writeProperty(s, list);\n                 return;\n             }\n         }\n         else {\n-            v = String.valueOf(this.getDelimiterHandler().escape(value, this.valueTransformer));\n+            s2 = String.valueOf(this.getDelimiterHandler().escape(o, this.valueTransformer));\n         }\n-        this.write(this.escapeKey(key));\n-        this.write(this.fetchSeparator(key, value));\n-        this.write(v);\n+        this.write(this.escapeKey(s));\n+        this.write(this.fetchSeparator(s, o));\n+        this.write(s2);\n         this.writeln(null);\n     }\n     \n-    public void writeComment(final String comment) throws IOException {\n-        this.writeln(\"# \" + comment);\n+    public void writeComment(final String str) throws IOException {\n+        this.writeln(\"# \" + str);\n     }\n     \n-    protected String escapeKey(final String key) {\n-        final StringBuilder newkey = new StringBuilder();\n-        for (int i = 0; i < key.length(); ++i) {\n-            final char c = key.charAt(i);\n-            if (ArrayUtils.contains(PropertiesConfiguration.access$000(), c) || ArrayUtils.contains(PropertiesConfiguration.access$300(), c) || c == '\\\\') {\n-                newkey.append('\\\\');\n-                newkey.append(c);\n+    protected String escapeKey(final String s) {\n+        final StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < s.length(); ++i) {\n+            final char char1 = s.charAt(i);\n+            if (ArrayUtils.contains(PropertiesConfiguration.access$000(), char1) || ArrayUtils.contains(PropertiesConfiguration.access$300(), char1) || char1 == '\\\\') {\n+                sb.append('\\\\');\n+                sb.append(char1);\n             }\n             else {\n-                newkey.append(c);\n+                sb.append(char1);\n             }\n         }\n-        return newkey.toString();\n+        return sb.toString();\n     }\n     \n     public void writeln(final String s) throws IOException {\n         if (s != null) {\n             this.write(s);\n         }\n         this.write(this.getLineSeparator());\n     }\n     \n-    protected String fetchSeparator(final String key, final Object value) {\n+    protected String fetchSeparator(final String s, final Object o) {\n         return (this.getGlobalSeparator() != null) ? this.getGlobalSeparator() : StringUtils.defaultString(this.getCurrentSeparator());\n     }\n     \n     static {\n-        final Map<CharSequence, CharSequence> initialMap = new HashMap<CharSequence, CharSequence>();\n-        initialMap.put(\"\\\\\", \"\\\\\\\\\");\n-        PropertiesWriter.PROPERTIES_CHARS_ESCAPE = Collections.unmodifiableMap((Map<?, ?>)initialMap);\n+        final HashMap m = new HashMap();\n+        m.put(\"\\\\\", \"\\\\\\\\\");\n+        PropertiesWriter.PROPERTIES_CHARS_ESCAPE = Collections.unmodifiableMap((Map<?, ?>)m);\n         PropertiesWriter.ESCAPE_PROPERTIES = (CharSequenceTranslator)new AggregateTranslator(new CharSequenceTranslator[] { (CharSequenceTranslator)new LookupTranslator(PropertiesWriter.PROPERTIES_CHARS_ESCAPE), (CharSequenceTranslator)new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE), (CharSequenceTranslator)UnicodeEscaper.outsideOf(32, 127) });\n         PropertiesWriter.DEFAULT_TRANSFORMER = PropertiesWriter::lambda$static$0;\n     }\n }\n"}]}
