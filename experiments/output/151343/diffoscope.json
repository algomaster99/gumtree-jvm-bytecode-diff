{"diffoscope-json-version": 1, "source1": "first/ModelTransaction$Operations.class", "source2": "second/ModelTransaction$Operations.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,52 +21,52 @@\n         }\n         else {\n             this.childrenOperation.combine(co);\n         }\n     }\n     \n     public void addOperation(final ModelTransaction.Operation op) {\n-        this.operations = ModelTransaction.access$900(this.operations, (Object)op);\n+        this.operations = ModelTransaction.access$3(this.operations, (Object)op);\n     }\n     \n     public void newNodesAdded(final Collection<ImmutableNode> newNodes) {\n-        this.addedNodesInOperation = ModelTransaction.access$600(this.addedNodesInOperation, (Collection)newNodes);\n+        this.addedNodesInOperation = ModelTransaction.access$0(this.addedNodesInOperation, (Collection)newNodes);\n     }\n     \n     public void apply(final ImmutableNode target, final int level) {\n         ImmutableNode node = target;\n         if (this.childrenOperation != null) {\n             node = this.childrenOperation.apply(node, this);\n         }\n         if (this.operations != null) {\n             for (final ModelTransaction.Operation op : this.operations) {\n                 node = op.apply(node, this);\n             }\n         }\n         this.handleAddedNodes(node);\n         if (level == 0) {\n-            ModelTransaction.access$1402(this.this$0, node);\n-            ModelTransaction.access$1200(this.this$0).put(target, node);\n+            ModelTransaction.access$8(this.this$0, node);\n+            ModelTransaction.access$6(this.this$0).put(target, node);\n         }\n         else {\n             this.propagateChange(target, node, level);\n         }\n     }\n     \n     private void propagateChange(final ImmutableNode target, final ImmutableNode node, final int level) {\n         final ImmutableNode parent = this.this$0.getParent(target);\n-        final ModelTransaction.ChildrenUpdateOperation co = new ModelTransaction.ChildrenUpdateOperation(this.this$0, (ModelTransaction.ModelTransaction$1)null);\n+        final ModelTransaction.ChildrenUpdateOperation co = new ModelTransaction.ChildrenUpdateOperation(this.this$0, (ModelTransaction.ChildrenUpdateOperation)null);\n         if (InMemoryNodeModel.checkIfNodeDefined(node)) {\n             co.addNodeToReplace(target, node);\n         }\n         else {\n             co.addNodeToRemove(target);\n         }\n         this.this$0.fetchOperations(parent, level - 1).addChildrenOperation(co);\n     }\n     \n     private void handleAddedNodes(final ImmutableNode node) {\n         if (this.addedNodesInOperation != null) {\n-            this.addedNodesInOperation.forEach(this::lambda$handleAddedNodes$0);\n+            this.addedNodesInOperation.forEach(this::lambda$0);\n         }\n     }\n }\n"}]}
