{"diffoscope-json-version": 1, "source1": "first/DeltaDecoder.class", "source2": "second/DeltaDecoder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,33 +11,33 @@\n \n class DeltaDecoder extends CoderBase\n {\n     DeltaDecoder() {\n         super(new Class[] { Number.class });\n     }\n     \n-    InputStream decode(final String archiveName, final InputStream in, final long uncompressedLength, final Coder coder, final byte[] password) throws IOException {\n-        return new DeltaOptions(this.getOptionsFromCoder(coder)).getInputStream(in);\n+    InputStream decode(final String s, final InputStream inputStream, final long n, final Coder coder, final byte[] array) throws IOException {\n+        return new DeltaOptions(this.getOptionsFromCoder(coder)).getInputStream(inputStream);\n     }\n     \n-    OutputStream encode(final OutputStream out, final Object options) throws IOException {\n-        final int distance = numberOptionOrDefault(options, 1);\n+    OutputStream encode(final OutputStream outputStream, final Object o) throws IOException {\n+        final int numberOptionOrDefault = numberOptionOrDefault(o, 1);\n         try {\n-            return (OutputStream)new DeltaOptions(distance).getOutputStream((FinishableOutputStream)new FinishableWrapperOutputStream(out));\n+            return (OutputStream)new DeltaOptions(numberOptionOrDefault).getOutputStream((FinishableOutputStream)new FinishableWrapperOutputStream(outputStream));\n         }\n         catch (final UnsupportedOptionsException ex) {\n             throw new IOException(ex.getMessage());\n         }\n     }\n     \n-    byte[] getOptionsAsProperties(final Object options) {\n-        return new byte[] { (byte)(numberOptionOrDefault(options, 1) - 1) };\n+    byte[] getOptionsAsProperties(final Object o) {\n+        return new byte[] { (byte)(numberOptionOrDefault(o, 1) - 1) };\n     }\n     \n-    Object getOptionsFromCoder(final Coder coder, final InputStream in) {\n+    Object getOptionsFromCoder(final Coder coder, final InputStream inputStream) {\n         return Integer.valueOf(this.getOptionsFromCoder(coder));\n     }\n     \n     private int getOptionsFromCoder(final Coder coder) {\n         if (coder.properties == null || coder.properties.length == 0) {\n             return 1;\n         }\n"}]}
