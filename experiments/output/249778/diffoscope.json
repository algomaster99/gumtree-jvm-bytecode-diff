{"diffoscope-json-version": 1, "source1": "first/FinalParametersCheck.class", "source2": "second/FinalParametersCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,59 +33,54 @@\n         return new int[] { 9, 8, 96, 156 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final DetailAST container = ast.getParent().getParent();\n-        if (container.getType() != 15) {\n-            if (ast.getType() == 96) {\n-                this.visitCatch(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (detailAST.getParent().getParent().getType() != 15) {\n+            if (detailAST.getType() == 96) {\n+                this.visitCatch(detailAST);\n             }\n-            else if (ast.getType() == 156) {\n-                this.visitForEachClause(ast);\n+            else if (detailAST.getType() == 156) {\n+                this.visitForEachClause(detailAST);\n             }\n             else {\n-                this.visitMethod(ast);\n+                this.visitMethod(detailAST);\n             }\n         }\n     }\n     \n-    private void visitMethod(final DetailAST method) {\n-        final DetailAST modifiers = method.findFirstToken(5);\n-        if (modifiers.findFirstToken(40) == null && modifiers.findFirstToken(66) == null) {\n-            final DetailAST parameters = method.findFirstToken(20);\n-            TokenUtil.forEachChild(parameters, 21, (Consumer)this::checkParam);\n+    private void visitMethod(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(5);\n+        if (firstToken.findFirstToken(40) == null && firstToken.findFirstToken(66) == null) {\n+            TokenUtil.forEachChild(detailAST.findFirstToken(20), 21, (Consumer)this::checkParam);\n         }\n     }\n     \n-    private void visitCatch(final DetailAST catchClause) {\n-        this.checkParam(catchClause.findFirstToken(21));\n+    private void visitCatch(final DetailAST detailAST) {\n+        this.checkParam(detailAST.findFirstToken(21));\n     }\n     \n-    private void visitForEachClause(final DetailAST forEachClause) {\n-        this.checkParam(forEachClause.findFirstToken(10));\n+    private void visitForEachClause(final DetailAST detailAST) {\n+        this.checkParam(detailAST.findFirstToken(10));\n     }\n     \n-    private void checkParam(final DetailAST param) {\n-        if (param.findFirstToken(5).findFirstToken(39) == null && !this.isIgnoredParam(param) && !CheckUtil.isReceiverParameter(param)) {\n-            final DetailAST paramName = param.findFirstToken(58);\n-            final DetailAST firstNode = CheckUtil.getFirstNode(param);\n-            this.log(firstNode, \"final.parameter\", new Object[] { paramName.getText() });\n+    private void checkParam(final DetailAST detailAST) {\n+        if (detailAST.findFirstToken(5).findFirstToken(39) == null && !this.isIgnoredParam(detailAST) && !CheckUtil.isReceiverParameter(detailAST)) {\n+            this.log(CheckUtil.getFirstNode(detailAST), \"final.parameter\", new Object[] { detailAST.findFirstToken(58).getText() });\n         }\n     }\n     \n-    private boolean isIgnoredParam(final DetailAST paramDef) {\n-        boolean result = false;\n+    private boolean isIgnoredParam(final DetailAST detailAST) {\n+        boolean b = false;\n         if (this.ignorePrimitiveTypes) {\n-            final DetailAST type = paramDef.findFirstToken(13);\n-            final DetailAST parameterType = type.getFirstChild();\n-            final DetailAST arrayDeclarator = type.findFirstToken(17);\n-            if (arrayDeclarator == null && this.primitiveDataTypes.get(parameterType.getType())) {\n-                result = true;\n+            final DetailAST firstToken = detailAST.findFirstToken(13);\n+            final DetailAST firstChild = firstToken.getFirstChild();\n+            if (firstToken.findFirstToken(17) == null && this.primitiveDataTypes.get(firstChild.getType())) {\n+                b = true;\n             }\n         }\n-        return result;\n+        return b;\n     }\n }\n"}]}
