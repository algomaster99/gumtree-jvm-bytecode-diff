{"diffoscope-json-version": 1, "source1": "first/MultiWrapDynaBean.class", "source2": "second/MultiWrapDynaBean.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,74 +12,75 @@\n import org.apache.commons.beanutils.DynaBean;\n \n class MultiWrapDynaBean implements DynaBean\n {\n     private final DynaClass dynaClass;\n     private final Map<String, DynaBean> propsToBeans;\n     \n-    public MultiWrapDynaBean(final Collection<?> beans) {\n+    public MultiWrapDynaBean(final Collection<?> collection) {\n         this.propsToBeans = new HashMap<String, DynaBean>();\n-        final Collection<DynaClass> beanClasses = new ArrayList<DynaClass>(beans.size());\n-        for (final Object bean : beans) {\n-            final DynaBean dynaBean = createDynaBean(bean);\n-            final DynaClass beanClass = dynaBean.getDynaClass();\n-            for (final DynaProperty prop : beanClass.getDynaProperties()) {\n-                if (!this.propsToBeans.containsKey(prop.getName())) {\n-                    this.propsToBeans.put(prop.getName(), dynaBean);\n+        final ArrayList list = new ArrayList(collection.size());\n+        final Iterator iterator = collection.iterator();\n+        while (iterator.hasNext()) {\n+            final DynaBean dynaBean = createDynaBean(iterator.next());\n+            final DynaClass dynaClass = dynaBean.getDynaClass();\n+            for (final DynaProperty dynaProperty : dynaClass.getDynaProperties()) {\n+                if (!this.propsToBeans.containsKey(dynaProperty.getName())) {\n+                    this.propsToBeans.put(dynaProperty.getName(), dynaBean);\n                 }\n             }\n-            beanClasses.add(beanClass);\n+            list.add(dynaClass);\n         }\n-        this.dynaClass = (DynaClass)new MultiWrapDynaClass((Collection)beanClasses);\n+        this.dynaClass = (DynaClass)new MultiWrapDynaClass((Collection)list);\n     }\n     \n-    public boolean contains(final String name, final String key) {\n+    public boolean contains(final String s, final String s2) {\n         throw new UnsupportedOperationException(\"contains() operation not supported!\");\n     }\n     \n-    public Object get(final String name) {\n-        return this.fetchBean(name).get(name);\n+    public Object get(final String s) {\n+        return this.fetchBean(s).get(s);\n     }\n     \n-    public Object get(final String name, final int index) {\n-        return this.fetchBean(name).get(name, index);\n+    public Object get(final String s, final int n) {\n+        return this.fetchBean(s).get(s, n);\n     }\n     \n-    public Object get(final String name, final String key) {\n-        return this.fetchBean(name).get(name, key);\n+    public Object get(final String s, final String s2) {\n+        return this.fetchBean(s).get(s, s2);\n     }\n     \n     public DynaClass getDynaClass() {\n         return this.dynaClass;\n     }\n     \n-    public void remove(final String name, final String key) {\n+    public void remove(final String s, final String s2) {\n         throw new UnsupportedOperationException(\"remove() operation not supported!\");\n     }\n     \n-    public void set(final String name, final Object value) {\n-        this.fetchBean(name).set(name, value);\n+    public void set(final String s, final Object o) {\n+        this.fetchBean(s).set(s, o);\n     }\n     \n-    public void set(final String name, final int index, final Object value) {\n-        this.fetchBean(name).set(name, index, value);\n+    public void set(final String s, final int n, final Object o) {\n+        this.fetchBean(s).set(s, n, o);\n     }\n     \n-    public void set(final String name, final String key, final Object value) {\n-        this.fetchBean(name).set(name, key, value);\n+    public void set(final String s, final String s2, final Object o) {\n+        this.fetchBean(s).set(s, s2, o);\n     }\n     \n-    private DynaBean fetchBean(final String property) {\n-        DynaBean dynaBean = (DynaBean)this.propsToBeans.get(property);\n+    private DynaBean fetchBean(final String s) {\n+        DynaBean dynaBean = (DynaBean)this.propsToBeans.get(s);\n         if (dynaBean == null) {\n             dynaBean = this.propsToBeans.values().iterator().next();\n         }\n         return dynaBean;\n     }\n     \n-    private static DynaBean createDynaBean(final Object bean) {\n-        if (bean instanceof DynaBean) {\n-            return (DynaBean)bean;\n+    private static DynaBean createDynaBean(final Object o) {\n+        if (o instanceof DynaBean) {\n+            return (DynaBean)o;\n         }\n-        return BeanHelper.createWrapDynaBean(bean);\n+        return BeanHelper.createWrapDynaBean(o);\n     }\n }\n"}]}
