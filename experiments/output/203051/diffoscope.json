{"diffoscope-json-version": 1, "source1": "first/ZipSplitOutputStream.class", "source2": "second/ZipSplitOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,49 +27,48 @@\n         }\n         this.zipFile = zipFile;\n         this.splitSize = splitSize;\n         this.outputStream = Files.newOutputStream(zipFile.toPath(), new OpenOption[0]);\n         this.writeZipSplitSignature();\n     }\n     \n-    public void prepareToWriteUnsplittableContent(final long unsplittableContentSize) throws IllegalArgumentException, IOException {\n-        if (unsplittableContentSize > this.splitSize) {\n+    public void prepareToWriteUnsplittableContent(final long n) throws IllegalArgumentException, IOException {\n+        if (n > this.splitSize) {\n             throw new IllegalArgumentException(\"The unsplittable content size is bigger than the split segment size\");\n         }\n-        final long bytesRemainingInThisSegment = this.splitSize - this.currentSplitSegmentBytesWritten;\n-        if (bytesRemainingInThisSegment < unsplittableContentSize) {\n+        if (this.splitSize - this.currentSplitSegmentBytesWritten < n) {\n             this.openNewSplitSegment();\n         }\n     }\n     \n     @Override\n-    public void write(final int i) throws IOException {\n-        this.singleByte[0] = (byte)(i & 0xFF);\n+    public void write(final int n) throws IOException {\n+        this.singleByte[0] = (byte)(n & 0xFF);\n         this.write(this.singleByte);\n     }\n     \n     @Override\n-    public void write(final byte[] b) throws IOException {\n-        this.write(b, 0, b.length);\n+    public void write(final byte[] array) throws IOException {\n+        this.write(array, 0, array.length);\n     }\n     \n     @Override\n     public void write(final byte[] b, final int off, final int len) throws IOException {\n         if (len <= 0) {\n             return;\n         }\n         if (this.currentSplitSegmentBytesWritten >= this.splitSize) {\n             this.openNewSplitSegment();\n             this.write(b, off, len);\n         }\n         else if (this.currentSplitSegmentBytesWritten + len > this.splitSize) {\n-            final int bytesToWriteForThisSegment = (int)this.splitSize - (int)this.currentSplitSegmentBytesWritten;\n-            this.write(b, off, bytesToWriteForThisSegment);\n+            final int n = (int)this.splitSize - (int)this.currentSplitSegmentBytesWritten;\n+            this.write(b, off, n);\n             this.openNewSplitSegment();\n-            this.write(b, off + bytesToWriteForThisSegment, len - bytesToWriteForThisSegment);\n+            this.write(b, off + n, len - n);\n         }\n         else {\n             this.outputStream.write(b, off, len);\n             this.currentSplitSegmentBytesWritten += len;\n         }\n     }\n     \n@@ -80,59 +79,59 @@\n         }\n     }\n     \n     private void finish() throws IOException {\n         if (this.finished) {\n             throw new IOException(\"This archive has already been finished\");\n         }\n-        final String zipFileBaseName = FileNameUtils.getBaseName(this.zipFile.getName());\n-        final File lastZipSplitSegmentFile = new File(this.zipFile.getParentFile(), zipFileBaseName + \".zip\");\n+        final File file = new File(this.zipFile.getParentFile(), FileNameUtils.getBaseName(this.zipFile.getName()) + \".zip\");\n         this.outputStream.close();\n-        if (!this.zipFile.renameTo(lastZipSplitSegmentFile)) {\n-            throw new IOException(\"Failed to rename \" + this.zipFile + \" to \" + lastZipSplitSegmentFile);\n+        if (!this.zipFile.renameTo(file)) {\n+            throw new IOException(\"Failed to rename \" + this.zipFile + \" to \" + file);\n         }\n         this.finished = true;\n     }\n     \n     private void openNewSplitSegment() throws IOException {\n         if (this.currentSplitSegmentIndex == 0) {\n             this.outputStream.close();\n-            final File newFile = this.createNewSplitSegmentFile(Integer.valueOf(1));\n-            if (!this.zipFile.renameTo(newFile)) {\n-                throw new IOException(\"Failed to rename \" + this.zipFile + \" to \" + newFile);\n+            final File newSplitSegmentFile = this.createNewSplitSegmentFile(Integer.valueOf(1));\n+            if (!this.zipFile.renameTo(newSplitSegmentFile)) {\n+                throw new IOException(\"Failed to rename \" + this.zipFile + \" to \" + newSplitSegmentFile);\n             }\n         }\n-        final File newFile = this.createNewSplitSegmentFile(null);\n+        final File newSplitSegmentFile2 = this.createNewSplitSegmentFile(null);\n         this.outputStream.close();\n-        this.outputStream = Files.newOutputStream(newFile.toPath(), new OpenOption[0]);\n+        this.outputStream = Files.newOutputStream(newSplitSegmentFile2.toPath(), new OpenOption[0]);\n         this.currentSplitSegmentBytesWritten = 0L;\n-        this.zipFile = newFile;\n+        this.zipFile = newSplitSegmentFile2;\n         ++this.currentSplitSegmentIndex;\n     }\n     \n     private void writeZipSplitSignature() throws IOException {\n         this.outputStream.write(ZipArchiveOutputStream.DD_SIG);\n         this.currentSplitSegmentBytesWritten += ZipArchiveOutputStream.DD_SIG.length;\n     }\n     \n-    private File createNewSplitSegmentFile(final Integer zipSplitSegmentSuffixIndex) throws IOException {\n-        final int newZipSplitSegmentSuffixIndex = (zipSplitSegmentSuffixIndex == null) ? (this.currentSplitSegmentIndex + 2) : ((int)zipSplitSegmentSuffixIndex);\n+    private File createNewSplitSegmentFile(final Integer n) throws IOException {\n+        final int n2 = (n == null) ? (this.currentSplitSegmentIndex + 2) : ((int)n);\n         final String baseName = FileNameUtils.getBaseName(this.zipFile.getName());\n-        String extension = \".z\";\n-        if (newZipSplitSegmentSuffixIndex <= 9) {\n-            extension = extension + \"0\" + newZipSplitSegmentSuffixIndex;\n+        final String s = \".z\";\n+        String s2;\n+        if (n2 <= 9) {\n+            s2 = s + \"0\" + n2;\n         }\n         else {\n-            extension += newZipSplitSegmentSuffixIndex;\n+            s2 = s + n2;\n         }\n-        final File newFile = new File(this.zipFile.getParent(), baseName + extension);\n-        if (newFile.exists()) {\n-            throw new IOException(\"split zip segment \" + baseName + extension + \" already exists\");\n+        final File file = new File(this.zipFile.getParent(), baseName + s2);\n+        if (file.exists()) {\n+            throw new IOException(\"split zip segment \" + baseName + s2 + \" already exists\");\n         }\n-        return newFile;\n+        return file;\n     }\n     \n     public int getCurrentSplitSegmentIndex() {\n         return this.currentSplitSegmentIndex;\n     }\n     \n     public long getCurrentSplitSegmentBytesWritten() {\n"}]}
