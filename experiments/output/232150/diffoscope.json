{"diffoscope-json-version": 1, "source1": "first/YAMLConfiguration.class", "source2": "second/YAMLConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,77 +3,68 @@\n \n import java.io.InputStream;\n import java.io.IOException;\n import org.yaml.snakeyaml.DumperOptions;\n import java.io.Writer;\n import org.yaml.snakeyaml.LoaderOptions;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n-import java.util.Map;\n import org.yaml.snakeyaml.Yaml;\n+import java.util.Map;\n import java.io.Reader;\n import org.apache.commons.configuration2.tree.ImmutableNode;\n import org.apache.commons.configuration2.io.InputStreamSupport;\n \n public class YAMLConfiguration extends AbstractYAMLBasedConfiguration implements FileBasedConfiguration, InputStreamSupport\n {\n     public YAMLConfiguration() {\n     }\n     \n-    public YAMLConfiguration(final HierarchicalConfiguration<ImmutableNode> c) {\n-        super((HierarchicalConfiguration)c);\n+    public YAMLConfiguration(final HierarchicalConfiguration<ImmutableNode> hierarchicalConfiguration) {\n+        super((HierarchicalConfiguration)hierarchicalConfiguration);\n     }\n     \n-    public void read(final Reader in) throws ConfigurationException {\n+    public void read(final Reader reader) throws ConfigurationException {\n         try {\n-            final Yaml yaml = new Yaml();\n-            final Map<String, Object> map = (Map)yaml.load(in);\n-            this.load((Map)map);\n+            this.load((Map)new Yaml().load(reader));\n         }\n-        catch (final Exception e) {\n-            rethrowException(e);\n+        catch (final Exception ex) {\n+            rethrowException(ex);\n         }\n     }\n     \n-    public void read(final Reader in, final LoaderOptions options) throws ConfigurationException {\n+    public void read(final Reader reader, final LoaderOptions loaderOptions) throws ConfigurationException {\n         try {\n-            final Yaml yaml = new Yaml(options);\n-            final Map<String, Object> map = (Map)yaml.load(in);\n-            this.load((Map)map);\n+            this.load((Map)new Yaml(loaderOptions).load(reader));\n         }\n-        catch (final Exception e) {\n-            rethrowException(e);\n+        catch (final Exception ex) {\n+            rethrowException(ex);\n         }\n     }\n     \n-    public void write(final Writer out) throws ConfigurationException, IOException {\n-        final DumperOptions options = new DumperOptions();\n-        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n-        this.dump(out, options);\n+    public void write(final Writer writer) throws ConfigurationException, IOException {\n+        final DumperOptions dumperOptions = new DumperOptions();\n+        dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n+        this.dump(writer, dumperOptions);\n     }\n     \n-    public void dump(final Writer out, final DumperOptions options) throws ConfigurationException, IOException {\n-        final Yaml yaml = new Yaml(options);\n-        yaml.dump((Object)this.constructMap((ImmutableNode)this.getNodeModel().getNodeHandler().getRootNode()), out);\n+    public void dump(final Writer writer, final DumperOptions dumperOptions) throws ConfigurationException, IOException {\n+        new Yaml(dumperOptions).dump((Object)this.constructMap((ImmutableNode)this.getNodeModel().getNodeHandler().getRootNode()), writer);\n     }\n     \n-    public void read(final InputStream in) throws ConfigurationException {\n+    public void read(final InputStream inputStream) throws ConfigurationException {\n         try {\n-            final Yaml yaml = new Yaml();\n-            final Map<String, Object> map = (Map)yaml.load(in);\n-            this.load((Map)map);\n+            this.load((Map)new Yaml().load(inputStream));\n         }\n-        catch (final Exception e) {\n-            rethrowException(e);\n+        catch (final Exception ex) {\n+            rethrowException(ex);\n         }\n     }\n     \n-    public void read(final InputStream in, final LoaderOptions options) throws ConfigurationException {\n+    public void read(final InputStream inputStream, final LoaderOptions loaderOptions) throws ConfigurationException {\n         try {\n-            final Yaml yaml = new Yaml(options);\n-            final Map<String, Object> map = (Map)yaml.load(in);\n-            this.load((Map)map);\n+            this.load((Map)new Yaml(loaderOptions).load(inputStream));\n         }\n-        catch (final Exception e) {\n-            rethrowException(e);\n+        catch (final Exception ex) {\n+            rethrowException(ex);\n         }\n     }\n }\n"}]}
