{"diffoscope-json-version": 1, "source1": "first/SubsetConfiguration.class", "source2": "second/SubsetConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,100 +6,99 @@\n \n public class SubsetConfiguration extends AbstractConfiguration\n {\n     protected Configuration parent;\n     protected String prefix;\n     protected String delimiter;\n     \n-    public SubsetConfiguration(final Configuration parent, final String prefix) {\n-        this(parent, prefix, null);\n+    public SubsetConfiguration(final Configuration configuration, final String s) {\n+        this(configuration, s, null);\n     }\n     \n     public SubsetConfiguration(final Configuration parent, final String prefix, final String delimiter) {\n         if (parent == null) {\n             throw new IllegalArgumentException(\"Parent configuration must not be null!\");\n         }\n         this.parent = parent;\n         this.prefix = prefix;\n         this.delimiter = delimiter;\n         this.initInterpolator();\n     }\n     \n-    protected String getParentKey(final String key) {\n-        if (\"\".equals(key) || key == null) {\n+    protected String getParentKey(final String str) {\n+        if (\"\".equals(str) || str == null) {\n             return this.prefix;\n         }\n-        return (this.delimiter == null) ? (this.prefix + key) : (this.prefix + this.delimiter + key);\n+        return (this.delimiter == null) ? (this.prefix + str) : (this.prefix + this.delimiter + str);\n     }\n     \n-    protected String getChildKey(final String key) {\n-        if (!key.startsWith(this.prefix)) {\n-            throw new IllegalArgumentException(\"The parent key '\" + key + \"' is not in the subset.\");\n+    protected String getChildKey(final String str) {\n+        if (!str.startsWith(this.prefix)) {\n+            throw new IllegalArgumentException(\"The parent key '\" + str + \"' is not in the subset.\");\n         }\n-        String modifiedKey = null;\n-        if (key.length() == this.prefix.length()) {\n-            modifiedKey = \"\";\n+        String substring;\n+        if (str.length() == this.prefix.length()) {\n+            substring = \"\";\n         }\n         else {\n-            final int i = this.prefix.length() + ((this.delimiter != null) ? this.delimiter.length() : 0);\n-            modifiedKey = key.substring(i);\n+            substring = str.substring(this.prefix.length() + ((this.delimiter != null) ? this.delimiter.length() : 0));\n         }\n-        return modifiedKey;\n+        return substring;\n     }\n     \n     public Configuration getParent() {\n         return this.parent;\n     }\n     \n     public String getPrefix() {\n         return this.prefix;\n     }\n     \n     public void setPrefix(final String prefix) {\n         this.prefix = prefix;\n     }\n     \n-    public Configuration subset(final String prefix) {\n-        return this.parent.subset(this.getParentKey(prefix));\n+    public Configuration subset(final String s) {\n+        return this.parent.subset(this.getParentKey(s));\n     }\n     \n     protected boolean isEmptyInternal() {\n         return !this.getKeysInternal().hasNext();\n     }\n     \n-    protected boolean containsKeyInternal(final String key) {\n-        return this.parent.containsKey(this.getParentKey(key));\n+    protected boolean containsKeyInternal(final String s) {\n+        return this.parent.containsKey(this.getParentKey(s));\n     }\n     \n-    public void addPropertyDirect(final String key, final Object value) {\n-        this.parent.addProperty(this.getParentKey(key), value);\n+    public void addPropertyDirect(final String s, final Object o) {\n+        this.parent.addProperty(this.getParentKey(s), o);\n     }\n     \n-    protected void clearPropertyDirect(final String key) {\n-        this.parent.clearProperty(this.getParentKey(key));\n+    protected void clearPropertyDirect(final String s) {\n+        this.parent.clearProperty(this.getParentKey(s));\n     }\n     \n-    protected Object getPropertyInternal(final String key) {\n-        return this.parent.getProperty(this.getParentKey(key));\n+    protected Object getPropertyInternal(final String s) {\n+        return this.parent.getProperty(this.getParentKey(s));\n     }\n     \n-    protected Iterator<String> getKeysInternal(final String prefix) {\n-        return (Iterator<String>)new SubsetConfiguration.SubsetIterator(this, this.parent.getKeys(this.getParentKey(prefix)));\n+    protected Iterator<String> getKeysInternal(final String s) {\n+        return (Iterator<String>)new SubsetConfiguration.SubsetIterator(this, this.parent.getKeys(this.getParentKey(s)));\n     }\n     \n     protected Iterator<String> getKeysInternal() {\n         return (Iterator<String>)new SubsetConfiguration.SubsetIterator(this, this.parent.getKeys(this.prefix));\n     }\n     \n-    public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing) {\n+    public void setThrowExceptionOnMissing(final boolean b) {\n         if (this.parent instanceof AbstractConfiguration) {\n-            ((AbstractConfiguration)this.parent).setThrowExceptionOnMissing(throwExceptionOnMissing);\n+            ((AbstractConfiguration)this.parent).setThrowExceptionOnMissing(b);\n         }\n         else {\n-            super.setThrowExceptionOnMissing(throwExceptionOnMissing);\n+            super.setThrowExceptionOnMissing(b);\n         }\n     }\n     \n     public boolean isThrowExceptionOnMissing() {\n         if (this.parent instanceof AbstractConfiguration) {\n             return ((AbstractConfiguration)this.parent).isThrowExceptionOnMissing();\n         }\n"}]}
