{"diffoscope-json-version": 1, "source1": "first/HuffmanDecoder$HuffmanCodes.class", "source2": "second/HuffmanDecoder$HuffmanCodes.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,22 +11,22 @@\n     private final HuffmanDecoder.BinaryTreeNode distanceTree;\n     private int runBufferPos;\n     private byte[] runBuffer;\n     private int runBufferLength;\n     \n     HuffmanCodes(final HuffmanDecoder this$0, final HuffmanState state, final int[] lengths, final int[] distance) {\n         this.this$0 = this$0;\n-        super((HuffmanDecoder.HuffmanDecoder$1)null);\n+        super((HuffmanDecoder.DecoderState)null);\n         this.endOfBlock = false;\n         this.runBufferPos = 0;\n         this.runBuffer = new byte[0];\n         this.runBufferLength = 0;\n         this.state = state;\n-        this.lengthTree = HuffmanDecoder.access$800(lengths);\n-        this.distanceTree = HuffmanDecoder.access$800(distance);\n+        this.lengthTree = HuffmanDecoder.access$4(lengths);\n+        this.distanceTree = HuffmanDecoder.access$4(distance);\n     }\n     \n     HuffmanState state() {\n         return this.endOfBlock ? HuffmanState.INITIAL : this.state;\n     }\n     \n     int read(final byte[] b, final int off, final int len) throws IOException {\n@@ -35,38 +35,38 @@\n     \n     private int decodeNext(final byte[] b, final int off, final int len) throws IOException {\n         if (this.endOfBlock) {\n             return -1;\n         }\n         int result = this.copyFromRunBuffer(b, off, len);\n         while (result < len) {\n-            final int symbol = HuffmanDecoder.access$900(HuffmanDecoder.access$400(this.this$0), this.lengthTree);\n+            final int symbol = HuffmanDecoder.access$5(HuffmanDecoder.access$0(this.this$0), this.lengthTree);\n             if (symbol < 256) {\n-                b[off + result++] = HuffmanDecoder.access$600(this.this$0).add((byte)symbol);\n+                b[off + result++] = HuffmanDecoder.access$2(this.this$0).add((byte)symbol);\n             }\n             else {\n                 if (symbol <= 256) {\n                     this.endOfBlock = true;\n                     return result;\n                 }\n-                final int runMask = HuffmanDecoder.access$1000()[symbol - 257];\n+                final int runMask = HuffmanDecoder.access$6()[symbol - 257];\n                 int run = runMask >>> 5;\n                 final int runXtra = runMask & 0x1F;\n-                run += HuffmanDecoder.access$500(this.this$0, runXtra);\n-                final int distSym = HuffmanDecoder.access$900(HuffmanDecoder.access$400(this.this$0), this.distanceTree);\n-                final int distMask = HuffmanDecoder.access$1100()[distSym];\n+                run += HuffmanDecoder.access$1(this.this$0, runXtra);\n+                final int distSym = HuffmanDecoder.access$5(HuffmanDecoder.access$0(this.this$0), this.distanceTree);\n+                final int distMask = HuffmanDecoder.access$7()[distSym];\n                 int dist = distMask >>> 4;\n                 final int distXtra = distMask & 0xF;\n-                dist += HuffmanDecoder.access$500(this.this$0, distXtra);\n+                dist += HuffmanDecoder.access$1(this.this$0, distXtra);\n                 if (this.runBuffer.length < run) {\n                     this.runBuffer = new byte[run];\n                 }\n                 this.runBufferLength = run;\n                 this.runBufferPos = 0;\n-                HuffmanDecoder.access$600(this.this$0).recordToBuffer(dist, run, this.runBuffer);\n+                HuffmanDecoder.access$2(this.this$0).recordToBuffer(dist, run, this.runBuffer);\n                 result += this.copyFromRunBuffer(b, off + result, len - result);\n             }\n         }\n         return result;\n     }\n     \n     private int copyFromRunBuffer(final byte[] b, final int off, final int len) {\n"}]}
