{"diffoscope-json-version": 1, "source1": "first/CountingInputStream.class", "source2": "second/CountingInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,43 +9,43 @@\n {\n     private long bytesRead;\n     \n     public CountingInputStream(final InputStream in) {\n         super(in);\n     }\n     \n-    protected final void count(final long read) {\n-        if (read != -1L) {\n-            this.bytesRead += read;\n+    protected final void count(final long n) {\n+        if (n != -1L) {\n+            this.bytesRead += n;\n         }\n     }\n     \n     public long getBytesRead() {\n         return this.bytesRead;\n     }\n     \n     @Override\n     public int read() throws IOException {\n-        final int r = this.in.read();\n-        if (r >= 0) {\n+        final int read = this.in.read();\n+        if (read >= 0) {\n             this.count(1L);\n         }\n-        return r;\n+        return read;\n     }\n     \n     @Override\n-    public int read(final byte[] b) throws IOException {\n-        return this.read(b, 0, b.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     @Override\n     public int read(final byte[] b, final int off, final int len) throws IOException {\n         if (len == 0) {\n             return 0;\n         }\n-        final int r = this.in.read(b, off, len);\n-        if (r >= 0) {\n-            this.count(r);\n+        final int read = this.in.read(b, off, len);\n+        if (read >= 0) {\n+            this.count(read);\n         }\n-        return r;\n+        return read;\n     }\n }\n"}]}
