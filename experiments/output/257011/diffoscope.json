{"diffoscope-json-version": 1, "source1": "first/AbstractCoder.class", "source2": "second/AbstractCoder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,33 +8,33 @@\n import java.io.InputStream;\n import java.util.Objects;\n \n abstract class AbstractCoder\n {\n     private final Class<?>[] optionClasses;\n     \n-    protected static int toInt(final Object options, final int defaultValue) {\n-        return (options instanceof Number) ? ((Number)options).intValue() : defaultValue;\n+    protected static int toInt(final Object o, final int n) {\n+        return (o instanceof Number) ? ((Number)o).intValue() : n;\n     }\n     \n-    protected AbstractCoder(final Class<?>... optionClasses) {\n-        this.optionClasses = Objects.requireNonNull(optionClasses, \"optionClasses\");\n+    protected AbstractCoder(final Class<?>... obj) {\n+        this.optionClasses = Objects.requireNonNull(obj, \"optionClasses\");\n     }\n     \n     abstract InputStream decode(final String p0, final InputStream p1, final long p2, final Coder p3, final byte[] p4, final int p5) throws IOException;\n     \n-    OutputStream encode(final OutputStream out, final Object options) throws IOException {\n+    OutputStream encode(final OutputStream outputStream, final Object o) throws IOException {\n         throw new UnsupportedOperationException(\"Method doesn't support writing\");\n     }\n     \n-    byte[] getOptionsAsProperties(final Object options) throws IOException {\n+    byte[] getOptionsAsProperties(final Object o) throws IOException {\n         return ByteUtils.EMPTY_BYTE_ARRAY;\n     }\n     \n-    Object getOptionsFromCoder(final Coder coder, final InputStream in) throws IOException {\n+    Object getOptionsFromCoder(final Coder coder, final InputStream inputStream) throws IOException {\n         return null;\n     }\n     \n-    boolean isOptionInstance(final Object opts) {\n-        return Stream.of(this.optionClasses).anyMatch(c -> c.isInstance(opts));\n+    boolean isOptionInstance(final Object o) {\n+        return Stream.of(this.optionClasses).anyMatch(clazz -> clazz.isInstance(o2));\n     }\n }\n"}]}
