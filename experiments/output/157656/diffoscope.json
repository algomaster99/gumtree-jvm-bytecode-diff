{"diffoscope-json-version": 1, "source1": "first/WriterBasedJsonGenerator.class", "source2": "second/WriterBasedJsonGenerator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,17 +8,17 @@\n import com.fasterxml.jackson.core.io.NumberOutput;\n import java.io.InputStream;\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.Base64Variant;\n import java.io.Reader;\n import com.fasterxml.jackson.core.JsonGenerator;\n import java.io.IOException;\n-import com.fasterxml.jackson.core.io.CharTypes;\n import com.fasterxml.jackson.core.ObjectCodec;\n import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.io.CharTypes;\n import com.fasterxml.jackson.core.SerializableString;\n import java.io.Writer;\n \n public class WriterBasedJsonGenerator extends JsonGeneratorImpl\n {\n     protected static final int SHORT_WRITE = 32;\n     protected static final char[] HEX_CHARS_UPPER;\n@@ -29,14 +29,19 @@\n     protected int _outputHead;\n     protected int _outputTail;\n     protected int _outputEnd;\n     protected char[] _entityBuffer;\n     protected SerializableString _currentEscape;\n     protected char[] _copyBuffer;\n     \n+    static {\n+        HEX_CHARS_UPPER = CharTypes.copyHexChars(true);\n+        HEX_CHARS_LOWER = CharTypes.copyHexChars(false);\n+    }\n+    \n     private char[] getHexChars() {\n         return this._cfgWriteHexUppercase ? WriterBasedJsonGenerator.HEX_CHARS_UPPER : WriterBasedJsonGenerator.HEX_CHARS_LOWER;\n     }\n     \n     @Deprecated\n     public WriterBasedJsonGenerator(final IOContext ctxt, final int features, final ObjectCodec codec, final Writer w) {\n         this(ctxt, features, codec, w, '\\\"');\n@@ -521,14 +526,15 @@\n                 }\n                 bytes = dataLength;\n             }\n         }\n         finally {\n             this._ioContext.releaseBase64Buffer(encodingBuffer);\n         }\n+        this._ioContext.releaseBase64Buffer(encodingBuffer);\n         if (this._outputTail >= this._outputEnd) {\n             this._flushBuffer();\n         }\n         this._outputBuffer[this._outputTail++] = this._quoteChar;\n         return bytes;\n     }\n     \n@@ -838,31 +844,29 @@\n         }\n     }\n     \n     private void _writeString2(final int len) throws IOException {\n         final int end = this._outputTail + len;\n         final int[] escCodes = this._outputEscapes;\n         final int escLen = escCodes.length;\n-    Label_0137:\n+    Label_0126:\n         while (this._outputTail < end) {\n-            while (true) {\n+            do {\n                 final char c = this._outputBuffer[this._outputTail];\n                 if (c < escLen && escCodes[c] != 0) {\n                     final int flushLen = this._outputTail - this._outputHead;\n                     if (flushLen > 0) {\n                         this._writer.write(this._outputBuffer, this._outputHead, flushLen);\n                     }\n                     final char c2 = this._outputBuffer[this._outputTail++];\n                     this._prependOrWriteCharacterEscape(c2, escCodes[c2]);\n-                    break;\n+                    continue Label_0126;\n                 }\n-                if (++this._outputTail >= end) {\n-                    break Label_0137;\n-                }\n-            }\n+            } while (++this._outputTail < end);\n+            break;\n         }\n     }\n     \n     private void _writeLongString(final String text) throws IOException {\n         this._flushBuffer();\n         final int textLen = text.length();\n         int offset = 0;\n@@ -948,15 +952,15 @@\n     }\n     \n     private void _writeStringASCII(final int len, final int maxNonEscaped) throws IOException, JsonGenerationException {\n         final int end = this._outputTail + len;\n         final int[] escCodes = this._outputEscapes;\n         final int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);\n         int escCode = 0;\n-    Label_0027:\n+    Label_0144:\n         while (this._outputTail < end) {\n             do {\n                 final char c = this._outputBuffer[this._outputTail];\n                 if (c < escLimit) {\n                     escCode = escCodes[c];\n                     if (escCode == 0) {\n                         continue;\n@@ -970,15 +974,15 @@\n                 }\n                 final int flushLen = this._outputTail - this._outputHead;\n                 if (flushLen > 0) {\n                     this._writer.write(this._outputBuffer, this._outputHead, flushLen);\n                 }\n                 ++this._outputTail;\n                 this._prependOrWriteCharacterEscape(c, escCode);\n-                continue Label_0027;\n+                continue Label_0144;\n             } while (++this._outputTail < end);\n             break;\n         }\n     }\n     \n     private void _writeSegmentASCII(final int end, final int maxNonEscaped) throws IOException, JsonGenerationException {\n         final int[] escCodes = this._outputEscapes;\n@@ -1067,15 +1071,15 @@\n     private void _writeStringCustom(final int len) throws IOException, JsonGenerationException {\n         final int end = this._outputTail + len;\n         final int[] escCodes = this._outputEscapes;\n         final int maxNonEscaped = (this._maximumNonEscapedChar < 1) ? 65535 : this._maximumNonEscapedChar;\n         final int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);\n         int escCode = 0;\n         final CharacterEscapes customEscapes = this._characterEscapes;\n-    Label_0052:\n+    Label_0191:\n         while (this._outputTail < end) {\n             do {\n                 final char c = this._outputBuffer[this._outputTail];\n                 if (c < escLimit) {\n                     escCode = escCodes[c];\n                     if (escCode == 0) {\n                         continue;\n@@ -1092,15 +1096,15 @@\n                 }\n                 final int flushLen = this._outputTail - this._outputHead;\n                 if (flushLen > 0) {\n                     this._writer.write(this._outputBuffer, this._outputHead, flushLen);\n                 }\n                 ++this._outputTail;\n                 this._prependOrWriteCharacterEscape(c, escCode);\n-                continue Label_0052;\n+                continue Label_0191;\n             } while (++this._outputTail < end);\n             break;\n         }\n     }\n     \n     private void _writeSegmentCustom(final int end) throws IOException, JsonGenerationException {\n         final int[] escCodes = this._outputEscapes;\n@@ -1589,13 +1593,8 @@\n             final int offset = this._outputHead;\n             final int n = 0;\n             this._outputHead = n;\n             this._outputTail = n;\n             this._writer.write(this._outputBuffer, offset, len);\n         }\n     }\n-    \n-    static {\n-        HEX_CHARS_UPPER = CharTypes.copyHexChars(true);\n-        HEX_CHARS_LOWER = CharTypes.copyHexChars(false);\n-    }\n }\n"}]}
