{"diffoscope-json-version": 1, "source1": "first/ClassParser.class", "source2": "second/ClassParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,24 +25,24 @@\n     private int[] interfaces;\n     private ConstantPool constantPool;\n     private Field[] fields;\n     private Method[] methods;\n     private Attribute[] attributes;\n     private final boolean isZip;\n     \n-    public ClassParser(final InputStream inputStream, final String fileName) {\n+    public ClassParser(final InputStream in, final String fileName) {\n         this.fileName = fileName;\n         this.fileOwned = false;\n-        final String clazz = inputStream.getClass().getName();\n-        this.isZip = (clazz.startsWith(\"java.util.zip.\") || clazz.startsWith(\"java.util.jar.\"));\n-        if (inputStream instanceof DataInputStream) {\n-            this.dataInputStream = (DataInputStream)inputStream;\n+        final String name = in.getClass().getName();\n+        this.isZip = (name.startsWith(\"java.util.zip.\") || name.startsWith(\"java.util.jar.\"));\n+        if (in instanceof DataInputStream) {\n+            this.dataInputStream = (DataInputStream)in;\n         }\n         else {\n-            this.dataInputStream = new DataInputStream(new BufferedInputStream(inputStream, 8192));\n+            this.dataInputStream = new DataInputStream(new BufferedInputStream(in, 8192));\n         }\n     }\n     \n     public ClassParser(final String fileName) {\n         this.isZip = false;\n         this.fileName = fileName;\n         this.fileOwned = true;\n@@ -52,24 +52,24 @@\n         this.isZip = true;\n         this.fileOwned = true;\n         this.zipFile = zipFile;\n         this.fileName = fileName;\n     }\n     \n     public JavaClass parse() throws IOException, ClassFormatException {\n-        ZipFile zip = null;\n+        ZipFile zipFile = null;\n         try {\n             if (this.fileOwned) {\n                 if (this.isZip) {\n-                    zip = new ZipFile(this.zipFile);\n-                    final ZipEntry entry = zip.getEntry(this.fileName);\n+                    zipFile = new ZipFile(this.zipFile);\n+                    final ZipEntry entry = zipFile.getEntry(this.fileName);\n                     if (entry == null) {\n                         throw new IOException(\"File \" + this.fileName + \" not found\");\n                     }\n-                    this.dataInputStream = new DataInputStream(new BufferedInputStream(zip.getInputStream(entry), 8192));\n+                    this.dataInputStream = new DataInputStream(new BufferedInputStream(zipFile.getInputStream(entry), 8192));\n                 }\n                 else {\n                     this.dataInputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(this.fileName), 8192));\n                 }\n             }\n             this.readID();\n             this.readVersion();\n@@ -86,27 +86,27 @@\n                     if (this.dataInputStream != null) {\n                         this.dataInputStream.close();\n                     }\n                 }\n                 catch (final IOException ex) {}\n             }\n             try {\n-                if (zip != null) {\n-                    zip.close();\n+                if (zipFile != null) {\n+                    zipFile.close();\n                 }\n             }\n             catch (final IOException ex2) {}\n         }\n         return new JavaClass(this.classNameIndex, this.superclassNameIndex, this.fileName, this.major, this.minor, this.accessFlags, this.constantPool, this.interfaces, this.fields, this.methods, this.attributes, (byte)(this.isZip ? 3 : 2));\n     }\n     \n     private void readAttributes() throws IOException, ClassFormatException {\n-        final int attributesCount = this.dataInputStream.readUnsignedShort();\n-        this.attributes = new Attribute[attributesCount];\n-        for (int i = 0; i < attributesCount; ++i) {\n+        final int unsignedShort = this.dataInputStream.readUnsignedShort();\n+        this.attributes = new Attribute[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n             this.attributes[i] = Attribute.readAttribute(this.dataInputStream, this.constantPool);\n         }\n     }\n     \n     private void readClassInfo() throws IOException, ClassFormatException {\n         this.accessFlags = this.dataInputStream.readUnsignedShort();\n         if ((this.accessFlags & 0x200) != 0x0) {\n@@ -120,39 +120,39 @@\n     }\n     \n     private void readConstantPool() throws IOException, ClassFormatException {\n         this.constantPool = new ConstantPool((DataInput)this.dataInputStream);\n     }\n     \n     private void readFields() throws IOException, ClassFormatException {\n-        final int fieldsCount = this.dataInputStream.readUnsignedShort();\n-        this.fields = new Field[fieldsCount];\n-        for (int i = 0; i < fieldsCount; ++i) {\n+        final int unsignedShort = this.dataInputStream.readUnsignedShort();\n+        this.fields = new Field[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n             this.fields[i] = new Field((DataInput)this.dataInputStream, this.constantPool);\n         }\n     }\n     \n     private void readID() throws IOException, ClassFormatException {\n         if (this.dataInputStream.readInt() != -889275714) {\n             throw new ClassFormatException(this.fileName + \" is not a Java .class file\");\n         }\n     }\n     \n     private void readInterfaces() throws IOException, ClassFormatException {\n-        final int interfacesCount = this.dataInputStream.readUnsignedShort();\n-        this.interfaces = new int[interfacesCount];\n-        for (int i = 0; i < interfacesCount; ++i) {\n+        final int unsignedShort = this.dataInputStream.readUnsignedShort();\n+        this.interfaces = new int[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n             this.interfaces[i] = this.dataInputStream.readUnsignedShort();\n         }\n     }\n     \n     private void readMethods() throws IOException {\n-        final int methodsCount = this.dataInputStream.readUnsignedShort();\n-        this.methods = new Method[methodsCount];\n-        for (int i = 0; i < methodsCount; ++i) {\n+        final int unsignedShort = this.dataInputStream.readUnsignedShort();\n+        this.methods = new Method[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n             this.methods[i] = new Method((DataInput)this.dataInputStream, this.constantPool);\n         }\n     }\n     \n     private void readVersion() throws IOException, ClassFormatException {\n         this.minor = this.dataInputStream.readUnsignedShort();\n         this.major = this.dataInputStream.readUnsignedShort();\n"}]}
