{"diffoscope-json-version": 1, "source1": "first/ZipEightByteInteger.class", "source2": "second/ZipEightByteInteger.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,88 +29,80 @@\n     private static final long BYTE_7_MASK = 9151314442816847872L;\n     private static final int BYTE_7_SHIFT = 56;\n     private static final int LEFTMOST_BIT_SHIFT = 63;\n     private static final byte LEFTMOST_BIT = Byte.MIN_VALUE;\n     private final BigInteger value;\n     public static final ZipEightByteInteger ZERO;\n     \n-    public ZipEightByteInteger(final long value) {\n-        this(BigInteger.valueOf(value));\n+    public ZipEightByteInteger(final long val) {\n+        this(BigInteger.valueOf(val));\n     }\n     \n     public ZipEightByteInteger(final BigInteger value) {\n         this.value = value;\n     }\n     \n-    public ZipEightByteInteger(final byte[] bytes) {\n-        this(bytes, 0);\n+    public ZipEightByteInteger(final byte[] array) {\n+        this(array, 0);\n     }\n     \n-    public ZipEightByteInteger(final byte[] bytes, final int offset) {\n-        this.value = getValue(bytes, offset);\n+    public ZipEightByteInteger(final byte[] array, final int n) {\n+        this.value = getValue(array, n);\n     }\n     \n     public byte[] getBytes() {\n         return getBytes(this.value);\n     }\n     \n     public long getLongValue() {\n         return this.value.longValue();\n     }\n     \n     public BigInteger getValue() {\n         return this.value;\n     }\n     \n-    public static byte[] getBytes(final long value) {\n-        return getBytes(BigInteger.valueOf(value));\n+    public static byte[] getBytes(final long val) {\n+        return getBytes(BigInteger.valueOf(val));\n     }\n     \n-    public static byte[] getBytes(final BigInteger value) {\n-        final byte[] result = new byte[8];\n-        final long val = value.longValue();\n-        result[0] = (byte)(val & 0xFFL);\n-        result[1] = (byte)((val & 0xFF00L) >> 8);\n-        result[2] = (byte)((val & 0xFF0000L) >> 16);\n-        result[3] = (byte)((val & 0xFF000000L) >> 24);\n-        result[4] = (byte)((val & 0xFF00000000L) >> 32);\n-        result[5] = (byte)((val & 0xFF0000000000L) >> 40);\n-        result[6] = (byte)((val & 0xFF000000000000L) >> 48);\n-        result[7] = (byte)((val & 0x7F00000000000000L) >> 56);\n-        if (value.testBit(63)) {\n-            final byte[] array = result;\n+    public static byte[] getBytes(final BigInteger bigInteger) {\n+        final byte[] array = new byte[8];\n+        final long longValue = bigInteger.longValue();\n+        array[0] = (byte)(longValue & 0xFFL);\n+        array[1] = (byte)((longValue & 0xFF00L) >> 8);\n+        array[2] = (byte)((longValue & 0xFF0000L) >> 16);\n+        array[3] = (byte)((longValue & 0xFF000000L) >> 24);\n+        array[4] = (byte)((longValue & 0xFF00000000L) >> 32);\n+        array[5] = (byte)((longValue & 0xFF0000000000L) >> 40);\n+        array[6] = (byte)((longValue & 0xFF000000000000L) >> 48);\n+        array[7] = (byte)((longValue & 0x7F00000000000000L) >> 56);\n+        if (bigInteger.testBit(63)) {\n+            final byte[] array2 = array;\n             final int n = 7;\n-            array[n] |= 0xFFFFFF80;\n+            array2[n] |= 0xFFFFFF80;\n         }\n-        return result;\n+        return array;\n     }\n     \n-    public static long getLongValue(final byte[] bytes, final int offset) {\n-        return getValue(bytes, offset).longValue();\n+    public static long getLongValue(final byte[] array, final int n) {\n+        return getValue(array, n).longValue();\n     }\n     \n-    public static BigInteger getValue(final byte[] bytes, final int offset) {\n-        long value = (long)bytes[offset + 7] << 56 & 0x7F00000000000000L;\n-        value += ((long)bytes[offset + 6] << 48 & 0xFF000000000000L);\n-        value += ((long)bytes[offset + 5] << 40 & 0xFF0000000000L);\n-        value += ((long)bytes[offset + 4] << 32 & 0xFF00000000L);\n-        value += ((long)bytes[offset + 3] << 24 & 0xFF000000L);\n-        value += ((long)bytes[offset + 2] << 16 & 0xFF0000L);\n-        value += ((long)bytes[offset + 1] << 8 & 0xFF00L);\n-        value += ((long)bytes[offset] & 0xFFL);\n-        final BigInteger val = BigInteger.valueOf(value);\n-        return ((bytes[offset + 7] & 0xFFFFFF80) == 0xFFFFFF80) ? val.setBit(63) : val;\n+    public static BigInteger getValue(final byte[] array, final int n) {\n+        final BigInteger value = BigInteger.valueOf(((long)array[n + 7] << 56 & 0x7F00000000000000L) + ((long)array[n + 6] << 48 & 0xFF000000000000L) + ((long)array[n + 5] << 40 & 0xFF0000000000L) + ((long)array[n + 4] << 32 & 0xFF00000000L) + ((long)array[n + 3] << 24 & 0xFF000000L) + ((long)array[n + 2] << 16 & 0xFF0000L) + ((long)array[n + 1] << 8 & 0xFF00L) + ((long)array[n] & 0xFFL));\n+        return ((array[n + 7] & 0xFFFFFF80) == 0xFFFFFF80) ? value.setBit(63) : value;\n     }\n     \n-    public static long getLongValue(final byte[] bytes) {\n-        return getLongValue(bytes, 0);\n+    public static long getLongValue(final byte[] array) {\n+        return getLongValue(array, 0);\n     }\n     \n-    public static BigInteger getValue(final byte[] bytes) {\n-        return getValue(bytes, 0);\n+    public static BigInteger getValue(final byte[] array) {\n+        return getValue(array, 0);\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n         return o != null && o instanceof ZipEightByteInteger && this.value.equals(((ZipEightByteInteger)o).getValue());\n     }\n     \n"}]}
