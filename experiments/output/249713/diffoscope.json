{"diffoscope-json-version": 1, "source1": "first/JavaAstVisitor.class", "source2": "second/JavaAstVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,22 +1,21 @@\n \n package com.puppycrawl.tools.checkstyle;\n \n import org.antlr.v4.runtime.tree.ParseTreeVisitor;\n-import java.util.function.Supplier;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.function.Function;\n import java.util.Queue;\n import java.util.ArrayList;\n import java.util.Optional;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n-import java.util.Iterator;\n import java.util.List;\n import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.TerminalNode;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.Token;\n import com.puppycrawl.tools.checkstyle.grammar.java.JavaLanguageParser;\n@@ -28,1575 +27,1566 @@\n {\n     private static final String LEFT_SHIFT = \"<<\";\n     private static final String UNSIGNED_RIGHT_SHIFT = \">>>\";\n     private static final String RIGHT_SHIFT = \">>\";\n     private static final int[] EXPRESSIONS_WITH_NO_EXPR_ROOT;\n     private final BufferedTokenStream tokens;\n     \n-    public JavaAstVisitor(final CommonTokenStream tokenStream) {\n-        this.tokens = (BufferedTokenStream)tokenStream;\n+    public JavaAstVisitor(final CommonTokenStream tokens) {\n+        this.tokens = (BufferedTokenStream)tokens;\n     }\n     \n-    public DetailAstImpl visitCompilationUnit(final JavaLanguageParser.CompilationUnitContext ctx) {\n-        final boolean isEmptyFile = ctx.children.size() == 1;\n-        DetailAstImpl compilationUnit;\n-        if (isEmptyFile) {\n-            compilationUnit = null;\n+    public DetailAstImpl visitCompilationUnit(final JavaLanguageParser.CompilationUnitContext compilationUnitContext) {\n+        DetailAstImpl imaginary;\n+        if (compilationUnitContext.children.size() == 1) {\n+            imaginary = null;\n         }\n         else {\n-            compilationUnit = createImaginary(1);\n-            this.processChildren(compilationUnit, ctx.children.subList(0, ctx.children.size() - 1));\n+            imaginary = createImaginary(1);\n+            this.processChildren(imaginary, compilationUnitContext.children.subList(0, compilationUnitContext.children.size() - 1));\n         }\n-        return compilationUnit;\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitPackageDeclaration(final JavaLanguageParser.PackageDeclarationContext ctx) {\n-        final DetailAstImpl packageDeclaration = this.create(16, (Token)ctx.LITERAL_PACKAGE().getPayload());\n-        packageDeclaration.addChild((DetailAST)this.visit((ParseTree)ctx.annotations()));\n-        packageDeclaration.addChild((DetailAST)this.visit((ParseTree)ctx.qualifiedName()));\n-        packageDeclaration.addChild((DetailAST)this.create(ctx.SEMI()));\n-        return packageDeclaration;\n+    public DetailAstImpl visitPackageDeclaration(final JavaLanguageParser.PackageDeclarationContext packageDeclarationContext) {\n+        final DetailAstImpl create = this.create(16, (Token)packageDeclarationContext.LITERAL_PACKAGE().getPayload());\n+        create.addChild((DetailAST)this.visit((ParseTree)packageDeclarationContext.annotations()));\n+        create.addChild((DetailAST)this.visit((ParseTree)packageDeclarationContext.qualifiedName()));\n+        create.addChild((DetailAST)this.create(packageDeclarationContext.SEMI()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitImportDec(final JavaLanguageParser.ImportDecContext ctx) {\n-        final DetailAstImpl importRoot = this.create(ctx.start);\n-        final TerminalNode literalStaticNode = ctx.LITERAL_STATIC();\n-        if (literalStaticNode != null) {\n-            importRoot.setType(152);\n-            importRoot.addChild((DetailAST)this.create(literalStaticNode));\n+    public DetailAstImpl visitImportDec(final JavaLanguageParser.ImportDecContext importDecContext) {\n+        final DetailAstImpl create = this.create(importDecContext.start);\n+        final TerminalNode literal_STATIC = importDecContext.LITERAL_STATIC();\n+        if (literal_STATIC != null) {\n+            create.setType(152);\n+            create.addChild((DetailAST)this.create(literal_STATIC));\n         }\n-        final boolean isStarImport = ctx.STAR() != null;\n-        if (isStarImport) {\n-            final DetailAstImpl dot = this.create(ctx.DOT());\n-            dot.addChild((DetailAST)this.visit((ParseTree)ctx.qualifiedName()));\n-            dot.addChild((DetailAST)this.create(ctx.STAR()));\n-            importRoot.addChild((DetailAST)dot);\n+        if (importDecContext.STAR() != null) {\n+            final DetailAstImpl create2 = this.create(importDecContext.DOT());\n+            create2.addChild((DetailAST)this.visit((ParseTree)importDecContext.qualifiedName()));\n+            create2.addChild((DetailAST)this.create(importDecContext.STAR()));\n+            create.addChild((DetailAST)create2);\n         }\n         else {\n-            importRoot.addChild((DetailAST)this.visit((ParseTree)ctx.qualifiedName()));\n+            create.addChild((DetailAST)this.visit((ParseTree)importDecContext.qualifiedName()));\n         }\n-        importRoot.addChild((DetailAST)this.create(ctx.SEMI()));\n-        return importRoot;\n+        create.addChild((DetailAST)this.create(importDecContext.SEMI()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitSingleSemiImport(final JavaLanguageParser.SingleSemiImportContext ctx) {\n-        return this.create(ctx.SEMI());\n+    public DetailAstImpl visitSingleSemiImport(final JavaLanguageParser.SingleSemiImportContext singleSemiImportContext) {\n+        return this.create(singleSemiImportContext.SEMI());\n     }\n     \n-    public DetailAstImpl visitTypeDeclaration(final JavaLanguageParser.TypeDeclarationContext ctx) {\n-        DetailAstImpl typeDeclaration;\n-        if (ctx.type == null) {\n-            typeDeclaration = this.create(ctx.semi.get(0));\n-            ctx.semi.subList(1, ctx.semi.size()).forEach(semi -> addLastSibling(typeDeclaration, this.create(semi)));\n+    public DetailAstImpl visitTypeDeclaration(final JavaLanguageParser.TypeDeclarationContext typeDeclarationContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (typeDeclarationContext.type == null) {\n+            detailAstImpl = this.create(typeDeclarationContext.semi.get(0));\n+            typeDeclarationContext.semi.subList(1, typeDeclarationContext.semi.size()).forEach(token -> addLastSibling(detailAstImpl2, this.create(token)));\n         }\n         else {\n-            typeDeclaration = this.visit((ParseTree)ctx.type);\n+            detailAstImpl = this.visit((ParseTree)typeDeclarationContext.type);\n         }\n-        return typeDeclaration;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitModifier(final JavaLanguageParser.ModifierContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitModifier(final JavaLanguageParser.ModifierContext modifierContext) {\n+        return this.flattenedTree((ParserRuleContext)modifierContext);\n     }\n     \n-    public DetailAstImpl visitVariableModifier(final JavaLanguageParser.VariableModifierContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitVariableModifier(final JavaLanguageParser.VariableModifierContext variableModifierContext) {\n+        return this.flattenedTree((ParserRuleContext)variableModifierContext);\n     }\n     \n-    public DetailAstImpl visitClassDeclaration(final JavaLanguageParser.ClassDeclarationContext ctx) {\n-        return this.createTypeDeclaration(ctx, 14, (List<? extends ParseTree>)ctx.mods);\n+    public DetailAstImpl visitClassDeclaration(final JavaLanguageParser.ClassDeclarationContext classDeclarationContext) {\n+        return this.createTypeDeclaration(classDeclarationContext, 14, (List<? extends ParseTree>)classDeclarationContext.mods);\n     }\n     \n-    public DetailAstImpl visitRecordDeclaration(final JavaLanguageParser.RecordDeclarationContext ctx) {\n-        return this.createTypeDeclaration(ctx, 199, (List<? extends ParseTree>)ctx.mods);\n+    public DetailAstImpl visitRecordDeclaration(final JavaLanguageParser.RecordDeclarationContext recordDeclarationContext) {\n+        return this.createTypeDeclaration(recordDeclarationContext, 199, (List<? extends ParseTree>)recordDeclarationContext.mods);\n     }\n     \n-    public DetailAstImpl visitRecordComponentsList(final JavaLanguageParser.RecordComponentsListContext ctx) {\n-        final DetailAstImpl lparen = this.create(ctx.LPAREN());\n-        if (ctx.recordComponents() == null) {\n-            addLastSibling(lparen, createImaginary(201));\n+    public DetailAstImpl visitRecordComponentsList(final JavaLanguageParser.RecordComponentsListContext recordComponentsListContext) {\n+        final DetailAstImpl create = this.create(recordComponentsListContext.LPAREN());\n+        if (recordComponentsListContext.recordComponents() == null) {\n+            addLastSibling(create, createImaginary(201));\n         }\n         else {\n-            addLastSibling(lparen, this.visit((ParseTree)ctx.recordComponents()));\n+            addLastSibling(create, this.visit((ParseTree)recordComponentsListContext.recordComponents()));\n         }\n-        addLastSibling(lparen, this.create(ctx.RPAREN()));\n-        return lparen;\n+        addLastSibling(create, this.create(recordComponentsListContext.RPAREN()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitRecordComponents(final JavaLanguageParser.RecordComponentsContext ctx) {\n-        final DetailAstImpl recordComponents = createImaginary(201);\n-        this.processChildren(recordComponents, ctx.children);\n-        return recordComponents;\n+    public DetailAstImpl visitRecordComponents(final JavaLanguageParser.RecordComponentsContext recordComponentsContext) {\n+        final DetailAstImpl imaginary = createImaginary(201);\n+        this.processChildren(imaginary, recordComponentsContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitRecordComponent(final JavaLanguageParser.RecordComponentContext ctx) {\n-        final DetailAstImpl recordComponent = createImaginary(202);\n-        this.processChildren(recordComponent, ctx.children);\n-        return recordComponent;\n+    public DetailAstImpl visitRecordComponent(final JavaLanguageParser.RecordComponentContext recordComponentContext) {\n+        final DetailAstImpl imaginary = createImaginary(202);\n+        this.processChildren(imaginary, recordComponentContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitLastRecordComponent(final JavaLanguageParser.LastRecordComponentContext ctx) {\n-        final DetailAstImpl recordComponent = createImaginary(202);\n-        this.processChildren(recordComponent, ctx.children);\n-        return recordComponent;\n+    public DetailAstImpl visitLastRecordComponent(final JavaLanguageParser.LastRecordComponentContext lastRecordComponentContext) {\n+        final DetailAstImpl imaginary = createImaginary(202);\n+        this.processChildren(imaginary, lastRecordComponentContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitRecordBody(final JavaLanguageParser.RecordBodyContext ctx) {\n-        final DetailAstImpl objBlock = createImaginary(6);\n-        this.processChildren(objBlock, ctx.children);\n-        return objBlock;\n+    public DetailAstImpl visitRecordBody(final JavaLanguageParser.RecordBodyContext recordBodyContext) {\n+        final DetailAstImpl imaginary = createImaginary(6);\n+        this.processChildren(imaginary, recordBodyContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitCompactConstructorDeclaration(final JavaLanguageParser.CompactConstructorDeclarationContext ctx) {\n-        final DetailAstImpl compactConstructor = createImaginary(203);\n-        compactConstructor.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        compactConstructor.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n-        compactConstructor.addChild((DetailAST)this.visit((ParseTree)ctx.constructorBlock()));\n-        return compactConstructor;\n+    public DetailAstImpl visitCompactConstructorDeclaration(final JavaLanguageParser.CompactConstructorDeclarationContext compactConstructorDeclarationContext) {\n+        final DetailAstImpl imaginary = createImaginary(203);\n+        imaginary.addChild((DetailAST)this.createModifiers(compactConstructorDeclarationContext.mods));\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)compactConstructorDeclarationContext.id()));\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)compactConstructorDeclarationContext.constructorBlock()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitClassExtends(final JavaLanguageParser.ClassExtendsContext ctx) {\n-        final DetailAstImpl classExtends = this.create(ctx.EXTENDS_CLAUSE());\n-        classExtends.addChild((DetailAST)this.visit((ParseTree)ctx.type));\n-        return classExtends;\n+    public DetailAstImpl visitClassExtends(final JavaLanguageParser.ClassExtendsContext classExtendsContext) {\n+        final DetailAstImpl create = this.create(classExtendsContext.EXTENDS_CLAUSE());\n+        create.addChild((DetailAST)this.visit((ParseTree)classExtendsContext.type));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitImplementsClause(final JavaLanguageParser.ImplementsClauseContext ctx) {\n-        final DetailAstImpl classImplements = this.create(19, (Token)ctx.LITERAL_IMPLEMENTS().getPayload());\n-        classImplements.addChild((DetailAST)this.visit((ParseTree)ctx.typeList()));\n-        return classImplements;\n+    public DetailAstImpl visitImplementsClause(final JavaLanguageParser.ImplementsClauseContext implementsClauseContext) {\n+        final DetailAstImpl create = this.create(19, (Token)implementsClauseContext.LITERAL_IMPLEMENTS().getPayload());\n+        create.addChild((DetailAST)this.visit((ParseTree)implementsClauseContext.typeList()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitTypeParameters(final JavaLanguageParser.TypeParametersContext ctx) {\n-        final DetailAstImpl typeParameters = createImaginary(165);\n-        typeParameters.addChild((DetailAST)this.create(172, (Token)ctx.LT().getPayload()));\n-        this.processChildren(typeParameters, ctx.children.subList(1, ctx.children.size() - 1));\n-        typeParameters.addChild((DetailAST)this.create(173, (Token)ctx.GT().getPayload()));\n-        return typeParameters;\n+    public DetailAstImpl visitTypeParameters(final JavaLanguageParser.TypeParametersContext typeParametersContext) {\n+        final DetailAstImpl imaginary = createImaginary(165);\n+        imaginary.addChild((DetailAST)this.create(172, (Token)typeParametersContext.LT().getPayload()));\n+        this.processChildren(imaginary, typeParametersContext.children.subList(1, typeParametersContext.children.size() - 1));\n+        imaginary.addChild((DetailAST)this.create(173, (Token)typeParametersContext.GT().getPayload()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitTypeParameter(final JavaLanguageParser.TypeParameterContext ctx) {\n-        final DetailAstImpl typeParameter = createImaginary(166);\n-        this.processChildren(typeParameter, ctx.children);\n-        return typeParameter;\n+    public DetailAstImpl visitTypeParameter(final JavaLanguageParser.TypeParameterContext typeParameterContext) {\n+        final DetailAstImpl imaginary = createImaginary(166);\n+        this.processChildren(imaginary, typeParameterContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitTypeUpperBounds(final JavaLanguageParser.TypeUpperBoundsContext ctx) {\n-        final DetailAstImpl typeUpperBounds = this.create(168, (Token)ctx.EXTENDS_CLAUSE().getPayload());\n-        this.processChildren(typeUpperBounds, ctx.children.subList(1, ctx.children.size()));\n-        return typeUpperBounds;\n+    public DetailAstImpl visitTypeUpperBounds(final JavaLanguageParser.TypeUpperBoundsContext typeUpperBoundsContext) {\n+        final DetailAstImpl create = this.create(168, (Token)typeUpperBoundsContext.EXTENDS_CLAUSE().getPayload());\n+        this.processChildren(create, typeUpperBoundsContext.children.subList(1, typeUpperBoundsContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitTypeBound(final JavaLanguageParser.TypeBoundContext ctx) {\n-        final DetailAstImpl typeBoundType = this.visit((ParseTree)ctx.typeBoundType(0));\n-        final Iterator<JavaLanguageParser.TypeBoundTypeContext> typeBoundTypeIterator = ctx.typeBoundType().listIterator(1);\n-        ctx.BAND().forEach(band -> {\n-            addLastSibling(typeBoundType, this.create(174, (Token)band.getPayload()));\n-            addLastSibling(typeBoundType, this.visit((ParseTree)typeBoundTypeIterator.next()));\n+    public DetailAstImpl visitTypeBound(final JavaLanguageParser.TypeBoundContext typeBoundContext2) {\n+        final DetailAstImpl visit = this.visit((ParseTree)typeBoundContext2.typeBoundType(0));\n+        typeBoundContext2.BAND().forEach(terminalNode -> {\n+            typeBoundContext2.typeBoundType().listIterator(1);\n+            addLastSibling(detailAstImpl, this.create(174, (Token)terminalNode.getPayload()));\n+            addLastSibling(detailAstImpl, this.visit((ParseTree)iterator.next()));\n             return;\n         });\n-        return typeBoundType;\n+        return visit;\n     }\n     \n-    public DetailAstImpl visitTypeBoundType(final JavaLanguageParser.TypeBoundTypeContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitTypeBoundType(final JavaLanguageParser.TypeBoundTypeContext typeBoundTypeContext) {\n+        return this.flattenedTree((ParserRuleContext)typeBoundTypeContext);\n     }\n     \n-    public DetailAstImpl visitEnumDeclaration(final JavaLanguageParser.EnumDeclarationContext ctx) {\n-        return this.createTypeDeclaration(ctx, 154, (List<? extends ParseTree>)ctx.mods);\n+    public DetailAstImpl visitEnumDeclaration(final JavaLanguageParser.EnumDeclarationContext enumDeclarationContext) {\n+        return this.createTypeDeclaration(enumDeclarationContext, 154, (List<? extends ParseTree>)enumDeclarationContext.mods);\n     }\n     \n-    public DetailAstImpl visitEnumBody(final JavaLanguageParser.EnumBodyContext ctx) {\n-        final DetailAstImpl objBlock = createImaginary(6);\n-        this.processChildren(objBlock, ctx.children);\n-        return objBlock;\n+    public DetailAstImpl visitEnumBody(final JavaLanguageParser.EnumBodyContext enumBodyContext) {\n+        final DetailAstImpl imaginary = createImaginary(6);\n+        this.processChildren(imaginary, enumBodyContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitEnumConstants(final JavaLanguageParser.EnumConstantsContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitEnumConstants(final JavaLanguageParser.EnumConstantsContext enumConstantsContext) {\n+        return this.flattenedTree((ParserRuleContext)enumConstantsContext);\n     }\n     \n-    public DetailAstImpl visitEnumConstant(final JavaLanguageParser.EnumConstantContext ctx) {\n-        final DetailAstImpl enumConstant = createImaginary(155);\n-        this.processChildren(enumConstant, ctx.children);\n-        return enumConstant;\n+    public DetailAstImpl visitEnumConstant(final JavaLanguageParser.EnumConstantContext enumConstantContext) {\n+        final DetailAstImpl imaginary = createImaginary(155);\n+        this.processChildren(imaginary, enumConstantContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitEnumBodyDeclarations(final JavaLanguageParser.EnumBodyDeclarationsContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitEnumBodyDeclarations(final JavaLanguageParser.EnumBodyDeclarationsContext enumBodyDeclarationsContext) {\n+        return this.flattenedTree((ParserRuleContext)enumBodyDeclarationsContext);\n     }\n     \n-    public DetailAstImpl visitInterfaceDeclaration(final JavaLanguageParser.InterfaceDeclarationContext ctx) {\n-        return this.createTypeDeclaration(ctx, 15, (List<? extends ParseTree>)ctx.mods);\n+    public DetailAstImpl visitInterfaceDeclaration(final JavaLanguageParser.InterfaceDeclarationContext interfaceDeclarationContext) {\n+        return this.createTypeDeclaration(interfaceDeclarationContext, 15, (List<? extends ParseTree>)interfaceDeclarationContext.mods);\n     }\n     \n-    public DetailAstImpl visitInterfaceExtends(final JavaLanguageParser.InterfaceExtendsContext ctx) {\n-        final DetailAstImpl interfaceExtends = this.create(ctx.EXTENDS_CLAUSE());\n-        interfaceExtends.addChild((DetailAST)this.visit((ParseTree)ctx.typeList()));\n-        return interfaceExtends;\n+    public DetailAstImpl visitInterfaceExtends(final JavaLanguageParser.InterfaceExtendsContext interfaceExtendsContext) {\n+        final DetailAstImpl create = this.create(interfaceExtendsContext.EXTENDS_CLAUSE());\n+        create.addChild((DetailAST)this.visit((ParseTree)interfaceExtendsContext.typeList()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitClassBody(final JavaLanguageParser.ClassBodyContext ctx) {\n-        final DetailAstImpl objBlock = createImaginary(6);\n-        this.processChildren(objBlock, ctx.children);\n-        return objBlock;\n+    public DetailAstImpl visitClassBody(final JavaLanguageParser.ClassBodyContext classBodyContext) {\n+        final DetailAstImpl imaginary = createImaginary(6);\n+        this.processChildren(imaginary, classBodyContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitInterfaceBody(final JavaLanguageParser.InterfaceBodyContext ctx) {\n-        final DetailAstImpl objBlock = createImaginary(6);\n-        this.processChildren(objBlock, ctx.children);\n-        return objBlock;\n+    public DetailAstImpl visitInterfaceBody(final JavaLanguageParser.InterfaceBodyContext interfaceBodyContext) {\n+        final DetailAstImpl imaginary = createImaginary(6);\n+        this.processChildren(imaginary, interfaceBodyContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitEmptyClass(final JavaLanguageParser.EmptyClassContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitEmptyClass(final JavaLanguageParser.EmptyClassContext emptyClassContext) {\n+        return this.flattenedTree((ParserRuleContext)emptyClassContext);\n     }\n     \n-    public DetailAstImpl visitClassBlock(final JavaLanguageParser.ClassBlockContext ctx) {\n-        DetailAstImpl classBlock;\n-        if (ctx.LITERAL_STATIC() == null) {\n-            classBlock = createImaginary(11);\n+    public DetailAstImpl visitClassBlock(final JavaLanguageParser.ClassBlockContext classBlockContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (classBlockContext.LITERAL_STATIC() == null) {\n+            detailAstImpl = createImaginary(11);\n         }\n         else {\n-            classBlock = this.create(12, (Token)ctx.LITERAL_STATIC().getPayload());\n-            classBlock.setText(TokenUtil.getTokenName(12));\n+            detailAstImpl = this.create(12, (Token)classBlockContext.LITERAL_STATIC().getPayload());\n+            detailAstImpl.setText(TokenUtil.getTokenName(12));\n         }\n-        classBlock.addChild((DetailAST)this.visit((ParseTree)ctx.block()));\n-        return classBlock;\n+        detailAstImpl.addChild((DetailAST)this.visit((ParseTree)classBlockContext.block()));\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitMethodDeclaration(final JavaLanguageParser.MethodDeclarationContext ctx) {\n-        final DetailAstImpl methodDef = createImaginary(9);\n-        methodDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        this.processChildren(methodDef, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList()));\n-        final DetailAstImpl typeAst = (DetailAstImpl)methodDef.findFirstToken(13);\n-        ctx.cStyleArrDec.forEach(child -> typeAst.addChild((DetailAST)this.visit((ParseTree)child)));\n-        return methodDef;\n+    public DetailAstImpl visitMethodDeclaration(final JavaLanguageParser.MethodDeclarationContext methodDeclarationContext) {\n+        final DetailAstImpl detailAstImpl2 = createImaginary(9);\n+        detailAstImpl2.addChild((DetailAST)this.createModifiers(methodDeclarationContext.mods));\n+        this.processChildren(detailAstImpl2, (List<? extends ParseTree>)methodDeclarationContext.children.stream().filter(parseTree -> !(parseTree instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList()));\n+        methodDeclarationContext.cStyleArrDec.forEach(arrayDeclaratorContext -> {\n+            final DetailAstImpl detailAstImpl2;\n+            final Object o = (DetailAstImpl)detailAstImpl2.findFirstToken(13);\n+            detailAstImpl.addChild((DetailAST)this.visit((ParseTree)arrayDeclaratorContext));\n+            return;\n+        });\n+        return detailAstImpl2;\n     }\n     \n-    public DetailAstImpl visitMethodBody(final JavaLanguageParser.MethodBodyContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitMethodBody(final JavaLanguageParser.MethodBodyContext methodBodyContext) {\n+        return this.flattenedTree((ParserRuleContext)methodBodyContext);\n     }\n     \n-    public DetailAstImpl visitThrowsList(final JavaLanguageParser.ThrowsListContext ctx) {\n-        final DetailAstImpl throwsRoot = this.create(ctx.LITERAL_THROWS());\n-        throwsRoot.addChild((DetailAST)this.visit((ParseTree)ctx.qualifiedNameList()));\n-        return throwsRoot;\n+    public DetailAstImpl visitThrowsList(final JavaLanguageParser.ThrowsListContext throwsListContext) {\n+        final DetailAstImpl create = this.create(throwsListContext.LITERAL_THROWS());\n+        create.addChild((DetailAST)this.visit((ParseTree)throwsListContext.qualifiedNameList()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitConstructorDeclaration(final JavaLanguageParser.ConstructorDeclarationContext ctx) {\n-        final DetailAstImpl constructorDeclaration = createImaginary(8);\n-        constructorDeclaration.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        this.processChildren(constructorDeclaration, ctx.children);\n-        return constructorDeclaration;\n+    public DetailAstImpl visitConstructorDeclaration(final JavaLanguageParser.ConstructorDeclarationContext constructorDeclarationContext) {\n+        final DetailAstImpl imaginary = createImaginary(8);\n+        imaginary.addChild((DetailAST)this.createModifiers(constructorDeclarationContext.mods));\n+        this.processChildren(imaginary, constructorDeclarationContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitFieldDeclaration(final JavaLanguageParser.FieldDeclarationContext ctx) {\n-        final DetailAstImpl dummyNode = new DetailAstImpl();\n-        this.processChildren(dummyNode, ctx.children.subList(1, ctx.children.size() - 1));\n-        dummyNode.getFirstChild().addChild((DetailAST)this.create(ctx.SEMI()));\n-        return dummyNode.getFirstChild();\n+    public DetailAstImpl visitFieldDeclaration(final JavaLanguageParser.FieldDeclarationContext fieldDeclarationContext) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        this.processChildren(detailAstImpl, fieldDeclarationContext.children.subList(1, fieldDeclarationContext.children.size() - 1));\n+        detailAstImpl.getFirstChild().addChild((DetailAST)this.create(fieldDeclarationContext.SEMI()));\n+        return detailAstImpl.getFirstChild();\n     }\n     \n-    public DetailAstImpl visitInterfaceBodyDeclaration(final JavaLanguageParser.InterfaceBodyDeclarationContext ctx) {\n-        DetailAstImpl returnTree;\n-        if (ctx.SEMI() == null) {\n-            returnTree = this.visit((ParseTree)ctx.interfaceMemberDeclaration());\n+    public DetailAstImpl visitInterfaceBodyDeclaration(final JavaLanguageParser.InterfaceBodyDeclarationContext interfaceBodyDeclarationContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (interfaceBodyDeclarationContext.SEMI() == null) {\n+            detailAstImpl = this.visit((ParseTree)interfaceBodyDeclarationContext.interfaceMemberDeclaration());\n         }\n         else {\n-            returnTree = this.create(ctx.SEMI());\n+            detailAstImpl = this.create(interfaceBodyDeclarationContext.SEMI());\n         }\n-        return returnTree;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitInterfaceMethodDeclaration(final JavaLanguageParser.InterfaceMethodDeclarationContext ctx) {\n-        final DetailAstImpl methodDef = createImaginary(9);\n-        methodDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        final List<ParseTree> children = (List)ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList());\n-        this.processChildren(methodDef, children);\n-        final DetailAstImpl typeAst = (DetailAstImpl)methodDef.findFirstToken(13);\n-        ctx.cStyleArrDec.forEach(child -> typeAst.addChild((DetailAST)this.visit((ParseTree)child)));\n-        return methodDef;\n+    public DetailAstImpl visitInterfaceMethodDeclaration(final JavaLanguageParser.InterfaceMethodDeclarationContext interfaceMethodDeclarationContext) {\n+        final DetailAstImpl detailAstImpl2 = createImaginary(9);\n+        detailAstImpl2.addChild((DetailAST)this.createModifiers(interfaceMethodDeclarationContext.mods));\n+        this.processChildren(detailAstImpl2, (List<? extends ParseTree>)interfaceMethodDeclarationContext.children.stream().filter(parseTree -> !(parseTree instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList()));\n+        interfaceMethodDeclarationContext.cStyleArrDec.forEach(arrayDeclaratorContext -> {\n+            final DetailAstImpl detailAstImpl2;\n+            final Object o = (DetailAstImpl)detailAstImpl2.findFirstToken(13);\n+            detailAstImpl.addChild((DetailAST)this.visit((ParseTree)arrayDeclaratorContext));\n+            return;\n+        });\n+        return detailAstImpl2;\n     }\n     \n-    public DetailAstImpl visitVariableDeclarators(final JavaLanguageParser.VariableDeclaratorsContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitVariableDeclarators(final JavaLanguageParser.VariableDeclaratorsContext variableDeclaratorsContext) {\n+        return this.flattenedTree((ParserRuleContext)variableDeclaratorsContext);\n     }\n     \n-    public DetailAstImpl visitVariableDeclarator(final JavaLanguageParser.VariableDeclaratorContext ctx) {\n-        final DetailAstImpl variableDef = createImaginary(10);\n-        variableDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        final DetailAstImpl type = this.visit((ParseTree)ctx.type);\n-        variableDef.addChild((DetailAST)type);\n-        variableDef.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n-        ctx.arrayDeclarator().forEach(child -> type.addChild((DetailAST)this.visit((ParseTree)child)));\n-        final TerminalNode assignNode = ctx.ASSIGN();\n-        if (assignNode != null) {\n-            final DetailAstImpl assign = this.create(assignNode);\n-            variableDef.addChild((DetailAST)assign);\n-            assign.addChild((DetailAST)this.visit((ParseTree)ctx.variableInitializer()));\n+    public DetailAstImpl visitVariableDeclarator(final JavaLanguageParser.VariableDeclaratorContext variableDeclaratorContext) {\n+        final DetailAstImpl imaginary = createImaginary(10);\n+        imaginary.addChild((DetailAST)this.createModifiers(variableDeclaratorContext.mods));\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)variableDeclaratorContext.type));\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)variableDeclaratorContext.id()));\n+        variableDeclaratorContext.arrayDeclarator().forEach(arrayDeclaratorContext -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)arrayDeclaratorContext)));\n+        final TerminalNode assign = variableDeclaratorContext.ASSIGN();\n+        if (assign != null) {\n+            final DetailAstImpl create = this.create(assign);\n+            imaginary.addChild((DetailAST)create);\n+            create.addChild((DetailAST)this.visit((ParseTree)variableDeclaratorContext.variableInitializer()));\n         }\n-        return variableDef;\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitVariableDeclaratorId(final JavaLanguageParser.VariableDeclaratorIdContext ctx) {\n-        final DetailAstImpl root = new DetailAstImpl();\n-        root.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        final DetailAstImpl type = this.visit((ParseTree)ctx.type);\n-        root.addChild((DetailAST)type);\n-        DetailAstImpl declaratorId;\n-        if (ctx.LITERAL_THIS() == null) {\n-            declaratorId = this.visit((ParseTree)ctx.qualifiedName());\n+    public DetailAstImpl visitVariableDeclaratorId(final JavaLanguageParser.VariableDeclaratorIdContext variableDeclaratorIdContext) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        detailAstImpl.addChild((DetailAST)this.createModifiers(variableDeclaratorIdContext.mods));\n+        detailAstImpl.addChild((DetailAST)this.visit((ParseTree)variableDeclaratorIdContext.type));\n+        DetailAstImpl detailAstImpl2;\n+        if (variableDeclaratorIdContext.LITERAL_THIS() == null) {\n+            detailAstImpl2 = this.visit((ParseTree)variableDeclaratorIdContext.qualifiedName());\n         }\n-        else if (ctx.DOT() == null) {\n-            declaratorId = this.create(ctx.LITERAL_THIS());\n+        else if (variableDeclaratorIdContext.DOT() == null) {\n+            detailAstImpl2 = this.create(variableDeclaratorIdContext.LITERAL_THIS());\n         }\n         else {\n-            declaratorId = this.create(ctx.DOT());\n-            declaratorId.addChild((DetailAST)this.visit((ParseTree)ctx.qualifiedName()));\n-            declaratorId.addChild((DetailAST)this.create(ctx.LITERAL_THIS()));\n+            detailAstImpl2 = this.create(variableDeclaratorIdContext.DOT());\n+            detailAstImpl2.addChild((DetailAST)this.visit((ParseTree)variableDeclaratorIdContext.qualifiedName()));\n+            detailAstImpl2.addChild((DetailAST)this.create(variableDeclaratorIdContext.LITERAL_THIS()));\n         }\n-        root.addChild((DetailAST)declaratorId);\n-        ctx.arrayDeclarator().forEach(child -> type.addChild((DetailAST)this.visit((ParseTree)child)));\n-        return root.getFirstChild();\n+        detailAstImpl.addChild((DetailAST)detailAstImpl2);\n+        variableDeclaratorIdContext.arrayDeclarator().forEach(arrayDeclaratorContext -> detailAstImpl3.addChild((DetailAST)this.visit((ParseTree)arrayDeclaratorContext)));\n+        return detailAstImpl.getFirstChild();\n     }\n     \n-    public DetailAstImpl visitArrayInitializer(final JavaLanguageParser.ArrayInitializerContext ctx) {\n-        final DetailAstImpl arrayInitializer = this.create(29, ctx.start);\n-        this.processChildren(arrayInitializer, ctx.children.subList(1, ctx.children.size()));\n-        return arrayInitializer;\n+    public DetailAstImpl visitArrayInitializer(final JavaLanguageParser.ArrayInitializerContext arrayInitializerContext) {\n+        final DetailAstImpl create = this.create(29, arrayInitializerContext.start);\n+        this.processChildren(create, arrayInitializerContext.children.subList(1, arrayInitializerContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitClassOrInterfaceType(final JavaLanguageParser.ClassOrInterfaceTypeContext ctx) {\n-        final JavaAstVisitor.DetailAstPair currentAST = new JavaAstVisitor.DetailAstPair();\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit((ParseTree)ctx.id()));\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit((ParseTree)ctx.typeArguments()));\n-        for (final ParserRuleContext extendedContext : ctx.extended) {\n-            final DetailAstImpl dot = this.create(extendedContext.start);\n-            JavaAstVisitor.DetailAstPair.makeAstRoot(currentAST, dot);\n-            extendedContext.children.forEach(child -> JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit(child)));\n+    public DetailAstImpl visitClassOrInterfaceType(final JavaLanguageParser.ClassOrInterfaceTypeContext classOrInterfaceTypeContext) {\n+        final JavaAstVisitor.DetailAstPair detailAstPair = new JavaAstVisitor.DetailAstPair();\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)classOrInterfaceTypeContext.id()));\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)classOrInterfaceTypeContext.typeArguments()));\n+        for (final ParserRuleContext parserRuleContext : classOrInterfaceTypeContext.extended) {\n+            JavaAstVisitor.DetailAstPair.makeAstRoot(detailAstPair, this.create(parserRuleContext.start));\n+            parserRuleContext.children.forEach(parseTree -> JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair2, this.visit(parseTree)));\n         }\n-        DetailAstImpl returnTree;\n-        if (ctx.createImaginaryNode) {\n-            returnTree = createImaginary(13);\n-            returnTree.addChild((DetailAST)currentAST.root);\n+        DetailAstImpl detailAstImpl;\n+        if (classOrInterfaceTypeContext.createImaginaryNode) {\n+            detailAstImpl = createImaginary(13);\n+            detailAstImpl.addChild((DetailAST)detailAstPair.root);\n         }\n         else {\n-            returnTree = currentAST.root;\n+            detailAstImpl = detailAstPair.root;\n         }\n-        return returnTree;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitSimpleTypeArgument(final JavaLanguageParser.SimpleTypeArgumentContext ctx) {\n-        final DetailAstImpl typeArgument = createImaginary(164);\n-        typeArgument.addChild((DetailAST)this.visit((ParseTree)ctx.typeType()));\n-        return typeArgument;\n+    public DetailAstImpl visitSimpleTypeArgument(final JavaLanguageParser.SimpleTypeArgumentContext simpleTypeArgumentContext) {\n+        final DetailAstImpl imaginary = createImaginary(164);\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)simpleTypeArgumentContext.typeType()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitWildCardTypeArgument(final JavaLanguageParser.WildCardTypeArgumentContext ctx) {\n-        final DetailAstImpl typeArgument = createImaginary(164);\n-        typeArgument.addChild((DetailAST)this.visit((ParseTree)ctx.annotations()));\n-        typeArgument.addChild((DetailAST)this.create(167, (Token)ctx.QUESTION().getPayload()));\n-        if (ctx.upperBound != null) {\n-            final DetailAstImpl upperBound = this.create(168, ctx.upperBound);\n-            upperBound.addChild((DetailAST)this.visit((ParseTree)ctx.typeType()));\n-            typeArgument.addChild((DetailAST)upperBound);\n+    public DetailAstImpl visitWildCardTypeArgument(final JavaLanguageParser.WildCardTypeArgumentContext wildCardTypeArgumentContext) {\n+        final DetailAstImpl imaginary = createImaginary(164);\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)wildCardTypeArgumentContext.annotations()));\n+        imaginary.addChild((DetailAST)this.create(167, (Token)wildCardTypeArgumentContext.QUESTION().getPayload()));\n+        if (wildCardTypeArgumentContext.upperBound != null) {\n+            final DetailAstImpl create = this.create(168, wildCardTypeArgumentContext.upperBound);\n+            create.addChild((DetailAST)this.visit((ParseTree)wildCardTypeArgumentContext.typeType()));\n+            imaginary.addChild((DetailAST)create);\n         }\n-        else if (ctx.lowerBound != null) {\n-            final DetailAstImpl lowerBound = this.create(169, ctx.lowerBound);\n-            lowerBound.addChild((DetailAST)this.visit((ParseTree)ctx.typeType()));\n-            typeArgument.addChild((DetailAST)lowerBound);\n+        else if (wildCardTypeArgumentContext.lowerBound != null) {\n+            final DetailAstImpl create2 = this.create(169, wildCardTypeArgumentContext.lowerBound);\n+            create2.addChild((DetailAST)this.visit((ParseTree)wildCardTypeArgumentContext.typeType()));\n+            imaginary.addChild((DetailAST)create2);\n         }\n-        return typeArgument;\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitQualifiedNameList(final JavaLanguageParser.QualifiedNameListContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitQualifiedNameList(final JavaLanguageParser.QualifiedNameListContext qualifiedNameListContext) {\n+        return this.flattenedTree((ParserRuleContext)qualifiedNameListContext);\n     }\n     \n-    public DetailAstImpl visitFormalParameters(final JavaLanguageParser.FormalParametersContext ctx) {\n-        final DetailAstImpl lparen = this.create(ctx.LPAREN());\n-        if (ctx.formalParameterList() == null) {\n-            addLastSibling(lparen, createImaginary(20));\n+    public DetailAstImpl visitFormalParameters(final JavaLanguageParser.FormalParametersContext formalParametersContext) {\n+        final DetailAstImpl create = this.create(formalParametersContext.LPAREN());\n+        if (formalParametersContext.formalParameterList() == null) {\n+            addLastSibling(create, createImaginary(20));\n         }\n         else {\n-            addLastSibling(lparen, this.visit((ParseTree)ctx.formalParameterList()));\n+            addLastSibling(create, this.visit((ParseTree)formalParametersContext.formalParameterList()));\n         }\n-        addLastSibling(lparen, this.create(ctx.RPAREN()));\n-        return lparen;\n+        addLastSibling(create, this.create(formalParametersContext.RPAREN()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitFormalParameterList(final JavaLanguageParser.FormalParameterListContext ctx) {\n-        final DetailAstImpl parameters = createImaginary(20);\n-        this.processChildren(parameters, ctx.children);\n-        return parameters;\n+    public DetailAstImpl visitFormalParameterList(final JavaLanguageParser.FormalParameterListContext formalParameterListContext) {\n+        final DetailAstImpl imaginary = createImaginary(20);\n+        this.processChildren(imaginary, formalParameterListContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitFormalParameter(final JavaLanguageParser.FormalParameterContext ctx) {\n-        final DetailAstImpl variableDeclaratorId = this.visitVariableDeclaratorId(ctx.variableDeclaratorId());\n-        final DetailAstImpl parameterDef = createImaginary(21);\n-        parameterDef.addChild((DetailAST)variableDeclaratorId);\n-        return parameterDef;\n+    public DetailAstImpl visitFormalParameter(final JavaLanguageParser.FormalParameterContext formalParameterContext) {\n+        final DetailAstImpl visitVariableDeclaratorId = this.visitVariableDeclaratorId(formalParameterContext.variableDeclaratorId());\n+        final DetailAstImpl imaginary = createImaginary(21);\n+        imaginary.addChild((DetailAST)visitVariableDeclaratorId);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitLastFormalParameter(final JavaLanguageParser.LastFormalParameterContext ctx) {\n-        final DetailAstImpl parameterDef = createImaginary(21);\n-        parameterDef.addChild((DetailAST)this.visit((ParseTree)ctx.variableDeclaratorId()));\n-        final DetailAstImpl ident = (DetailAstImpl)parameterDef.findFirstToken(58);\n-        ident.addPreviousSibling((DetailAST)this.create(ctx.ELLIPSIS()));\n-        final DetailAstImpl type = (DetailAstImpl)parameterDef.findFirstToken(13);\n-        type.addChild((DetailAST)this.visit((ParseTree)ctx.annotations()));\n-        return parameterDef;\n+    public DetailAstImpl visitLastFormalParameter(final JavaLanguageParser.LastFormalParameterContext lastFormalParameterContext) {\n+        final DetailAstImpl imaginary = createImaginary(21);\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)lastFormalParameterContext.variableDeclaratorId()));\n+        ((DetailAstImpl)imaginary.findFirstToken(58)).addPreviousSibling((DetailAST)this.create(lastFormalParameterContext.ELLIPSIS()));\n+        ((DetailAstImpl)imaginary.findFirstToken(13)).addChild((DetailAST)this.visit((ParseTree)lastFormalParameterContext.annotations()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitQualifiedName(final JavaLanguageParser.QualifiedNameContext ctx) {\n-        final DetailAstImpl ast = this.visit((ParseTree)ctx.id());\n-        final JavaAstVisitor.DetailAstPair currentAst = new JavaAstVisitor.DetailAstPair();\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAst, ast);\n-        for (final ParserRuleContext extendedContext : ctx.extended) {\n-            final DetailAstImpl dot = this.create(extendedContext.start);\n-            JavaAstVisitor.DetailAstPair.makeAstRoot(currentAst, dot);\n-            final List<ParseTree> childList = extendedContext.children.subList(1, extendedContext.children.size());\n-            this.processChildren(dot, childList);\n+    public DetailAstImpl visitQualifiedName(final JavaLanguageParser.QualifiedNameContext qualifiedNameContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)qualifiedNameContext.id());\n+        final JavaAstVisitor.DetailAstPair detailAstPair = new JavaAstVisitor.DetailAstPair();\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, visit);\n+        for (final ParserRuleContext parserRuleContext : qualifiedNameContext.extended) {\n+            final DetailAstImpl create = this.create(parserRuleContext.start);\n+            JavaAstVisitor.DetailAstPair.makeAstRoot(detailAstPair, create);\n+            this.processChildren(create, parserRuleContext.children.subList(1, parserRuleContext.children.size()));\n         }\n-        return currentAst.getRoot();\n+        return detailAstPair.getRoot();\n     }\n     \n-    public DetailAstImpl visitLiteral(final JavaLanguageParser.LiteralContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitLiteral(final JavaLanguageParser.LiteralContext literalContext) {\n+        return this.flattenedTree((ParserRuleContext)literalContext);\n     }\n     \n-    public DetailAstImpl visitIntegerLiteral(final JavaLanguageParser.IntegerLiteralContext ctx) {\n-        final int[] longTypes = { 219, 221, 223, 225 };\n-        int tokenType;\n-        if (TokenUtil.isOfType(ctx.start.getType(), longTypes)) {\n-            tokenType = 141;\n+    public DetailAstImpl visitIntegerLiteral(final JavaLanguageParser.IntegerLiteralContext integerLiteralContext) {\n+        int n;\n+        if (TokenUtil.isOfType(integerLiteralContext.start.getType(), new int[] { 219, 221, 223, 225 })) {\n+            n = 141;\n         }\n         else {\n-            tokenType = 137;\n+            n = 137;\n         }\n-        return this.create(tokenType, ctx.start);\n+        return this.create(n, integerLiteralContext.start);\n     }\n     \n-    public DetailAstImpl visitFloatLiteral(final JavaLanguageParser.FloatLiteralContext ctx) {\n-        DetailAstImpl floatLiteral;\n-        if (TokenUtil.isOfType(ctx.start.getType(), new int[] { 193, 195 })) {\n-            floatLiteral = this.create(142, ctx.start);\n+    public DetailAstImpl visitFloatLiteral(final JavaLanguageParser.FloatLiteralContext floatLiteralContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (TokenUtil.isOfType(floatLiteralContext.start.getType(), new int[] { 193, 195 })) {\n+            detailAstImpl = this.create(142, floatLiteralContext.start);\n         }\n         else {\n-            floatLiteral = this.create(140, ctx.start);\n+            detailAstImpl = this.create(140, floatLiteralContext.start);\n         }\n-        return floatLiteral;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitTextBlockLiteral(final JavaLanguageParser.TextBlockLiteralContext ctx) {\n-        final DetailAstImpl textBlockLiteralBegin = this.create(ctx.TEXT_BLOCK_LITERAL_BEGIN());\n-        textBlockLiteralBegin.addChild((DetailAST)this.create(ctx.TEXT_BLOCK_CONTENT()));\n-        textBlockLiteralBegin.addChild((DetailAST)this.create(ctx.TEXT_BLOCK_LITERAL_END()));\n-        return textBlockLiteralBegin;\n+    public DetailAstImpl visitTextBlockLiteral(final JavaLanguageParser.TextBlockLiteralContext textBlockLiteralContext) {\n+        final DetailAstImpl create = this.create(textBlockLiteralContext.TEXT_BLOCK_LITERAL_BEGIN());\n+        create.addChild((DetailAST)this.create(textBlockLiteralContext.TEXT_BLOCK_CONTENT()));\n+        create.addChild((DetailAST)this.create(textBlockLiteralContext.TEXT_BLOCK_LITERAL_END()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitAnnotations(final JavaLanguageParser.AnnotationsContext ctx) {\n-        DetailAstImpl annotations;\n-        if (!ctx.createImaginaryNode && ctx.anno.isEmpty()) {\n-            annotations = null;\n+    public DetailAstImpl visitAnnotations(final JavaLanguageParser.AnnotationsContext annotationsContext) {\n+        DetailAstImpl imaginary;\n+        if (!annotationsContext.createImaginaryNode && annotationsContext.anno.isEmpty()) {\n+            imaginary = null;\n         }\n         else {\n-            annotations = createImaginary(158);\n-            this.processChildren(annotations, ctx.anno);\n+            imaginary = createImaginary(158);\n+            this.processChildren(imaginary, annotationsContext.anno);\n         }\n-        return annotations;\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitAnnotation(final JavaLanguageParser.AnnotationContext ctx) {\n-        final DetailAstImpl annotation = createImaginary(159);\n-        this.processChildren(annotation, ctx.children);\n-        return annotation;\n+    public DetailAstImpl visitAnnotation(final JavaLanguageParser.AnnotationContext annotationContext) {\n+        final DetailAstImpl imaginary = createImaginary(159);\n+        this.processChildren(imaginary, annotationContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitElementValuePairs(final JavaLanguageParser.ElementValuePairsContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitElementValuePairs(final JavaLanguageParser.ElementValuePairsContext elementValuePairsContext) {\n+        return this.flattenedTree((ParserRuleContext)elementValuePairsContext);\n     }\n     \n-    public DetailAstImpl visitElementValuePair(final JavaLanguageParser.ElementValuePairContext ctx) {\n-        final DetailAstImpl elementValuePair = createImaginary(160);\n-        this.processChildren(elementValuePair, ctx.children);\n-        return elementValuePair;\n+    public DetailAstImpl visitElementValuePair(final JavaLanguageParser.ElementValuePairContext elementValuePairContext) {\n+        final DetailAstImpl imaginary = createImaginary(160);\n+        this.processChildren(imaginary, elementValuePairContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitElementValue(final JavaLanguageParser.ElementValueContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitElementValue(final JavaLanguageParser.ElementValueContext elementValueContext) {\n+        return this.flattenedTree((ParserRuleContext)elementValueContext);\n     }\n     \n-    public DetailAstImpl visitElementValueArrayInitializer(final JavaLanguageParser.ElementValueArrayInitializerContext ctx) {\n-        final DetailAstImpl arrayInit = this.create(162, (Token)ctx.LCURLY().getPayload());\n-        this.processChildren(arrayInit, ctx.children.subList(1, ctx.children.size()));\n-        return arrayInit;\n+    public DetailAstImpl visitElementValueArrayInitializer(final JavaLanguageParser.ElementValueArrayInitializerContext elementValueArrayInitializerContext) {\n+        final DetailAstImpl create = this.create(162, (Token)elementValueArrayInitializerContext.LCURLY().getPayload());\n+        this.processChildren(create, elementValueArrayInitializerContext.children.subList(1, elementValueArrayInitializerContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitAnnotationTypeDeclaration(final JavaLanguageParser.AnnotationTypeDeclarationContext ctx) {\n-        return this.createTypeDeclaration(ctx, 157, (List<? extends ParseTree>)ctx.mods);\n+    public DetailAstImpl visitAnnotationTypeDeclaration(final JavaLanguageParser.AnnotationTypeDeclarationContext annotationTypeDeclarationContext) {\n+        return this.createTypeDeclaration(annotationTypeDeclarationContext, 157, (List<? extends ParseTree>)annotationTypeDeclarationContext.mods);\n     }\n     \n-    public DetailAstImpl visitAnnotationTypeBody(final JavaLanguageParser.AnnotationTypeBodyContext ctx) {\n-        final DetailAstImpl objBlock = createImaginary(6);\n-        this.processChildren(objBlock, ctx.children);\n-        return objBlock;\n+    public DetailAstImpl visitAnnotationTypeBody(final JavaLanguageParser.AnnotationTypeBodyContext annotationTypeBodyContext) {\n+        final DetailAstImpl imaginary = createImaginary(6);\n+        this.processChildren(imaginary, annotationTypeBodyContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitAnnotationTypeElementDeclaration(final JavaLanguageParser.AnnotationTypeElementDeclarationContext ctx) {\n-        DetailAstImpl returnTree;\n-        if (ctx.SEMI() == null) {\n-            returnTree = this.visit((ParseTree)ctx.annotationTypeElementRest());\n+    public DetailAstImpl visitAnnotationTypeElementDeclaration(final JavaLanguageParser.AnnotationTypeElementDeclarationContext annotationTypeElementDeclarationContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (annotationTypeElementDeclarationContext.SEMI() == null) {\n+            detailAstImpl = this.visit((ParseTree)annotationTypeElementDeclarationContext.annotationTypeElementRest());\n         }\n         else {\n-            returnTree = this.create(ctx.SEMI());\n+            detailAstImpl = this.create(annotationTypeElementDeclarationContext.SEMI());\n         }\n-        return returnTree;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitAnnotationField(final JavaLanguageParser.AnnotationFieldContext ctx) {\n-        final DetailAstImpl dummyNode = new DetailAstImpl();\n-        this.processChildren(dummyNode, (List<? extends ParseTree>)Collections.singletonList((Object)(T)ctx.children.get(1)));\n-        dummyNode.getFirstChild().addChild((DetailAST)this.create(ctx.SEMI()));\n-        return dummyNode.getFirstChild();\n+    public DetailAstImpl visitAnnotationField(final JavaLanguageParser.AnnotationFieldContext annotationFieldContext) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        this.processChildren(detailAstImpl, (List<? extends ParseTree>)Collections.singletonList((Object)(T)annotationFieldContext.children.get(1)));\n+        detailAstImpl.getFirstChild().addChild((DetailAST)this.create(annotationFieldContext.SEMI()));\n+        return detailAstImpl.getFirstChild();\n     }\n     \n-    public DetailAstImpl visitAnnotationType(final JavaLanguageParser.AnnotationTypeContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitAnnotationType(final JavaLanguageParser.AnnotationTypeContext annotationTypeContext) {\n+        return this.flattenedTree((ParserRuleContext)annotationTypeContext);\n     }\n     \n-    public DetailAstImpl visitAnnotationMethodRest(final JavaLanguageParser.AnnotationMethodRestContext ctx) {\n-        final DetailAstImpl annotationFieldDef = createImaginary(161);\n-        annotationFieldDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        annotationFieldDef.addChild((DetailAST)this.visit((ParseTree)ctx.type));\n-        this.processChildren(annotationFieldDef, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList()));\n-        final DetailAstImpl typeAst = (DetailAstImpl)annotationFieldDef.findFirstToken(13);\n-        ctx.cStyleArrDec.forEach(child -> typeAst.addChild((DetailAST)this.visit((ParseTree)child)));\n-        return annotationFieldDef;\n+    public DetailAstImpl visitAnnotationMethodRest(final JavaLanguageParser.AnnotationMethodRestContext annotationMethodRestContext) {\n+        final DetailAstImpl detailAstImpl2 = createImaginary(161);\n+        detailAstImpl2.addChild((DetailAST)this.createModifiers(annotationMethodRestContext.mods));\n+        detailAstImpl2.addChild((DetailAST)this.visit((ParseTree)annotationMethodRestContext.type));\n+        this.processChildren(detailAstImpl2, (List<? extends ParseTree>)annotationMethodRestContext.children.stream().filter(parseTree -> !(parseTree instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList()));\n+        annotationMethodRestContext.cStyleArrDec.forEach(arrayDeclaratorContext -> {\n+            final DetailAstImpl detailAstImpl2;\n+            final Object o = (DetailAstImpl)detailAstImpl2.findFirstToken(13);\n+            detailAstImpl.addChild((DetailAST)this.visit((ParseTree)arrayDeclaratorContext));\n+            return;\n+        });\n+        return detailAstImpl2;\n     }\n     \n-    public DetailAstImpl visitDefaultValue(final JavaLanguageParser.DefaultValueContext ctx) {\n-        final DetailAstImpl defaultValue = this.create(ctx.LITERAL_DEFAULT());\n-        defaultValue.addChild((DetailAST)this.visit((ParseTree)ctx.elementValue()));\n-        return defaultValue;\n+    public DetailAstImpl visitDefaultValue(final JavaLanguageParser.DefaultValueContext defaultValueContext) {\n+        final DetailAstImpl create = this.create(defaultValueContext.LITERAL_DEFAULT());\n+        create.addChild((DetailAST)this.visit((ParseTree)defaultValueContext.elementValue()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitConstructorBlock(final JavaLanguageParser.ConstructorBlockContext ctx) {\n-        final DetailAstImpl slist = this.create(7, ctx.start);\n-        this.processChildren(slist, ctx.children.subList(1, ctx.children.size()));\n-        return slist;\n+    public DetailAstImpl visitConstructorBlock(final JavaLanguageParser.ConstructorBlockContext constructorBlockContext) {\n+        final DetailAstImpl create = this.create(7, constructorBlockContext.start);\n+        this.processChildren(create, constructorBlockContext.children.subList(1, constructorBlockContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitExplicitCtorCall(final JavaLanguageParser.ExplicitCtorCallContext ctx) {\n-        DetailAstImpl root;\n-        if (ctx.LITERAL_THIS() == null) {\n-            root = this.create(42, (Token)ctx.LITERAL_SUPER().getPayload());\n+    public DetailAstImpl visitExplicitCtorCall(final JavaLanguageParser.ExplicitCtorCallContext explicitCtorCallContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (explicitCtorCallContext.LITERAL_THIS() == null) {\n+            detailAstImpl = this.create(42, (Token)explicitCtorCallContext.LITERAL_SUPER().getPayload());\n         }\n         else {\n-            root = this.create(43, (Token)ctx.LITERAL_THIS().getPayload());\n+            detailAstImpl = this.create(43, (Token)explicitCtorCallContext.LITERAL_THIS().getPayload());\n         }\n-        root.addChild((DetailAST)this.visit((ParseTree)ctx.typeArguments()));\n-        root.addChild((DetailAST)this.visit((ParseTree)ctx.arguments()));\n-        root.addChild((DetailAST)this.create(ctx.SEMI()));\n-        return root;\n+        detailAstImpl.addChild((DetailAST)this.visit((ParseTree)explicitCtorCallContext.typeArguments()));\n+        detailAstImpl.addChild((DetailAST)this.visit((ParseTree)explicitCtorCallContext.arguments()));\n+        detailAstImpl.addChild((DetailAST)this.create(explicitCtorCallContext.SEMI()));\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitPrimaryCtorCall(final JavaLanguageParser.PrimaryCtorCallContext ctx) {\n-        final DetailAstImpl primaryCtorCall = this.create(42, (Token)ctx.LITERAL_SUPER().getPayload());\n-        this.processChildren(primaryCtorCall, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals(ctx.LITERAL_SUPER())).collect(Collectors.toList()));\n-        return primaryCtorCall;\n+    public DetailAstImpl visitPrimaryCtorCall(final JavaLanguageParser.PrimaryCtorCallContext primaryCtorCallContext) {\n+        final DetailAstImpl create = this.create(42, (Token)primaryCtorCallContext.LITERAL_SUPER().getPayload());\n+        this.processChildren(create, (List<? extends ParseTree>)primaryCtorCallContext.children.stream().filter(parseTree -> !parseTree.equals(primaryCtorCallContext2.LITERAL_SUPER())).collect(Collectors.toList()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitBlock(final JavaLanguageParser.BlockContext ctx) {\n-        final DetailAstImpl slist = this.create(7, ctx.start);\n-        this.processChildren(slist, ctx.children.subList(1, ctx.children.size()));\n-        return slist;\n+    public DetailAstImpl visitBlock(final JavaLanguageParser.BlockContext blockContext) {\n+        final DetailAstImpl create = this.create(7, blockContext.start);\n+        this.processChildren(create, blockContext.children.subList(1, blockContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitLocalVar(final JavaLanguageParser.LocalVarContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitLocalVar(final JavaLanguageParser.LocalVarContext localVarContext) {\n+        return this.flattenedTree((ParserRuleContext)localVarContext);\n     }\n     \n-    public DetailAstImpl visitBlockStat(final JavaLanguageParser.BlockStatContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitBlockStat(final JavaLanguageParser.BlockStatContext blockStatContext) {\n+        return this.flattenedTree((ParserRuleContext)blockStatContext);\n     }\n     \n-    public DetailAstImpl visitAssertExp(final JavaLanguageParser.AssertExpContext ctx) {\n-        final DetailAstImpl assertExp = this.create(ctx.ASSERT());\n-        this.processChildren(assertExp, ctx.children.subList(1, ctx.children.size()));\n-        return assertExp;\n+    public DetailAstImpl visitAssertExp(final JavaLanguageParser.AssertExpContext assertExpContext) {\n+        final DetailAstImpl create = this.create(assertExpContext.ASSERT());\n+        this.processChildren(create, assertExpContext.children.subList(1, assertExpContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitIfStat(final JavaLanguageParser.IfStatContext ctx) {\n-        final DetailAstImpl ifStat = this.create(ctx.LITERAL_IF());\n-        this.processChildren(ifStat, ctx.children.subList(1, ctx.children.size()));\n-        return ifStat;\n+    public DetailAstImpl visitIfStat(final JavaLanguageParser.IfStatContext ifStatContext) {\n+        final DetailAstImpl create = this.create(ifStatContext.LITERAL_IF());\n+        this.processChildren(create, ifStatContext.children.subList(1, ifStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitForStat(final JavaLanguageParser.ForStatContext ctx) {\n-        final DetailAstImpl forInit = this.create(ctx.start);\n-        this.processChildren(forInit, ctx.children.subList(1, ctx.children.size()));\n-        return forInit;\n+    public DetailAstImpl visitForStat(final JavaLanguageParser.ForStatContext forStatContext) {\n+        final DetailAstImpl create = this.create(forStatContext.start);\n+        this.processChildren(create, forStatContext.children.subList(1, forStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitWhileStat(final JavaLanguageParser.WhileStatContext ctx) {\n-        final DetailAstImpl whileStatement = this.create(ctx.start);\n-        this.processChildren(whileStatement, ctx.children.subList(1, ctx.children.size()));\n-        return whileStatement;\n+    public DetailAstImpl visitWhileStat(final JavaLanguageParser.WhileStatContext whileStatContext) {\n+        final DetailAstImpl create = this.create(whileStatContext.start);\n+        this.processChildren(create, whileStatContext.children.subList(1, whileStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitDoStat(final JavaLanguageParser.DoStatContext ctx) {\n-        final DetailAstImpl doStatement = this.create(ctx.start);\n-        doStatement.addChild((DetailAST)this.visit((ParseTree)ctx.statement()));\n-        doStatement.addChild((DetailAST)this.create(175, (Token)ctx.LITERAL_WHILE().getPayload()));\n-        doStatement.addChild((DetailAST)this.visit((ParseTree)ctx.parExpression()));\n-        doStatement.addChild((DetailAST)this.create(ctx.SEMI()));\n-        return doStatement;\n+    public DetailAstImpl visitDoStat(final JavaLanguageParser.DoStatContext doStatContext) {\n+        final DetailAstImpl create = this.create(doStatContext.start);\n+        create.addChild((DetailAST)this.visit((ParseTree)doStatContext.statement()));\n+        create.addChild((DetailAST)this.create(175, (Token)doStatContext.LITERAL_WHILE().getPayload()));\n+        create.addChild((DetailAST)this.visit((ParseTree)doStatContext.parExpression()));\n+        create.addChild((DetailAST)this.create(doStatContext.SEMI()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitTryStat(final JavaLanguageParser.TryStatContext ctx) {\n-        final DetailAstImpl tryStat = this.create(ctx.start);\n-        this.processChildren(tryStat, ctx.children.subList(1, ctx.children.size()));\n-        return tryStat;\n+    public DetailAstImpl visitTryStat(final JavaLanguageParser.TryStatContext tryStatContext) {\n+        final DetailAstImpl create = this.create(tryStatContext.start);\n+        this.processChildren(create, tryStatContext.children.subList(1, tryStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitTryWithResourceStat(final JavaLanguageParser.TryWithResourceStatContext ctx) {\n-        final DetailAstImpl tryWithResources = this.create(ctx.LITERAL_TRY());\n-        this.processChildren(tryWithResources, ctx.children.subList(1, ctx.children.size()));\n-        return tryWithResources;\n+    public DetailAstImpl visitTryWithResourceStat(final JavaLanguageParser.TryWithResourceStatContext tryWithResourceStatContext) {\n+        final DetailAstImpl create = this.create(tryWithResourceStatContext.LITERAL_TRY());\n+        this.processChildren(create, tryWithResourceStatContext.children.subList(1, tryWithResourceStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitYieldStat(final JavaLanguageParser.YieldStatContext ctx) {\n-        final DetailAstImpl yieldParent = this.create(ctx.LITERAL_YIELD());\n-        this.processChildren(yieldParent, ctx.children.subList(1, ctx.children.size()));\n-        return yieldParent;\n+    public DetailAstImpl visitYieldStat(final JavaLanguageParser.YieldStatContext yieldStatContext) {\n+        final DetailAstImpl create = this.create(yieldStatContext.LITERAL_YIELD());\n+        this.processChildren(create, yieldStatContext.children.subList(1, yieldStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitSyncStat(final JavaLanguageParser.SyncStatContext ctx) {\n-        final DetailAstImpl syncStatement = this.create(ctx.start);\n-        this.processChildren(syncStatement, ctx.children.subList(1, ctx.children.size()));\n-        return syncStatement;\n+    public DetailAstImpl visitSyncStat(final JavaLanguageParser.SyncStatContext syncStatContext) {\n+        final DetailAstImpl create = this.create(syncStatContext.start);\n+        this.processChildren(create, syncStatContext.children.subList(1, syncStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitReturnStat(final JavaLanguageParser.ReturnStatContext ctx) {\n-        final DetailAstImpl returnStat = this.create(ctx.LITERAL_RETURN());\n-        this.processChildren(returnStat, ctx.children.subList(1, ctx.children.size()));\n-        return returnStat;\n+    public DetailAstImpl visitReturnStat(final JavaLanguageParser.ReturnStatContext returnStatContext) {\n+        final DetailAstImpl create = this.create(returnStatContext.LITERAL_RETURN());\n+        this.processChildren(create, returnStatContext.children.subList(1, returnStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitThrowStat(final JavaLanguageParser.ThrowStatContext ctx) {\n-        final DetailAstImpl throwStat = this.create(ctx.LITERAL_THROW());\n-        this.processChildren(throwStat, ctx.children.subList(1, ctx.children.size()));\n-        return throwStat;\n+    public DetailAstImpl visitThrowStat(final JavaLanguageParser.ThrowStatContext throwStatContext) {\n+        final DetailAstImpl create = this.create(throwStatContext.LITERAL_THROW());\n+        this.processChildren(create, throwStatContext.children.subList(1, throwStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitBreakStat(final JavaLanguageParser.BreakStatContext ctx) {\n-        final DetailAstImpl literalBreak = this.create(ctx.LITERAL_BREAK());\n-        this.processChildren(literalBreak, ctx.children.subList(1, ctx.children.size()));\n-        return literalBreak;\n+    public DetailAstImpl visitBreakStat(final JavaLanguageParser.BreakStatContext breakStatContext) {\n+        final DetailAstImpl create = this.create(breakStatContext.LITERAL_BREAK());\n+        this.processChildren(create, breakStatContext.children.subList(1, breakStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitContinueStat(final JavaLanguageParser.ContinueStatContext ctx) {\n-        final DetailAstImpl continueStat = this.create(ctx.LITERAL_CONTINUE());\n-        this.processChildren(continueStat, ctx.children.subList(1, ctx.children.size()));\n-        return continueStat;\n+    public DetailAstImpl visitContinueStat(final JavaLanguageParser.ContinueStatContext continueStatContext) {\n+        final DetailAstImpl create = this.create(continueStatContext.LITERAL_CONTINUE());\n+        this.processChildren(create, continueStatContext.children.subList(1, continueStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitEmptyStat(final JavaLanguageParser.EmptyStatContext ctx) {\n-        return this.create(38, ctx.start);\n+    public DetailAstImpl visitEmptyStat(final JavaLanguageParser.EmptyStatContext emptyStatContext) {\n+        return this.create(38, emptyStatContext.start);\n     }\n     \n-    public DetailAstImpl visitExpStat(final JavaLanguageParser.ExpStatContext ctx) {\n-        final DetailAstImpl expStatRoot = this.visit((ParseTree)ctx.statementExpression);\n-        addLastSibling(expStatRoot, this.create(ctx.SEMI()));\n-        return expStatRoot;\n+    public DetailAstImpl visitExpStat(final JavaLanguageParser.ExpStatContext expStatContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)expStatContext.statementExpression);\n+        addLastSibling(visit, this.create(expStatContext.SEMI()));\n+        return visit;\n     }\n     \n-    public DetailAstImpl visitLabelStat(final JavaLanguageParser.LabelStatContext ctx) {\n-        final DetailAstImpl labelStat = this.create(22, (Token)ctx.COLON().getPayload());\n-        labelStat.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n-        labelStat.addChild((DetailAST)this.visit((ParseTree)ctx.statement()));\n-        return labelStat;\n+    public DetailAstImpl visitLabelStat(final JavaLanguageParser.LabelStatContext labelStatContext) {\n+        final DetailAstImpl create = this.create(22, (Token)labelStatContext.COLON().getPayload());\n+        create.addChild((DetailAST)this.visit((ParseTree)labelStatContext.id()));\n+        create.addChild((DetailAST)this.visit((ParseTree)labelStatContext.statement()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitSwitchExpressionOrStatement(final JavaLanguageParser.SwitchExpressionOrStatementContext ctx) {\n-        final DetailAstImpl switchStat = this.create(ctx.LITERAL_SWITCH());\n-        switchStat.addChild((DetailAST)this.visit((ParseTree)ctx.parExpression()));\n-        switchStat.addChild((DetailAST)this.create(ctx.LCURLY()));\n-        switchStat.addChild((DetailAST)this.visit((ParseTree)ctx.switchBlock()));\n-        switchStat.addChild((DetailAST)this.create(ctx.RCURLY()));\n-        return switchStat;\n+    public DetailAstImpl visitSwitchExpressionOrStatement(final JavaLanguageParser.SwitchExpressionOrStatementContext switchExpressionOrStatementContext) {\n+        final DetailAstImpl create = this.create(switchExpressionOrStatementContext.LITERAL_SWITCH());\n+        create.addChild((DetailAST)this.visit((ParseTree)switchExpressionOrStatementContext.parExpression()));\n+        create.addChild((DetailAST)this.create(switchExpressionOrStatementContext.LCURLY()));\n+        create.addChild((DetailAST)this.visit((ParseTree)switchExpressionOrStatementContext.switchBlock()));\n+        create.addChild((DetailAST)this.create(switchExpressionOrStatementContext.RCURLY()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitSwitchRules(final JavaLanguageParser.SwitchRulesContext ctx) {\n-        final DetailAstImpl dummyRoot = new DetailAstImpl();\n-        ctx.switchLabeledRule().forEach(switchLabeledRuleContext -> {\n-            final DetailAstImpl switchRule = this.visit((ParseTree)switchLabeledRuleContext);\n-            final DetailAstImpl switchRuleParent = createImaginary(208);\n-            switchRuleParent.addChild((DetailAST)switchRule);\n-            dummyRoot.addChild((DetailAST)switchRuleParent);\n+    public DetailAstImpl visitSwitchRules(final JavaLanguageParser.SwitchRulesContext switchRulesContext) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        switchRulesContext.switchLabeledRule().forEach(switchLabeledRuleContext -> {\n+            this.visit((ParseTree)switchLabeledRuleContext);\n+            createImaginary(208);\n+            final DetailAstImpl detailAstImpl3;\n+            final DetailAST detailAST;\n+            detailAstImpl3.addChild(detailAST);\n+            detailAstImpl2.addChild((DetailAST)detailAstImpl3);\n             return;\n         });\n-        return dummyRoot.getFirstChild();\n+        return detailAstImpl.getFirstChild();\n     }\n     \n-    public DetailAstImpl visitSwitchBlocks(final JavaLanguageParser.SwitchBlocksContext ctx) {\n-        final DetailAstImpl dummyRoot = new DetailAstImpl();\n-        ctx.groups.forEach(group -> dummyRoot.addChild((DetailAST)this.visit((ParseTree)group)));\n-        if (!ctx.emptyLabels.isEmpty()) {\n-            final DetailAstImpl emptyLabelParent = createImaginary(33);\n-            ctx.emptyLabels.forEach(label -> emptyLabelParent.addChild((DetailAST)this.visit((ParseTree)label)));\n-            dummyRoot.addChild((DetailAST)emptyLabelParent);\n+    public DetailAstImpl visitSwitchBlocks(final JavaLanguageParser.SwitchBlocksContext switchBlocksContext) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        switchBlocksContext.groups.forEach(switchBlockStatementGroupContext -> detailAstImpl2.addChild((DetailAST)this.visit((ParseTree)switchBlockStatementGroupContext)));\n+        if (!switchBlocksContext.emptyLabels.isEmpty()) {\n+            final DetailAstImpl imaginary = createImaginary(33);\n+            switchBlocksContext.emptyLabels.forEach(switchLabelContext -> detailAstImpl3.addChild((DetailAST)this.visit((ParseTree)switchLabelContext)));\n+            detailAstImpl.addChild((DetailAST)imaginary);\n         }\n-        return dummyRoot.getFirstChild();\n+        return detailAstImpl.getFirstChild();\n     }\n     \n-    public DetailAstImpl visitSwitchLabeledExpression(final JavaLanguageParser.SwitchLabeledExpressionContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitSwitchLabeledExpression(final JavaLanguageParser.SwitchLabeledExpressionContext switchLabeledExpressionContext) {\n+        return this.flattenedTree((ParserRuleContext)switchLabeledExpressionContext);\n     }\n     \n-    public DetailAstImpl visitSwitchLabeledBlock(final JavaLanguageParser.SwitchLabeledBlockContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitSwitchLabeledBlock(final JavaLanguageParser.SwitchLabeledBlockContext switchLabeledBlockContext) {\n+        return this.flattenedTree((ParserRuleContext)switchLabeledBlockContext);\n     }\n     \n-    public DetailAstImpl visitSwitchLabeledThrow(final JavaLanguageParser.SwitchLabeledThrowContext ctx) {\n-        final DetailAstImpl switchLabel = this.visit((ParseTree)ctx.switchLabel());\n-        addLastSibling(switchLabel, this.create(ctx.LAMBDA()));\n-        final DetailAstImpl literalThrow = this.create(ctx.LITERAL_THROW());\n-        literalThrow.addChild((DetailAST)this.visit((ParseTree)ctx.expression()));\n-        literalThrow.addChild((DetailAST)this.create(ctx.SEMI()));\n-        addLastSibling(switchLabel, literalThrow);\n-        return switchLabel;\n+    public DetailAstImpl visitSwitchLabeledThrow(final JavaLanguageParser.SwitchLabeledThrowContext switchLabeledThrowContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)switchLabeledThrowContext.switchLabel());\n+        addLastSibling(visit, this.create(switchLabeledThrowContext.LAMBDA()));\n+        final DetailAstImpl create = this.create(switchLabeledThrowContext.LITERAL_THROW());\n+        create.addChild((DetailAST)this.visit((ParseTree)switchLabeledThrowContext.expression()));\n+        create.addChild((DetailAST)this.create(switchLabeledThrowContext.SEMI()));\n+        addLastSibling(visit, create);\n+        return visit;\n     }\n     \n-    public DetailAstImpl visitElseStat(final JavaLanguageParser.ElseStatContext ctx) {\n-        final DetailAstImpl elseStat = this.create(ctx.LITERAL_ELSE());\n-        this.processChildren(elseStat, ctx.children.subList(1, ctx.children.size()));\n-        return elseStat;\n+    public DetailAstImpl visitElseStat(final JavaLanguageParser.ElseStatContext elseStatContext) {\n+        final DetailAstImpl create = this.create(elseStatContext.LITERAL_ELSE());\n+        this.processChildren(create, elseStatContext.children.subList(1, elseStatContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitCatchClause(final JavaLanguageParser.CatchClauseContext ctx) {\n-        final DetailAstImpl catchClause = this.create(96, (Token)ctx.LITERAL_CATCH().getPayload());\n-        this.processChildren(catchClause, ctx.children.subList(1, ctx.children.size()));\n-        return catchClause;\n+    public DetailAstImpl visitCatchClause(final JavaLanguageParser.CatchClauseContext catchClauseContext) {\n+        final DetailAstImpl create = this.create(96, (Token)catchClauseContext.LITERAL_CATCH().getPayload());\n+        this.processChildren(create, catchClauseContext.children.subList(1, catchClauseContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitCatchParameter(final JavaLanguageParser.CatchParameterContext ctx) {\n-        final DetailAstImpl catchParameterDef = createImaginary(21);\n-        catchParameterDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        this.processChildren(catchParameterDef, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.VariableModifierContext)).collect(Collectors.toList()));\n-        return catchParameterDef;\n+    public DetailAstImpl visitCatchParameter(final JavaLanguageParser.CatchParameterContext catchParameterContext) {\n+        final DetailAstImpl imaginary = createImaginary(21);\n+        imaginary.addChild((DetailAST)this.createModifiers(catchParameterContext.mods));\n+        this.processChildren(imaginary, (List<? extends ParseTree>)catchParameterContext.children.stream().filter(parseTree -> !(parseTree instanceof JavaLanguageParser.VariableModifierContext)).collect(Collectors.toList()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitCatchType(final JavaLanguageParser.CatchTypeContext ctx) {\n-        final DetailAstImpl type = createImaginary(13);\n-        this.processChildren(type, ctx.children);\n-        return type;\n+    public DetailAstImpl visitCatchType(final JavaLanguageParser.CatchTypeContext catchTypeContext) {\n+        final DetailAstImpl imaginary = createImaginary(13);\n+        this.processChildren(imaginary, catchTypeContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitFinallyBlock(final JavaLanguageParser.FinallyBlockContext ctx) {\n-        final DetailAstImpl finallyBlock = this.create(ctx.LITERAL_FINALLY());\n-        this.processChildren(finallyBlock, ctx.children.subList(1, ctx.children.size()));\n-        return finallyBlock;\n+    public DetailAstImpl visitFinallyBlock(final JavaLanguageParser.FinallyBlockContext finallyBlockContext) {\n+        final DetailAstImpl create = this.create(finallyBlockContext.LITERAL_FINALLY());\n+        this.processChildren(create, finallyBlockContext.children.subList(1, finallyBlockContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitResourceSpecification(final JavaLanguageParser.ResourceSpecificationContext ctx) {\n-        final DetailAstImpl resourceSpecification = createImaginary(176);\n-        this.processChildren(resourceSpecification, ctx.children);\n-        return resourceSpecification;\n+    public DetailAstImpl visitResourceSpecification(final JavaLanguageParser.ResourceSpecificationContext resourceSpecificationContext) {\n+        final DetailAstImpl imaginary = createImaginary(176);\n+        this.processChildren(imaginary, resourceSpecificationContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitResources(final JavaLanguageParser.ResourcesContext ctx) {\n-        final DetailAstImpl firstResource = this.visit((ParseTree)ctx.resource(0));\n-        final DetailAstImpl resources = createImaginary(177);\n-        resources.addChild((DetailAST)firstResource);\n-        this.processChildren(resources, ctx.children.subList(1, ctx.children.size()));\n-        return resources;\n+    public DetailAstImpl visitResources(final JavaLanguageParser.ResourcesContext resourcesContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)resourcesContext.resource(0));\n+        final DetailAstImpl imaginary = createImaginary(177);\n+        imaginary.addChild((DetailAST)visit);\n+        this.processChildren(imaginary, resourcesContext.children.subList(1, resourcesContext.children.size()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitResourceDeclaration(final JavaLanguageParser.ResourceDeclarationContext ctx) {\n-        final DetailAstImpl resource = createImaginary(178);\n-        resource.addChild((DetailAST)this.visit((ParseTree)ctx.variableDeclaratorId()));\n-        final DetailAstImpl assign = this.create(ctx.ASSIGN());\n-        resource.addChild((DetailAST)assign);\n-        assign.addChild((DetailAST)this.visit((ParseTree)ctx.expression()));\n-        return resource;\n+    public DetailAstImpl visitResourceDeclaration(final JavaLanguageParser.ResourceDeclarationContext resourceDeclarationContext) {\n+        final DetailAstImpl imaginary = createImaginary(178);\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)resourceDeclarationContext.variableDeclaratorId()));\n+        final DetailAstImpl create = this.create(resourceDeclarationContext.ASSIGN());\n+        imaginary.addChild((DetailAST)create);\n+        create.addChild((DetailAST)this.visit((ParseTree)resourceDeclarationContext.expression()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitVariableAccess(final JavaLanguageParser.VariableAccessContext ctx) {\n-        DetailAstImpl resource;\n-        if (ctx.accessList.isEmpty()) {\n-            resource = createImaginary(178);\n-            resource.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n+    public DetailAstImpl visitVariableAccess(final JavaLanguageParser.VariableAccessContext variableAccessContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (variableAccessContext.accessList.isEmpty()) {\n+            detailAstImpl = createImaginary(178);\n+            detailAstImpl.addChild((DetailAST)this.visit((ParseTree)variableAccessContext.id()));\n         }\n         else {\n-            final JavaAstVisitor.DetailAstPair currentAst = new JavaAstVisitor.DetailAstPair();\n-            ctx.accessList.forEach(fieldAccess -> {\n-                JavaAstVisitor.DetailAstPair.addAstChild(currentAst, this.visit((ParseTree)fieldAccess.expr()));\n-                JavaAstVisitor.DetailAstPair.makeAstRoot(currentAst, this.create(fieldAccess.DOT()));\n+            final JavaAstVisitor.DetailAstPair detailAstPair = new JavaAstVisitor.DetailAstPair();\n+            variableAccessContext.accessList.forEach(fieldAccessNoIdentContext -> {\n+                JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair2, this.visit((ParseTree)fieldAccessNoIdentContext.expr()));\n+                JavaAstVisitor.DetailAstPair.makeAstRoot(detailAstPair2, this.create(fieldAccessNoIdentContext.DOT()));\n                 return;\n             });\n-            resource = createImaginary(178);\n-            resource.addChild((DetailAST)currentAst.root);\n-            if (ctx.LITERAL_THIS() == null) {\n-                resource.getFirstChild().addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n+            detailAstImpl = createImaginary(178);\n+            detailAstImpl.addChild((DetailAST)detailAstPair.root);\n+            if (variableAccessContext.LITERAL_THIS() == null) {\n+                detailAstImpl.getFirstChild().addChild((DetailAST)this.visit((ParseTree)variableAccessContext.id()));\n             }\n             else {\n-                resource.getFirstChild().addChild((DetailAST)this.create(ctx.LITERAL_THIS()));\n+                detailAstImpl.getFirstChild().addChild((DetailAST)this.create(variableAccessContext.LITERAL_THIS()));\n             }\n         }\n-        return resource;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitSwitchBlockStatementGroup(final JavaLanguageParser.SwitchBlockStatementGroupContext ctx) {\n-        final DetailAstImpl caseGroup = createImaginary(33);\n-        this.processChildren(caseGroup, ctx.switchLabel());\n-        final DetailAstImpl sList = createImaginary(7);\n-        this.processChildren(sList, ctx.slists);\n-        caseGroup.addChild((DetailAST)sList);\n-        return caseGroup;\n+    public DetailAstImpl visitSwitchBlockStatementGroup(final JavaLanguageParser.SwitchBlockStatementGroupContext switchBlockStatementGroupContext) {\n+        final DetailAstImpl imaginary = createImaginary(33);\n+        this.processChildren(imaginary, switchBlockStatementGroupContext.switchLabel());\n+        final DetailAstImpl imaginary2 = createImaginary(7);\n+        this.processChildren(imaginary2, switchBlockStatementGroupContext.slists);\n+        imaginary.addChild((DetailAST)imaginary2);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitCaseLabel(final JavaLanguageParser.CaseLabelContext ctx) {\n-        final DetailAstImpl caseLabel = this.create(ctx.LITERAL_CASE());\n-        this.processChildren(caseLabel, ctx.children.subList(1, ctx.children.size()));\n-        return caseLabel;\n+    public DetailAstImpl visitCaseLabel(final JavaLanguageParser.CaseLabelContext caseLabelContext) {\n+        final DetailAstImpl create = this.create(caseLabelContext.LITERAL_CASE());\n+        this.processChildren(create, caseLabelContext.children.subList(1, caseLabelContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitDefaultLabel(final JavaLanguageParser.DefaultLabelContext ctx) {\n-        final DetailAstImpl defaultLabel = this.create(ctx.LITERAL_DEFAULT());\n-        if (ctx.COLON() != null) {\n-            defaultLabel.addChild((DetailAST)this.create(ctx.COLON()));\n+    public DetailAstImpl visitDefaultLabel(final JavaLanguageParser.DefaultLabelContext defaultLabelContext) {\n+        final DetailAstImpl create = this.create(defaultLabelContext.LITERAL_DEFAULT());\n+        if (defaultLabelContext.COLON() != null) {\n+            create.addChild((DetailAST)this.create(defaultLabelContext.COLON()));\n         }\n-        return defaultLabel;\n+        return create;\n     }\n     \n-    public DetailAstImpl visitCaseConstants(final JavaLanguageParser.CaseConstantsContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitCaseConstants(final JavaLanguageParser.CaseConstantsContext caseConstantsContext) {\n+        return this.flattenedTree((ParserRuleContext)caseConstantsContext);\n     }\n     \n-    public DetailAstImpl visitCaseConstant(final JavaLanguageParser.CaseConstantContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitCaseConstant(final JavaLanguageParser.CaseConstantContext caseConstantContext) {\n+        return this.flattenedTree((ParserRuleContext)caseConstantContext);\n     }\n     \n-    public DetailAstImpl visitEnhancedFor(final JavaLanguageParser.EnhancedForContext ctx) {\n-        final DetailAstImpl leftParen = this.create(ctx.LPAREN());\n-        final DetailAstImpl enhancedForControl = this.visit(ctx.getChild(1));\n-        final DetailAstImpl forEachClause = createImaginary(156);\n-        forEachClause.addChild((DetailAST)enhancedForControl);\n-        addLastSibling(leftParen, forEachClause);\n-        addLastSibling(leftParen, this.create(ctx.RPAREN()));\n-        return leftParen;\n+    public DetailAstImpl visitEnhancedFor(final JavaLanguageParser.EnhancedForContext enhancedForContext) {\n+        final DetailAstImpl create = this.create(enhancedForContext.LPAREN());\n+        final DetailAstImpl visit = this.visit(enhancedForContext.getChild(1));\n+        final DetailAstImpl imaginary = createImaginary(156);\n+        imaginary.addChild((DetailAST)visit);\n+        addLastSibling(create, imaginary);\n+        addLastSibling(create, this.create(enhancedForContext.RPAREN()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitForFor(final JavaLanguageParser.ForForContext ctx) {\n-        final DetailAstImpl dummyRoot = new DetailAstImpl();\n-        dummyRoot.addChild((DetailAST)this.create(ctx.LPAREN()));\n-        if (ctx.forInit() == null) {\n-            final DetailAstImpl imaginaryForInitParent = createImaginary(35);\n-            dummyRoot.addChild((DetailAST)imaginaryForInitParent);\n+    public DetailAstImpl visitForFor(final JavaLanguageParser.ForForContext forForContext) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        detailAstImpl.addChild((DetailAST)this.create(forForContext.LPAREN()));\n+        if (forForContext.forInit() == null) {\n+            detailAstImpl.addChild((DetailAST)createImaginary(35));\n         }\n         else {\n-            dummyRoot.addChild((DetailAST)this.visit((ParseTree)ctx.forInit()));\n+            detailAstImpl.addChild((DetailAST)this.visit((ParseTree)forForContext.forInit()));\n         }\n-        dummyRoot.addChild((DetailAST)this.create(ctx.SEMI(0)));\n-        final DetailAstImpl forCondParent = createImaginary(36);\n-        forCondParent.addChild((DetailAST)this.visit((ParseTree)ctx.forCond));\n-        dummyRoot.addChild((DetailAST)forCondParent);\n-        dummyRoot.addChild((DetailAST)this.create(ctx.SEMI(1)));\n-        final DetailAstImpl forItParent = createImaginary(37);\n-        forItParent.addChild((DetailAST)this.visit((ParseTree)ctx.forUpdate));\n-        dummyRoot.addChild((DetailAST)forItParent);\n-        dummyRoot.addChild((DetailAST)this.create(ctx.RPAREN()));\n-        return dummyRoot.getFirstChild();\n+        detailAstImpl.addChild((DetailAST)this.create(forForContext.SEMI(0)));\n+        final DetailAstImpl imaginary = createImaginary(36);\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)forForContext.forCond));\n+        detailAstImpl.addChild((DetailAST)imaginary);\n+        detailAstImpl.addChild((DetailAST)this.create(forForContext.SEMI(1)));\n+        final DetailAstImpl imaginary2 = createImaginary(37);\n+        imaginary2.addChild((DetailAST)this.visit((ParseTree)forForContext.forUpdate));\n+        detailAstImpl.addChild((DetailAST)imaginary2);\n+        detailAstImpl.addChild((DetailAST)this.create(forForContext.RPAREN()));\n+        return detailAstImpl.getFirstChild();\n     }\n     \n-    public DetailAstImpl visitForInit(final JavaLanguageParser.ForInitContext ctx) {\n-        final DetailAstImpl forInit = createImaginary(35);\n-        this.processChildren(forInit, ctx.children);\n-        return forInit;\n+    public DetailAstImpl visitForInit(final JavaLanguageParser.ForInitContext forInitContext) {\n+        final DetailAstImpl imaginary = createImaginary(35);\n+        this.processChildren(imaginary, forInitContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitEnhancedForControl(final JavaLanguageParser.EnhancedForControlContext ctx) {\n-        final DetailAstImpl variableDeclaratorId = this.visit((ParseTree)ctx.variableDeclaratorId());\n-        final DetailAstImpl variableDef = createImaginary(10);\n-        variableDef.addChild((DetailAST)variableDeclaratorId);\n-        addLastSibling(variableDef, this.create(ctx.COLON()));\n-        addLastSibling(variableDef, this.visit((ParseTree)ctx.expression()));\n-        return variableDef;\n+    public DetailAstImpl visitEnhancedForControl(final JavaLanguageParser.EnhancedForControlContext enhancedForControlContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)enhancedForControlContext.variableDeclaratorId());\n+        final DetailAstImpl imaginary = createImaginary(10);\n+        imaginary.addChild((DetailAST)visit);\n+        addLastSibling(imaginary, this.create(enhancedForControlContext.COLON()));\n+        addLastSibling(imaginary, this.visit((ParseTree)enhancedForControlContext.expression()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitEnhancedForControlWithRecordPattern(final JavaLanguageParser.EnhancedForControlWithRecordPatternContext ctx) {\n-        final DetailAstImpl recordPattern = this.visit((ParseTree)ctx.pattern());\n-        addLastSibling(recordPattern, this.create(ctx.COLON()));\n-        addLastSibling(recordPattern, this.visit((ParseTree)ctx.expression()));\n-        return recordPattern;\n+    public DetailAstImpl visitEnhancedForControlWithRecordPattern(final JavaLanguageParser.EnhancedForControlWithRecordPatternContext enhancedForControlWithRecordPatternContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)enhancedForControlWithRecordPatternContext.pattern());\n+        addLastSibling(visit, this.create(enhancedForControlWithRecordPatternContext.COLON()));\n+        addLastSibling(visit, this.visit((ParseTree)enhancedForControlWithRecordPatternContext.expression()));\n+        return visit;\n     }\n     \n-    public DetailAstImpl visitParExpression(final JavaLanguageParser.ParExpressionContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitParExpression(final JavaLanguageParser.ParExpressionContext parExpressionContext) {\n+        return this.flattenedTree((ParserRuleContext)parExpressionContext);\n     }\n     \n-    public DetailAstImpl visitExpressionList(final JavaLanguageParser.ExpressionListContext ctx) {\n-        final DetailAstImpl elist = createImaginary(34);\n-        this.processChildren(elist, ctx.children);\n-        return elist;\n+    public DetailAstImpl visitExpressionList(final JavaLanguageParser.ExpressionListContext expressionListContext) {\n+        final DetailAstImpl imaginary = createImaginary(34);\n+        this.processChildren(imaginary, expressionListContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitExpression(final JavaLanguageParser.ExpressionContext ctx) {\n-        return this.buildExpressionNode((ParseTree)ctx.expr());\n+    public DetailAstImpl visitExpression(final JavaLanguageParser.ExpressionContext expressionContext) {\n+        return this.buildExpressionNode((ParseTree)expressionContext.expr());\n     }\n     \n-    public DetailAstImpl visitRefOp(final JavaLanguageParser.RefOpContext ctx) {\n-        final DetailAstImpl bop = this.create(ctx.bop);\n-        final DetailAstImpl leftChild = this.visit((ParseTree)ctx.expr());\n-        final DetailAstImpl rightChild = this.create(58, ctx.stop);\n-        bop.addChild((DetailAST)leftChild);\n-        bop.addChild((DetailAST)rightChild);\n-        return bop;\n+    public DetailAstImpl visitRefOp(final JavaLanguageParser.RefOpContext refOpContext) {\n+        final DetailAstImpl create = this.create(refOpContext.bop);\n+        final DetailAstImpl visit = this.visit((ParseTree)refOpContext.expr());\n+        final DetailAstImpl create2 = this.create(58, refOpContext.stop);\n+        create.addChild((DetailAST)visit);\n+        create.addChild((DetailAST)create2);\n+        return create;\n     }\n     \n-    public DetailAstImpl visitSuperExp(final JavaLanguageParser.SuperExpContext ctx) {\n-        final DetailAstImpl bop = this.create(ctx.bop);\n-        bop.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n-        bop.addChild((DetailAST)this.create(ctx.LITERAL_SUPER()));\n-        DetailAstImpl superSuffixParent = this.visit((ParseTree)ctx.superSuffix());\n-        if (superSuffixParent == null) {\n-            superSuffixParent = bop;\n+    public DetailAstImpl visitSuperExp(final JavaLanguageParser.SuperExpContext superExpContext) {\n+        final DetailAstImpl create = this.create(superExpContext.bop);\n+        create.addChild((DetailAST)this.visit((ParseTree)superExpContext.expr()));\n+        create.addChild((DetailAST)this.create(superExpContext.LITERAL_SUPER()));\n+        DetailAstImpl visit = this.visit((ParseTree)superExpContext.superSuffix());\n+        if (visit == null) {\n+            visit = create;\n         }\n         else {\n             DetailAstImpl firstChild;\n-            for (firstChild = superSuffixParent; firstChild.getFirstChild() != null; firstChild = firstChild.getFirstChild()) {}\n-            firstChild.addPreviousSibling((DetailAST)bop);\n+            for (firstChild = visit; firstChild.getFirstChild() != null; firstChild = firstChild.getFirstChild()) {}\n+            firstChild.addPreviousSibling((DetailAST)create);\n         }\n-        return superSuffixParent;\n+        return visit;\n     }\n     \n-    public DetailAstImpl visitInstanceOfExp(final JavaLanguageParser.InstanceOfExpContext ctx) {\n-        final DetailAstImpl literalInstanceOf = this.create(ctx.LITERAL_INSTANCEOF());\n-        literalInstanceOf.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n-        final ParseTree patternOrType = ctx.getChild(2);\n-        DetailAstImpl patternDef;\n-        if (patternOrType instanceof JavaLanguageParser.ParenPatternContext) {\n-            patternDef = createImaginary(213);\n-            patternDef.addChild((DetailAST)this.visit(patternOrType));\n+    public DetailAstImpl visitInstanceOfExp(final JavaLanguageParser.InstanceOfExpContext instanceOfExpContext) {\n+        final DetailAstImpl create = this.create(instanceOfExpContext.LITERAL_INSTANCEOF());\n+        create.addChild((DetailAST)this.visit((ParseTree)instanceOfExpContext.expr()));\n+        final ParseTree child = instanceOfExpContext.getChild(2);\n+        DetailAstImpl detailAstImpl;\n+        if (child instanceof JavaLanguageParser.ParenPatternContext) {\n+            detailAstImpl = createImaginary(213);\n+            detailAstImpl.addChild((DetailAST)this.visit(child));\n         }\n         else {\n-            patternDef = this.visit(patternOrType);\n+            detailAstImpl = this.visit(child);\n         }\n-        literalInstanceOf.addChild((DetailAST)patternDef);\n-        return literalInstanceOf;\n+        create.addChild((DetailAST)detailAstImpl);\n+        return create;\n     }\n     \n-    public DetailAstImpl visitBitShift(final JavaLanguageParser.BitShiftContext ctx) {\n-        DetailAstImpl shiftOperation;\n-        if (ctx.LT().size() == \"<<\".length()) {\n-            shiftOperation = this.create(122, (Token)ctx.LT(0).getPayload());\n-            shiftOperation.setText(\"<<\");\n+    public DetailAstImpl visitBitShift(final JavaLanguageParser.BitShiftContext bitShiftContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (bitShiftContext.LT().size() == \"<<\".length()) {\n+            detailAstImpl = this.create(122, (Token)bitShiftContext.LT(0).getPayload());\n+            detailAstImpl.setText(\"<<\");\n         }\n-        else if (ctx.GT().size() == \">>>\".length()) {\n-            shiftOperation = this.create(124, (Token)ctx.GT(0).getPayload());\n-            shiftOperation.setText(\">>>\");\n+        else if (bitShiftContext.GT().size() == \">>>\".length()) {\n+            detailAstImpl = this.create(124, (Token)bitShiftContext.GT(0).getPayload());\n+            detailAstImpl.setText(\">>>\");\n         }\n         else {\n-            shiftOperation = this.create(123, (Token)ctx.GT(0).getPayload());\n-            shiftOperation.setText(\">>\");\n+            detailAstImpl = this.create(123, (Token)bitShiftContext.GT(0).getPayload());\n+            detailAstImpl.setText(\">>\");\n         }\n-        shiftOperation.addChild((DetailAST)this.visit((ParseTree)ctx.expr(0)));\n-        shiftOperation.addChild((DetailAST)this.visit((ParseTree)ctx.expr(1)));\n-        return shiftOperation;\n+        detailAstImpl.addChild((DetailAST)this.visit((ParseTree)bitShiftContext.expr(0)));\n+        detailAstImpl.addChild((DetailAST)this.visit((ParseTree)bitShiftContext.expr(1)));\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitNewExp(final JavaLanguageParser.NewExpContext ctx) {\n-        final DetailAstImpl newExp = this.create(ctx.LITERAL_NEW());\n-        this.processChildren(newExp, ctx.children.subList(1, ctx.children.size()));\n-        return newExp;\n+    public DetailAstImpl visitNewExp(final JavaLanguageParser.NewExpContext newExpContext) {\n+        final DetailAstImpl create = this.create(newExpContext.LITERAL_NEW());\n+        this.processChildren(create, newExpContext.children.subList(1, newExpContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitPrefix(final JavaLanguageParser.PrefixContext ctx) {\n-        int tokenType = 0;\n-        switch (ctx.prefix.getType()) {\n+    public DetailAstImpl visitPrefix(final JavaLanguageParser.PrefixContext prefixContext) {\n+        int type = 0;\n+        switch (prefixContext.prefix.getType()) {\n             case 125: {\n-                tokenType = 32;\n+                type = 32;\n                 break;\n             }\n             case 126: {\n-                tokenType = 31;\n+                type = 31;\n                 break;\n             }\n             default: {\n-                tokenType = ctx.prefix.getType();\n+                type = prefixContext.prefix.getType();\n                 break;\n             }\n         }\n-        final DetailAstImpl prefix = this.create(tokenType, ctx.prefix);\n-        prefix.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n-        return prefix;\n+        final DetailAstImpl create = this.create(type, prefixContext.prefix);\n+        create.addChild((DetailAST)this.visit((ParseTree)prefixContext.expr()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitCastExp(final JavaLanguageParser.CastExpContext ctx) {\n-        final DetailAstImpl cast = this.create(23, (Token)ctx.LPAREN().getPayload());\n-        this.processChildren(cast, ctx.children.subList(1, ctx.children.size()));\n-        return cast;\n+    public DetailAstImpl visitCastExp(final JavaLanguageParser.CastExpContext castExpContext) {\n+        final DetailAstImpl create = this.create(23, (Token)castExpContext.LPAREN().getPayload());\n+        this.processChildren(create, castExpContext.children.subList(1, castExpContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitIndexOp(final JavaLanguageParser.IndexOpContext ctx) {\n-        final DetailAstImpl indexOp = this.create(24, (Token)ctx.LBRACK().getPayload());\n-        indexOp.addChild((DetailAST)this.visit((ParseTree)ctx.expr(0)));\n-        final DetailAstImpl expr = this.visit((ParseTree)ctx.expr(1));\n-        final DetailAstImpl imaginaryExpr = createImaginary(28);\n-        imaginaryExpr.addChild((DetailAST)expr);\n-        indexOp.addChild((DetailAST)imaginaryExpr);\n-        indexOp.addChild((DetailAST)this.create(ctx.RBRACK()));\n-        return indexOp;\n+    public DetailAstImpl visitIndexOp(final JavaLanguageParser.IndexOpContext indexOpContext) {\n+        final DetailAstImpl create = this.create(24, (Token)indexOpContext.LBRACK().getPayload());\n+        create.addChild((DetailAST)this.visit((ParseTree)indexOpContext.expr(0)));\n+        final DetailAstImpl visit = this.visit((ParseTree)indexOpContext.expr(1));\n+        final DetailAstImpl imaginary = createImaginary(28);\n+        imaginary.addChild((DetailAST)visit);\n+        create.addChild((DetailAST)imaginary);\n+        create.addChild((DetailAST)this.create(indexOpContext.RBRACK()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitInvOp(final JavaLanguageParser.InvOpContext ctx) {\n-        final JavaAstVisitor.DetailAstPair currentAst = new JavaAstVisitor.DetailAstPair();\n-        final DetailAstImpl returnAst = this.visit((ParseTree)ctx.expr());\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAst, returnAst);\n-        JavaAstVisitor.DetailAstPair.makeAstRoot(currentAst, this.create(ctx.bop));\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAst, this.visit((ParseTree)ctx.nonWildcardTypeArguments()));\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAst, this.visit((ParseTree)ctx.id()));\n-        final DetailAstImpl lparen = this.create(27, (Token)ctx.LPAREN().getPayload());\n-        JavaAstVisitor.DetailAstPair.makeAstRoot(currentAst, lparen);\n-        final DetailAstImpl expressionList = (DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)ctx.expressionList())).orElseGet(() -> createImaginary(34));\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAst, expressionList);\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAst, this.create(ctx.RPAREN()));\n-        return currentAst.root;\n+    public DetailAstImpl visitInvOp(final JavaLanguageParser.InvOpContext invOpContext) {\n+        final JavaAstVisitor.DetailAstPair detailAstPair = new JavaAstVisitor.DetailAstPair();\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)invOpContext.expr()));\n+        JavaAstVisitor.DetailAstPair.makeAstRoot(detailAstPair, this.create(invOpContext.bop));\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)invOpContext.nonWildcardTypeArguments()));\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)invOpContext.id()));\n+        JavaAstVisitor.DetailAstPair.makeAstRoot(detailAstPair, this.create(27, (Token)invOpContext.LPAREN().getPayload()));\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, (DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)invOpContext.expressionList())).orElseGet(() -> createImaginary(34)));\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.create(invOpContext.RPAREN()));\n+        return detailAstPair.root;\n     }\n     \n-    public DetailAstImpl visitInitExp(final JavaLanguageParser.InitExpContext ctx) {\n-        final DetailAstImpl dot = this.create(ctx.bop);\n-        dot.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n-        final DetailAstImpl literalNew = this.create(ctx.LITERAL_NEW());\n-        literalNew.addChild((DetailAST)this.visit((ParseTree)ctx.nonWildcardTypeArguments()));\n-        literalNew.addChild((DetailAST)this.visit((ParseTree)ctx.innerCreator()));\n-        dot.addChild((DetailAST)literalNew);\n-        return dot;\n+    public DetailAstImpl visitInitExp(final JavaLanguageParser.InitExpContext initExpContext) {\n+        final DetailAstImpl create = this.create(initExpContext.bop);\n+        create.addChild((DetailAST)this.visit((ParseTree)initExpContext.expr()));\n+        final DetailAstImpl create2 = this.create(initExpContext.LITERAL_NEW());\n+        create2.addChild((DetailAST)this.visit((ParseTree)initExpContext.nonWildcardTypeArguments()));\n+        create2.addChild((DetailAST)this.visit((ParseTree)initExpContext.innerCreator()));\n+        create.addChild((DetailAST)create2);\n+        return create;\n     }\n     \n-    public DetailAstImpl visitSimpleMethodCall(final JavaLanguageParser.SimpleMethodCallContext ctx) {\n-        final DetailAstImpl methodCall = this.create(27, (Token)ctx.LPAREN().getPayload());\n-        methodCall.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n-        final DetailAstImpl expressionList = (DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)ctx.expressionList())).orElseGet(() -> createImaginary(34));\n-        methodCall.addChild((DetailAST)expressionList);\n-        methodCall.addChild((DetailAST)this.create((Token)ctx.RPAREN().getPayload()));\n-        return methodCall;\n+    public DetailAstImpl visitSimpleMethodCall(final JavaLanguageParser.SimpleMethodCallContext simpleMethodCallContext) {\n+        final DetailAstImpl create = this.create(27, (Token)simpleMethodCallContext.LPAREN().getPayload());\n+        create.addChild((DetailAST)this.visit((ParseTree)simpleMethodCallContext.id()));\n+        create.addChild((DetailAST)(DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)simpleMethodCallContext.expressionList())).orElseGet(() -> createImaginary(34)));\n+        create.addChild((DetailAST)this.create((Token)simpleMethodCallContext.RPAREN().getPayload()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitLambdaExp(final JavaLanguageParser.LambdaExpContext ctx) {\n-        final DetailAstImpl lambda = this.create(ctx.LAMBDA());\n-        lambda.addChild((DetailAST)this.visit((ParseTree)ctx.lambdaParameters()));\n-        final JavaLanguageParser.BlockContext blockContext = ctx.block();\n-        DetailAstImpl rightHandLambdaChild;\n-        if (blockContext != null) {\n-            rightHandLambdaChild = this.visit((ParseTree)blockContext);\n+    public DetailAstImpl visitLambdaExp(final JavaLanguageParser.LambdaExpContext lambdaExpContext) {\n+        final DetailAstImpl create = this.create(lambdaExpContext.LAMBDA());\n+        create.addChild((DetailAST)this.visit((ParseTree)lambdaExpContext.lambdaParameters()));\n+        final JavaLanguageParser.BlockContext block = lambdaExpContext.block();\n+        DetailAstImpl detailAstImpl;\n+        if (block != null) {\n+            detailAstImpl = this.visit((ParseTree)block);\n         }\n         else {\n-            rightHandLambdaChild = this.buildExpressionNode((ParseTree)ctx.expr());\n+            detailAstImpl = this.buildExpressionNode((ParseTree)lambdaExpContext.expr());\n         }\n-        lambda.addChild((DetailAST)rightHandLambdaChild);\n-        return lambda;\n+        create.addChild((DetailAST)detailAstImpl);\n+        return create;\n     }\n     \n-    public DetailAstImpl visitThisExp(final JavaLanguageParser.ThisExpContext ctx) {\n-        final DetailAstImpl bop = this.create(ctx.bop);\n-        bop.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n-        bop.addChild((DetailAST)this.create(ctx.LITERAL_THIS()));\n-        return bop;\n+    public DetailAstImpl visitThisExp(final JavaLanguageParser.ThisExpContext thisExpContext) {\n+        final DetailAstImpl create = this.create(thisExpContext.bop);\n+        create.addChild((DetailAST)this.visit((ParseTree)thisExpContext.expr()));\n+        create.addChild((DetailAST)this.create(thisExpContext.LITERAL_THIS()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitPrimaryExp(final JavaLanguageParser.PrimaryExpContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitPrimaryExp(final JavaLanguageParser.PrimaryExpContext primaryExpContext) {\n+        return this.flattenedTree((ParserRuleContext)primaryExpContext);\n     }\n     \n-    public DetailAstImpl visitPostfix(final JavaLanguageParser.PostfixContext ctx) {\n-        DetailAstImpl postfix;\n-        if (ctx.postfix.getType() == 129) {\n-            postfix = this.create(25, ctx.postfix);\n+    public DetailAstImpl visitPostfix(final JavaLanguageParser.PostfixContext postfixContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (postfixContext.postfix.getType() == 129) {\n+            detailAstImpl = this.create(25, postfixContext.postfix);\n         }\n         else {\n-            postfix = this.create(26, ctx.postfix);\n+            detailAstImpl = this.create(26, postfixContext.postfix);\n         }\n-        postfix.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n-        return postfix;\n+        detailAstImpl.addChild((DetailAST)this.visit((ParseTree)postfixContext.expr()));\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitMethodRef(final JavaLanguageParser.MethodRefContext ctx) {\n-        final DetailAstImpl doubleColon = this.create(180, (Token)ctx.DOUBLE_COLON().getPayload());\n-        final List<ParseTree> children = (List)ctx.children.stream().filter(child -> !child.equals(ctx.DOUBLE_COLON())).collect(Collectors.toList());\n-        this.processChildren(doubleColon, children);\n-        return doubleColon;\n+    public DetailAstImpl visitMethodRef(final JavaLanguageParser.MethodRefContext methodRefContext) {\n+        final DetailAstImpl create = this.create(180, (Token)methodRefContext.DOUBLE_COLON().getPayload());\n+        this.processChildren(create, (List<? extends ParseTree>)methodRefContext.children.stream().filter(parseTree -> !parseTree.equals(methodRefContext2.DOUBLE_COLON())).collect(Collectors.toList()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitTernaryOp(final JavaLanguageParser.TernaryOpContext ctx) {\n-        final DetailAstImpl root = this.create(ctx.QUESTION());\n-        this.processChildren(root, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals(ctx.QUESTION())).collect(Collectors.toList()));\n-        return root;\n+    public DetailAstImpl visitTernaryOp(final JavaLanguageParser.TernaryOpContext ternaryOpContext) {\n+        final DetailAstImpl create = this.create(ternaryOpContext.QUESTION());\n+        this.processChildren(create, (List<? extends ParseTree>)ternaryOpContext.children.stream().filter(parseTree -> !parseTree.equals(ternaryOpContext2.QUESTION())).collect(Collectors.toList()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitBinOp(final JavaLanguageParser.BinOpContext ctx) {\n-        final DetailAstImpl bop = this.create(ctx.bop);\n-        final List<JavaLanguageParser.BinOpContext> binOpList = new ArrayList<JavaLanguageParser.BinOpContext>();\n-        for (ParseTree firstExpression = (ParseTree)ctx.expr(0); firstExpression instanceof JavaLanguageParser.BinOpContext; firstExpression = (ParseTree)((JavaLanguageParser.BinOpContext)firstExpression).expr(0)) {\n-            binOpList.add((JavaLanguageParser.BinOpContext)firstExpression);\n+    public DetailAstImpl visitBinOp(final JavaLanguageParser.BinOpContext binOpContext) {\n+        final DetailAstImpl create = this.create(binOpContext.bop);\n+        final ArrayList list = new ArrayList();\n+        for (JavaLanguageParser.ExprContext exprContext = binOpContext.expr(0); exprContext instanceof JavaLanguageParser.BinOpContext; exprContext = ((JavaLanguageParser.BinOpContext)exprContext).expr(0)) {\n+            list.add(exprContext);\n         }\n-        if (binOpList.isEmpty()) {\n-            final DetailAstImpl leftChild = this.visit(ctx.children.get(0));\n-            bop.addChild((DetailAST)leftChild);\n+        if (list.isEmpty()) {\n+            create.addChild((DetailAST)this.visit(binOpContext.children.get(0)));\n         }\n         else {\n-            final Queue<DetailAstImpl> descendantList = (Queue<DetailAstImpl>)binOpList.parallelStream().map((Function<? super Object, ?>)this::getInnerBopAst).collect((Collector<? super Object, ?, Queue<DetailAstImpl>>)Collectors.toCollection((Supplier<R>)ConcurrentLinkedQueue::new));\n-            bop.addChild((DetailAST)descendantList.poll());\n-            DetailAstImpl pointer = bop.getFirstChild();\n-            for (final DetailAstImpl descendant : descendantList) {\n-                pointer.getFirstChild().addPreviousSibling((DetailAST)descendant);\n-                pointer = descendant;\n+            final Queue queue = (Queue)list.parallelStream().map(this::getInnerBopAst).collect(Collectors.toCollection(ConcurrentLinkedQueue::new));\n+            create.addChild((DetailAST)queue.poll());\n+            Object firstChild = create.getFirstChild();\n+            for (final DetailAstImpl detailAstImpl : queue) {\n+                ((DetailAstImpl)firstChild).getFirstChild().addPreviousSibling((DetailAST)detailAstImpl);\n+                firstChild = detailAstImpl;\n             }\n         }\n-        bop.addChild((DetailAST)this.visit(ctx.children.get(2)));\n-        return bop;\n+        create.addChild((DetailAST)this.visit(binOpContext.children.get(2)));\n+        return create;\n     }\n     \n-    private DetailAstImpl getInnerBopAst(final JavaLanguageParser.BinOpContext descendant) {\n-        final DetailAstImpl innerBop = this.create(descendant.bop);\n-        final JavaLanguageParser.ExprContext expr = descendant.expr(0);\n+    private DetailAstImpl getInnerBopAst(final JavaLanguageParser.BinOpContext binOpContext) {\n+        final DetailAstImpl create = this.create(binOpContext.bop);\n+        final JavaLanguageParser.ExprContext expr = binOpContext.expr(0);\n         if (!(expr instanceof JavaLanguageParser.BinOpContext)) {\n-            innerBop.addChild((DetailAST)this.visit((ParseTree)expr));\n+            create.addChild((DetailAST)this.visit((ParseTree)expr));\n         }\n-        innerBop.addChild((DetailAST)this.visit((ParseTree)descendant.expr(1)));\n-        return innerBop;\n+        create.addChild((DetailAST)this.visit((ParseTree)binOpContext.expr(1)));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitMethodCall(final JavaLanguageParser.MethodCallContext ctx) {\n-        final DetailAstImpl methodCall = this.create(27, (Token)ctx.LPAREN().getPayload());\n-        final DetailAstImpl expressionList = (DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)ctx.expressionList())).orElseGet(() -> createImaginary(34));\n-        final DetailAstImpl dot = this.create(ctx.DOT());\n-        dot.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n-        dot.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n-        methodCall.addChild((DetailAST)dot);\n-        methodCall.addChild((DetailAST)expressionList);\n-        methodCall.addChild((DetailAST)this.create((Token)ctx.RPAREN().getPayload()));\n-        return methodCall;\n+    public DetailAstImpl visitMethodCall(final JavaLanguageParser.MethodCallContext methodCallContext) {\n+        final DetailAstImpl create = this.create(27, (Token)methodCallContext.LPAREN().getPayload());\n+        final DetailAstImpl detailAstImpl = (DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)methodCallContext.expressionList())).orElseGet(() -> createImaginary(34));\n+        final DetailAstImpl create2 = this.create(methodCallContext.DOT());\n+        create2.addChild((DetailAST)this.visit((ParseTree)methodCallContext.expr()));\n+        create2.addChild((DetailAST)this.visit((ParseTree)methodCallContext.id()));\n+        create.addChild((DetailAST)create2);\n+        create.addChild((DetailAST)detailAstImpl);\n+        create.addChild((DetailAST)this.create((Token)methodCallContext.RPAREN().getPayload()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitTypeCastParameters(final JavaLanguageParser.TypeCastParametersContext ctx) {\n-        final DetailAstImpl typeType = this.visit((ParseTree)ctx.typeType(0));\n-        for (int i = 0; i < ctx.BAND().size(); ++i) {\n-            addLastSibling(typeType, this.create(174, (Token)ctx.BAND(i).getPayload()));\n-            addLastSibling(typeType, this.visit((ParseTree)ctx.typeType(i + 1)));\n+    public DetailAstImpl visitTypeCastParameters(final JavaLanguageParser.TypeCastParametersContext typeCastParametersContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)typeCastParametersContext.typeType(0));\n+        for (int i = 0; i < typeCastParametersContext.BAND().size(); ++i) {\n+            addLastSibling(visit, this.create(174, (Token)typeCastParametersContext.BAND(i).getPayload()));\n+            addLastSibling(visit, this.visit((ParseTree)typeCastParametersContext.typeType(i + 1)));\n         }\n-        return typeType;\n+        return visit;\n     }\n     \n-    public DetailAstImpl visitSingleLambdaParam(final JavaLanguageParser.SingleLambdaParamContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitSingleLambdaParam(final JavaLanguageParser.SingleLambdaParamContext singleLambdaParamContext) {\n+        return this.flattenedTree((ParserRuleContext)singleLambdaParamContext);\n     }\n     \n-    public DetailAstImpl visitFormalLambdaParam(final JavaLanguageParser.FormalLambdaParamContext ctx) {\n-        final DetailAstImpl lparen = this.create(ctx.LPAREN());\n-        final DetailAstImpl parameters = (DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)ctx.formalParameterList())).orElseGet(() -> createImaginary(20));\n-        addLastSibling(lparen, parameters);\n-        addLastSibling(lparen, this.create(ctx.RPAREN()));\n-        return lparen;\n+    public DetailAstImpl visitFormalLambdaParam(final JavaLanguageParser.FormalLambdaParamContext formalLambdaParamContext) {\n+        final DetailAstImpl create = this.create(formalLambdaParamContext.LPAREN());\n+        addLastSibling(create, Optional.ofNullable(this.visit((ParseTree)formalLambdaParamContext.formalParameterList())).orElseGet(() -> createImaginary(20)));\n+        addLastSibling(create, this.create(formalLambdaParamContext.RPAREN()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitMultiLambdaParam(final JavaLanguageParser.MultiLambdaParamContext ctx) {\n-        final DetailAstImpl lparen = this.create(ctx.LPAREN());\n-        addLastSibling(lparen, this.visit((ParseTree)ctx.multiLambdaParams()));\n-        addLastSibling(lparen, this.create(ctx.RPAREN()));\n-        return lparen;\n+    public DetailAstImpl visitMultiLambdaParam(final JavaLanguageParser.MultiLambdaParamContext multiLambdaParamContext) {\n+        final DetailAstImpl create = this.create(multiLambdaParamContext.LPAREN());\n+        addLastSibling(create, this.visit((ParseTree)multiLambdaParamContext.multiLambdaParams()));\n+        addLastSibling(create, this.create(multiLambdaParamContext.RPAREN()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitMultiLambdaParams(final JavaLanguageParser.MultiLambdaParamsContext ctx) {\n-        final DetailAstImpl parameters = createImaginary(20);\n-        parameters.addChild((DetailAST)this.createLambdaParameter(ctx.id(0)));\n-        for (int i = 0; i < ctx.COMMA().size(); ++i) {\n-            parameters.addChild((DetailAST)this.create(ctx.COMMA(i)));\n-            parameters.addChild((DetailAST)this.createLambdaParameter(ctx.id(i + 1)));\n+    public DetailAstImpl visitMultiLambdaParams(final JavaLanguageParser.MultiLambdaParamsContext multiLambdaParamsContext) {\n+        final DetailAstImpl imaginary = createImaginary(20);\n+        imaginary.addChild((DetailAST)this.createLambdaParameter(multiLambdaParamsContext.id(0)));\n+        for (int i = 0; i < multiLambdaParamsContext.COMMA().size(); ++i) {\n+            imaginary.addChild((DetailAST)this.create(multiLambdaParamsContext.COMMA(i)));\n+            imaginary.addChild((DetailAST)this.createLambdaParameter(multiLambdaParamsContext.id(i + 1)));\n         }\n-        return parameters;\n+        return imaginary;\n     }\n     \n-    private DetailAstImpl createLambdaParameter(final JavaLanguageParser.IdContext ctx) {\n-        final DetailAstImpl ident = this.visitId(ctx);\n-        final DetailAstImpl parameter = createImaginary(21);\n-        final DetailAstImpl modifiers = createImaginary(5);\n-        final DetailAstImpl type = createImaginary(13);\n-        parameter.addChild((DetailAST)modifiers);\n-        parameter.addChild((DetailAST)type);\n-        parameter.addChild((DetailAST)ident);\n-        return parameter;\n+    private DetailAstImpl createLambdaParameter(final JavaLanguageParser.IdContext idContext) {\n+        final DetailAstImpl visitId = this.visitId(idContext);\n+        final DetailAstImpl imaginary = createImaginary(21);\n+        final DetailAstImpl imaginary2 = createImaginary(5);\n+        final DetailAstImpl imaginary3 = createImaginary(13);\n+        imaginary.addChild((DetailAST)imaginary2);\n+        imaginary.addChild((DetailAST)imaginary3);\n+        imaginary.addChild((DetailAST)visitId);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitParenPrimary(final JavaLanguageParser.ParenPrimaryContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitParenPrimary(final JavaLanguageParser.ParenPrimaryContext parenPrimaryContext) {\n+        return this.flattenedTree((ParserRuleContext)parenPrimaryContext);\n     }\n     \n-    public DetailAstImpl visitTokenPrimary(final JavaLanguageParser.TokenPrimaryContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitTokenPrimary(final JavaLanguageParser.TokenPrimaryContext tokenPrimaryContext) {\n+        return this.flattenedTree((ParserRuleContext)tokenPrimaryContext);\n     }\n     \n-    public DetailAstImpl visitClassRefPrimary(final JavaLanguageParser.ClassRefPrimaryContext ctx) {\n-        final DetailAstImpl dot = this.create(ctx.DOT());\n-        final DetailAstImpl primaryTypeNoArray = this.visit((ParseTree)ctx.type);\n-        dot.addChild((DetailAST)primaryTypeNoArray);\n-        if (TokenUtil.isOfType((DetailAST)primaryTypeNoArray, new int[] { 59 })) {\n-            ctx.arrayDeclarator().forEach(child -> primaryTypeNoArray.addChild((DetailAST)this.visit((ParseTree)child)));\n+    public DetailAstImpl visitClassRefPrimary(final JavaLanguageParser.ClassRefPrimaryContext classRefPrimaryContext) {\n+        final DetailAstImpl create = this.create(classRefPrimaryContext.DOT());\n+        final DetailAstImpl visit = this.visit((ParseTree)classRefPrimaryContext.type);\n+        create.addChild((DetailAST)visit);\n+        if (TokenUtil.isOfType((DetailAST)visit, new int[] { 59 })) {\n+            classRefPrimaryContext.arrayDeclarator().forEach(arrayDeclaratorContext -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)arrayDeclaratorContext)));\n         }\n         else {\n-            ctx.arrayDeclarator().forEach(child -> addLastSibling(primaryTypeNoArray, this.visit((ParseTree)child)));\n+            classRefPrimaryContext.arrayDeclarator().forEach(arrayDeclaratorContext2 -> addLastSibling(detailAstImpl2, this.visit((ParseTree)arrayDeclaratorContext2)));\n         }\n-        dot.addChild((DetailAST)this.create(ctx.LITERAL_CLASS()));\n-        return dot;\n+        create.addChild((DetailAST)this.create(classRefPrimaryContext.LITERAL_CLASS()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitPrimitivePrimary(final JavaLanguageParser.PrimitivePrimaryContext ctx) {\n-        final DetailAstImpl dot = this.create(ctx.DOT());\n-        final DetailAstImpl primaryTypeNoArray = this.visit((ParseTree)ctx.type);\n-        dot.addChild((DetailAST)primaryTypeNoArray);\n-        ctx.arrayDeclarator().forEach(child -> dot.addChild((DetailAST)this.visit((ParseTree)child)));\n-        dot.addChild((DetailAST)this.create(ctx.LITERAL_CLASS()));\n-        return dot;\n+    public DetailAstImpl visitPrimitivePrimary(final JavaLanguageParser.PrimitivePrimaryContext primitivePrimaryContext) {\n+        final DetailAstImpl create = this.create(primitivePrimaryContext.DOT());\n+        create.addChild((DetailAST)this.visit((ParseTree)primitivePrimaryContext.type));\n+        primitivePrimaryContext.arrayDeclarator().forEach(arrayDeclaratorContext -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)arrayDeclaratorContext)));\n+        create.addChild((DetailAST)this.create(primitivePrimaryContext.LITERAL_CLASS()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitCreator(final JavaLanguageParser.CreatorContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitCreator(final JavaLanguageParser.CreatorContext creatorContext) {\n+        return this.flattenedTree((ParserRuleContext)creatorContext);\n     }\n     \n-    public DetailAstImpl visitCreatedNameObject(final JavaLanguageParser.CreatedNameObjectContext ctx) {\n-        final JavaAstVisitor.DetailAstPair currentAST = new JavaAstVisitor.DetailAstPair();\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit((ParseTree)ctx.annotations()));\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit((ParseTree)ctx.id()));\n-        JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit((ParseTree)ctx.typeArgumentsOrDiamond()));\n-        for (final ParserRuleContext extendedContext : ctx.extended) {\n-            final DetailAstImpl dot = this.create(extendedContext.start);\n-            JavaAstVisitor.DetailAstPair.makeAstRoot(currentAST, dot);\n-            final List<ParseTree> childList = extendedContext.children.subList(1, extendedContext.children.size());\n-            this.processChildren(dot, childList);\n+    public DetailAstImpl visitCreatedNameObject(final JavaLanguageParser.CreatedNameObjectContext createdNameObjectContext) {\n+        final JavaAstVisitor.DetailAstPair detailAstPair = new JavaAstVisitor.DetailAstPair();\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)createdNameObjectContext.annotations()));\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)createdNameObjectContext.id()));\n+        JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)createdNameObjectContext.typeArgumentsOrDiamond()));\n+        for (final ParserRuleContext parserRuleContext : createdNameObjectContext.extended) {\n+            final DetailAstImpl create = this.create(parserRuleContext.start);\n+            JavaAstVisitor.DetailAstPair.makeAstRoot(detailAstPair, create);\n+            this.processChildren(create, parserRuleContext.children.subList(1, parserRuleContext.children.size()));\n         }\n-        return currentAST.root;\n+        return detailAstPair.root;\n     }\n     \n-    public DetailAstImpl visitCreatedNamePrimitive(final JavaLanguageParser.CreatedNamePrimitiveContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitCreatedNamePrimitive(final JavaLanguageParser.CreatedNamePrimitiveContext createdNamePrimitiveContext) {\n+        return this.flattenedTree((ParserRuleContext)createdNamePrimitiveContext);\n     }\n     \n-    public DetailAstImpl visitInnerCreator(final JavaLanguageParser.InnerCreatorContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitInnerCreator(final JavaLanguageParser.InnerCreatorContext innerCreatorContext) {\n+        return this.flattenedTree((ParserRuleContext)innerCreatorContext);\n     }\n     \n-    public DetailAstImpl visitArrayCreatorRest(final JavaLanguageParser.ArrayCreatorRestContext ctx) {\n-        final DetailAstImpl arrayDeclarator = this.create(17, (Token)ctx.LBRACK().getPayload());\n-        final JavaLanguageParser.ExpressionContext expression = ctx.expression();\n-        final TerminalNode rbrack = ctx.RBRACK();\n-        for (int i = 1; i < ctx.children.size(); ++i) {\n-            if (ctx.children.get(i) == rbrack) {\n-                arrayDeclarator.addChild((DetailAST)this.create(rbrack));\n+    public DetailAstImpl visitArrayCreatorRest(final JavaLanguageParser.ArrayCreatorRestContext arrayCreatorRestContext) {\n+        final DetailAstImpl create = this.create(17, (Token)arrayCreatorRestContext.LBRACK().getPayload());\n+        final JavaLanguageParser.ExpressionContext expression = arrayCreatorRestContext.expression();\n+        final TerminalNode rbrack = arrayCreatorRestContext.RBRACK();\n+        for (int i = 1; i < arrayCreatorRestContext.children.size(); ++i) {\n+            if (arrayCreatorRestContext.children.get(i) == rbrack) {\n+                create.addChild((DetailAST)this.create(rbrack));\n             }\n-            else if (ctx.children.get(i) == expression) {\n-                arrayDeclarator.addChild((DetailAST)this.visit((ParseTree)expression));\n+            else if (arrayCreatorRestContext.children.get(i) == expression) {\n+                create.addChild((DetailAST)this.visit((ParseTree)expression));\n             }\n             else {\n-                addLastSibling(arrayDeclarator, this.visit((ParseTree)ctx.children.get(i)));\n+                addLastSibling(create, this.visit((ParseTree)arrayCreatorRestContext.children.get(i)));\n             }\n         }\n-        return arrayDeclarator;\n+        return create;\n     }\n     \n-    public DetailAstImpl visitBracketsWithExp(final JavaLanguageParser.BracketsWithExpContext ctx) {\n-        final DetailAstImpl dummyRoot = new DetailAstImpl();\n-        dummyRoot.addChild((DetailAST)this.visit((ParseTree)ctx.annotations()));\n-        final DetailAstImpl arrayDeclarator = this.create(17, (Token)ctx.LBRACK().getPayload());\n-        arrayDeclarator.addChild((DetailAST)this.visit((ParseTree)ctx.expression()));\n-        arrayDeclarator.addChild((DetailAST)this.create(ctx.stop));\n-        dummyRoot.addChild((DetailAST)arrayDeclarator);\n-        return dummyRoot.getFirstChild();\n+    public DetailAstImpl visitBracketsWithExp(final JavaLanguageParser.BracketsWithExpContext bracketsWithExpContext) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        detailAstImpl.addChild((DetailAST)this.visit((ParseTree)bracketsWithExpContext.annotations()));\n+        final DetailAstImpl create = this.create(17, (Token)bracketsWithExpContext.LBRACK().getPayload());\n+        create.addChild((DetailAST)this.visit((ParseTree)bracketsWithExpContext.expression()));\n+        create.addChild((DetailAST)this.create(bracketsWithExpContext.stop));\n+        detailAstImpl.addChild((DetailAST)create);\n+        return detailAstImpl.getFirstChild();\n     }\n     \n-    public DetailAstImpl visitClassCreatorRest(final JavaLanguageParser.ClassCreatorRestContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitClassCreatorRest(final JavaLanguageParser.ClassCreatorRestContext classCreatorRestContext) {\n+        return this.flattenedTree((ParserRuleContext)classCreatorRestContext);\n     }\n     \n-    public DetailAstImpl visitDiamond(final JavaLanguageParser.DiamondContext ctx) {\n-        final DetailAstImpl typeArguments = createImaginary(163);\n-        typeArguments.addChild((DetailAST)this.create(172, (Token)ctx.LT().getPayload()));\n-        typeArguments.addChild((DetailAST)this.create(173, (Token)ctx.GT().getPayload()));\n-        return typeArguments;\n+    public DetailAstImpl visitDiamond(final JavaLanguageParser.DiamondContext diamondContext) {\n+        final DetailAstImpl imaginary = createImaginary(163);\n+        imaginary.addChild((DetailAST)this.create(172, (Token)diamondContext.LT().getPayload()));\n+        imaginary.addChild((DetailAST)this.create(173, (Token)diamondContext.GT().getPayload()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitTypeArgs(final JavaLanguageParser.TypeArgsContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitTypeArgs(final JavaLanguageParser.TypeArgsContext typeArgsContext) {\n+        return this.flattenedTree((ParserRuleContext)typeArgsContext);\n     }\n     \n-    public DetailAstImpl visitNonWildcardDiamond(final JavaLanguageParser.NonWildcardDiamondContext ctx) {\n-        final DetailAstImpl typeArguments = createImaginary(163);\n-        typeArguments.addChild((DetailAST)this.create(172, (Token)ctx.LT().getPayload()));\n-        typeArguments.addChild((DetailAST)this.create(173, (Token)ctx.GT().getPayload()));\n-        return typeArguments;\n+    public DetailAstImpl visitNonWildcardDiamond(final JavaLanguageParser.NonWildcardDiamondContext nonWildcardDiamondContext) {\n+        final DetailAstImpl imaginary = createImaginary(163);\n+        imaginary.addChild((DetailAST)this.create(172, (Token)nonWildcardDiamondContext.LT().getPayload()));\n+        imaginary.addChild((DetailAST)this.create(173, (Token)nonWildcardDiamondContext.GT().getPayload()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitNonWildcardTypeArguments(final JavaLanguageParser.NonWildcardTypeArgumentsContext ctx) {\n-        final DetailAstImpl typeArguments = createImaginary(163);\n-        typeArguments.addChild((DetailAST)this.create(172, (Token)ctx.LT().getPayload()));\n-        typeArguments.addChild((DetailAST)this.visit((ParseTree)ctx.typeArgumentsTypeList()));\n-        typeArguments.addChild((DetailAST)this.create(173, (Token)ctx.GT().getPayload()));\n-        return typeArguments;\n+    public DetailAstImpl visitNonWildcardTypeArguments(final JavaLanguageParser.NonWildcardTypeArgumentsContext nonWildcardTypeArgumentsContext) {\n+        final DetailAstImpl imaginary = createImaginary(163);\n+        imaginary.addChild((DetailAST)this.create(172, (Token)nonWildcardTypeArgumentsContext.LT().getPayload()));\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)nonWildcardTypeArgumentsContext.typeArgumentsTypeList()));\n+        imaginary.addChild((DetailAST)this.create(173, (Token)nonWildcardTypeArgumentsContext.GT().getPayload()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitTypeArgumentsTypeList(final JavaLanguageParser.TypeArgumentsTypeListContext ctx) {\n-        final DetailAstImpl firstIdent = this.visit((ParseTree)ctx.typeType(0));\n-        final DetailAstImpl firstTypeArgument = createImaginary(164);\n-        firstTypeArgument.addChild((DetailAST)firstIdent);\n-        for (int i = 0; i < ctx.COMMA().size(); ++i) {\n-            addLastSibling(firstTypeArgument, this.create(ctx.COMMA(i)));\n-            final DetailAstImpl ident = this.visit((ParseTree)ctx.typeType(i + 1));\n-            final DetailAstImpl typeArgument = createImaginary(164);\n-            typeArgument.addChild((DetailAST)ident);\n-            addLastSibling(firstTypeArgument, typeArgument);\n+    public DetailAstImpl visitTypeArgumentsTypeList(final JavaLanguageParser.TypeArgumentsTypeListContext typeArgumentsTypeListContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)typeArgumentsTypeListContext.typeType(0));\n+        final DetailAstImpl imaginary = createImaginary(164);\n+        imaginary.addChild((DetailAST)visit);\n+        for (int i = 0; i < typeArgumentsTypeListContext.COMMA().size(); ++i) {\n+            addLastSibling(imaginary, this.create(typeArgumentsTypeListContext.COMMA(i)));\n+            final DetailAstImpl visit2 = this.visit((ParseTree)typeArgumentsTypeListContext.typeType(i + 1));\n+            final DetailAstImpl imaginary2 = createImaginary(164);\n+            imaginary2.addChild((DetailAST)visit2);\n+            addLastSibling(imaginary, imaginary2);\n         }\n-        return firstTypeArgument;\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitTypeList(final JavaLanguageParser.TypeListContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitTypeList(final JavaLanguageParser.TypeListContext typeListContext) {\n+        return this.flattenedTree((ParserRuleContext)typeListContext);\n     }\n     \n-    public DetailAstImpl visitTypeType(final JavaLanguageParser.TypeTypeContext ctx) {\n-        final DetailAstImpl type = createImaginary(13);\n-        this.processChildren(type, ctx.children);\n-        DetailAstImpl returnTree;\n-        if (ctx.createImaginaryNode) {\n-            returnTree = type;\n+    public DetailAstImpl visitTypeType(final JavaLanguageParser.TypeTypeContext typeTypeContext) {\n+        final DetailAstImpl imaginary = createImaginary(13);\n+        this.processChildren(imaginary, typeTypeContext.children);\n+        DetailAstImpl firstChild;\n+        if (typeTypeContext.createImaginaryNode) {\n+            firstChild = imaginary;\n         }\n         else {\n-            returnTree = type.getFirstChild();\n+            firstChild = imaginary.getFirstChild();\n         }\n-        return returnTree;\n+        return firstChild;\n     }\n     \n-    public DetailAstImpl visitArrayDeclarator(final JavaLanguageParser.ArrayDeclaratorContext ctx) {\n-        final DetailAstImpl arrayDeclarator = this.create(17, (Token)ctx.LBRACK().getPayload());\n-        arrayDeclarator.addChild((DetailAST)this.create(ctx.RBRACK()));\n-        final DetailAstImpl annotations = this.visit((ParseTree)ctx.anno);\n-        DetailAstImpl returnTree;\n-        if (annotations == null) {\n-            returnTree = arrayDeclarator;\n+    public DetailAstImpl visitArrayDeclarator(final JavaLanguageParser.ArrayDeclaratorContext arrayDeclaratorContext) {\n+        final DetailAstImpl create = this.create(17, (Token)arrayDeclaratorContext.LBRACK().getPayload());\n+        create.addChild((DetailAST)this.create(arrayDeclaratorContext.RBRACK()));\n+        final DetailAstImpl visit = this.visit((ParseTree)arrayDeclaratorContext.anno);\n+        DetailAstImpl detailAstImpl;\n+        if (visit == null) {\n+            detailAstImpl = create;\n         }\n         else {\n-            returnTree = annotations;\n-            addLastSibling(returnTree, arrayDeclarator);\n+            detailAstImpl = visit;\n+            addLastSibling(detailAstImpl, create);\n         }\n-        return returnTree;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitPrimitiveType(final JavaLanguageParser.PrimitiveTypeContext ctx) {\n-        return this.create(ctx.start);\n+    public DetailAstImpl visitPrimitiveType(final JavaLanguageParser.PrimitiveTypeContext primitiveTypeContext) {\n+        return this.create(primitiveTypeContext.start);\n     }\n     \n-    public DetailAstImpl visitTypeArguments(final JavaLanguageParser.TypeArgumentsContext ctx) {\n-        final DetailAstImpl typeArguments = createImaginary(163);\n-        typeArguments.addChild((DetailAST)this.create(172, (Token)ctx.LT().getPayload()));\n-        this.processChildren(typeArguments, ctx.children.subList(1, ctx.children.size() - 1));\n-        typeArguments.addChild((DetailAST)this.create(173, (Token)ctx.GT().getPayload()));\n-        return typeArguments;\n+    public DetailAstImpl visitTypeArguments(final JavaLanguageParser.TypeArgumentsContext typeArgumentsContext) {\n+        final DetailAstImpl imaginary = createImaginary(163);\n+        imaginary.addChild((DetailAST)this.create(172, (Token)typeArgumentsContext.LT().getPayload()));\n+        this.processChildren(imaginary, typeArgumentsContext.children.subList(1, typeArgumentsContext.children.size() - 1));\n+        imaginary.addChild((DetailAST)this.create(173, (Token)typeArgumentsContext.GT().getPayload()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitSuperSuffixDot(final JavaLanguageParser.SuperSuffixDotContext ctx) {\n-        DetailAstImpl root;\n-        if (ctx.LPAREN() == null) {\n-            root = this.create(ctx.DOT());\n-            root.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n+    public DetailAstImpl visitSuperSuffixDot(final JavaLanguageParser.SuperSuffixDotContext superSuffixDotContext) {\n+        DetailAstImpl detailAstImpl;\n+        if (superSuffixDotContext.LPAREN() == null) {\n+            detailAstImpl = this.create(superSuffixDotContext.DOT());\n+            detailAstImpl.addChild((DetailAST)this.visit((ParseTree)superSuffixDotContext.id()));\n         }\n         else {\n-            root = this.create(27, (Token)ctx.LPAREN().getPayload());\n-            final DetailAstImpl dot = this.create(ctx.DOT());\n-            dot.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n-            root.addChild((DetailAST)dot);\n-            final DetailAstImpl expressionList = (DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)ctx.expressionList())).orElseGet(() -> createImaginary(34));\n-            root.addChild((DetailAST)expressionList);\n-            root.addChild((DetailAST)this.create(ctx.RPAREN()));\n+            detailAstImpl = this.create(27, (Token)superSuffixDotContext.LPAREN().getPayload());\n+            final DetailAstImpl create = this.create(superSuffixDotContext.DOT());\n+            create.addChild((DetailAST)this.visit((ParseTree)superSuffixDotContext.id()));\n+            detailAstImpl.addChild((DetailAST)create);\n+            detailAstImpl.addChild((DetailAST)(DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)superSuffixDotContext.expressionList())).orElseGet(() -> createImaginary(34)));\n+            detailAstImpl.addChild((DetailAST)this.create(superSuffixDotContext.RPAREN()));\n         }\n-        return root;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitArguments(final JavaLanguageParser.ArgumentsContext ctx) {\n-        final DetailAstImpl lparen = this.create(ctx.LPAREN());\n-        final DetailAstImpl expressionList = (DetailAstImpl)Optional.ofNullable(this.visit((ParseTree)ctx.expressionList())).orElseGet(() -> createImaginary(34));\n-        addLastSibling(lparen, expressionList);\n-        addLastSibling(lparen, this.create(ctx.RPAREN()));\n-        return lparen;\n+    public DetailAstImpl visitArguments(final JavaLanguageParser.ArgumentsContext argumentsContext) {\n+        final DetailAstImpl create = this.create(argumentsContext.LPAREN());\n+        addLastSibling(create, Optional.ofNullable(this.visit((ParseTree)argumentsContext.expressionList())).orElseGet(() -> createImaginary(34)));\n+        addLastSibling(create, this.create(argumentsContext.RPAREN()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitPattern(final JavaLanguageParser.PatternContext ctx) {\n-        final JavaLanguageParser.InnerPatternContext innerPattern = ctx.innerPattern();\n-        final ParserRuleContext primaryPattern = (ParserRuleContext)innerPattern.primaryPattern();\n-        final ParserRuleContext recordPattern = (ParserRuleContext)innerPattern.recordPattern();\n-        final boolean isSimpleTypePattern = primaryPattern != null && primaryPattern.getChild(0) instanceof JavaLanguageParser.TypePatternContext;\n-        DetailAstImpl pattern;\n+    public DetailAstImpl visitPattern(final JavaLanguageParser.PatternContext patternContext) {\n+        final JavaLanguageParser.InnerPatternContext innerPattern = patternContext.innerPattern();\n+        final JavaLanguageParser.PrimaryPatternContext primaryPattern = innerPattern.primaryPattern();\n+        final JavaLanguageParser.RecordPatternContext recordPattern = innerPattern.recordPattern();\n+        final boolean b = primaryPattern != null && ((ParserRuleContext)primaryPattern).getChild(0) instanceof JavaLanguageParser.TypePatternContext;\n+        DetailAstImpl detailAstImpl;\n         if (recordPattern != null) {\n-            pattern = this.visit((ParseTree)recordPattern);\n+            detailAstImpl = this.visit((ParseTree)recordPattern);\n         }\n-        else if (isSimpleTypePattern) {\n-            pattern = this.visit((ParseTree)primaryPattern);\n+        else if (b) {\n+            detailAstImpl = this.visit((ParseTree)primaryPattern);\n         }\n         else {\n-            pattern = createImaginary(213);\n-            pattern.addChild((DetailAST)this.visit(ctx.getChild(0)));\n+            detailAstImpl = createImaginary(213);\n+            detailAstImpl.addChild((DetailAST)this.visit(patternContext.getChild(0)));\n         }\n-        return pattern;\n+        return detailAstImpl;\n     }\n     \n-    public DetailAstImpl visitInnerPattern(final JavaLanguageParser.InnerPatternContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitInnerPattern(final JavaLanguageParser.InnerPatternContext innerPatternContext) {\n+        return this.flattenedTree((ParserRuleContext)innerPatternContext);\n     }\n     \n-    public DetailAstImpl visitGuardedPattern(final JavaLanguageParser.GuardedPatternContext ctx) {\n-        final DetailAstImpl guardAstNode = this.flattenedTree((ParserRuleContext)ctx.guard());\n-        guardAstNode.addChild((DetailAST)this.visit((ParseTree)ctx.primaryPattern()));\n-        guardAstNode.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n-        return guardAstNode;\n+    public DetailAstImpl visitGuardedPattern(final JavaLanguageParser.GuardedPatternContext guardedPatternContext) {\n+        final DetailAstImpl flattenedTree = this.flattenedTree((ParserRuleContext)guardedPatternContext.guard());\n+        flattenedTree.addChild((DetailAST)this.visit((ParseTree)guardedPatternContext.primaryPattern()));\n+        flattenedTree.addChild((DetailAST)this.visit((ParseTree)guardedPatternContext.expr()));\n+        return flattenedTree;\n     }\n     \n-    public DetailAstImpl visitParenPattern(final JavaLanguageParser.ParenPatternContext ctx) {\n-        final DetailAstImpl lparen = this.create(ctx.LPAREN());\n-        final ParseTree innerPattern = ctx.getChild(1);\n-        lparen.addChild((DetailAST)this.visit(innerPattern));\n-        lparen.addChild((DetailAST)this.create(ctx.RPAREN()));\n-        return lparen;\n+    public DetailAstImpl visitParenPattern(final JavaLanguageParser.ParenPatternContext parenPatternContext) {\n+        final DetailAstImpl create = this.create(parenPatternContext.LPAREN());\n+        create.addChild((DetailAST)this.visit(parenPatternContext.getChild(1)));\n+        create.addChild((DetailAST)this.create(parenPatternContext.RPAREN()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitRecordPatternDef(final JavaLanguageParser.RecordPatternDefContext ctx) {\n-        return this.flattenedTree((ParserRuleContext)ctx);\n+    public DetailAstImpl visitRecordPatternDef(final JavaLanguageParser.RecordPatternDefContext recordPatternDefContext) {\n+        return this.flattenedTree((ParserRuleContext)recordPatternDefContext);\n     }\n     \n-    public DetailAstImpl visitTypePattern(final JavaLanguageParser.TypePatternContext ctx) {\n-        final DetailAstImpl type = this.visit((ParseTree)ctx.type);\n-        final DetailAstImpl patternVariableDef = createImaginary(198);\n-        patternVariableDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        patternVariableDef.addChild((DetailAST)type);\n-        patternVariableDef.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n-        return patternVariableDef;\n+    public DetailAstImpl visitTypePattern(final JavaLanguageParser.TypePatternContext typePatternContext) {\n+        final DetailAstImpl visit = this.visit((ParseTree)typePatternContext.type);\n+        final DetailAstImpl imaginary = createImaginary(198);\n+        imaginary.addChild((DetailAST)this.createModifiers(typePatternContext.mods));\n+        imaginary.addChild((DetailAST)visit);\n+        imaginary.addChild((DetailAST)this.visit((ParseTree)typePatternContext.id()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitRecordPattern(final JavaLanguageParser.RecordPatternContext ctx) {\n-        final DetailAstImpl recordPattern = createImaginary(215);\n-        recordPattern.addChild((DetailAST)this.createModifiers(ctx.mods));\n-        this.processChildren(recordPattern, ctx.children.subList(ctx.mods.size(), ctx.children.size()));\n-        return recordPattern;\n+    public DetailAstImpl visitRecordPattern(final JavaLanguageParser.RecordPatternContext recordPatternContext) {\n+        final DetailAstImpl imaginary = createImaginary(215);\n+        imaginary.addChild((DetailAST)this.createModifiers(recordPatternContext.mods));\n+        this.processChildren(imaginary, recordPatternContext.children.subList(recordPatternContext.mods.size(), recordPatternContext.children.size()));\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitRecordComponentPatternList(final JavaLanguageParser.RecordComponentPatternListContext ctx) {\n-        final DetailAstImpl recordComponents = createImaginary(216);\n-        this.processChildren(recordComponents, ctx.children);\n-        return recordComponents;\n+    public DetailAstImpl visitRecordComponentPatternList(final JavaLanguageParser.RecordComponentPatternListContext recordComponentPatternListContext) {\n+        final DetailAstImpl imaginary = createImaginary(216);\n+        this.processChildren(imaginary, recordComponentPatternListContext.children);\n+        return imaginary;\n     }\n     \n-    public DetailAstImpl visitPermittedSubclassesAndInterfaces(final JavaLanguageParser.PermittedSubclassesAndInterfacesContext ctx) {\n-        final DetailAstImpl literalPermits = this.create(212, (Token)ctx.LITERAL_PERMITS().getPayload());\n-        this.processChildren(literalPermits, ctx.children.subList(1, ctx.children.size()));\n-        return literalPermits;\n+    public DetailAstImpl visitPermittedSubclassesAndInterfaces(final JavaLanguageParser.PermittedSubclassesAndInterfacesContext permittedSubclassesAndInterfacesContext) {\n+        final DetailAstImpl create = this.create(212, (Token)permittedSubclassesAndInterfacesContext.LITERAL_PERMITS().getPayload());\n+        this.processChildren(create, permittedSubclassesAndInterfacesContext.children.subList(1, permittedSubclassesAndInterfacesContext.children.size()));\n+        return create;\n     }\n     \n-    public DetailAstImpl visitId(final JavaLanguageParser.IdContext ctx) {\n-        return this.create(58, ctx.start);\n+    public DetailAstImpl visitId(final JavaLanguageParser.IdContext idContext) {\n+        return this.create(58, idContext.start);\n     }\n     \n-    private DetailAstImpl flattenedTree(final ParserRuleContext ctx) {\n-        final DetailAstImpl dummyNode = new DetailAstImpl();\n-        this.processChildren(dummyNode, ctx.children);\n-        return dummyNode.getFirstChild();\n+    private DetailAstImpl flattenedTree(final ParserRuleContext parserRuleContext) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        this.processChildren(detailAstImpl, parserRuleContext.children);\n+        return detailAstImpl.getFirstChild();\n     }\n     \n-    private void processChildren(final DetailAstImpl parent, final List<? extends ParseTree> children) {\n-        children.forEach(child -> {\n-            if (child instanceof TerminalNode) {\n-                parent.addChild((DetailAST)this.create((TerminalNode)child));\n+    private void processChildren(final DetailAstImpl detailAstImpl, final List<? extends ParseTree> list) {\n+        list.forEach(parseTree -> {\n+            if (parseTree instanceof TerminalNode) {\n+                detailAstImpl2.addChild((DetailAST)this.create((TerminalNode)parseTree));\n             }\n             else {\n-                parent.addChild((DetailAST)this.visit(child));\n+                detailAstImpl2.addChild((DetailAST)this.visit(parseTree));\n             }\n         });\n     }\n     \n-    private static DetailAstImpl createImaginary(final int tokenType) {\n-        final DetailAstImpl detailAst = new DetailAstImpl();\n-        detailAst.setType(tokenType);\n-        detailAst.setText(TokenUtil.getTokenName(tokenType));\n-        return detailAst;\n+    private static DetailAstImpl createImaginary(final int type) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        detailAstImpl.setType(type);\n+        detailAstImpl.setText(TokenUtil.getTokenName(type));\n+        return detailAstImpl;\n     }\n     \n-    private DetailAstImpl create(final int tokenType, final Token startToken) {\n-        final DetailAstImpl ast = this.create(startToken);\n-        ast.setType(tokenType);\n-        return ast;\n+    private DetailAstImpl create(final int type, final Token token) {\n+        final DetailAstImpl create = this.create(token);\n+        create.setType(type);\n+        return create;\n     }\n     \n     private DetailAstImpl create(final Token token) {\n         final int tokenIndex = token.getTokenIndex();\n-        final List<Token> tokensToLeft = this.tokens.getHiddenTokensToLeft(tokenIndex, 2);\n-        final List<Token> tokensToRight = this.tokens.getHiddenTokensToRight(tokenIndex, 2);\n-        final DetailAstImpl detailAst = new DetailAstImpl();\n-        detailAst.initialize(token);\n-        if (tokensToLeft != null) {\n-            detailAst.setHiddenBefore((List)tokensToLeft);\n+        final List hiddenTokensToLeft = this.tokens.getHiddenTokensToLeft(tokenIndex, 2);\n+        final List hiddenTokensToRight = this.tokens.getHiddenTokensToRight(tokenIndex, 2);\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        detailAstImpl.initialize(token);\n+        if (hiddenTokensToLeft != null) {\n+            detailAstImpl.setHiddenBefore(hiddenTokensToLeft);\n         }\n-        if (tokensToRight != null) {\n-            detailAst.setHiddenAfter((List)tokensToRight);\n+        if (hiddenTokensToRight != null) {\n+            detailAstImpl.setHiddenAfter(hiddenTokensToRight);\n         }\n-        return detailAst;\n+        return detailAstImpl;\n     }\n     \n-    private DetailAstImpl create(final TerminalNode node) {\n-        return this.create((Token)node.getPayload());\n+    private DetailAstImpl create(final TerminalNode terminalNode) {\n+        return this.create((Token)terminalNode.getPayload());\n     }\n     \n-    private DetailAstImpl createTypeDeclaration(final ParserRuleContext ctx, final int type, final List<? extends ParseTree> modifierList) {\n-        final DetailAstImpl typeDeclaration = createImaginary(type);\n-        typeDeclaration.addChild((DetailAST)this.createModifiers(modifierList));\n-        this.processChildren(typeDeclaration, ctx.children);\n-        return typeDeclaration;\n+    private DetailAstImpl createTypeDeclaration(final ParserRuleContext parserRuleContext, final int n, final List<? extends ParseTree> list) {\n+        final DetailAstImpl imaginary = createImaginary(n);\n+        imaginary.addChild((DetailAST)this.createModifiers(list));\n+        this.processChildren(imaginary, parserRuleContext.children);\n+        return imaginary;\n     }\n     \n-    private DetailAstImpl createModifiers(final List<? extends ParseTree> modifierList) {\n-        final DetailAstImpl mods = createImaginary(5);\n-        this.processChildren(mods, modifierList);\n-        return mods;\n+    private DetailAstImpl createModifiers(final List<? extends ParseTree> list) {\n+        final DetailAstImpl imaginary = createImaginary(5);\n+        this.processChildren(imaginary, list);\n+        return imaginary;\n     }\n     \n-    private static void addLastSibling(final DetailAstImpl self, final DetailAstImpl sibling) {\n-        DetailAstImpl nextSibling = self;\n-        if (nextSibling != null) {\n-            while (nextSibling.getNextSibling() != null) {\n-                nextSibling = nextSibling.getNextSibling();\n+    private static void addLastSibling(final DetailAstImpl detailAstImpl, final DetailAstImpl nextSibling) {\n+        DetailAstImpl nextSibling2 = detailAstImpl;\n+        if (nextSibling2 != null) {\n+            while (nextSibling2.getNextSibling() != null) {\n+                nextSibling2 = nextSibling2.getNextSibling();\n             }\n-            nextSibling.setNextSibling((DetailAST)sibling);\n+            nextSibling2.setNextSibling((DetailAST)nextSibling);\n         }\n     }\n     \n-    public DetailAstImpl visit(final ParseTree tree) {\n-        DetailAstImpl ast = null;\n-        if (tree != null) {\n-            ast = (DetailAstImpl)tree.accept((ParseTreeVisitor)this);\n+    public DetailAstImpl visit(final ParseTree parseTree) {\n+        DetailAstImpl detailAstImpl = null;\n+        if (parseTree != null) {\n+            detailAstImpl = (DetailAstImpl)parseTree.accept((ParseTreeVisitor)this);\n         }\n-        return ast;\n+        return detailAstImpl;\n     }\n     \n-    private DetailAstImpl buildExpressionNode(final ParseTree exprNode) {\n-        final DetailAstImpl expression = this.visit(exprNode);\n-        DetailAstImpl exprRoot;\n-        if (TokenUtil.isOfType((DetailAST)expression, JavaAstVisitor.EXPRESSIONS_WITH_NO_EXPR_ROOT)) {\n-            exprRoot = expression;\n+    private DetailAstImpl buildExpressionNode(final ParseTree parseTree) {\n+        final DetailAstImpl visit = this.visit(parseTree);\n+        DetailAstImpl imaginary;\n+        if (TokenUtil.isOfType((DetailAST)visit, JavaAstVisitor.EXPRESSIONS_WITH_NO_EXPR_ROOT)) {\n+            imaginary = visit;\n         }\n         else {\n-            exprRoot = createImaginary(28);\n-            exprRoot.addChild((DetailAST)expression);\n+            imaginary = createImaginary(28);\n+            imaginary.addChild((DetailAST)visit);\n         }\n-        return exprRoot;\n+        return imaginary;\n     }\n     \n     static {\n         EXPRESSIONS_WITH_NO_EXPR_ROOT = new int[] { 43, 42, 181 };\n     }\n }\n"}]}
