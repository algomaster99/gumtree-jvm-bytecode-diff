{"diffoscope-json-version": 1, "source1": "first/CleaningPathVisitor.class", "source2": "second/CleaningPathVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,61 +19,57 @@\n         return new CleaningPathVisitor(Counters.bigIntegerPathCounters(), new String[0]);\n     }\n     \n     public static CountingPathVisitor withLongCounters() {\n         return new CleaningPathVisitor(Counters.longPathCounters(), new String[0]);\n     }\n     \n-    public CleaningPathVisitor(final Counters.PathCounters pathCounter, final DeleteOption[] deleteOption, final String... skip) {\n-        super(pathCounter);\n-        final String[] temp = (skip != null) ? ((String[])skip.clone()) : CleaningPathVisitor.EMPTY_STRING_ARRAY;\n-        Arrays.sort(temp);\n-        this.skip = temp;\n-        this.overrideReadOnly = StandardDeleteOption.overrideReadOnly(deleteOption);\n+    public CleaningPathVisitor(final Counters.PathCounters pathCounters, final DeleteOption[] array, final String... array2) {\n+        super(pathCounters);\n+        final String[] array3 = (array2 != null) ? ((String[])array2.clone()) : CleaningPathVisitor.EMPTY_STRING_ARRAY;\n+        Arrays.sort(array3);\n+        this.skip = array3;\n+        this.overrideReadOnly = StandardDeleteOption.overrideReadOnly(array);\n     }\n     \n-    public CleaningPathVisitor(final Counters.PathCounters pathCounter, final String... skip) {\n-        this(pathCounter, PathUtils.EMPTY_DELETE_OPTION_ARRAY, skip);\n+    public CleaningPathVisitor(final Counters.PathCounters pathCounters, final String... array) {\n+        this(pathCounters, PathUtils.EMPTY_DELETE_OPTION_ARRAY, array);\n     }\n     \n     private boolean accept(final Path path) {\n         return Arrays.binarySearch(this.skip, Objects.toString(path.getFileName(), null)) < 0;\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!super.equals(obj)) {\n+        if (!super.equals(o)) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final CleaningPathVisitor other = (CleaningPathVisitor)obj;\n-        return this.overrideReadOnly == other.overrideReadOnly && Arrays.equals(this.skip, other.skip);\n+        final CleaningPathVisitor cleaningPathVisitor = (CleaningPathVisitor)o;\n+        return this.overrideReadOnly == cleaningPathVisitor.overrideReadOnly && Arrays.equals(this.skip, cleaningPathVisitor.skip);\n     }\n     \n     public int hashCode() {\n-        final int prime = 31;\n-        int result = super.hashCode();\n-        result = 31 * result + Arrays.hashCode(this.skip);\n-        result = 31 * result + Objects.hash(Boolean.valueOf(this.overrideReadOnly));\n-        return result;\n+        return 31 * (31 * super.hashCode() + Arrays.hashCode(this.skip)) + Objects.hash(Boolean.valueOf(this.overrideReadOnly));\n     }\n     \n-    public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attributes) throws IOException {\n-        super.preVisitDirectory((Object)dir, attributes);\n-        return this.accept(dir) ? FileVisitResult.CONTINUE : FileVisitResult.SKIP_SUBTREE;\n+    public FileVisitResult preVisitDirectory(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        super.preVisitDirectory((Object)path, basicFileAttributes);\n+        return this.accept(path) ? FileVisitResult.CONTINUE : FileVisitResult.SKIP_SUBTREE;\n     }\n     \n-    public FileVisitResult visitFile(final Path file, final BasicFileAttributes attributes) throws IOException {\n-        if (this.accept(file) && Files.exists(file, LinkOption.NOFOLLOW_LINKS)) {\n+    public FileVisitResult visitFile(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        if (this.accept(path) && Files.exists(path, LinkOption.NOFOLLOW_LINKS)) {\n             if (this.overrideReadOnly) {\n-                PathUtils.setReadOnly(file, false, new LinkOption[] { LinkOption.NOFOLLOW_LINKS });\n+                PathUtils.setReadOnly(path, false, new LinkOption[] { LinkOption.NOFOLLOW_LINKS });\n             }\n-            Files.deleteIfExists(file);\n+            Files.deleteIfExists(path);\n         }\n-        this.updateFileCounters(file, attributes);\n+        this.updateFileCounters(path, basicFileAttributes);\n         return FileVisitResult.CONTINUE;\n     }\n }\n"}]}
