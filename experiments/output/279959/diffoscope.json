{"diffoscope-json-version": 1, "source1": "first/CombinedConfigurationBuilder$ConfigurationSourceData.class", "source2": "second/CombinedConfigurationBuilder$ConfigurationSourceData.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,46 +34,47 @@\n         this.overrideBuilders = new ArrayList();\n         this.unionBuilders = new ArrayList();\n         this.namedBuilders = new HashMap();\n         this.allBuilders = new LinkedList();\n         this.changeListener = this.createBuilderChangeListener();\n     }\n     \n-    public void initFromDefinitionConfiguration(final HierarchicalConfiguration<?> config) throws ConfigurationException {\n-        this.overrideDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)this.fetchTopLevelOverrideConfigs((HierarchicalConfiguration)config)));\n-        this.overrideDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)config.childConfigurationsAt(\"override\")));\n-        this.unionDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)config.childConfigurationsAt(\"additional\")));\n+    public void initFromDefinitionConfiguration(final HierarchicalConfiguration<?> hierarchicalConfiguration) throws ConfigurationException {\n+        this.overrideDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)this.fetchTopLevelOverrideConfigs((HierarchicalConfiguration)hierarchicalConfiguration)));\n+        this.overrideDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)hierarchicalConfiguration.childConfigurationsAt(\"override\")));\n+        this.unionDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)hierarchicalConfiguration.childConfigurationsAt(\"additional\")));\n     }\n     \n-    public List<ConfigurationBuilder<? extends Configuration>> createAndAddConfigurations(final CombinedConfiguration ccResult, final List<ConfigurationDeclaration> srcDecl, final List<ConfigurationBuilder<? extends Configuration>> builders) throws ConfigurationException {\n-        final boolean createBuilders = builders.isEmpty();\n-        List<ConfigurationBuilder<? extends Configuration>> newBuilders;\n-        if (createBuilders) {\n-            newBuilders = new ArrayList<ConfigurationBuilder<? extends Configuration>>(srcDecl.size());\n+    public List<ConfigurationBuilder<? extends Configuration>> createAndAddConfigurations(final CombinedConfiguration combinedConfiguration, final List<ConfigurationDeclaration> list, final List<ConfigurationBuilder<? extends Configuration>> list2) throws ConfigurationException {\n+        final boolean empty = list2.isEmpty();\n+        ArrayList list3;\n+        if (empty) {\n+            list3 = new ArrayList(list.size());\n         }\n         else {\n-            newBuilders = builders;\n+            list3 = (ArrayList)list2;\n         }\n-        for (int i = 0; i < srcDecl.size(); ++i) {\n-            ConfigurationBuilder<? extends Configuration> b;\n-            if (createBuilders) {\n-                b = (ConfigurationBuilder<? extends Configuration>)this.createConfigurationBuilder(srcDecl.get(i));\n-                newBuilders.add(b);\n+        for (int i = 0; i < list.size(); ++i) {\n+            ConfigurationBuilder configurationBuilder;\n+            if (empty) {\n+                configurationBuilder = this.createConfigurationBuilder(list.get(i));\n+                list3.add(configurationBuilder);\n             }\n             else {\n-                b = builders.get(i);\n+                configurationBuilder = (ConfigurationBuilder)list2.get(i);\n             }\n-            this.addChildConfiguration(ccResult, (ConfigurationDeclaration)srcDecl.get(i), (ConfigurationBuilder)b);\n+            this.addChildConfiguration(combinedConfiguration, (ConfigurationDeclaration)list.get(i), configurationBuilder);\n         }\n-        return newBuilders;\n+        return list3;\n     }\n     \n     public void cleanUp() {\n-        for (final ConfigurationBuilder<?> b : this.getChildBuilders()) {\n-            b.removeEventListener(ConfigurationBuilderEvent.RESET, this.changeListener);\n+        final Iterator iterator = this.getChildBuilders().iterator();\n+        while (iterator.hasNext()) {\n+            ((ConfigurationBuilder)iterator.next()).removeEventListener(ConfigurationBuilderEvent.RESET, this.changeListener);\n         }\n         this.namedBuilders.clear();\n     }\n     \n     public Collection<ConfigurationBuilder<? extends Configuration>> getChildBuilders() {\n         return this.allBuilders;\n     }\n@@ -82,59 +83,60 @@\n         return this.overrideDeclarations;\n     }\n     \n     public List<ConfigurationDeclaration> getUnionSources() {\n         return this.unionDeclarations;\n     }\n     \n-    public ConfigurationBuilder<? extends Configuration> getNamedBuilder(final String name) {\n-        return (ConfigurationBuilder<? extends Configuration>)this.namedBuilders.get(name);\n+    public ConfigurationBuilder<? extends Configuration> getNamedBuilder(final String s) {\n+        return (ConfigurationBuilder<? extends Configuration>)this.namedBuilders.get(s);\n     }\n     \n     public Set<String> builderNames() {\n         return this.namedBuilders.keySet();\n     }\n     \n-    private ConfigurationBuilder<? extends Configuration> createConfigurationBuilder(final ConfigurationDeclaration decl) throws ConfigurationException {\n-        final ConfigurationBuilderProvider provider = this.this$0.providerForTag(decl.getConfiguration().getRootElementName());\n-        if (provider == null) {\n-            throw new ConfigurationException(\"Unsupported configuration source: \" + decl.getConfiguration().getRootElementName());\n+    private ConfigurationBuilder<? extends Configuration> createConfigurationBuilder(final ConfigurationDeclaration configurationDeclaration) throws ConfigurationException {\n+        final ConfigurationBuilderProvider providerForTag = this.this$0.providerForTag(configurationDeclaration.getConfiguration().getRootElementName());\n+        if (providerForTag == null) {\n+            throw new ConfigurationException(\"Unsupported configuration source: \" + configurationDeclaration.getConfiguration().getRootElementName());\n         }\n-        final ConfigurationBuilder<? extends Configuration> builder = (ConfigurationBuilder<? extends Configuration>)provider.getConfigurationBuilder(decl);\n-        if (decl.getName() != null) {\n-            this.namedBuilders.put(decl.getName(), builder);\n+        final ConfigurationBuilder configurationBuilder = providerForTag.getConfigurationBuilder(configurationDeclaration);\n+        if (configurationDeclaration.getName() != null) {\n+            this.namedBuilders.put(configurationDeclaration.getName(), configurationBuilder);\n         }\n-        this.allBuilders.add(builder);\n-        builder.addEventListener(ConfigurationBuilderEvent.RESET, this.changeListener);\n-        return builder;\n+        this.allBuilders.add(configurationBuilder);\n+        configurationBuilder.addEventListener(ConfigurationBuilderEvent.RESET, this.changeListener);\n+        return (ConfigurationBuilder<? extends Configuration>)configurationBuilder;\n     }\n     \n-    private void addChildConfiguration(final CombinedConfiguration ccResult, final ConfigurationDeclaration decl, final ConfigurationBuilder<? extends Configuration> builder) throws ConfigurationException {\n+    private void addChildConfiguration(final CombinedConfiguration combinedConfiguration, final ConfigurationDeclaration configurationDeclaration, final ConfigurationBuilder<? extends Configuration> configurationBuilder) throws ConfigurationException {\n         try {\n-            ccResult.addConfiguration((Configuration)builder.getConfiguration(), decl.getName(), decl.getAt());\n+            combinedConfiguration.addConfiguration((Configuration)configurationBuilder.getConfiguration(), configurationDeclaration.getName(), configurationDeclaration.getAt());\n         }\n-        catch (final ConfigurationException cex) {\n-            if (!decl.isOptional()) {\n-                throw cex;\n+        catch (final ConfigurationException ex) {\n+            if (!configurationDeclaration.isOptional()) {\n+                throw ex;\n             }\n         }\n     }\n     \n     private EventListener<ConfigurationBuilderEvent> createBuilderChangeListener() {\n         return (EventListener<ConfigurationBuilderEvent>)this::lambda$createBuilderChangeListener$0;\n     }\n     \n-    private List<? extends HierarchicalConfiguration<?>> fetchTopLevelOverrideConfigs(final HierarchicalConfiguration<?> config) {\n-        final List<? extends HierarchicalConfiguration<?>> configs = config.childConfigurationsAt((String)null);\n-        final Iterator<? extends HierarchicalConfiguration<?>> it = configs.iterator();\n-        while (it.hasNext()) {\n-            final String nodeName = ((HierarchicalConfiguration)it.next()).getRootElementName();\n-            for (final String element : CombinedConfigurationBuilder.CONFIG_SECTIONS) {\n-                if (element.equals(nodeName)) {\n-                    it.remove();\n+    private List<? extends HierarchicalConfiguration<?>> fetchTopLevelOverrideConfigs(final HierarchicalConfiguration<?> hierarchicalConfiguration) {\n+        final List childConfigurations = hierarchicalConfiguration.childConfigurationsAt((String)null);\n+        final Iterator iterator = childConfigurations.iterator();\n+        while (iterator.hasNext()) {\n+            final String rootElementName = ((HierarchicalConfiguration)iterator.next()).getRootElementName();\n+            final String[] config_SECTIONS = CombinedConfigurationBuilder.CONFIG_SECTIONS;\n+            for (int length = config_SECTIONS.length, i = 0; i < length; ++i) {\n+                if (config_SECTIONS[i].equals(rootElementName)) {\n+                    iterator.remove();\n                     break;\n                 }\n             }\n         }\n-        return configs;\n+        return childConfigurations;\n     }\n }\n"}]}
