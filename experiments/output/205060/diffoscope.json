{"diffoscope-json-version": 1, "source1": "first/BuilderConfigurationWrapperFactory.class", "source2": "second/BuilderConfigurationWrapperFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,41 +6,40 @@\n import java.lang.reflect.Proxy;\n import org.apache.commons.configuration2.ImmutableConfiguration;\n \n public class BuilderConfigurationWrapperFactory\n {\n     private final BuilderConfigurationWrapperFactory.EventSourceSupport eventSourceSupport;\n     \n-    public BuilderConfigurationWrapperFactory(final BuilderConfigurationWrapperFactory.EventSourceSupport evSrcSupport) {\n-        this.eventSourceSupport = evSrcSupport;\n+    public BuilderConfigurationWrapperFactory(final BuilderConfigurationWrapperFactory.EventSourceSupport eventSourceSupport) {\n+        this.eventSourceSupport = eventSourceSupport;\n     }\n     \n     public BuilderConfigurationWrapperFactory() {\n         this(BuilderConfigurationWrapperFactory.EventSourceSupport.NONE);\n     }\n     \n-    public <T extends ImmutableConfiguration> T createBuilderConfigurationWrapper(final Class<T> ifcClass, final ConfigurationBuilder<? extends T> builder) {\n-        return createBuilderConfigurationWrapper(ifcClass, builder, this.getEventSourceSupport());\n+    public <T extends ImmutableConfiguration> T createBuilderConfigurationWrapper(final Class<T> clazz, final ConfigurationBuilder<? extends T> configurationBuilder) {\n+        return createBuilderConfigurationWrapper(clazz, configurationBuilder, this.getEventSourceSupport());\n     }\n     \n     public BuilderConfigurationWrapperFactory.EventSourceSupport getEventSourceSupport() {\n         return this.eventSourceSupport;\n     }\n     \n-    public static <T extends ImmutableConfiguration> T createBuilderConfigurationWrapper(final Class<T> ifcClass, final ConfigurationBuilder<? extends T> builder, final BuilderConfigurationWrapperFactory.EventSourceSupport evSrcSupport) {\n-        if (ifcClass == null) {\n+    public static <T extends ImmutableConfiguration> T createBuilderConfigurationWrapper(final Class<T> clazz, final ConfigurationBuilder<? extends T> configurationBuilder, final BuilderConfigurationWrapperFactory.EventSourceSupport eventSourceSupport) {\n+        if (clazz == null) {\n             throw new IllegalArgumentException(\"Interface class must not be null!\");\n         }\n-        if (builder == null) {\n+        if (configurationBuilder == null) {\n             throw new IllegalArgumentException(\"Builder must not be null!\");\n         }\n-        return ifcClass.cast(Proxy.newProxyInstance(BuilderConfigurationWrapperFactory.class.getClassLoader(), fetchSupportedInterfaces((Class<?>)ifcClass, evSrcSupport), (InvocationHandler)new BuilderConfigurationWrapperFactory.BuilderConfigurationWrapperInvocationHandler((ConfigurationBuilder)builder, evSrcSupport)));\n+        return clazz.cast(Proxy.newProxyInstance(BuilderConfigurationWrapperFactory.class.getClassLoader(), fetchSupportedInterfaces((Class<?>)clazz, eventSourceSupport), (InvocationHandler)new BuilderConfigurationWrapperFactory.BuilderConfigurationWrapperInvocationHandler((ConfigurationBuilder)configurationBuilder, eventSourceSupport)));\n     }\n     \n-    private static Class<?>[] fetchSupportedInterfaces(final Class<?> ifcClass, final BuilderConfigurationWrapperFactory.EventSourceSupport evSrcSupport) {\n-        if (BuilderConfigurationWrapperFactory.EventSourceSupport.NONE == evSrcSupport) {\n-            return new Class[] { ifcClass };\n+    private static Class<?>[] fetchSupportedInterfaces(final Class<?> clazz, final BuilderConfigurationWrapperFactory.EventSourceSupport eventSourceSupport) {\n+        if (BuilderConfigurationWrapperFactory.EventSourceSupport.NONE == eventSourceSupport) {\n+            return new Class[] { clazz };\n         }\n-        final Class<?>[] result = { EventSource.class, ifcClass };\n-        return result;\n+        return new Class[] { EventSource.class, clazz };\n     }\n }\n"}]}
