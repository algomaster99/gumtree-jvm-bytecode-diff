{"diffoscope-json-version": 1, "source1": "first/LookupTranslator.class", "source2": "second/LookupTranslator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,47 +10,46 @@\n public class LookupTranslator extends CharSequenceTranslator\n {\n     private final HashMap<String, String> lookupMap;\n     private final HashSet<Character> prefixSet;\n     private final int shortest;\n     private final int longest;\n     \n-    public LookupTranslator(final CharSequence[]... lookup) {\n+    public LookupTranslator(final CharSequence[]... array) {\n         this.lookupMap = new HashMap<String, String>();\n         this.prefixSet = new HashSet<Character>();\n-        int _shortest = Integer.MAX_VALUE;\n-        int _longest = 0;\n-        if (lookup != null) {\n-            for (final CharSequence[] seq : lookup) {\n-                this.lookupMap.put(seq[0].toString(), seq[1].toString());\n-                this.prefixSet.add(Character.valueOf(seq[0].charAt(0)));\n-                final int sz = seq[0].length();\n-                if (sz < _shortest) {\n-                    _shortest = sz;\n+        int shortest = Integer.MAX_VALUE;\n+        int longest = 0;\n+        if (array != null) {\n+            for (final CharSequence[] array2 : array) {\n+                this.lookupMap.put(array2[0].toString(), array2[1].toString());\n+                this.prefixSet.add(Character.valueOf(array2[0].charAt(0)));\n+                final int length2 = array2[0].length();\n+                if (length2 < shortest) {\n+                    shortest = length2;\n                 }\n-                if (sz > _longest) {\n-                    _longest = sz;\n+                if (length2 > longest) {\n+                    longest = length2;\n                 }\n             }\n         }\n-        this.shortest = _shortest;\n-        this.longest = _longest;\n+        this.shortest = shortest;\n+        this.longest = longest;\n     }\n     \n-    public int translate(final CharSequence input, final int index, final Writer out) throws IOException {\n-        if (this.prefixSet.contains(Character.valueOf(input.charAt(index)))) {\n-            int max = this.longest;\n-            if (index + this.longest > input.length()) {\n-                max = input.length() - index;\n+    public int translate(final CharSequence charSequence, final int n, final Writer writer) throws IOException {\n+        if (this.prefixSet.contains(Character.valueOf(charSequence.charAt(n)))) {\n+            int longest = this.longest;\n+            if (n + this.longest > charSequence.length()) {\n+                longest = charSequence.length() - n;\n             }\n-            for (int i = max; i >= this.shortest; --i) {\n-                final CharSequence subSeq = input.subSequence(index, index + i);\n-                final String result = (String)this.lookupMap.get(subSeq.toString());\n-                if (result != null) {\n-                    out.write(result);\n+            for (int i = longest; i >= this.shortest; --i) {\n+                final String str = (String)this.lookupMap.get(charSequence.subSequence(n, n + i).toString());\n+                if (str != null) {\n+                    writer.write(str);\n                     return i;\n                 }\n             }\n         }\n         return 0;\n     }\n }\n"}]}
