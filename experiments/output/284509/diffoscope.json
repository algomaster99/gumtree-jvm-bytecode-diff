{"diffoscope-json-version": 1, "source1": "first/IMAPClient.class", "source2": "second/IMAPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,169 +5,167 @@\n \n public class IMAPClient extends IMAP\n {\n     private static final char DQUOTE = '\\\"';\n     private static final String DQUOTE_S = \"\\\"\";\n     \n     @Deprecated\n-    public boolean append(final String mailboxName) throws IOException {\n-        return this.append(mailboxName, null, null);\n+    public boolean append(final String s) throws IOException {\n+        return this.append(s, null, null);\n     }\n     \n     @Deprecated\n-    public boolean append(final String mailboxName, final String flags, final String datetime) throws IOException {\n-        String args = mailboxName;\n-        if (flags != null) {\n-            args = args + \" \" + flags;\n-        }\n-        if (datetime != null) {\n-            if (datetime.charAt(0) == '{') {\n-                args = args + \" \" + datetime;\n+    public boolean append(final String s, final String str, final String s2) throws IOException {\n+        String str2 = s;\n+        if (str != null) {\n+            str2 = str2 + \" \" + str;\n+        }\n+        if (s2 != null) {\n+            if (s2.charAt(0) == '{') {\n+                str2 = str2 + \" \" + s2;\n             }\n             else {\n-                args = args + \" {\" + datetime + \"}\";\n+                str2 = str2 + \" {\" + s2 + \"}\";\n             }\n         }\n-        return this.doCommand(IMAPCommand.APPEND, args);\n+        return this.doCommand(IMAPCommand.APPEND, str2);\n     }\n     \n-    public boolean append(final String mailboxName, final String flags, final String datetime, final String message) throws IOException {\n-        final StringBuilder args = new StringBuilder(quoteMailboxName(mailboxName));\n-        if (flags != null) {\n-            args.append(\" \").append(flags);\n-        }\n-        if (datetime != null) {\n-            args.append(\" \");\n-            if (datetime.charAt(0) == '\\\"') {\n-                args.append(datetime);\n+    public boolean append(final String s, final String str, final String s2, final String str2) throws IOException {\n+        final StringBuilder sb = new StringBuilder(quoteMailboxName(s));\n+        if (str != null) {\n+            sb.append(\" \").append(str);\n+        }\n+        if (s2 != null) {\n+            sb.append(\" \");\n+            if (s2.charAt(0) == '\\\"') {\n+                sb.append(s2);\n             }\n             else {\n-                args.append('\\\"').append(datetime).append('\\\"');\n+                sb.append('\\\"').append(s2).append('\\\"');\n             }\n         }\n-        args.append(\" \");\n-        if (message.startsWith(\"\\\"\") && message.endsWith(\"\\\"\")) {\n-            args.append(message);\n-            return this.doCommand(IMAPCommand.APPEND, args.toString());\n-        }\n-        args.append('{').append(message.getBytes(\"ISO-8859-1\").length).append('}');\n-        final int status = this.sendCommand(IMAPCommand.APPEND, args.toString());\n-        return IMAPReply.isContinuation(status) && IMAPReply.isSuccess(this.sendData(message));\n+        sb.append(\" \");\n+        if (str2.startsWith(\"\\\"\") && str2.endsWith(\"\\\"\")) {\n+            sb.append(str2);\n+            return this.doCommand(IMAPCommand.APPEND, sb.toString());\n+        }\n+        sb.append('{').append(str2.getBytes(\"ISO-8859-1\").length).append('}');\n+        return IMAPReply.isContinuation(this.sendCommand(IMAPCommand.APPEND, sb.toString())) && IMAPReply.isSuccess(this.sendData(str2));\n     }\n     \n     public boolean capability() throws IOException {\n         return this.doCommand(IMAPCommand.CAPABILITY);\n     }\n     \n     public boolean check() throws IOException {\n         return this.doCommand(IMAPCommand.CHECK);\n     }\n     \n     public boolean close() throws IOException {\n         return this.doCommand(IMAPCommand.CLOSE);\n     }\n     \n-    public boolean copy(final String sequenceSet, final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.COPY, sequenceSet + \" \" + quoteMailboxName(mailboxName));\n+    public boolean copy(final String str, final String s) throws IOException {\n+        return this.doCommand(IMAPCommand.COPY, str + \" \" + quoteMailboxName(s));\n     }\n     \n-    public boolean create(final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.CREATE, quoteMailboxName(mailboxName));\n+    public boolean create(final String s) throws IOException {\n+        return this.doCommand(IMAPCommand.CREATE, quoteMailboxName(s));\n     }\n     \n-    public boolean delete(final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.DELETE, quoteMailboxName(mailboxName));\n+    public boolean delete(final String s) throws IOException {\n+        return this.doCommand(IMAPCommand.DELETE, quoteMailboxName(s));\n     }\n     \n-    public boolean examine(final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.EXAMINE, quoteMailboxName(mailboxName));\n+    public boolean examine(final String s) throws IOException {\n+        return this.doCommand(IMAPCommand.EXAMINE, quoteMailboxName(s));\n     }\n     \n     public boolean expunge() throws IOException {\n         return this.doCommand(IMAPCommand.EXPUNGE);\n     }\n     \n-    public boolean fetch(final String sequenceSet, final String itemNames) throws IOException {\n-        return this.doCommand(IMAPCommand.FETCH, sequenceSet + \" \" + itemNames);\n+    public boolean fetch(final String str, final String str2) throws IOException {\n+        return this.doCommand(IMAPCommand.FETCH, str + \" \" + str2);\n     }\n     \n-    public boolean list(final String refName, final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.LIST, quoteMailboxName(refName) + \" \" + quoteMailboxName(mailboxName));\n+    public boolean list(final String s, final String s2) throws IOException {\n+        return this.doCommand(IMAPCommand.LIST, quoteMailboxName(s) + \" \" + quoteMailboxName(s2));\n     }\n     \n-    public boolean login(final String username, final String password) throws IOException {\n+    public boolean login(final String str, final String str2) throws IOException {\n         if (this.getState() != IMAP.IMAPState.NOT_AUTH_STATE) {\n             return false;\n         }\n-        if (!this.doCommand(IMAPCommand.LOGIN, username + \" \" + password)) {\n+        if (!this.doCommand(IMAPCommand.LOGIN, str + \" \" + str2)) {\n             return false;\n         }\n         this.setState(IMAP.IMAPState.AUTH_STATE);\n         return true;\n     }\n     \n     public boolean logout() throws IOException {\n         return this.doCommand(IMAPCommand.LOGOUT);\n     }\n     \n-    public boolean lsub(final String refName, final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.LSUB, quoteMailboxName(refName) + \" \" + quoteMailboxName(mailboxName));\n+    public boolean lsub(final String s, final String s2) throws IOException {\n+        return this.doCommand(IMAPCommand.LSUB, quoteMailboxName(s) + \" \" + quoteMailboxName(s2));\n     }\n     \n     public boolean noop() throws IOException {\n         return this.doCommand(IMAPCommand.NOOP);\n     }\n     \n-    public boolean rename(final String oldMailboxName, final String newMailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.RENAME, quoteMailboxName(oldMailboxName) + \" \" + quoteMailboxName(newMailboxName));\n+    public boolean rename(final String s, final String s2) throws IOException {\n+        return this.doCommand(IMAPCommand.RENAME, quoteMailboxName(s) + \" \" + quoteMailboxName(s2));\n     }\n     \n-    public boolean search(final String criteria) throws IOException {\n-        return this.search(null, criteria);\n+    public boolean search(final String s) throws IOException {\n+        return this.search(null, s);\n     }\n     \n-    public boolean search(final String charset, final String criteria) throws IOException {\n-        String args = \"\";\n-        if (charset != null) {\n-            args = args + \"CHARSET \" + charset;\n+    public boolean search(final String str, final String str2) throws IOException {\n+        String string = \"\";\n+        if (str != null) {\n+            string = string + \"CHARSET \" + str;\n         }\n-        args += criteria;\n-        return this.doCommand(IMAPCommand.SEARCH, args);\n+        return this.doCommand(IMAPCommand.SEARCH, string + str2);\n     }\n     \n-    public boolean select(final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.SELECT, quoteMailboxName(mailboxName));\n+    public boolean select(final String s) throws IOException {\n+        return this.doCommand(IMAPCommand.SELECT, quoteMailboxName(s));\n     }\n     \n-    public boolean status(final String mailboxName, final String[] itemNames) throws IOException {\n-        if (itemNames == null || itemNames.length < 1) {\n+    public boolean status(final String s, final String[] array) throws IOException {\n+        if (array == null || array.length < 1) {\n             throw new IllegalArgumentException(\"STATUS command requires at least one data item name\");\n         }\n         final StringBuilder sb = new StringBuilder();\n-        sb.append(quoteMailboxName(mailboxName));\n+        sb.append(quoteMailboxName(s));\n         sb.append(\" (\");\n-        for (int i = 0; i < itemNames.length; ++i) {\n+        for (int i = 0; i < array.length; ++i) {\n             if (i > 0) {\n                 sb.append(\" \");\n             }\n-            sb.append(itemNames[i]);\n+            sb.append(array[i]);\n         }\n         sb.append(\")\");\n         return this.doCommand(IMAPCommand.STATUS, sb.toString());\n     }\n     \n-    public boolean store(final String sequenceSet, final String itemNames, final String itemValues) throws IOException {\n-        return this.doCommand(IMAPCommand.STORE, sequenceSet + \" \" + itemNames + \" \" + itemValues);\n+    public boolean store(final String str, final String str2, final String str3) throws IOException {\n+        return this.doCommand(IMAPCommand.STORE, str + \" \" + str2 + \" \" + str3);\n     }\n     \n-    public boolean subscribe(final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.SUBSCRIBE, quoteMailboxName(mailboxName));\n+    public boolean subscribe(final String s) throws IOException {\n+        return this.doCommand(IMAPCommand.SUBSCRIBE, quoteMailboxName(s));\n     }\n     \n-    public boolean uid(final String command, final String commandArgs) throws IOException {\n-        return this.doCommand(IMAPCommand.UID, command + \" \" + commandArgs);\n+    public boolean uid(final String str, final String str2) throws IOException {\n+        return this.doCommand(IMAPCommand.UID, str + \" \" + str2);\n     }\n     \n-    public boolean unsubscribe(final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.UNSUBSCRIBE, quoteMailboxName(mailboxName));\n+    public boolean unsubscribe(final String s) throws IOException {\n+        return this.doCommand(IMAPCommand.UNSUBSCRIBE, quoteMailboxName(s));\n     }\n }\n"}]}
