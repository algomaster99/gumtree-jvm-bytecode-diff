{"diffoscope-json-version": 1, "source1": "first/FramedLZ4CompressorOutputStream.class", "source2": "second/FramedLZ4CompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -100,20 +100,39 @@\n         this.out.write((int)(this.contentHash.getValue() >> 8 & 0xFFL));\n         this.contentHash.reset();\n     }\n     \n     private void flushBlock() throws IOException {\n         final boolean withBlockDependency = FramedLZ4CompressorOutputStream.Parameters.access$200(this.params);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (final BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream((OutputStream)baos, FramedLZ4CompressorOutputStream.Parameters.access$400(this.params))) {\n+        final BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream((OutputStream)baos, FramedLZ4CompressorOutputStream.Parameters.access$400(this.params));\n+        Throwable t = null;\n+        try {\n             if (withBlockDependency) {\n                 o.prefill(this.blockDependencyBuffer, this.blockDependencyBuffer.length - this.collectedBlockDependencyBytes, this.collectedBlockDependencyBytes);\n             }\n             o.write(this.blockData, 0, this.currentIndex);\n         }\n+        catch (final Throwable t2) {\n+            t = t2;\n+            throw t2;\n+        }\n+        finally {\n+            if (t != null) {\n+                try {\n+                    o.close();\n+                }\n+                catch (final Throwable exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n+            else {\n+                o.close();\n+            }\n+        }\n         if (withBlockDependency) {\n             this.appendToBlockDependencyBuffer(this.blockData, 0, this.currentIndex);\n         }\n         final byte[] b = baos.toByteArray();\n         if (b.length > this.currentIndex) {\n             ByteUtils.toLittleEndian(this.out, (long)(this.currentIndex | Integer.MIN_VALUE), 4);\n             this.out.write(this.blockData, 0, this.currentIndex);\n"}]}
