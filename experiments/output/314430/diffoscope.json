{"diffoscope-json-version": 1, "source1": "first/ChunkedWriter.class", "source2": "second/ChunkedWriter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,64 +1,64 @@\n-  SHA-256 checksum afdf6608f97358a6707bd458d3dabd07e17ba929eb2ce17bceb307c1d72d8be4\n+  SHA-256 checksum 9563bd4c98c22fc4caae7bdaeb087e849c69fa8af1252763a6500204b5402b7d\n   Compiled from \"ChunkedWriter.java\"\n public class org.apache.commons.io.output.ChunkedWriter extends java.io.FilterWriter\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #5                          // org/apache/commons/io/output/ChunkedWriter\n-  super_class: #10                        // java/io/FilterWriter\n+  this_class: #13                         // org/apache/commons/io/output/ChunkedWriter\n+  super_class: #2                         // java/io/FilterWriter\n   interfaces: 0, fields: 2, methods: 3, attributes: 1\n Constant pool:\n-   #1 = Methodref          #10.#29        // java/io/FilterWriter.\"<init>\":(Ljava/io/Writer;)V\n-   #2 = Class              #30            // java/lang/IllegalArgumentException\n-   #3 = Methodref          #2.#31         // java/lang/IllegalArgumentException.\"<init>\":()V\n-   #4 = Fieldref           #5.#32         // org/apache/commons/io/output/ChunkedWriter.chunkSize:I\n-   #5 = Class              #33            // org/apache/commons/io/output/ChunkedWriter\n-   #6 = Methodref          #5.#34         // org/apache/commons/io/output/ChunkedWriter.\"<init>\":(Ljava/io/Writer;I)V\n-   #7 = Methodref          #35.#36        // java/lang/Math.min:(II)I\n-   #8 = Fieldref           #5.#37         // org/apache/commons/io/output/ChunkedWriter.out:Ljava/io/Writer;\n-   #9 = Methodref          #21.#38        // java/io/Writer.write:([CII)V\n-  #10 = Class              #39            // java/io/FilterWriter\n-  #11 = Utf8               DEFAULT_CHUNK_SIZE\n-  #12 = Utf8               I\n-  #13 = Utf8               ConstantValue\n-  #14 = Integer            4096\n-  #15 = Utf8               chunkSize\n-  #16 = Utf8               <init>\n-  #17 = Utf8               (Ljava/io/Writer;I)V\n-  #18 = Utf8               Code\n-  #19 = Utf8               LineNumberTable\n-  #20 = Utf8               StackMapTable\n-  #21 = Class              #40            // java/io/Writer\n-  #22 = Utf8               (Ljava/io/Writer;)V\n-  #23 = Utf8               write\n-  #24 = Utf8               ([CII)V\n-  #25 = Utf8               Exceptions\n-  #26 = Class              #41            // java/io/IOException\n-  #27 = Utf8               SourceFile\n-  #28 = Utf8               ChunkedWriter.java\n-  #29 = NameAndType        #16:#22        // \"<init>\":(Ljava/io/Writer;)V\n-  #30 = Utf8               java/lang/IllegalArgumentException\n-  #31 = NameAndType        #16:#42        // \"<init>\":()V\n-  #32 = NameAndType        #15:#12        // chunkSize:I\n-  #33 = Utf8               org/apache/commons/io/output/ChunkedWriter\n-  #34 = NameAndType        #16:#17        // \"<init>\":(Ljava/io/Writer;I)V\n-  #35 = Class              #43            // java/lang/Math\n-  #36 = NameAndType        #44:#45        // min:(II)I\n-  #37 = NameAndType        #46:#47        // out:Ljava/io/Writer;\n-  #38 = NameAndType        #23:#24        // write:([CII)V\n-  #39 = Utf8               java/io/FilterWriter\n-  #40 = Utf8               java/io/Writer\n-  #41 = Utf8               java/io/IOException\n-  #42 = Utf8               ()V\n-  #43 = Utf8               java/lang/Math\n-  #44 = Utf8               min\n-  #45 = Utf8               (II)I\n-  #46 = Utf8               out\n-  #47 = Utf8               Ljava/io/Writer;\n+   #1 = Methodref          #2.#3          // java/io/FilterWriter.\"<init>\":(Ljava/io/Writer;)V\n+   #2 = Class              #4             // java/io/FilterWriter\n+   #3 = NameAndType        #5:#6          // \"<init>\":(Ljava/io/Writer;)V\n+   #4 = Utf8               java/io/FilterWriter\n+   #5 = Utf8               <init>\n+   #6 = Utf8               (Ljava/io/Writer;)V\n+   #7 = Class              #8             // java/lang/IllegalArgumentException\n+   #8 = Utf8               java/lang/IllegalArgumentException\n+   #9 = Methodref          #7.#10         // java/lang/IllegalArgumentException.\"<init>\":()V\n+  #10 = NameAndType        #5:#11         // \"<init>\":()V\n+  #11 = Utf8               ()V\n+  #12 = Fieldref           #13.#14        // org/apache/commons/io/output/ChunkedWriter.chunkSize:I\n+  #13 = Class              #15            // org/apache/commons/io/output/ChunkedWriter\n+  #14 = NameAndType        #16:#17        // chunkSize:I\n+  #15 = Utf8               org/apache/commons/io/output/ChunkedWriter\n+  #16 = Utf8               chunkSize\n+  #17 = Utf8               I\n+  #18 = Methodref          #13.#19        // org/apache/commons/io/output/ChunkedWriter.\"<init>\":(Ljava/io/Writer;I)V\n+  #19 = NameAndType        #5:#20         // \"<init>\":(Ljava/io/Writer;I)V\n+  #20 = Utf8               (Ljava/io/Writer;I)V\n+  #21 = Methodref          #22.#23        // java/lang/Math.min:(II)I\n+  #22 = Class              #24            // java/lang/Math\n+  #23 = NameAndType        #25:#26        // min:(II)I\n+  #24 = Utf8               java/lang/Math\n+  #25 = Utf8               min\n+  #26 = Utf8               (II)I\n+  #27 = Fieldref           #13.#28        // org/apache/commons/io/output/ChunkedWriter.out:Ljava/io/Writer;\n+  #28 = NameAndType        #29:#30        // out:Ljava/io/Writer;\n+  #29 = Utf8               out\n+  #30 = Utf8               Ljava/io/Writer;\n+  #31 = Methodref          #32.#33        // java/io/Writer.write:([CII)V\n+  #32 = Class              #34            // java/io/Writer\n+  #33 = NameAndType        #35:#36        // write:([CII)V\n+  #34 = Utf8               java/io/Writer\n+  #35 = Utf8               write\n+  #36 = Utf8               ([CII)V\n+  #37 = Utf8               DEFAULT_CHUNK_SIZE\n+  #38 = Utf8               ConstantValue\n+  #39 = Integer            4096\n+  #40 = Utf8               Code\n+  #41 = Utf8               LineNumberTable\n+  #42 = Utf8               StackMapTable\n+  #43 = Utf8               Exceptions\n+  #44 = Class              #45            // java/io/IOException\n+  #45 = Utf8               java/io/IOException\n+  #46 = Utf8               SourceFile\n+  #47 = Utf8               ChunkedWriter.java\n {\n   private static final int DEFAULT_CHUNK_SIZE = 4096;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 4096\n \n   private final int chunkSize;\n@@ -71,21 +71,21 @@\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: invokespecial #1                  // Method java/io/FilterWriter.\"<init>\":(Ljava/io/Writer;)V\n          5: iload_2\n          6: ifgt          17\n-         9: new           #2                  // class java/lang/IllegalArgumentException\n+         9: new           #7                  // class java/lang/IllegalArgumentException\n         12: dup\n-        13: invokespecial #3                  // Method java/lang/IllegalArgumentException.\"<init>\":()V\n+        13: invokespecial #9                  // Method java/lang/IllegalArgumentException.\"<init>\":()V\n         16: athrow\n         17: aload_0\n         18: iload_2\n-        19: putfield      #4                  // Field chunkSize:I\n+        19: putfield      #12                 // Field chunkSize:I\n         22: return\n       LineNumberTable:\n         line 50: 0\n         line 51: 5\n         line 52: 9\n         line 54: 17\n         line 55: 22\n@@ -99,15 +99,15 @@\n     descriptor: (Ljava/io/Writer;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        4096\n-         5: invokespecial #6                  // Method \"<init>\":(Ljava/io/Writer;I)V\n+         5: invokespecial #18                 // Method \"<init>\":(Ljava/io/Writer;I)V\n          8: return\n       LineNumberTable:\n         line 62: 0\n         line 63: 8\n \n   public void write(char[], int, int) throws java.io.IOException;\n     descriptor: ([CII)V\n@@ -118,23 +118,23 @@\n          1: istore        4\n          3: iload_2\n          4: istore        5\n          6: iload         4\n          8: ifle          51\n         11: iload         4\n         13: aload_0\n-        14: getfield      #4                  // Field chunkSize:I\n-        17: invokestatic  #7                  // Method java/lang/Math.min:(II)I\n+        14: getfield      #12                 // Field chunkSize:I\n+        17: invokestatic  #21                 // Method java/lang/Math.min:(II)I\n         20: istore        6\n         22: aload_0\n-        23: getfield      #8                  // Field out:Ljava/io/Writer;\n+        23: getfield      #27                 // Field out:Ljava/io/Writer;\n         26: aload_1\n         27: iload         5\n         29: iload         6\n-        31: invokevirtual #9                  // Method java/io/Writer.write:([CII)V\n+        31: invokevirtual #31                 // Method java/io/Writer.write:([CII)V\n         34: iload         4\n         36: iload         6\n         38: isub\n         39: istore        4\n         41: iload         5\n         43: iload         6\n         45: iadd\n"}]}
