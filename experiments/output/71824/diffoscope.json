{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands$Reference.class", "source2": "second/NewAttributeBands$Reference.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,26 +17,26 @@\n         super(this.this$0 = this$0);\n         this.nullsAllowed = false;\n         this.tag = tag;\n         this.nullsAllowed = (tag.indexOf(78) != -1);\n     }\n     \n     public void addAttributeToBand(final NewAttribute attribute, final InputStream stream) {\n-        final int index = NewAttributeBands.access$500(this.this$0, 4, stream);\n+        final int index = NewAttributeBands.access$1(this.this$0, 4, stream);\n         if (this.tag.startsWith(\"RC\")) {\n-            this.band.add(NewAttributeBands.access$700(this.this$0).getCPClass(attribute.readClass(index)));\n+            this.band.add(NewAttributeBands.access$3(this.this$0).getCPClass(attribute.readClass(index)));\n         }\n         else if (this.tag.startsWith(\"RU\")) {\n-            this.band.add(NewAttributeBands.access$700(this.this$0).getCPUtf8(attribute.readUTF8(index)));\n+            this.band.add(NewAttributeBands.access$3(this.this$0).getCPUtf8(attribute.readUTF8(index)));\n         }\n         else if (this.tag.startsWith(\"RS\")) {\n-            this.band.add(NewAttributeBands.access$700(this.this$0).getCPSignature(attribute.readUTF8(index)));\n+            this.band.add(NewAttributeBands.access$3(this.this$0).getCPSignature(attribute.readUTF8(index)));\n         }\n         else {\n-            this.band.add(NewAttributeBands.access$700(this.this$0).getConstant(attribute.readConst(index)));\n+            this.band.add(NewAttributeBands.access$3(this.this$0).getConstant(attribute.readConst(index)));\n         }\n     }\n     \n     public String getTag() {\n         return this.tag;\n     }\n     \n@@ -46,13 +46,13 @@\n             ints = this.this$0.cpEntryOrNullListToArray(this.band);\n         }\n         else {\n             ints = this.this$0.cpEntryListToArray(this.band);\n         }\n         final byte[] encodedBand = this.this$0.encodeBandInt(this.tag, ints, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + this.tag + \"[\" + ints.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + this.tag + \"[\" + ints.length + \"]\");\n     }\n     \n     public void renumberBci(final IntList bciRenumbering, final Map labelsToOffsets) {\n     }\n }\n"}]}
