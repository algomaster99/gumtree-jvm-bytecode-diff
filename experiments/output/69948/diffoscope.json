{"diffoscope-json-version": 1, "source1": "first/Base64Variant.class", "source2": "second/Base64Variant.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -371,19 +371,18 @@\n                         this._reportInvalidBase64(ch, 3, null);\n                     }\n                     if (!this.acceptsPaddingOnRead()) {\n                         this._reportBase64UnexpectedPadding();\n                     }\n                     decodedData >>= 2;\n                     builder.appendTwoBytes(decodedData);\n+                    continue;\n                 }\n-                else {\n-                    decodedData = (decodedData << 6 | bits);\n-                    builder.appendThreeBytes(decodedData);\n-                }\n+                decodedData = (decodedData << 6 | bits);\n+                builder.appendThreeBytes(decodedData);\n                 continue;\n             }\n         }\n     }\n     \n     @Override\n     public String toString() {\n@@ -418,15 +417,15 @@\n         else if (!Character.isDefined(ch) || Character.isISOControl(ch)) {\n             base = \"Illegal character (code 0x\" + Integer.toHexString((int)ch) + \") in base64 content\";\n         }\n         else {\n             base = \"Illegal character '\" + ch + \"' (code 0x\" + Integer.toHexString((int)ch) + \") in base64 content\";\n         }\n         if (msg != null) {\n-            base = base + \": \" + msg;\n+            base = String.valueOf(base) + \": \" + msg;\n         }\n         throw new IllegalArgumentException(base);\n     }\n     \n     protected void _reportBase64EOF() throws IllegalArgumentException {\n         throw new IllegalArgumentException(this.missingPaddingMessage());\n     }\n"}]}
