{"diffoscope-json-version": 1, "source1": "first/ConfigurationPropertiesFactoryBean.class", "source2": "second/ConfigurationPropertiesFactoryBean.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -55,45 +55,46 @@\n         if (this.configurations != null) {\n             final Stream<Configuration> of = Stream.of(this.configurations);\n             final CompositeConfiguration compositeConfiguration = this.compositeConfiguration;\n             Objects.requireNonNull(compositeConfiguration);\n             of.forEach(compositeConfiguration::addConfiguration);\n         }\n         if (this.locations != null) {\n-            for (final Resource location : this.locations) {\n-                this.compositeConfiguration.addConfiguration((Configuration)new Configurations().properties(location.getURL()));\n+            final Resource[] locations = this.locations;\n+            for (int length = locations.length, i = 0; i < length; ++i) {\n+                this.compositeConfiguration.addConfiguration((Configuration)new Configurations().properties(locations[i].getURL()));\n             }\n         }\n     }\n     \n     public Configuration[] getConfigurations() {\n         return defensiveCopy(this.configurations);\n     }\n     \n-    public void setConfigurations(final Configuration... configurations) {\n-        this.configurations = defensiveCopy(configurations);\n+    public void setConfigurations(final Configuration... array) {\n+        this.configurations = defensiveCopy(array);\n     }\n     \n     public Resource[] getLocations() {\n         return defensiveCopy(this.locations);\n     }\n     \n-    public void setLocations(final Resource... locations) {\n-        this.locations = defensiveCopy(locations);\n+    public void setLocations(final Resource... array) {\n+        this.locations = defensiveCopy(array);\n     }\n     \n     public boolean isThrowExceptionOnMissing() {\n         return this.throwExceptionOnMissing;\n     }\n     \n     public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing) {\n         this.throwExceptionOnMissing = throwExceptionOnMissing;\n     }\n     \n     public CompositeConfiguration getConfiguration() {\n         return this.compositeConfiguration;\n     }\n     \n-    private static <T> T[] defensiveCopy(final T[] src) {\n-        return (T[])((src != null) ? ((T[])src.clone()) : null);\n+    private static <T> T[] defensiveCopy(final T[] array) {\n+        return (T[])((array != null) ? ((T[])array.clone()) : null);\n     }\n }\n"}]}
