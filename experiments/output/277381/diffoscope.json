{"diffoscope-json-version": 1, "source1": "first/ScatterZipOutputStream.class", "source2": "second/ScatterZipOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,20 +33,20 @@\n     public void addArchiveEntry(final ZipArchiveEntryRequest zipArchiveEntryRequest) throws IOException {\n         try (final InputStream payloadStream = zipArchiveEntryRequest.getPayloadStream()) {\n             this.streamCompressor.deflate(payloadStream, zipArchiveEntryRequest.getMethod());\n         }\n         this.items.add(new ScatterZipOutputStream.CompressedEntry(zipArchiveEntryRequest, this.streamCompressor.getCrc32(), this.streamCompressor.getBytesWrittenForLastEntry(), this.streamCompressor.getBytesRead()));\n     }\n     \n-    public void writeTo(final ZipArchiveOutputStream target) throws IOException {\n+    public void writeTo(final ZipArchiveOutputStream zipArchiveOutputStream) throws IOException {\n         this.backingStore.closeForWriting();\n-        try (final InputStream data = this.backingStore.getInputStream()) {\n+        try (final InputStream inputStream = this.backingStore.getInputStream()) {\n             for (final ScatterZipOutputStream.CompressedEntry compressedEntry : this.items) {\n-                try (final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize)) {\n-                    target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), (InputStream)rawStream);\n+                try (final BoundedInputStream boundedInputStream = new BoundedInputStream(inputStream, compressedEntry.compressedSize)) {\n+                    zipArchiveOutputStream.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), (InputStream)boundedInputStream);\n                 }\n             }\n         }\n     }\n     \n     public ScatterZipOutputStream.ZipEntryWriter zipEntryWriter() throws IOException {\n         if (this.zipEntryWriter == null) {\n@@ -71,13 +71,12 @@\n         }\n     }\n     \n     public static ScatterZipOutputStream fileBased(final File file) throws FileNotFoundException {\n         return fileBased(file, -1);\n     }\n     \n-    public static ScatterZipOutputStream fileBased(final File file, final int compressionLevel) throws FileNotFoundException {\n-        final ScatterGatherBackingStore bs = (ScatterGatherBackingStore)new FileBasedScatterGatherBackingStore(file);\n-        final StreamCompressor sc = StreamCompressor.create(compressionLevel, bs);\n-        return new ScatterZipOutputStream(bs, sc);\n+    public static ScatterZipOutputStream fileBased(final File file, final int n) throws FileNotFoundException {\n+        final FileBasedScatterGatherBackingStore fileBasedScatterGatherBackingStore = new FileBasedScatterGatherBackingStore(file);\n+        return new ScatterZipOutputStream((ScatterGatherBackingStore)fileBasedScatterGatherBackingStore, StreamCompressor.create(n, (ScatterGatherBackingStore)fileBasedScatterGatherBackingStore));\n     }\n }\n"}]}
