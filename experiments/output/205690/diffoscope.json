{"diffoscope-json-version": 1, "source1": "first/CatalogResolver$Catalog.class", "source2": "second/CatalogResolver$Catalog.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,102 +20,94 @@\n     \n     public Catalog() {\n         this.fileNameMap = URLConnection.getFileNameMap();\n     }\n     \n     public void loadSystemCatalogs() throws IOException {\n         this.fs = ((CatalogResolver.CatalogManager)this.catalogManager).getFileSystem();\n-        final String base = ((CatalogResolver.CatalogManager)this.catalogManager).getBaseDir();\n-        final Vector<String> catalogs = this.catalogManager.getCatalogFiles();\n-        if (catalogs != null) {\n-            for (int count = 0; count < catalogs.size(); ++count) {\n-                final String fileName = (String)catalogs.elementAt(count);\n-                URL url = null;\n+        final String baseDir = ((CatalogResolver.CatalogManager)this.catalogManager).getBaseDir();\n+        final Vector catalogFiles = this.catalogManager.getCatalogFiles();\n+        if (catalogFiles != null) {\n+            for (int i = 0; i < catalogFiles.size(); ++i) {\n+                final String str = (String)catalogFiles.elementAt(i);\n+                URL access$000 = null;\n                 InputStream inputStream = null;\n                 try {\n-                    url = CatalogResolver.access$000(this.fs, base, fileName);\n-                    if (url != null) {\n-                        inputStream = this.fs.getInputStream(url);\n+                    access$000 = CatalogResolver.access$000(this.fs, baseDir, str);\n+                    if (access$000 != null) {\n+                        inputStream = this.fs.getInputStream(access$000);\n                     }\n                 }\n-                catch (final ConfigurationException ce) {\n-                    final String name = url.toString();\n-                    this.catalogManager.debug.message(9, \"Unable to get input stream for \" + name + \". \" + ce.getMessage());\n+                catch (final ConfigurationException ex) {\n+                    this.catalogManager.debug.message(9, \"Unable to get input stream for \" + access$000.toString() + \". \" + ex.getMessage());\n                 }\n                 if (inputStream != null) {\n-                    final String mimeType = this.fileNameMap.getContentTypeFor(fileName);\n+                    final String contentType = this.fileNameMap.getContentTypeFor(str);\n                     try {\n-                        if (mimeType != null) {\n-                            this.parseCatalog(mimeType, inputStream);\n+                        if (contentType != null) {\n+                            this.parseCatalog(contentType, inputStream);\n                             continue;\n                         }\n                     }\n-                    catch (final Exception ex) {\n-                        this.catalogManager.debug.message(9, \"Exception caught parsing input stream for \" + fileName + \". \" + ex.getMessage());\n+                    catch (final Exception ex2) {\n+                        this.catalogManager.debug.message(9, \"Exception caught parsing input stream for \" + str + \". \" + ex2.getMessage());\n                     }\n                     finally {\n                         inputStream.close();\n                     }\n                 }\n-                this.parseCatalog(base, fileName);\n+                this.parseCatalog(baseDir, str);\n             }\n         }\n     }\n     \n-    public void parseCatalog(final String baseDir, final String fileName) throws IOException {\n-        this.base = CatalogResolver.access$000(this.fs, baseDir, fileName);\n+    public void parseCatalog(final String s, final String s2) throws IOException {\n+        this.base = CatalogResolver.access$000(this.fs, s, s2);\n         this.catalogCwd = this.base;\n         this.default_override = this.catalogManager.getPreferPublic();\n-        this.catalogManager.debug.message(4, \"Parse catalog: \" + fileName);\n-        boolean parsed = false;\n-        for (int count = 0; !parsed && count < this.readerArr.size(); ++count) {\n-            final CatalogReader reader = (CatalogReader)this.readerArr.get(count);\n+        this.catalogManager.debug.message(4, \"Parse catalog: \" + s2);\n+        int n = 0;\n+        for (int index = 0; n == 0 && index < this.readerArr.size(); ++index) {\n+            final CatalogReader catalogReader = (CatalogReader)this.readerArr.get(index);\n             InputStream inputStream;\n             try {\n                 inputStream = this.fs.getInputStream(this.base);\n             }\n             catch (final Exception ex) {\n                 this.catalogManager.debug.message(4, \"Unable to access \" + this.base + ex.getMessage());\n                 break;\n             }\n             try {\n-                reader.readCatalog((org.apache.xml.resolver.Catalog)this, inputStream);\n-                parsed = true;\n+                catalogReader.readCatalog((org.apache.xml.resolver.Catalog)this, inputStream);\n+                n = 1;\n             }\n-            catch (final CatalogException ce) {\n-                this.catalogManager.debug.message(4, \"Parse failed for \" + fileName + ce.getMessage());\n-                if (ce.getExceptionType() == 7) {\n+            catch (final CatalogException ex2) {\n+                this.catalogManager.debug.message(4, \"Parse failed for \" + s2 + ex2.getMessage());\n+                if (ex2.getExceptionType() == 7) {\n                     try {\n                         inputStream.close();\n                     }\n-                    catch (final IOException ioe) {\n-                        inputStream = null;\n-                    }\n+                    catch (final IOException ex3) {}\n                     break;\n                 }\n                 try {\n                     inputStream.close();\n                 }\n-                catch (final IOException ioe) {\n-                    inputStream = null;\n-                }\n+                catch (final IOException ex4) {}\n             }\n             finally {\n                 try {\n                     inputStream.close();\n                 }\n-                catch (final IOException ioe2) {\n-                    inputStream = null;\n-                }\n+                catch (final IOException ex5) {}\n             }\n         }\n-        if (parsed) {\n+        if (n != 0) {\n             this.parsePendingCatalogs();\n         }\n     }\n     \n-    protected String normalizeURI(final String uriref) {\n-        final ConfigurationInterpolator ci = ((CatalogResolver.CatalogManager)this.catalogManager).getInterpolator();\n-        final String resolved = (ci != null) ? String.valueOf(ci.interpolate((Object)uriref)) : uriref;\n-        return super.normalizeURI(resolved);\n+    protected String normalizeURI(final String s) {\n+        final ConfigurationInterpolator interpolator = ((CatalogResolver.CatalogManager)this.catalogManager).getInterpolator();\n+        return super.normalizeURI((interpolator != null) ? String.valueOf(interpolator.interpolate((Object)s)) : s);\n     }\n }\n"}]}
