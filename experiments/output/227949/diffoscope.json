{"diffoscope-json-version": 1, "source1": "first/TreeTableCellRenderer.class", "source2": "second/TreeTableCellRenderer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,59 +17,59 @@\n     private static final long serialVersionUID = 4324031590789321581L;\n     private static final String COLOR_KEY_TABLE_SELECTION_FOREGROUND = \"Table.selectionForeground\";\n     private static final String COLOR_KEY_TABLE_SELECTION_BACKGROUND = \"Table.selectionBackground\";\n     private static final String COLOR_KEY_TABLE_BACKGROUND = \"Table.background\";\n     private final TreeTable treeTable;\n     private int visibleRow;\n     \n-    TreeTableCellRenderer(final TreeTable treeTable, final TreeModel model) {\n-        super(model);\n+    TreeTableCellRenderer(final TreeTable treeTable, final TreeModel newModel) {\n+        super(newModel);\n         this.treeTable = treeTable;\n     }\n     \n     @Override\n     public void updateUI() {\n         super.updateUI();\n-        final TreeCellRenderer tcr = this.getCellRenderer();\n-        if (tcr instanceof DefaultTreeCellRenderer) {\n-            final DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer)tcr;\n-            renderer.setBorderSelectionColor(null);\n-            renderer.setTextSelectionColor(UIManager.getColor((Object)\"Table.selectionForeground\"));\n-            renderer.setBackgroundSelectionColor(UIManager.getColor((Object)\"Table.selectionBackground\"));\n+        final TreeCellRenderer cellRenderer = this.getCellRenderer();\n+        if (cellRenderer instanceof DefaultTreeCellRenderer) {\n+            final DefaultTreeCellRenderer defaultTreeCellRenderer = (DefaultTreeCellRenderer)cellRenderer;\n+            defaultTreeCellRenderer.setBorderSelectionColor(null);\n+            defaultTreeCellRenderer.setTextSelectionColor(UIManager.getColor((Object)\"Table.selectionForeground\"));\n+            defaultTreeCellRenderer.setBackgroundSelectionColor(UIManager.getColor((Object)\"Table.selectionBackground\"));\n         }\n     }\n     \n     @Override\n-    public void setRowHeight(final int newRowHeight) {\n-        if (newRowHeight > 0) {\n-            super.setRowHeight(newRowHeight);\n-            if (this.treeTable != null && this.treeTable.getRowHeight() != newRowHeight) {\n+    public void setRowHeight(final int rowHeight) {\n+        if (rowHeight > 0) {\n+            super.setRowHeight(rowHeight);\n+            if (this.treeTable != null && this.treeTable.getRowHeight() != rowHeight) {\n                 this.treeTable.setRowHeight(this.getRowHeight());\n             }\n         }\n     }\n     \n     @Override\n-    public void setBounds(final int x, final int y, final int w, final int h) {\n-        super.setBounds(x, 0, w, this.treeTable.getHeight());\n+    public void setBounds(final int x, final int n, final int width, final int n2) {\n+        super.setBounds(x, 0, width, this.treeTable.getHeight());\n     }\n     \n     @Override\n-    public void paint(final Graphics graph) {\n-        graph.translate(0, -this.visibleRow * this.getRowHeight());\n-        super.paint(graph);\n+    public void paint(final Graphics g) {\n+        g.translate(0, -this.visibleRow * this.getRowHeight());\n+        super.paint(g);\n     }\n     \n     @Override\n-    public Component getTableCellRendererComponent(final JTable table, final Object value, final boolean isSelected, final boolean hasFocus, final int row, final int column) {\n-        String colorKey;\n-        if (isSelected) {\n-            colorKey = \"Table.selectionBackground\";\n+    public Component getTableCellRendererComponent(final JTable table, final Object o, final boolean b, final boolean b2, final int visibleRow, final int n) {\n+        String key;\n+        if (b) {\n+            key = \"Table.selectionBackground\";\n         }\n         else {\n-            colorKey = \"Table.background\";\n+            key = \"Table.background\";\n         }\n-        this.setBackground(UIManager.getColor((Object)colorKey));\n-        this.visibleRow = row;\n+        this.setBackground(UIManager.getColor((Object)key));\n+        this.visibleRow = visibleRow;\n         return this;\n     }\n }\n"}]}
