{"diffoscope-json-version": 1, "source1": "first/Tailer.class", "source2": "second/Tailer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -126,23 +126,36 @@\n                 }\n             }\n             while (this.getRun()) {\n                 final boolean newer = FileUtils.isFileNewer(this.file, last);\n                 final long length = this.file.length();\n                 if (length < position) {\n                     this.listener.fileRotated();\n-                    try (final RandomAccessFile save = reader) {\n-                        reader = new RandomAccessFile(this.file, \"r\");\n+                    try {\n+                        final RandomAccessFile save = reader;\n+                        Throwable x0 = null;\n                         try {\n-                            this.readLines(save);\n+                            reader = new RandomAccessFile(this.file, \"r\");\n+                            try {\n+                                this.readLines(save);\n+                            }\n+                            catch (final IOException ioe) {\n+                                this.listener.handle((Exception)ioe);\n+                            }\n+                            position = 0L;\n                         }\n-                        catch (final IOException ioe) {\n-                            this.listener.handle((Exception)ioe);\n+                        catch (final Throwable t) {\n+                            x0 = t;\n+                            throw t;\n+                        }\n+                        finally {\n+                            if (save != null) {\n+                                $closeResource(x0, save);\n+                            }\n                         }\n-                        position = 0L;\n                     }\n                     catch (final FileNotFoundException e2) {\n                         this.listener.fileNotFound();\n                         Thread.sleep(this.delayMillis);\n                     }\n                 }\n                 else {\n@@ -189,15 +202,17 @@\n     }\n     \n     public void stop() {\n         this.run = false;\n     }\n     \n     private long readLines(final RandomAccessFile reader) throws IOException {\n-        try (final ByteArrayOutputStream lineBuf = new ByteArrayOutputStream(64)) {\n+        final ByteArrayOutputStream lineBuf = new ByteArrayOutputStream(64);\n+        Throwable x0 = null;\n+        try {\n             long rePos;\n             long pos = rePos = reader.getFilePointer();\n             boolean seenCR = false;\n             int num;\n             while (this.getRun() && (num = reader.read(this.inbuf)) != -1) {\n                 for (int i = 0; i < num; ++i) {\n                     final byte ch = this.inbuf[i];\n@@ -232,13 +247,34 @@\n             }\n             reader.seek(rePos);\n             if (this.listener instanceof TailerListenerAdapter) {\n                 ((TailerListenerAdapter)this.listener).endOfFileReached();\n             }\n             return rePos;\n         }\n+        catch (final Throwable t) {\n+            x0 = t;\n+            throw t;\n+        }\n+        finally {\n+            $closeResource(x0, lineBuf);\n+        }\n+    }\n+    \n+    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n+        if (x0 != null) {\n+            try {\n+                x1.close();\n+            }\n+            catch (final Throwable exception) {\n+                x0.addSuppressed(exception);\n+            }\n+        }\n+        else {\n+            x1.close();\n+        }\n     }\n     \n     static {\n         DEFAULT_CHARSET = Charset.defaultCharset();\n     }\n }\n"}]}
