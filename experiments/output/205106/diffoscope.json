{"diffoscope-json-version": 1, "source1": "first/BaseEventSource.class", "source2": "second/BaseEventSource.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,12 +1,12 @@\n \n package org.apache.commons.configuration2.event;\n \n-import java.util.Iterator;\n import java.util.List;\n+import java.util.Iterator;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.Collection;\n \n public class BaseEventSource implements EventSource\n {\n     private EventListenerList eventListeners;\n@@ -15,105 +15,107 @@\n     \n     public BaseEventSource() {\n         this.lockDetailEventsCount = new Object();\n         this.initListeners();\n     }\n     \n     public <T extends Event> Collection<EventListener<? super T>> getEventListeners(final EventType<T> eventType) {\n-        final List<EventListener<? super T>> result = new LinkedList<EventListener<? super T>>();\n-        for (final EventListener<? super T> l : this.eventListeners.getEventListeners((EventType)eventType)) {\n-            result.add(l);\n+        final LinkedList c = new LinkedList();\n+        final Iterator iterator = this.eventListeners.getEventListeners((EventType)eventType).iterator();\n+        while (iterator.hasNext()) {\n+            c.add(iterator.next());\n         }\n-        return Collections.unmodifiableCollection((Collection<? extends EventListener<? super T>>)result);\n+        return (Collection<EventListener<? super T>>)Collections.unmodifiableCollection((Collection<?>)c);\n     }\n     \n     public List<EventListenerRegistrationData<?>> getEventListenerRegistrations() {\n         return this.eventListeners.getRegistrations();\n     }\n     \n     public boolean isDetailEvents() {\n         return this.checkDetailEvents(0);\n     }\n     \n-    public void setDetailEvents(final boolean enable) {\n+    public void setDetailEvents(final boolean b) {\n         synchronized (this.lockDetailEventsCount) {\n-            if (enable) {\n+            if (b) {\n                 ++this.detailEvents;\n             }\n             else {\n                 --this.detailEvents;\n             }\n         }\n     }\n     \n-    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n-        this.eventListeners.addEventListener((EventType)eventType, (EventListener)listener);\n+    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> eventListener) {\n+        this.eventListeners.addEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n-    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n-        return this.eventListeners.removeEventListener((EventType)eventType, (EventListener)listener);\n+    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> eventListener) {\n+        return this.eventListeners.removeEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n     public void clearEventListeners() {\n         this.eventListeners.clear();\n     }\n     \n     public void clearErrorListeners() {\n-        for (final EventListenerRegistrationData<? extends ConfigurationErrorEvent> reg : this.eventListeners.getRegistrationsForSuperType(ConfigurationErrorEvent.ANY)) {\n-            this.eventListeners.removeEventListener((EventListenerRegistrationData)reg);\n+        final Iterator iterator = this.eventListeners.getRegistrationsForSuperType(ConfigurationErrorEvent.ANY).iterator();\n+        while (iterator.hasNext()) {\n+            this.eventListeners.removeEventListener((EventListenerRegistrationData)iterator.next());\n         }\n     }\n     \n-    public void copyEventListeners(final BaseEventSource source) {\n-        if (source == null) {\n+    public void copyEventListeners(final BaseEventSource baseEventSource) {\n+        if (baseEventSource == null) {\n             throw new IllegalArgumentException(\"Target event source must not be null!\");\n         }\n-        source.eventListeners.addAll(this.eventListeners);\n+        baseEventSource.eventListeners.addAll(this.eventListeners);\n     }\n     \n-    protected <T extends ConfigurationEvent> void fireEvent(final EventType<T> type, final String propName, final Object propValue, final boolean before) {\n+    protected <T extends ConfigurationEvent> void fireEvent(final EventType<T> eventType, final String s, final Object o, final boolean b) {\n         if (this.checkDetailEvents(-1)) {\n-            final EventListenerList.EventListenerIterator<T> it = (EventListenerList.EventListenerIterator<T>)this.eventListeners.getEventListenerIterator((EventType)type);\n-            if (it.hasNext()) {\n-                final ConfigurationEvent event = this.createEvent(type, propName, propValue, before);\n-                while (it.hasNext()) {\n-                    it.invokeNext((Event)event);\n+            final EventListenerList.EventListenerIterator eventListenerIterator = this.eventListeners.getEventListenerIterator((EventType)eventType);\n+            if (eventListenerIterator.hasNext()) {\n+                final ConfigurationEvent event = this.createEvent((org.apache.commons.configuration2.event.EventType<ConfigurationEvent>)eventType, s, o, b);\n+                while (eventListenerIterator.hasNext()) {\n+                    eventListenerIterator.invokeNext((Event)event);\n                 }\n             }\n         }\n     }\n     \n-    protected <T extends ConfigurationEvent> ConfigurationEvent createEvent(final EventType<T> type, final String propName, final Object propValue, final boolean before) {\n-        return new ConfigurationEvent((Object)this, (EventType)type, propName, propValue, before);\n+    protected <T extends ConfigurationEvent> ConfigurationEvent createEvent(final EventType<T> eventType, final String s, final Object o, final boolean b) {\n+        return new ConfigurationEvent((Object)this, (EventType)eventType, s, o, b);\n     }\n     \n-    public <T extends ConfigurationErrorEvent> void fireError(final EventType<T> eventType, final EventType<?> operationType, final String propertyName, final Object propertyValue, final Throwable cause) {\n-        final EventListenerList.EventListenerIterator<T> iterator = (EventListenerList.EventListenerIterator<T>)this.eventListeners.getEventListenerIterator((EventType)eventType);\n-        if (iterator.hasNext()) {\n-            final ConfigurationErrorEvent event = this.createErrorEvent(eventType, operationType, propertyName, propertyValue, cause);\n-            while (iterator.hasNext()) {\n-                iterator.invokeNext((Event)event);\n+    public <T extends ConfigurationErrorEvent> void fireError(final EventType<T> eventType, final EventType<?> eventType2, final String s, final Object o, final Throwable t) {\n+        final EventListenerList.EventListenerIterator eventListenerIterator = this.eventListeners.getEventListenerIterator((EventType)eventType);\n+        if (eventListenerIterator.hasNext()) {\n+            final ConfigurationErrorEvent errorEvent = this.createErrorEvent(eventType, eventType2, s, o, t);\n+            while (eventListenerIterator.hasNext()) {\n+                eventListenerIterator.invokeNext((Event)errorEvent);\n             }\n         }\n     }\n     \n-    protected ConfigurationErrorEvent createErrorEvent(final EventType<? extends ConfigurationErrorEvent> type, final EventType<?> opType, final String propName, final Object propValue, final Throwable ex) {\n-        return new ConfigurationErrorEvent((Object)this, (EventType)type, (EventType)opType, propName, propValue, ex);\n+    protected ConfigurationErrorEvent createErrorEvent(final EventType<? extends ConfigurationErrorEvent> eventType, final EventType<?> eventType2, final String s, final Object o, final Throwable t) {\n+        return new ConfigurationErrorEvent((Object)this, (EventType)eventType, (EventType)eventType2, s, o, t);\n     }\n     \n     @Override\n     protected Object clone() throws CloneNotSupportedException {\n-        final BaseEventSource copy = (BaseEventSource)super.clone();\n-        copy.initListeners();\n-        return copy;\n+        final BaseEventSource baseEventSource = (BaseEventSource)super.clone();\n+        baseEventSource.initListeners();\n+        return baseEventSource;\n     }\n     \n     private void initListeners() {\n         this.eventListeners = new EventListenerList();\n     }\n     \n-    private boolean checkDetailEvents(final int limit) {\n+    private boolean checkDetailEvents(final int n) {\n         synchronized (this.lockDetailEventsCount) {\n-            return this.detailEvents > limit;\n+            return this.detailEvents > n;\n         }\n     }\n }\n"}]}
