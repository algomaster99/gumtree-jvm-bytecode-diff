{"diffoscope-json-version": 1, "source1": "first/BlockTagUtil.class", "source2": "second/BlockTagUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,42 +12,38 @@\n     private static final Pattern BLOCK_TAG_PATTERN_FIRST_LINE;\n     private static final Pattern BLOCK_TAG_PATTERN;\n     private static final String JAVADOC_CLOSING_TAG = \"*/\";\n     \n     private BlockTagUtil() {\n     }\n     \n-    public static List<TagInfo> extractBlockTags(final String... lines) {\n-        final List<TagInfo> tags = new ArrayList<TagInfo>();\n-        for (int i = 0; i < lines.length; ++i) {\n-            final boolean isFirstLine = i == 0;\n+    public static List<TagInfo> extractBlockTags(final String... array) {\n+        final ArrayList list = new ArrayList();\n+        for (int i = 0; i < array.length; ++i) {\n             Pattern pattern;\n-            if (isFirstLine) {\n+            if (i == 0) {\n                 pattern = BlockTagUtil.BLOCK_TAG_PATTERN_FIRST_LINE;\n             }\n             else {\n                 pattern = BlockTagUtil.BLOCK_TAG_PATTERN;\n             }\n-            final String line = lines[i];\n-            final Matcher tagMatcher = pattern.matcher(line);\n-            if (tagMatcher.find()) {\n-                final String tagName = tagMatcher.group(1);\n-                final int colNum = tagMatcher.start(1) - 1;\n-                final int lineNum = i + 1;\n-                final String remainder = line.substring(tagMatcher.end(1));\n-                String tagValue = remainder.trim();\n-                if (tagValue.endsWith(\"*/\")) {\n-                    final int endIndex = tagValue.length() - \"*/\".length();\n-                    tagValue = tagValue.substring(0, endIndex).trim();\n+            final String input = array[i];\n+            final Matcher matcher = pattern.matcher(input);\n+            if (matcher.find()) {\n+                final String group = matcher.group(1);\n+                final int n = matcher.start(1) - 1;\n+                final int n2 = i + 1;\n+                String s = input.substring(matcher.end(1)).trim();\n+                if (s.endsWith(\"*/\")) {\n+                    s = s.substring(0, s.length() - \"*/\".length()).trim();\n                 }\n-                final LineColumn position = new LineColumn(lineNum, colNum);\n-                tags.add(new TagInfo(tagName, tagValue, position));\n+                list.add(new TagInfo(group, s, new LineColumn(n2, n)));\n             }\n         }\n-        return tags;\n+        return list;\n     }\n     \n     static {\n         BLOCK_TAG_PATTERN_FIRST_LINE = Pattern.compile(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n         BLOCK_TAG_PATTERN = Pattern.compile(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");\n     }\n }\n"}]}
