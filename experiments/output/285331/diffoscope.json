{"diffoscope-json-version": 1, "source1": "first/ArrayElementValue.class", "source2": "second/ArrayElementValue.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,102 +1,100 @@\n-  SHA-256 checksum b3904db6c526dcd9096df5075100161fbca4f18cfdc4b31bceda89eed0871ece\n+  SHA-256 checksum 5250b66377dde0b83a08fbc773831ad7a8e7fe1e36dff7521a673cfe61ca2588\n   Compiled from \"ArrayElementValue.java\"\n public class org.apache.bcel.classfile.ArrayElementValue extends org.apache.bcel.classfile.ElementValue\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #23                         // org/apache/bcel/classfile/ArrayElementValue\n   super_class: #2                         // org/apache/bcel/classfile/ElementValue\n   interfaces: 0, fields: 1, methods: 6, attributes: 1\n Constant pool:\n-   #1 = Methodref          #2.#48         // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #2 = Class              #49            // org/apache/bcel/classfile/ElementValue\n-   #3 = Class              #50            // java/lang/IllegalArgumentException\n-   #4 = Class              #51            // java/lang/StringBuilder\n-   #5 = Methodref          #4.#52         // java/lang/StringBuilder.\"<init>\":()V\n-   #6 = String             #53            // Only element values of type array can be built with this ctor - type specified:\n-   #7 = Methodref          #4.#54         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #8 = Methodref          #4.#55         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #9 = Methodref          #4.#56         // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #10 = Methodref          #3.#57         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-  #11 = Fieldref           #23.#58        // org/apache/bcel/classfile/ArrayElementValue.elementValues:[Lorg/apache/bcel/classfile/ElementValue;\n-  #12 = Methodref          #2.#59         // org/apache/bcel/classfile/ElementValue.getType:()I\n-  #13 = Methodref          #60.#61        // java/io/DataOutputStream.writeByte:(I)V\n-  #14 = Methodref          #60.#62        // java/io/DataOutputStream.writeShort:(I)V\n-  #15 = Methodref          #2.#63         // org/apache/bcel/classfile/ElementValue.dump:(Ljava/io/DataOutputStream;)V\n-  #16 = String             #64            // [\n-  #17 = Methodref          #2.#65         // org/apache/bcel/classfile/ElementValue.stringifyValue:()Ljava/lang/String;\n-  #18 = String             #66            // ,\n-  #19 = String             #67            // ]\n-  #20 = String             #68            // {\n-  #21 = Methodref          #4.#69         // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #22 = String             #70            // }\n-  #23 = Class              #71            // org/apache/bcel/classfile/ArrayElementValue\n+   #1 = Methodref          #2.#46         // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+   #2 = Class              #47            // org/apache/bcel/classfile/ElementValue\n+   #3 = Class              #48            // java/lang/IllegalArgumentException\n+   #4 = Class              #49            // java/lang/StringBuilder\n+   #5 = Methodref          #4.#50         // java/lang/StringBuilder.\"<init>\":()V\n+   #6 = String             #51            // Only element values of type array can be built with this ctor - type specified:\n+   #7 = Methodref          #4.#52         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #8 = Methodref          #4.#53         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #9 = Methodref          #4.#54         // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #10 = Methodref          #3.#55         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #11 = Fieldref           #23.#56        // org/apache/bcel/classfile/ArrayElementValue.elementValues:[Lorg/apache/bcel/classfile/ElementValue;\n+  #12 = Methodref          #2.#57         // org/apache/bcel/classfile/ElementValue.getType:()I\n+  #13 = Methodref          #58.#59        // java/io/DataOutputStream.writeByte:(I)V\n+  #14 = Methodref          #58.#60        // java/io/DataOutputStream.writeShort:(I)V\n+  #15 = Methodref          #2.#61         // org/apache/bcel/classfile/ElementValue.dump:(Ljava/io/DataOutputStream;)V\n+  #16 = String             #62            // [\n+  #17 = Methodref          #2.#63         // org/apache/bcel/classfile/ElementValue.stringifyValue:()Ljava/lang/String;\n+  #18 = String             #64            // ,\n+  #19 = String             #65            // ]\n+  #20 = String             #66            // {\n+  #21 = Methodref          #4.#67         // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #22 = String             #68            // }\n+  #23 = Class              #69            // org/apache/bcel/classfile/ArrayElementValue\n   #24 = Utf8               elementValues\n   #25 = Utf8               [Lorg/apache/bcel/classfile/ElementValue;\n   #26 = Utf8               <init>\n   #27 = Utf8               (I[Lorg/apache/bcel/classfile/ElementValue;Lorg/apache/bcel/classfile/ConstantPool;)V\n   #28 = Utf8               Code\n   #29 = Utf8               LineNumberTable\n   #30 = Utf8               StackMapTable\n-  #31 = Class              #71            // org/apache/bcel/classfile/ArrayElementValue\n-  #32 = Class              #25            // \"[Lorg/apache/bcel/classfile/ElementValue;\"\n-  #33 = Class              #72            // org/apache/bcel/classfile/ConstantPool\n-  #34 = Utf8               dump\n-  #35 = Utf8               (Ljava/io/DataOutputStream;)V\n-  #36 = Utf8               Exceptions\n-  #37 = Class              #73            // java/io/IOException\n-  #38 = Utf8               getElementValuesArray\n-  #39 = Utf8               ()[Lorg/apache/bcel/classfile/ElementValue;\n-  #40 = Utf8               getElementValuesArraySize\n-  #41 = Utf8               ()I\n-  #42 = Utf8               stringifyValue\n-  #43 = Utf8               ()Ljava/lang/String;\n-  #44 = Class              #51            // java/lang/StringBuilder\n-  #45 = Utf8               toString\n-  #46 = Utf8               SourceFile\n-  #47 = Utf8               ArrayElementValue.java\n-  #48 = NameAndType        #26:#74        // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #49 = Utf8               org/apache/bcel/classfile/ElementValue\n-  #50 = Utf8               java/lang/IllegalArgumentException\n-  #51 = Utf8               java/lang/StringBuilder\n-  #52 = NameAndType        #26:#75        // \"<init>\":()V\n-  #53 = Utf8               Only element values of type array can be built with this ctor - type specified:\n-  #54 = NameAndType        #76:#77        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #55 = NameAndType        #76:#78        // append:(I)Ljava/lang/StringBuilder;\n-  #56 = NameAndType        #45:#43        // toString:()Ljava/lang/String;\n-  #57 = NameAndType        #26:#79        // \"<init>\":(Ljava/lang/String;)V\n-  #58 = NameAndType        #24:#25        // elementValues:[Lorg/apache/bcel/classfile/ElementValue;\n-  #59 = NameAndType        #80:#41        // getType:()I\n-  #60 = Class              #81            // java/io/DataOutputStream\n-  #61 = NameAndType        #82:#83        // writeByte:(I)V\n-  #62 = NameAndType        #84:#83        // writeShort:(I)V\n-  #63 = NameAndType        #34:#35        // dump:(Ljava/io/DataOutputStream;)V\n-  #64 = Utf8               [\n-  #65 = NameAndType        #42:#43        // stringifyValue:()Ljava/lang/String;\n-  #66 = Utf8               ,\n-  #67 = Utf8               ]\n-  #68 = Utf8               {\n-  #69 = NameAndType        #76:#85        // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #70 = Utf8               }\n-  #71 = Utf8               org/apache/bcel/classfile/ArrayElementValue\n-  #72 = Utf8               org/apache/bcel/classfile/ConstantPool\n-  #73 = Utf8               java/io/IOException\n-  #74 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #75 = Utf8               ()V\n-  #76 = Utf8               append\n-  #77 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #78 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #79 = Utf8               (Ljava/lang/String;)V\n-  #80 = Utf8               getType\n-  #81 = Utf8               java/io/DataOutputStream\n-  #82 = Utf8               writeByte\n-  #83 = Utf8               (I)V\n-  #84 = Utf8               writeShort\n-  #85 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #31 = Class              #25            // \"[Lorg/apache/bcel/classfile/ElementValue;\"\n+  #32 = Class              #70            // org/apache/bcel/classfile/ConstantPool\n+  #33 = Utf8               dump\n+  #34 = Utf8               (Ljava/io/DataOutputStream;)V\n+  #35 = Utf8               Exceptions\n+  #36 = Class              #71            // java/io/IOException\n+  #37 = Utf8               getElementValuesArray\n+  #38 = Utf8               ()[Lorg/apache/bcel/classfile/ElementValue;\n+  #39 = Utf8               getElementValuesArraySize\n+  #40 = Utf8               ()I\n+  #41 = Utf8               stringifyValue\n+  #42 = Utf8               ()Ljava/lang/String;\n+  #43 = Utf8               toString\n+  #44 = Utf8               SourceFile\n+  #45 = Utf8               ArrayElementValue.java\n+  #46 = NameAndType        #26:#72        // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+  #47 = Utf8               org/apache/bcel/classfile/ElementValue\n+  #48 = Utf8               java/lang/IllegalArgumentException\n+  #49 = Utf8               java/lang/StringBuilder\n+  #50 = NameAndType        #26:#73        // \"<init>\":()V\n+  #51 = Utf8               Only element values of type array can be built with this ctor - type specified:\n+  #52 = NameAndType        #74:#75        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #53 = NameAndType        #74:#76        // append:(I)Ljava/lang/StringBuilder;\n+  #54 = NameAndType        #43:#42        // toString:()Ljava/lang/String;\n+  #55 = NameAndType        #26:#77        // \"<init>\":(Ljava/lang/String;)V\n+  #56 = NameAndType        #24:#25        // elementValues:[Lorg/apache/bcel/classfile/ElementValue;\n+  #57 = NameAndType        #78:#40        // getType:()I\n+  #58 = Class              #79            // java/io/DataOutputStream\n+  #59 = NameAndType        #80:#81        // writeByte:(I)V\n+  #60 = NameAndType        #82:#81        // writeShort:(I)V\n+  #61 = NameAndType        #33:#34        // dump:(Ljava/io/DataOutputStream;)V\n+  #62 = Utf8               [\n+  #63 = NameAndType        #41:#42        // stringifyValue:()Ljava/lang/String;\n+  #64 = Utf8               ,\n+  #65 = Utf8               ]\n+  #66 = Utf8               {\n+  #67 = NameAndType        #74:#83        // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #68 = Utf8               }\n+  #69 = Utf8               org/apache/bcel/classfile/ArrayElementValue\n+  #70 = Utf8               org/apache/bcel/classfile/ConstantPool\n+  #71 = Utf8               java/io/IOException\n+  #72 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n+  #73 = Utf8               ()V\n+  #74 = Utf8               append\n+  #75 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #76 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #77 = Utf8               (Ljava/lang/String;)V\n+  #78 = Utf8               getType\n+  #79 = Utf8               java/io/DataOutputStream\n+  #80 = Utf8               writeByte\n+  #81 = Utf8               (I)V\n+  #82 = Utf8               writeShort\n+  #83 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n {\n   private final org.apache.bcel.classfile.ElementValue[] elementValues;\n     descriptor: [Lorg/apache/bcel/classfile/ElementValue;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.bcel.classfile.ArrayElementValue(int, org.apache.bcel.classfile.ElementValue[], org.apache.bcel.classfile.ConstantPool);\n     descriptor: (I[Lorg/apache/bcel/classfile/ElementValue;Lorg/apache/bcel/classfile/ConstantPool;)V\n"}]}
