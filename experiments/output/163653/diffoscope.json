{"diffoscope-json-version": 1, "source1": "first/HuffmanDecoder.class", "source2": "second/HuffmanDecoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,110 +1,110 @@\n-  SHA-256 checksum 536ed4b63d04aad5ad2cf147667f72d331b9884ec445e21902ac94c3cb2a0216\n+  SHA-256 checksum 2aca852292066143a07925d30eea552608a55537f9fa10a914bb6ed0f3a35e7e\n   Compiled from \"HuffmanDecoder.java\"\n class org.apache.commons.compress.compressors.deflate64.HuffmanDecoder implements java.io.Closeable\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n   this_class: #89                         // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n   super_class: #90                        // java/lang/Object\n   interfaces: 1, fields: 10, methods: 22, attributes: 2\n Constant pool:\n-    #1 = Fieldref           #89.#211      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.DISTANCE_TABLE:[I\n-    #2 = Fieldref           #89.#212      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.RUN_LENGTH_TABLE:[S\n-    #3 = Methodref          #89.#213      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-    #4 = Methodref          #89.#214      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-    #5 = Fieldref           #89.#215      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.in:Ljava/io/InputStream;\n-    #6 = Fieldref           #89.#216      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-    #7 = Methodref          #89.#217      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(I)J\n-    #8 = Fieldref           #89.#218      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-    #9 = Methodref          #90.#219      // java/lang/Object.\"<init>\":()V\n-   #10 = Fieldref           #89.#220      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.finalBlock:Z\n-   #11 = Class              #221          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n-   #12 = Methodref          #11.#222      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #13 = Class              #223          // org/apache/commons/compress/utils/BitInputStream\n-   #14 = Fieldref           #224.#225     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #15 = Methodref          #13.#226      // org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #16 = Class              #227          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n-   #17 = Methodref          #16.#228      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #18 = Fieldref           #89.#229      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-   #19 = Methodref          #89.#230      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n-   #20 = Methodref          #99.#231      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n-   #21 = Methodref          #99.#232      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #22 = Fieldref           #233.#234     // org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #23 = Methodref          #89.#235      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.switchToUncompressedState:()V\n-   #24 = Class              #236          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n-   #25 = Fieldref           #233.#237     // org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #26 = Fieldref           #89.#238      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_LITERALS:[I\n-   #27 = Fieldref           #89.#239      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_DISTANCE:[I\n-   #28 = Methodref          #24.#240      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-   #29 = Methodref          #89.#241      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readDynamicTables:()[[I\n-   #30 = Fieldref           #233.#242     // org/apache/commons/compress/compressors/deflate64/HuffmanState.DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #31 = Class              #243          // java/lang/IllegalStateException\n-   #32 = Class              #244          // java/lang/StringBuilder\n-   #33 = Methodref          #32.#219      // java/lang/StringBuilder.\"<init>\":()V\n-   #34 = String             #245          // Unsupported compression:\n-   #35 = Methodref          #32.#246      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #36 = Methodref          #32.#247      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #32.#248      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #38 = Methodref          #31.#249      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #39 = Methodref          #99.#250      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n-   #40 = Methodref          #13.#251      // org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n+    #1 = Fieldref           #89.#208      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.DISTANCE_TABLE:[I\n+    #2 = Fieldref           #89.#209      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.RUN_LENGTH_TABLE:[S\n+    #3 = Methodref          #89.#210      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+    #4 = Methodref          #89.#211      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+    #5 = Fieldref           #89.#212      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.in:Ljava/io/InputStream;\n+    #6 = Fieldref           #89.#213      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+    #7 = Methodref          #89.#214      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(I)J\n+    #8 = Fieldref           #89.#215      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+    #9 = Methodref          #90.#216      // java/lang/Object.\"<init>\":()V\n+   #10 = Fieldref           #89.#217      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.finalBlock:Z\n+   #11 = Class              #218          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n+   #12 = Methodref          #11.#219      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #13 = Class              #220          // org/apache/commons/compress/utils/BitInputStream\n+   #14 = Fieldref           #221.#222     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #15 = Methodref          #13.#223      // org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #16 = Class              #224          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n+   #17 = Methodref          #16.#225      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #18 = Fieldref           #89.#226      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+   #19 = Methodref          #89.#227      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n+   #20 = Methodref          #99.#228      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n+   #21 = Methodref          #99.#229      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #22 = Fieldref           #230.#231     // org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #23 = Methodref          #89.#232      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.switchToUncompressedState:()V\n+   #24 = Class              #233          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n+   #25 = Fieldref           #230.#234     // org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #26 = Fieldref           #89.#235      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_LITERALS:[I\n+   #27 = Fieldref           #89.#236      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_DISTANCE:[I\n+   #28 = Methodref          #24.#237      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+   #29 = Methodref          #89.#238      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readDynamicTables:()[[I\n+   #30 = Fieldref           #230.#239     // org/apache/commons/compress/compressors/deflate64/HuffmanState.DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #31 = Class              #240          // java/lang/IllegalStateException\n+   #32 = Class              #241          // java/lang/StringBuilder\n+   #33 = Methodref          #32.#216      // java/lang/StringBuilder.\"<init>\":()V\n+   #34 = String             #242          // Unsupported compression:\n+   #35 = Methodref          #32.#243      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #36 = Methodref          #32.#244      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #37 = Methodref          #32.#245      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #38 = Methodref          #31.#246      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #39 = Methodref          #99.#247      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n+   #40 = Methodref          #13.#248      // org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n    #41 = Long               65535l\n-   #43 = String             #252          // Illegal LEN / NLEN values\n-   #44 = Class              #253          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n-   #45 = Methodref          #44.#254      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #43 = String             #249          // Illegal LEN / NLEN values\n+   #44 = Class              #250          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n+   #45 = Methodref          #44.#251      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n    #46 = Class              #104          // \"[I\"\n    #47 = Long               257l\n-   #49 = Methodref          #89.#255      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-   #50 = Methodref          #99.#256      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n-   #51 = Fieldref           #64.#257      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n-   #52 = Methodref          #89.#258      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-   #53 = Fieldref           #64.#259      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #54 = Fieldref           #64.#260      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #49 = Methodref          #89.#252      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+   #50 = Methodref          #99.#253      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n+   #51 = Fieldref           #64.#254      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n+   #52 = Methodref          #89.#255      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+   #53 = Fieldref           #64.#256      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #54 = Fieldref           #64.#257      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n    #55 = Long               4l\n-   #57 = Fieldref           #89.#261      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.CODE_LENGTHS_ORDER:[I\n+   #57 = Fieldref           #89.#258      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.CODE_LENGTHS_ORDER:[I\n    #58 = Long               3l\n    #60 = Long               11l\n-   #62 = Methodref          #262.#263     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #63 = Methodref          #89.#264      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getCodes:([I)[I\n-   #64 = Class              #265          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n-   #65 = Methodref          #64.#266      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #66 = Methodref          #64.#267      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #67 = Methodref          #64.#268      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #68 = Methodref          #64.#269      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n-   #69 = Methodref          #270.#271     // java/lang/Math.max:(II)I\n-   #70 = Methodref          #272.#273     // java/util/Arrays.copyOf:([II)[I\n-   #71 = Methodref          #13.#217      // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+   #62 = Methodref          #259.#260     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #63 = Methodref          #89.#261      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getCodes:([I)[I\n+   #64 = Class              #262          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n+   #65 = Methodref          #64.#263      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #66 = Methodref          #64.#264      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #67 = Methodref          #64.#265      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #68 = Methodref          #64.#266      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n+   #69 = Methodref          #267.#268     // java/lang/Math.max:(II)I\n+   #70 = Methodref          #269.#270     // java/util/Arrays.copyOf:([II)[I\n+   #71 = Methodref          #13.#214      // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n    #72 = Long               -1l\n-   #74 = Class              #274          // java/io/EOFException\n-   #75 = String             #275          // Truncated Deflate64 Stream\n-   #76 = Methodref          #74.#249      // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+   #74 = Class              #271          // java/io/EOFException\n+   #75 = String             #272          // Truncated Deflate64 Stream\n+   #76 = Methodref          #74.#246      // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n    #77 = Integer            32794\n    #78 = Integer            49178\n    #79 = Integer            65563\n    #80 = Integer            98331\n    #81 = Integer            131100\n    #82 = Integer            196636\n    #83 = Integer            262173\n    #84 = Integer            393245\n    #85 = Integer            524318\n    #86 = Integer            786462\n-   #87 = Methodref          #272.#276     // java/util/Arrays.fill:([IIII)V\n-   #88 = Methodref          #272.#277     // java/util/Arrays.fill:([II)V\n-   #89 = Class              #278          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-   #90 = Class              #279          // java/lang/Object\n-   #91 = Class              #280          // java/io/Closeable\n-   #92 = Class              #281          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n+   #87 = Methodref          #269.#273     // java/util/Arrays.fill:([IIII)V\n+   #88 = Methodref          #269.#274     // java/util/Arrays.fill:([II)V\n+   #89 = Class              #275          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+   #90 = Class              #276          // java/lang/Object\n+   #91 = Class              #277          // java/io/Closeable\n+   #92 = Class              #278          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n    #93 = Utf8               InnerClasses\n    #94 = Utf8               DecodingMemory\n    #95 = Utf8               BinaryTreeNode\n    #96 = Utf8               HuffmanCodes\n    #97 = Utf8               InitialState\n    #98 = Utf8               UncompressedState\n-   #99 = Class              #282          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n+   #99 = Class              #279          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n   #100 = Utf8               DecoderState\n   #101 = Utf8               RUN_LENGTH_TABLE\n   #102 = Utf8               [S\n   #103 = Utf8               DISTANCE_TABLE\n   #104 = Utf8               [I\n   #105 = Utf8               CODE_LENGTHS_ORDER\n   #106 = Utf8               FIXED_LITERALS\n@@ -129,210 +129,207 @@\n   #125 = Utf8               close\n   #126 = Utf8               ()V\n   #127 = Utf8               decode\n   #128 = Utf8               ([B)I\n   #129 = Utf8               b\n   #130 = Utf8               [B\n   #131 = Utf8               Exceptions\n-  #132 = Class              #283          // java/io/IOException\n+  #132 = Class              #280          // java/io/IOException\n   #133 = Utf8               ([BII)I\n   #134 = Utf8               tables\n   #135 = Utf8               [[I\n   #136 = Utf8               mode\n   #137 = Utf8               I\n   #138 = Utf8               off\n   #139 = Utf8               len\n   #140 = Utf8               StackMapTable\n-  #141 = Class              #278          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  #142 = Class              #130          // \"[B\"\n-  #143 = Utf8               switchToUncompressedState\n-  #144 = Utf8               bLen\n-  #145 = Utf8               J\n-  #146 = Utf8               bNLen\n-  #147 = Utf8               readDynamicTables\n-  #148 = Utf8               ()[[I\n-  #149 = Utf8               result\n-  #150 = Utf8               literals\n-  #151 = Utf8               distances\n-  #152 = Utf8               available\n-  #153 = Utf8               ()I\n-  #154 = Utf8               nextSymbol\n-  #155 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-  #156 = Utf8               bit\n-  #157 = Utf8               tree\n-  #158 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #159 = Utf8               node\n-  #160 = Class              #265          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n-  #161 = Utf8               populateDynamicTables\n-  #162 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-  #163 = Utf8               cLen\n-  #164 = Utf8               symbol\n-  #165 = Utf8               codeLengths\n-  #166 = Utf8               codeLengthValues\n-  #167 = Utf8               codeLengthTree\n-  #168 = Utf8               auxBuffer\n-  #169 = Utf8               value\n-  #170 = Utf8               length\n-  #171 = Class              #223          // org/apache/commons/compress/utils/BitInputStream\n-  #172 = Utf8               buildTree\n-  #173 = Utf8               ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #174 = Utf8               p\n-  #175 = Utf8               lit\n-  #176 = Utf8               i\n-  #177 = Utf8               litTable\n-  #178 = Utf8               literalCodes\n-  #179 = Utf8               root\n-  #180 = Utf8               getCodes\n-  #181 = Utf8               ([I)[I\n-  #182 = Utf8               aLitTable\n-  #183 = Utf8               max\n-  #184 = Utf8               blCount\n-  #185 = Utf8               code\n-  #186 = Utf8               nextCode\n-  #187 = Utf8               readBits\n-  #188 = Utf8               (I)J\n-  #189 = Utf8               numBits\n-  #190 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-  #191 = Utf8               r\n-  #192 = Utf8               access$400\n-  #193 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/utils/BitInputStream;\n-  #194 = Utf8               x0\n-  #195 = Utf8               access$500\n-  #196 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;I)J\n-  #197 = Utf8               x1\n-  #198 = Utf8               access$600\n-  #199 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-  #200 = Utf8               access$700\n-  #201 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Ljava/io/InputStream;\n-  #202 = Utf8               access$800\n-  #203 = Utf8               access$900\n-  #204 = Utf8               access$1000\n-  #205 = Utf8               ()[S\n-  #206 = Utf8               access$1100\n-  #207 = Utf8               ()[I\n-  #208 = Utf8               <clinit>\n-  #209 = Utf8               SourceFile\n-  #210 = Utf8               HuffmanDecoder.java\n-  #211 = NameAndType        #103:#104     // DISTANCE_TABLE:[I\n-  #212 = NameAndType        #101:#102     // RUN_LENGTH_TABLE:[S\n-  #213 = NameAndType        #154:#155     // nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-  #214 = NameAndType        #172:#173     // buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #215 = NameAndType        #114:#115     // in:Ljava/io/InputStream;\n-  #216 = NameAndType        #116:#117     // memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-  #217 = NameAndType        #187:#188     // readBits:(I)J\n-  #218 = NameAndType        #112:#113     // reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-  #219 = NameAndType        #118:#126     // \"<init>\":()V\n-  #220 = NameAndType        #108:#109     // finalBlock:Z\n-  #221 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n-  #222 = NameAndType        #118:#284     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #223 = Utf8               org/apache/commons/compress/utils/BitInputStream\n-  #224 = Class              #285          // java/nio/ByteOrder\n-  #225 = NameAndType        #286:#287     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-  #226 = NameAndType        #118:#288     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #227 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n-  #228 = NameAndType        #118:#289     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #229 = NameAndType        #110:#111     // state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-  #230 = NameAndType        #127:#133     // decode:([BII)I\n-  #231 = NameAndType        #290:#291     // hasData:()Z\n-  #232 = NameAndType        #110:#292     // state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #233 = Class              #293          // org/apache/commons/compress/compressors/deflate64/HuffmanState\n-  #234 = NameAndType        #294:#295     // INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #235 = NameAndType        #143:#126     // switchToUncompressedState:()V\n-  #236 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n-  #237 = NameAndType        #296:#295     // FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #238 = NameAndType        #106:#104     // FIXED_LITERALS:[I\n-  #239 = NameAndType        #107:#104     // FIXED_DISTANCE:[I\n-  #240 = NameAndType        #118:#297     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-  #241 = NameAndType        #147:#148     // readDynamicTables:()[[I\n-  #242 = NameAndType        #298:#295     // DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #243 = Utf8               java/lang/IllegalStateException\n-  #244 = Utf8               java/lang/StringBuilder\n-  #245 = Utf8               Unsupported compression:\n-  #246 = NameAndType        #299:#300     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #247 = NameAndType        #299:#301     // append:(I)Ljava/lang/StringBuilder;\n-  #248 = NameAndType        #302:#303     // toString:()Ljava/lang/String;\n-  #249 = NameAndType        #118:#304     // \"<init>\":(Ljava/lang/String;)V\n-  #250 = NameAndType        #305:#133     // read:([BII)I\n-  #251 = NameAndType        #306:#126     // alignWithByteBoundary:()V\n-  #252 = Utf8               Illegal LEN / NLEN values\n-  #253 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n-  #254 = NameAndType        #118:#307     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #255 = NameAndType        #161:#162     // populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-  #256 = NameAndType        #152:#153     // available:()I\n-  #257 = NameAndType        #308:#137     // literal:I\n-  #258 = NameAndType        #187:#190     // readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-  #259 = NameAndType        #309:#158     // leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #260 = NameAndType        #310:#158     // rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #261 = NameAndType        #105:#104     // CODE_LENGTHS_ORDER:[I\n-  #262 = Class              #311          // java/lang/System\n-  #263 = NameAndType        #312:#313     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #264 = NameAndType        #180:#181     // getCodes:([I)[I\n-  #265 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n-  #266 = NameAndType        #118:#314     // \"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #267 = NameAndType        #315:#316     // left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #268 = NameAndType        #317:#316     // right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #269 = NameAndType        #318:#319     // leaf:(I)V\n-  #270 = Class              #320          // java/lang/Math\n-  #271 = NameAndType        #183:#321     // max:(II)I\n-  #272 = Class              #322          // java/util/Arrays\n-  #273 = NameAndType        #323:#324     // copyOf:([II)[I\n-  #274 = Utf8               java/io/EOFException\n-  #275 = Utf8               Truncated Deflate64 Stream\n-  #276 = NameAndType        #325:#326     // fill:([IIII)V\n-  #277 = NameAndType        #325:#327     // fill:([II)V\n-  #278 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  #279 = Utf8               java/lang/Object\n-  #280 = Utf8               java/io/Closeable\n-  #281 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n-  #282 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n-  #283 = Utf8               java/io/IOException\n-  #284 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #285 = Utf8               java/nio/ByteOrder\n-  #286 = Utf8               LITTLE_ENDIAN\n-  #287 = Utf8               Ljava/nio/ByteOrder;\n-  #288 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #289 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #290 = Utf8               hasData\n-  #291 = Utf8               ()Z\n-  #292 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #293 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanState\n-  #294 = Utf8               INITIAL\n-  #295 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #296 = Utf8               FIXED_CODES\n-  #297 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-  #298 = Utf8               DYNAMIC_CODES\n-  #299 = Utf8               append\n-  #300 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #301 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #302 = Utf8               toString\n-  #303 = Utf8               ()Ljava/lang/String;\n-  #304 = Utf8               (Ljava/lang/String;)V\n-  #305 = Utf8               read\n-  #306 = Utf8               alignWithByteBoundary\n-  #307 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #308 = Utf8               literal\n-  #309 = Utf8               leftNode\n-  #310 = Utf8               rightNode\n-  #311 = Utf8               java/lang/System\n-  #312 = Utf8               arraycopy\n-  #313 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #314 = Utf8               (ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #315 = Utf8               left\n-  #316 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #317 = Utf8               right\n-  #318 = Utf8               leaf\n-  #319 = Utf8               (I)V\n-  #320 = Utf8               java/lang/Math\n-  #321 = Utf8               (II)I\n-  #322 = Utf8               java/util/Arrays\n-  #323 = Utf8               copyOf\n-  #324 = Utf8               ([II)[I\n-  #325 = Utf8               fill\n-  #326 = Utf8               ([IIII)V\n-  #327 = Utf8               ([II)V\n+  #141 = Class              #130          // \"[B\"\n+  #142 = Utf8               switchToUncompressedState\n+  #143 = Utf8               bLen\n+  #144 = Utf8               J\n+  #145 = Utf8               bNLen\n+  #146 = Utf8               readDynamicTables\n+  #147 = Utf8               ()[[I\n+  #148 = Utf8               result\n+  #149 = Utf8               literals\n+  #150 = Utf8               distances\n+  #151 = Utf8               available\n+  #152 = Utf8               ()I\n+  #153 = Utf8               nextSymbol\n+  #154 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+  #155 = Utf8               bit\n+  #156 = Utf8               tree\n+  #157 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #158 = Utf8               node\n+  #159 = Utf8               populateDynamicTables\n+  #160 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+  #161 = Utf8               cLen\n+  #162 = Utf8               symbol\n+  #163 = Utf8               codeLengths\n+  #164 = Utf8               codeLengthValues\n+  #165 = Utf8               codeLengthTree\n+  #166 = Utf8               auxBuffer\n+  #167 = Utf8               value\n+  #168 = Utf8               length\n+  #169 = Utf8               buildTree\n+  #170 = Utf8               ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #171 = Utf8               p\n+  #172 = Utf8               lit\n+  #173 = Utf8               i\n+  #174 = Utf8               litTable\n+  #175 = Utf8               literalCodes\n+  #176 = Utf8               root\n+  #177 = Utf8               getCodes\n+  #178 = Utf8               ([I)[I\n+  #179 = Utf8               aLitTable\n+  #180 = Utf8               max\n+  #181 = Utf8               blCount\n+  #182 = Utf8               code\n+  #183 = Utf8               nextCode\n+  #184 = Utf8               readBits\n+  #185 = Utf8               (I)J\n+  #186 = Utf8               numBits\n+  #187 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+  #188 = Utf8               r\n+  #189 = Utf8               access$400\n+  #190 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/utils/BitInputStream;\n+  #191 = Utf8               x0\n+  #192 = Utf8               access$500\n+  #193 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;I)J\n+  #194 = Utf8               x1\n+  #195 = Utf8               access$600\n+  #196 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+  #197 = Utf8               access$700\n+  #198 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Ljava/io/InputStream;\n+  #199 = Utf8               access$800\n+  #200 = Utf8               access$900\n+  #201 = Utf8               access$1000\n+  #202 = Utf8               ()[S\n+  #203 = Utf8               access$1100\n+  #204 = Utf8               ()[I\n+  #205 = Utf8               <clinit>\n+  #206 = Utf8               SourceFile\n+  #207 = Utf8               HuffmanDecoder.java\n+  #208 = NameAndType        #103:#104     // DISTANCE_TABLE:[I\n+  #209 = NameAndType        #101:#102     // RUN_LENGTH_TABLE:[S\n+  #210 = NameAndType        #153:#154     // nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+  #211 = NameAndType        #169:#170     // buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #212 = NameAndType        #114:#115     // in:Ljava/io/InputStream;\n+  #213 = NameAndType        #116:#117     // memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+  #214 = NameAndType        #184:#185     // readBits:(I)J\n+  #215 = NameAndType        #112:#113     // reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+  #216 = NameAndType        #118:#126     // \"<init>\":()V\n+  #217 = NameAndType        #108:#109     // finalBlock:Z\n+  #218 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n+  #219 = NameAndType        #118:#281     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #220 = Utf8               org/apache/commons/compress/utils/BitInputStream\n+  #221 = Class              #282          // java/nio/ByteOrder\n+  #222 = NameAndType        #283:#284     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+  #223 = NameAndType        #118:#285     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+  #224 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n+  #225 = NameAndType        #118:#286     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #226 = NameAndType        #110:#111     // state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+  #227 = NameAndType        #127:#133     // decode:([BII)I\n+  #228 = NameAndType        #287:#288     // hasData:()Z\n+  #229 = NameAndType        #110:#289     // state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #230 = Class              #290          // org/apache/commons/compress/compressors/deflate64/HuffmanState\n+  #231 = NameAndType        #291:#292     // INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #232 = NameAndType        #142:#126     // switchToUncompressedState:()V\n+  #233 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n+  #234 = NameAndType        #293:#292     // FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #235 = NameAndType        #106:#104     // FIXED_LITERALS:[I\n+  #236 = NameAndType        #107:#104     // FIXED_DISTANCE:[I\n+  #237 = NameAndType        #118:#294     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+  #238 = NameAndType        #146:#147     // readDynamicTables:()[[I\n+  #239 = NameAndType        #295:#292     // DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #240 = Utf8               java/lang/IllegalStateException\n+  #241 = Utf8               java/lang/StringBuilder\n+  #242 = Utf8               Unsupported compression:\n+  #243 = NameAndType        #296:#297     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #244 = NameAndType        #296:#298     // append:(I)Ljava/lang/StringBuilder;\n+  #245 = NameAndType        #299:#300     // toString:()Ljava/lang/String;\n+  #246 = NameAndType        #118:#301     // \"<init>\":(Ljava/lang/String;)V\n+  #247 = NameAndType        #302:#133     // read:([BII)I\n+  #248 = NameAndType        #303:#126     // alignWithByteBoundary:()V\n+  #249 = Utf8               Illegal LEN / NLEN values\n+  #250 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n+  #251 = NameAndType        #118:#304     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #252 = NameAndType        #159:#160     // populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+  #253 = NameAndType        #151:#152     // available:()I\n+  #254 = NameAndType        #305:#137     // literal:I\n+  #255 = NameAndType        #184:#187     // readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+  #256 = NameAndType        #306:#157     // leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #257 = NameAndType        #307:#157     // rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #258 = NameAndType        #105:#104     // CODE_LENGTHS_ORDER:[I\n+  #259 = Class              #308          // java/lang/System\n+  #260 = NameAndType        #309:#310     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #261 = NameAndType        #177:#178     // getCodes:([I)[I\n+  #262 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n+  #263 = NameAndType        #118:#311     // \"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #264 = NameAndType        #312:#313     // left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #265 = NameAndType        #314:#313     // right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #266 = NameAndType        #315:#316     // leaf:(I)V\n+  #267 = Class              #317          // java/lang/Math\n+  #268 = NameAndType        #180:#318     // max:(II)I\n+  #269 = Class              #319          // java/util/Arrays\n+  #270 = NameAndType        #320:#321     // copyOf:([II)[I\n+  #271 = Utf8               java/io/EOFException\n+  #272 = Utf8               Truncated Deflate64 Stream\n+  #273 = NameAndType        #322:#323     // fill:([IIII)V\n+  #274 = NameAndType        #322:#324     // fill:([II)V\n+  #275 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  #276 = Utf8               java/lang/Object\n+  #277 = Utf8               java/io/Closeable\n+  #278 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n+  #279 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n+  #280 = Utf8               java/io/IOException\n+  #281 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #282 = Utf8               java/nio/ByteOrder\n+  #283 = Utf8               LITTLE_ENDIAN\n+  #284 = Utf8               Ljava/nio/ByteOrder;\n+  #285 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+  #286 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #287 = Utf8               hasData\n+  #288 = Utf8               ()Z\n+  #289 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #290 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanState\n+  #291 = Utf8               INITIAL\n+  #292 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #293 = Utf8               FIXED_CODES\n+  #294 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+  #295 = Utf8               DYNAMIC_CODES\n+  #296 = Utf8               append\n+  #297 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #298 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #299 = Utf8               toString\n+  #300 = Utf8               ()Ljava/lang/String;\n+  #301 = Utf8               (Ljava/lang/String;)V\n+  #302 = Utf8               read\n+  #303 = Utf8               alignWithByteBoundary\n+  #304 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #305 = Utf8               literal\n+  #306 = Utf8               leftNode\n+  #307 = Utf8               rightNode\n+  #308 = Utf8               java/lang/System\n+  #309 = Utf8               arraycopy\n+  #310 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #311 = Utf8               (ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #312 = Utf8               left\n+  #313 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #314 = Utf8               right\n+  #315 = Utf8               leaf\n+  #316 = Utf8               (I)V\n+  #317 = Utf8               java/lang/Math\n+  #318 = Utf8               (II)I\n+  #319 = Utf8               java/util/Arrays\n+  #320 = Utf8               copyOf\n+  #321 = Utf8               ([II)[I\n+  #322 = Utf8               fill\n+  #323 = Utf8               ([IIII)V\n+  #324 = Utf8               ([II)V\n {\n   private static final short[] RUN_LENGTH_TABLE;\n     descriptor: [S\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final int[] DISTANCE_TABLE;\n     descriptor: [I\n"}]}
