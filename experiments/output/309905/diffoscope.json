{"diffoscope-json-version": 1, "source1": "first/TarArchiveOutputStream.class", "source2": "second/TarArchiveOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,569 +1,569 @@\n-  SHA-256 checksum 6cb1ec00f7f87bc664ea5dc0821f495d86477e9abb05d9c78abb81139dceae15\n+  SHA-256 checksum ded4799ec50abc53e206c65921a041002f0acf1989656429dc56eda207af08d3\n   Compiled from \"TarArchiveOutputStream.java\"\n public class org.apache.commons.compress.archivers.tar.TarArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n-  super_class: #168                       // org/apache/commons/compress/archivers/ArchiveOutputStream\n+  super_class: #23                        // org/apache/commons/compress/archivers/ArchiveOutputStream\n   interfaces: 0, fields: 26, methods: 35, attributes: 3\n Constant pool:\n-    #1 = Class              #289          // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n-    #2 = Methodref          #1.#290       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n-    #3 = Methodref          #1.#291       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n-    #4 = Methodref          #1.#292       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n-    #5 = Class              #293          // java/lang/IllegalArgumentException\n-    #6 = InvokeDynamic      #0:#297       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-    #7 = Methodref          #5.#298       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #8 = Methodref          #168.#299     // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n-    #9 = Fieldref           #1.#300       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.longFileMode:I\n-   #10 = Fieldref           #1.#301       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.bigNumberMode:I\n-   #11 = Fieldref           #1.#302       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.closed:Z\n-   #12 = Fieldref           #1.#303       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.haveUnclosedEntry:Z\n-   #13 = Fieldref           #1.#304       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.finished:Z\n-   #14 = Fieldref           #1.#305       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeadersForNonAsciiNames:Z\n-   #15 = InvokeDynamic      #1:#297       // #1:makeConcatWithConstants:(I)Ljava/lang/String;\n-   #16 = Class              #307          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-   #17 = Class              #308          // org/apache/commons/compress/utils/CountingOutputStream\n-   #18 = Methodref          #17.#309      // org/apache/commons/compress/utils/CountingOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #19 = Fieldref           #1.#310       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n-   #20 = Methodref          #16.#290      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n-   #21 = Fieldref           #1.#311       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-   #22 = Fieldref           #1.#312       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.encoding:Ljava/lang/String;\n-   #23 = Methodref          #313.#314     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #24 = Fieldref           #1.#315       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #25 = Fieldref           #1.#316       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordBuf:[B\n-   #26 = Fieldref           #1.#317       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordsPerBlock:I\n-   #27 = Methodref          #1.#318       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.getBytesWritten:()J\n-   #28 = Methodref          #17.#318      // org/apache/commons/compress/utils/CountingOutputStream.getBytesWritten:()J\n-   #29 = Class              #319          // java/io/IOException\n-   #30 = String             #320          // This archive has already been finished\n-   #31 = Methodref          #29.#298      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #32 = String             #321          // This archive contains unclosed entries.\n-   #33 = Methodref          #1.#322       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writeEOFRecord:()V\n-   #34 = Methodref          #1.#323       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.padAsNeeded:()V\n-   #35 = Methodref          #16.#324      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flush:()V\n-   #36 = Methodref          #1.#325       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.finish:()V\n-   #37 = Methodref          #16.#326      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.close:()V\n-   #38 = String             #327          // Stream has already been finished\n-   #39 = Class              #328          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #40 = Methodref          #39.#329      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n-   #41 = Methodref          #39.#330      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getExtraPaxHeaders:()Ljava/util/Map;\n-   #42 = Methodref          #1.#331       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n-   #43 = Methodref          #39.#332      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n-   #44 = Methodref          #39.#333      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #45 = Methodref          #1.#334       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writeRecord:([B)V\n-   #46 = Methodref          #39.#335      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-   #47 = Fieldref           #1.#336       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currSize:J\n-   #48 = Fieldref           #1.#337       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currBytes:J\n-   #49 = Methodref          #1.#338       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:([B)V\n-   #50 = Methodref          #1.#339       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.closeArchiveEntry:()V\n-   #51 = Class              #340          // java/util/HashMap\n-   #52 = Methodref          #51.#299      // java/util/HashMap.\"<init>\":()V\n-   #53 = Methodref          #39.#341      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-   #54 = String             #342          // path\n-   #55 = Class              #343          // org/apache/commons/compress/archivers/tar/TarConstants\n-   #56 = String             #344          // file name\n-   #57 = Methodref          #1.#345       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n-   #58 = Methodref          #39.#346      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLinkName:()Ljava/lang/String;\n-   #59 = Methodref          #99.#347      // java/lang/String.length:()I\n-   #60 = String             #348          // linkpath\n-   #61 = String             #349          // link name\n-   #62 = Methodref          #1.#350       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-   #63 = Methodref          #1.#351       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-   #64 = Fieldref           #1.#352       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #65 = InterfaceMethodref #243.#353     // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n-   #66 = InterfaceMethodref #244.#354     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #67 = Methodref          #39.#355      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isLink:()Z\n-   #68 = Methodref          #39.#356      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSymbolicLink:()Z\n-   #69 = InterfaceMethodref #244.#357     // java/util/Map.putAll:(Ljava/util/Map;)V\n-   #70 = InterfaceMethodref #244.#358     // java/util/Map.size:()I\n-   #71 = Methodref          #1.#359       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n-   #72 = Methodref          #39.#360      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n-   #73 = Fieldref           #1.#361       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currName:Ljava/lang/String;\n-   #74 = String             #362          // No current entry to close\n-   #75 = Methodref          #16.#363      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n-   #76 = InvokeDynamic      #2:#365       // #2:makeConcatWithConstants:(Ljava/lang/String;JJ)Ljava/lang/String;\n-   #77 = Fieldref           #1.#366       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordsWritten:I\n-   #78 = Long               512l\n-   #80 = Class              #367          // java/lang/IllegalStateException\n-   #81 = String             #368          // No current tar entry\n-   #82 = Methodref          #80.#298      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #83 = InvokeDynamic      #3:#370       // #3:makeConcatWithConstants:(IJLjava/lang/String;)Ljava/lang/String;\n-   #84 = Methodref          #16.#371      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([BII)V\n-   #85 = Methodref          #1.#372       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n-   #86 = InvokeDynamic      #4:#374       // #4:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-   #87 = Methodref          #99.#375      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #88 = Methodref          #39.#376      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;B)V\n-   #89 = Methodref          #1.#377       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-   #90 = Methodref          #1.#378       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-   #91 = Class              #379          // java/io/StringWriter\n-   #92 = Methodref          #91.#299      // java/io/StringWriter.\"<init>\":()V\n-   #93 = InterfaceMethodref #244.#380     // java/util/Map.entrySet:()Ljava/util/Set;\n-   #94 = InterfaceMethodref #381.#382     // java/util/Set.iterator:()Ljava/util/Iterator;\n-   #95 = InterfaceMethodref #254.#383     // java/util/Iterator.hasNext:()Z\n-   #96 = InterfaceMethodref #254.#384     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #97 = Class              #385          // java/util/Map$Entry\n-   #98 = InterfaceMethodref #97.#388      // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-   #99 = Class              #389          // java/lang/String\n-  #100 = InterfaceMethodref #97.#390      // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-  #101 = InvokeDynamic      #5:#392       // #5:makeConcatWithConstants:(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #102 = Class              #393          // org/apache/commons/compress/utils/CharsetNames\n-  #103 = String             #394          // UTF-8\n-  #104 = Methodref          #99.#395      // java/lang/String.getBytes:(Ljava/lang/String;)[B\n-  #105 = Methodref          #91.#396      // java/io/StringWriter.write:(Ljava/lang/String;)V\n-  #106 = Methodref          #91.#397      // java/io/StringWriter.toString:()Ljava/lang/String;\n-  #107 = Class              #398          // java/lang/StringBuilder\n-  #108 = Methodref          #107.#399     // java/lang/StringBuilder.\"<init>\":(I)V\n-  #109 = Methodref          #99.#400      // java/lang/String.charAt:(I)C\n-  #110 = Methodref          #1.#401       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.shouldBeReplaced:(C)Z\n-  #111 = String             #402          // _\n-  #112 = Methodref          #107.#403     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #113 = Methodref          #107.#404     // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #114 = Methodref          #107.#397     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #115 = Methodref          #405.#406     // java/util/Arrays.fill:([BB)V\n-  #116 = Methodref          #39.#407      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #117 = InvokeDynamic      #6:#297       // #6:makeConcatWithConstants:(I)Ljava/lang/String;\n-  #118 = Methodref          #16.#338      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([B)V\n-  #119 = String             #409          // size\n-  #120 = Long               8589934591l\n-  #122 = Methodref          #1.#410       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-  #123 = String             #411          // gid\n-  #124 = Methodref          #39.#412      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongGroupId:()J\n-  #125 = Long               2097151l\n-  #127 = String             #413          // mtime\n-  #128 = Methodref          #39.#414      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n-  #129 = Methodref          #164.#415     // java/util/Date.getTime:()J\n-  #130 = Long               1000l\n-  #132 = String             #416          // uid\n-  #133 = Methodref          #39.#417      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongUserId:()J\n-  #134 = String             #418          // SCHILY.devmajor\n-  #135 = Methodref          #39.#419      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMajor:()I\n-  #136 = String             #420          // SCHILY.devminor\n-  #137 = Methodref          #39.#421      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMinor:()I\n-  #138 = String             #422          // mode\n-  #139 = Methodref          #39.#423      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getMode:()I\n-  #140 = Methodref          #1.#424       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumber:(Ljava/lang/String;JJ)V\n-  #141 = Methodref          #99.#425      // java/lang/String.valueOf:(J)Ljava/lang/String;\n-  #142 = String             #426          // entry size\n-  #143 = String             #427          // group id\n-  #144 = Methodref          #1.#428       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n-  #145 = String             #429          // last modification time\n-  #146 = String             #430          // user id\n-  #147 = String             #431          // major device number\n-  #148 = String             #432          // minor device number\n-  #149 = String             #433          //\n-  #150 = Methodref          #1.#434       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n-  #151 = String             #435          //  Use STAR or POSIX extensions to overcome this limit\n-  #152 = Class              #436          // java/lang/RuntimeException\n-  #153 = InvokeDynamic      #7:#438       // #7:makeConcatWithConstants:(Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;\n-  #154 = Methodref          #152.#298     // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n-  #155 = InterfaceMethodref #243.#439     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #156 = Methodref          #282.#440     // java/nio/ByteBuffer.limit:()I\n-  #157 = Methodref          #282.#441     // java/nio/ByteBuffer.position:()I\n-  #158 = String             #442          // ././@LongLink\n-  #159 = Methodref          #282.#443     // java/nio/ByteBuffer.array:()[B\n-  #160 = Methodref          #282.#444     // java/nio/ByteBuffer.arrayOffset:()I\n-  #161 = Methodref          #1.#371       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:([BII)V\n-  #162 = Methodref          #1.#445       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:(I)V\n-  #163 = InvokeDynamic      #8:#447       // #8:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #164 = Class              #448          // java/util/Date\n-  #165 = Methodref          #164.#449     // java/util/Date.\"<init>\":(J)V\n-  #166 = Methodref          #39.#450      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setModTime:(Ljava/util/Date;)V\n-  #167 = String             #207          // ASCII\n-  #168 = Class              #451          // org/apache/commons/compress/archivers/ArchiveOutputStream\n-  #169 = Utf8               LONGFILE_ERROR\n-  #170 = Utf8               I\n-  #171 = Utf8               ConstantValue\n-  #172 = Integer            0\n-  #173 = Utf8               LONGFILE_TRUNCATE\n-  #174 = Integer            1\n-  #175 = Utf8               LONGFILE_GNU\n-  #176 = Integer            2\n-  #177 = Utf8               LONGFILE_POSIX\n-  #178 = Integer            3\n-  #179 = Utf8               BIGNUMBER_ERROR\n-  #180 = Utf8               BIGNUMBER_STAR\n-  #181 = Utf8               BIGNUMBER_POSIX\n-  #182 = Utf8               RECORD_SIZE\n-  #183 = Integer            512\n-  #184 = Utf8               currSize\n-  #185 = Utf8               J\n-  #186 = Utf8               currName\n-  #187 = Utf8               Ljava/lang/String;\n-  #188 = Utf8               currBytes\n-  #189 = Utf8               recordBuf\n-  #190 = Utf8               [B\n-  #191 = Utf8               longFileMode\n-  #192 = Utf8               bigNumberMode\n-  #193 = Utf8               recordsWritten\n-  #194 = Utf8               recordsPerBlock\n-  #195 = Utf8               closed\n-  #196 = Utf8               Z\n-  #197 = Utf8               haveUnclosedEntry\n-  #198 = Utf8               finished\n-  #199 = Utf8               out\n-  #200 = Utf8               Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-  #201 = Utf8               countingOut\n-  #202 = Utf8               Lorg/apache/commons/compress/utils/CountingOutputStream;\n-  #203 = Utf8               zipEncoding\n-  #204 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #205 = Utf8               encoding\n-  #206 = Utf8               addPaxHeadersForNonAsciiNames\n-  #207 = Utf8               ASCII\n-  #208 = Utf8               BLOCK_SIZE_UNSPECIFIED\n-  #209 = Integer            -511\n-  #210 = Utf8               <init>\n-  #211 = Utf8               (Ljava/io/OutputStream;)V\n-  #212 = Utf8               Code\n-  #213 = Utf8               LineNumberTable\n-  #214 = Utf8               (Ljava/io/OutputStream;Ljava/lang/String;)V\n-  #215 = Utf8               (Ljava/io/OutputStream;I)V\n-  #216 = Utf8               (Ljava/io/OutputStream;II)V\n-  #217 = Utf8               Deprecated\n-  #218 = Utf8               RuntimeVisibleAnnotations\n-  #219 = Utf8               Ljava/lang/Deprecated;\n-  #220 = Utf8               (Ljava/io/OutputStream;IILjava/lang/String;)V\n-  #221 = Utf8               StackMapTable\n-  #222 = Class              #452          // java/io/OutputStream\n-  #223 = Utf8               (Ljava/io/OutputStream;ILjava/lang/String;)V\n-  #224 = Utf8               setLongFileMode\n-  #225 = Utf8               (I)V\n-  #226 = Utf8               setBigNumberMode\n-  #227 = Utf8               setAddPaxHeadersForNonAsciiNames\n-  #228 = Utf8               (Z)V\n-  #229 = Utf8               getCount\n-  #230 = Utf8               ()I\n-  #231 = Utf8               getBytesWritten\n-  #232 = Utf8               ()J\n-  #233 = Utf8               finish\n-  #234 = Utf8               ()V\n-  #235 = Utf8               Exceptions\n-  #236 = Utf8               close\n-  #237 = Class              #453          // java/lang/Throwable\n-  #238 = Utf8               getRecordSize\n-  #239 = Utf8               putArchiveEntry\n-  #240 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #241 = Class              #454          // org/apache/commons/compress/archivers/ArchiveEntry\n-  #242 = Class              #190          // \"[B\"\n-  #243 = Class              #455          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #244 = Class              #456          // java/util/Map\n-  #245 = Utf8               closeArchiveEntry\n-  #246 = Utf8               write\n-  #247 = Utf8               ([BII)V\n-  #248 = Utf8               writePaxHeaders\n-  #249 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n-  #250 = Utf8               Signature\n-  #251 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n-  #252 = Utf8               encodeExtendedPaxHeadersContents\n-  #253 = Utf8               (Ljava/util/Map;)[B\n-  #254 = Class              #457          // java/util/Iterator\n-  #255 = Class              #458          // java/io/UnsupportedEncodingException\n-  #256 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B\n-  #257 = Utf8               stripTo7Bits\n-  #258 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #259 = Utf8               shouldBeReplaced\n-  #260 = Utf8               (C)Z\n-  #261 = Utf8               writeEOFRecord\n-  #262 = Utf8               flush\n-  #263 = Utf8               createArchiveEntry\n-  #264 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #265 = Utf8               writeRecord\n-  #266 = Utf8               ([B)V\n-  #267 = Utf8               padAsNeeded\n-  #268 = Utf8               addPaxHeadersForBigNumbers\n-  #269 = Utf8               (Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #270 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #271 = Utf8               addPaxHeaderForBigNumber\n-  #272 = Utf8               (Ljava/util/Map;Ljava/lang/String;JJ)V\n-  #273 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JJ)V\n-  #274 = Utf8               failForBigNumbers\n-  #275 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #276 = Utf8               failForBigNumber\n-  #277 = Utf8               (Ljava/lang/String;JJ)V\n-  #278 = Utf8               failForBigNumberWithPosixMessage\n-  #279 = Utf8               (Ljava/lang/String;JJLjava/lang/String;)V\n-  #280 = Utf8               handleLongName\n-  #281 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n-  #282 = Class              #459          // java/nio/ByteBuffer\n-  #283 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;BLjava/lang/String;)Z\n-  #284 = Utf8               transferModTime\n-  #285 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #286 = Utf8               <clinit>\n-  #287 = Utf8               SourceFile\n-  #288 = Utf8               TarArchiveOutputStream.java\n-  #289 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n-  #290 = NameAndType        #210:#215     // \"<init>\":(Ljava/io/OutputStream;I)V\n-  #291 = NameAndType        #210:#223     // \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n-  #292 = NameAndType        #210:#220     // \"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n-  #293 = Utf8               java/lang/IllegalArgumentException\n-  #294 = Utf8               BootstrapMethods\n-  #295 = MethodHandle       6:#460        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #296 = String             #461          // Tar record size must always be 512 bytes. Attempt to set size of \\u0001\n-  #297 = NameAndType        #462:#463     // makeConcatWithConstants:(I)Ljava/lang/String;\n-  #298 = NameAndType        #210:#464     // \"<init>\":(Ljava/lang/String;)V\n-  #299 = NameAndType        #210:#234     // \"<init>\":()V\n-  #300 = NameAndType        #191:#170     // longFileMode:I\n-  #301 = NameAndType        #192:#170     // bigNumberMode:I\n-  #302 = NameAndType        #195:#196     // closed:Z\n-  #303 = NameAndType        #197:#196     // haveUnclosedEntry:Z\n-  #304 = NameAndType        #198:#196     // finished:Z\n-  #305 = NameAndType        #206:#196     // addPaxHeadersForNonAsciiNames:Z\n-  #306 = String             #465          // Block size must be a multiple of 512 bytes. Attempt to use set size of \\u0001\n-  #307 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  #308 = Utf8               org/apache/commons/compress/utils/CountingOutputStream\n-  #309 = NameAndType        #210:#211     // \"<init>\":(Ljava/io/OutputStream;)V\n-  #310 = NameAndType        #201:#202     // countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n-  #311 = NameAndType        #199:#200     // out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-  #312 = NameAndType        #205:#187     // encoding:Ljava/lang/String;\n-  #313 = Class              #466          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #314 = NameAndType        #467:#468     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #315 = NameAndType        #203:#204     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #316 = NameAndType        #189:#190     // recordBuf:[B\n-  #317 = NameAndType        #194:#170     // recordsPerBlock:I\n-  #318 = NameAndType        #231:#232     // getBytesWritten:()J\n-  #319 = Utf8               java/io/IOException\n-  #320 = Utf8               This archive has already been finished\n-  #321 = Utf8               This archive contains unclosed entries.\n-  #322 = NameAndType        #261:#234     // writeEOFRecord:()V\n-  #323 = NameAndType        #267:#234     // padAsNeeded:()V\n-  #324 = NameAndType        #262:#234     // flush:()V\n-  #325 = NameAndType        #233:#234     // finish:()V\n-  #326 = NameAndType        #236:#234     // close:()V\n-  #327 = Utf8               Stream has already been finished\n-  #328 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #329 = NameAndType        #469:#470     // isGlobalPaxHeader:()Z\n-  #330 = NameAndType        #471:#472     // getExtraPaxHeaders:()Ljava/util/Map;\n-  #331 = NameAndType        #252:#253     // encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n-  #332 = NameAndType        #473:#474     // setSize:(J)V\n-  #333 = NameAndType        #475:#476     // writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-  #334 = NameAndType        #265:#266     // writeRecord:([B)V\n-  #335 = NameAndType        #477:#232     // getSize:()J\n-  #336 = NameAndType        #184:#185     // currSize:J\n-  #337 = NameAndType        #188:#185     // currBytes:J\n-  #338 = NameAndType        #246:#266     // write:([B)V\n-  #339 = NameAndType        #245:#234     // closeArchiveEntry:()V\n-  #340 = Utf8               java/util/HashMap\n-  #341 = NameAndType        #478:#479     // getName:()Ljava/lang/String;\n-  #342 = Utf8               path\n-  #343 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #344 = Utf8               file name\n-  #345 = NameAndType        #280:#281     // handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n-  #346 = NameAndType        #480:#479     // getLinkName:()Ljava/lang/String;\n-  #347 = NameAndType        #481:#230     // length:()I\n-  #348 = Utf8               linkpath\n-  #349 = Utf8               link name\n-  #350 = NameAndType        #268:#269     // addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #351 = NameAndType        #274:#275     // failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #352 = NameAndType        #207:#204     // ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #353 = NameAndType        #482:#483     // canEncode:(Ljava/lang/String;)Z\n-  #354 = NameAndType        #484:#485     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #355 = NameAndType        #486:#470     // isLink:()Z\n-  #356 = NameAndType        #487:#470     // isSymbolicLink:()Z\n-  #357 = NameAndType        #488:#489     // putAll:(Ljava/util/Map;)V\n-  #358 = NameAndType        #409:#230     // size:()I\n-  #359 = NameAndType        #248:#249     // writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n-  #360 = NameAndType        #490:#470     // isDirectory:()Z\n-  #361 = NameAndType        #186:#187     // currName:Ljava/lang/String;\n-  #362 = Utf8               No current entry to close\n-  #363 = NameAndType        #491:#234     // flushBlock:()V\n-  #364 = String             #492          // Entry \\'\\u0001\\' closed at \\'\\u0001\\' before the \\'\\u0001\\' bytes specified in the header were written\n-  #365 = NameAndType        #462:#493     // makeConcatWithConstants:(Ljava/lang/String;JJ)Ljava/lang/String;\n-  #366 = NameAndType        #193:#170     // recordsWritten:I\n-  #367 = Utf8               java/lang/IllegalStateException\n-  #368 = Utf8               No current tar entry\n-  #369 = String             #494          // Request to write \\'\\u0001\\' bytes exceeds size in header of \\'\\u0001\\' bytes for entry \\'\\u0001\\'\n-  #370 = NameAndType        #462:#495     // makeConcatWithConstants:(IJLjava/lang/String;)Ljava/lang/String;\n-  #371 = NameAndType        #246:#247     // write:([BII)V\n-  #372 = NameAndType        #257:#258     // stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n-  #373 = String             #496          // ./PaxHeaders.X/\\u0001\n-  #374 = NameAndType        #462:#258     // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-  #375 = NameAndType        #497:#498     // substring:(II)Ljava/lang/String;\n-  #376 = NameAndType        #210:#499     // \"<init>\":(Ljava/lang/String;B)V\n-  #377 = NameAndType        #284:#285     // transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #378 = NameAndType        #239:#240     // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #379 = Utf8               java/io/StringWriter\n-  #380 = NameAndType        #500:#501     // entrySet:()Ljava/util/Set;\n-  #381 = Class              #502          // java/util/Set\n-  #382 = NameAndType        #503:#504     // iterator:()Ljava/util/Iterator;\n-  #383 = NameAndType        #505:#470     // hasNext:()Z\n-  #384 = NameAndType        #506:#507     // next:()Ljava/lang/Object;\n-  #385 = Utf8               java/util/Map$Entry\n-  #386 = Utf8               Entry\n-  #387 = Utf8               InnerClasses\n-  #388 = NameAndType        #508:#507     // getKey:()Ljava/lang/Object;\n-  #389 = Utf8               java/lang/String\n-  #390 = NameAndType        #509:#507     // getValue:()Ljava/lang/Object;\n-  #391 = String             #510          // \\u0001 \\u0001=\\u0001\\n\n-  #392 = NameAndType        #462:#511     // makeConcatWithConstants:(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #393 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #394 = Utf8               UTF-8\n-  #395 = NameAndType        #512:#513     // getBytes:(Ljava/lang/String;)[B\n-  #396 = NameAndType        #246:#464     // write:(Ljava/lang/String;)V\n-  #397 = NameAndType        #514:#479     // toString:()Ljava/lang/String;\n-  #398 = Utf8               java/lang/StringBuilder\n-  #399 = NameAndType        #210:#225     // \"<init>\":(I)V\n-  #400 = NameAndType        #515:#516     // charAt:(I)C\n-  #401 = NameAndType        #259:#260     // shouldBeReplaced:(C)Z\n-  #402 = Utf8               _\n-  #403 = NameAndType        #517:#518     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #404 = NameAndType        #517:#519     // append:(C)Ljava/lang/StringBuilder;\n-  #405 = Class              #520          // java/util/Arrays\n-  #406 = NameAndType        #521:#522     // fill:([BB)V\n-  #407 = NameAndType        #210:#523     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #408 = String             #524          // Record to write has length \\'\\u0001\\' which is not the record size of \\'512\\'\n-  #409 = Utf8               size\n-  #410 = NameAndType        #271:#272     // addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-  #411 = Utf8               gid\n-  #412 = NameAndType        #525:#232     // getLongGroupId:()J\n-  #413 = Utf8               mtime\n-  #414 = NameAndType        #526:#527     // getModTime:()Ljava/util/Date;\n-  #415 = NameAndType        #528:#232     // getTime:()J\n-  #416 = Utf8               uid\n-  #417 = NameAndType        #529:#232     // getLongUserId:()J\n-  #418 = Utf8               SCHILY.devmajor\n-  #419 = NameAndType        #530:#230     // getDevMajor:()I\n-  #420 = Utf8               SCHILY.devminor\n-  #421 = NameAndType        #531:#230     // getDevMinor:()I\n-  #422 = Utf8               mode\n-  #423 = NameAndType        #532:#230     // getMode:()I\n-  #424 = NameAndType        #276:#277     // failForBigNumber:(Ljava/lang/String;JJ)V\n-  #425 = NameAndType        #533:#534     // valueOf:(J)Ljava/lang/String;\n-  #426 = Utf8               entry size\n-  #427 = Utf8               group id\n-  #428 = NameAndType        #278:#277     // failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n-  #429 = Utf8               last modification time\n-  #430 = Utf8               user id\n-  #431 = Utf8               major device number\n-  #432 = Utf8               minor device number\n-  #433 = Utf8\n-  #434 = NameAndType        #276:#279     // failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n-  #435 = Utf8                Use STAR or POSIX extensions to overcome this limit\n-  #436 = Utf8               java/lang/RuntimeException\n-  #437 = String             #535          // \\u0001 \\'\\u0001\\' is too big ( > \\u0001 ).\\u0001\n-  #438 = NameAndType        #462:#536     // makeConcatWithConstants:(Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;\n-  #439 = NameAndType        #537:#538     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #440 = NameAndType        #539:#230     // limit:()I\n-  #441 = NameAndType        #540:#230     // position:()I\n-  #442 = Utf8               ././@LongLink\n-  #443 = NameAndType        #541:#542     // array:()[B\n-  #444 = NameAndType        #543:#230     // arrayOffset:()I\n-  #445 = NameAndType        #246:#225     // write:(I)V\n-  #446 = String             #544          // \\u0001 \\'\\u0001\\' is too long ( > 100 bytes)\n-  #447 = NameAndType        #462:#545     // makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #448 = Utf8               java/util/Date\n-  #449 = NameAndType        #210:#474     // \"<init>\":(J)V\n-  #450 = NameAndType        #546:#547     // setModTime:(Ljava/util/Date;)V\n-  #451 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n-  #452 = Utf8               java/io/OutputStream\n-  #453 = Utf8               java/lang/Throwable\n-  #454 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n-  #455 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #456 = Utf8               java/util/Map\n-  #457 = Utf8               java/util/Iterator\n-  #458 = Utf8               java/io/UnsupportedEncodingException\n-  #459 = Utf8               java/nio/ByteBuffer\n-  #460 = Methodref          #548.#549     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #461 = Utf8               Tar record size must always be 512 bytes. Attempt to set size of \\u0001\n-  #462 = Utf8               makeConcatWithConstants\n-  #463 = Utf8               (I)Ljava/lang/String;\n-  #464 = Utf8               (Ljava/lang/String;)V\n-  #465 = Utf8               Block size must be a multiple of 512 bytes. Attempt to use set size of \\u0001\n-  #466 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #467 = Utf8               getZipEncoding\n-  #468 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #469 = Utf8               isGlobalPaxHeader\n-  #470 = Utf8               ()Z\n-  #471 = Utf8               getExtraPaxHeaders\n-  #472 = Utf8               ()Ljava/util/Map;\n-  #473 = Utf8               setSize\n-  #474 = Utf8               (J)V\n-  #475 = Utf8               writeEntryHeader\n-  #476 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-  #477 = Utf8               getSize\n-  #478 = Utf8               getName\n-  #479 = Utf8               ()Ljava/lang/String;\n-  #480 = Utf8               getLinkName\n-  #481 = Utf8               length\n-  #482 = Utf8               canEncode\n-  #483 = Utf8               (Ljava/lang/String;)Z\n-  #484 = Utf8               put\n-  #485 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #486 = Utf8               isLink\n-  #487 = Utf8               isSymbolicLink\n-  #488 = Utf8               putAll\n-  #489 = Utf8               (Ljava/util/Map;)V\n-  #490 = Utf8               isDirectory\n-  #491 = Utf8               flushBlock\n-  #492 = Utf8               Entry \\'\\u0001\\' closed at \\'\\u0001\\' before the \\'\\u0001\\' bytes specified in the header were written\n-  #493 = Utf8               (Ljava/lang/String;JJ)Ljava/lang/String;\n-  #494 = Utf8               Request to write \\'\\u0001\\' bytes exceeds size in header of \\'\\u0001\\' bytes for entry \\'\\u0001\\'\n-  #495 = Utf8               (IJLjava/lang/String;)Ljava/lang/String;\n-  #496 = Utf8               ./PaxHeaders.X/\\u0001\n-  #497 = Utf8               substring\n-  #498 = Utf8               (II)Ljava/lang/String;\n-  #499 = Utf8               (Ljava/lang/String;B)V\n-  #500 = Utf8               entrySet\n-  #501 = Utf8               ()Ljava/util/Set;\n-  #502 = Utf8               java/util/Set\n-  #503 = Utf8               iterator\n-  #504 = Utf8               ()Ljava/util/Iterator;\n-  #505 = Utf8               hasNext\n-  #506 = Utf8               next\n-  #507 = Utf8               ()Ljava/lang/Object;\n-  #508 = Utf8               getKey\n-  #509 = Utf8               getValue\n-  #510 = Utf8               \\u0001 \\u0001=\\u0001\\n\n-  #511 = Utf8               (ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #512 = Utf8               getBytes\n-  #513 = Utf8               (Ljava/lang/String;)[B\n-  #514 = Utf8               toString\n-  #515 = Utf8               charAt\n-  #516 = Utf8               (I)C\n-  #517 = Utf8               append\n-  #518 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #519 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #520 = Utf8               java/util/Arrays\n-  #521 = Utf8               fill\n-  #522 = Utf8               ([BB)V\n-  #523 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #524 = Utf8               Record to write has length \\'\\u0001\\' which is not the record size of \\'512\\'\n-  #525 = Utf8               getLongGroupId\n-  #526 = Utf8               getModTime\n-  #527 = Utf8               ()Ljava/util/Date;\n-  #528 = Utf8               getTime\n-  #529 = Utf8               getLongUserId\n-  #530 = Utf8               getDevMajor\n-  #531 = Utf8               getDevMinor\n-  #532 = Utf8               getMode\n-  #533 = Utf8               valueOf\n-  #534 = Utf8               (J)Ljava/lang/String;\n-  #535 = Utf8               \\u0001 \\'\\u0001\\' is too big ( > \\u0001 ).\\u0001\n-  #536 = Utf8               (Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;\n-  #537 = Utf8               encode\n-  #538 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #539 = Utf8               limit\n-  #540 = Utf8               position\n-  #541 = Utf8               array\n-  #542 = Utf8               ()[B\n-  #543 = Utf8               arrayOffset\n-  #544 = Utf8               \\u0001 \\'\\u0001\\' is too long ( > 100 bytes)\n-  #545 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #546 = Utf8               setModTime\n-  #547 = Utf8               (Ljava/util/Date;)V\n-  #548 = Class              #550          // java/lang/invoke/StringConcatFactory\n-  #549 = NameAndType        #462:#553     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #550 = Utf8               java/lang/invoke/StringConcatFactory\n-  #551 = Class              #555          // java/lang/invoke/MethodHandles$Lookup\n-  #552 = Utf8               Lookup\n-  #553 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #554 = Class              #556          // java/lang/invoke/MethodHandles\n-  #555 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #556 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n+    #2 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n+    #3 = Methodref          #1.#4         // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n+    #4 = NameAndType        #5:#6         // \"<init>\":(Ljava/io/OutputStream;I)V\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (Ljava/io/OutputStream;I)V\n+    #7 = Methodref          #1.#8         // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n+    #8 = NameAndType        #5:#9         // \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n+    #9 = Utf8               (Ljava/io/OutputStream;ILjava/lang/String;)V\n+   #10 = Methodref          #1.#11        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n+   #11 = NameAndType        #5:#12        // \"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n+   #12 = Utf8               (Ljava/io/OutputStream;IILjava/lang/String;)V\n+   #13 = Class              #14           // java/lang/IllegalArgumentException\n+   #14 = Utf8               java/lang/IllegalArgumentException\n+   #15 = InvokeDynamic      #0:#16        // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #16 = NameAndType        #17:#18       // makeConcatWithConstants:(I)Ljava/lang/String;\n+   #17 = Utf8               makeConcatWithConstants\n+   #18 = Utf8               (I)Ljava/lang/String;\n+   #19 = Methodref          #13.#20       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #20 = NameAndType        #5:#21        // \"<init>\":(Ljava/lang/String;)V\n+   #21 = Utf8               (Ljava/lang/String;)V\n+   #22 = Methodref          #23.#24       // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n+   #23 = Class              #25           // org/apache/commons/compress/archivers/ArchiveOutputStream\n+   #24 = NameAndType        #5:#26        // \"<init>\":()V\n+   #25 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n+   #26 = Utf8               ()V\n+   #27 = Fieldref           #1.#28        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.longFileMode:I\n+   #28 = NameAndType        #29:#30       // longFileMode:I\n+   #29 = Utf8               longFileMode\n+   #30 = Utf8               I\n+   #31 = Fieldref           #1.#32        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.bigNumberMode:I\n+   #32 = NameAndType        #33:#30       // bigNumberMode:I\n+   #33 = Utf8               bigNumberMode\n+   #34 = Fieldref           #1.#35        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.closed:Z\n+   #35 = NameAndType        #36:#37       // closed:Z\n+   #36 = Utf8               closed\n+   #37 = Utf8               Z\n+   #38 = Fieldref           #1.#39        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.haveUnclosedEntry:Z\n+   #39 = NameAndType        #40:#37       // haveUnclosedEntry:Z\n+   #40 = Utf8               haveUnclosedEntry\n+   #41 = Fieldref           #1.#42        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.finished:Z\n+   #42 = NameAndType        #43:#37       // finished:Z\n+   #43 = Utf8               finished\n+   #44 = Fieldref           #1.#45        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeadersForNonAsciiNames:Z\n+   #45 = NameAndType        #46:#37       // addPaxHeadersForNonAsciiNames:Z\n+   #46 = Utf8               addPaxHeadersForNonAsciiNames\n+   #47 = InvokeDynamic      #1:#16        // #1:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #48 = Class              #49           // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+   #49 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+   #50 = Class              #51           // org/apache/commons/compress/utils/CountingOutputStream\n+   #51 = Utf8               org/apache/commons/compress/utils/CountingOutputStream\n+   #52 = Methodref          #50.#53       // org/apache/commons/compress/utils/CountingOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #53 = NameAndType        #5:#54        // \"<init>\":(Ljava/io/OutputStream;)V\n+   #54 = Utf8               (Ljava/io/OutputStream;)V\n+   #55 = Fieldref           #1.#56        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n+   #56 = NameAndType        #57:#58       // countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n+   #57 = Utf8               countingOut\n+   #58 = Utf8               Lorg/apache/commons/compress/utils/CountingOutputStream;\n+   #59 = Methodref          #48.#4        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n+   #60 = Fieldref           #1.#61        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+   #61 = NameAndType        #62:#63       // out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+   #62 = Utf8               out\n+   #63 = Utf8               Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+   #64 = Fieldref           #1.#65        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.encoding:Ljava/lang/String;\n+   #65 = NameAndType        #66:#67       // encoding:Ljava/lang/String;\n+   #66 = Utf8               encoding\n+   #67 = Utf8               Ljava/lang/String;\n+   #68 = Methodref          #69.#70       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #69 = Class              #71           // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #70 = NameAndType        #72:#73       // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #71 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #72 = Utf8               getZipEncoding\n+   #73 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #74 = Fieldref           #1.#75        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #75 = NameAndType        #76:#77       // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #76 = Utf8               zipEncoding\n+   #77 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #78 = Fieldref           #1.#79        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordBuf:[B\n+   #79 = NameAndType        #80:#81       // recordBuf:[B\n+   #80 = Utf8               recordBuf\n+   #81 = Utf8               [B\n+   #82 = Fieldref           #1.#83        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordsPerBlock:I\n+   #83 = NameAndType        #84:#30       // recordsPerBlock:I\n+   #84 = Utf8               recordsPerBlock\n+   #85 = Methodref          #1.#86        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.getBytesWritten:()J\n+   #86 = NameAndType        #87:#88       // getBytesWritten:()J\n+   #87 = Utf8               getBytesWritten\n+   #88 = Utf8               ()J\n+   #89 = Methodref          #50.#86       // org/apache/commons/compress/utils/CountingOutputStream.getBytesWritten:()J\n+   #90 = Class              #91           // java/io/IOException\n+   #91 = Utf8               java/io/IOException\n+   #92 = String             #93           // This archive has already been finished\n+   #93 = Utf8               This archive has already been finished\n+   #94 = Methodref          #90.#20       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #95 = String             #96           // This archive contains unclosed entries.\n+   #96 = Utf8               This archive contains unclosed entries.\n+   #97 = Methodref          #1.#98        // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writeEOFRecord:()V\n+   #98 = NameAndType        #99:#26       // writeEOFRecord:()V\n+   #99 = Utf8               writeEOFRecord\n+  #100 = Methodref          #1.#101       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.padAsNeeded:()V\n+  #101 = NameAndType        #102:#26      // padAsNeeded:()V\n+  #102 = Utf8               padAsNeeded\n+  #103 = Methodref          #48.#104      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flush:()V\n+  #104 = NameAndType        #105:#26      // flush:()V\n+  #105 = Utf8               flush\n+  #106 = Methodref          #1.#107       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.finish:()V\n+  #107 = NameAndType        #108:#26      // finish:()V\n+  #108 = Utf8               finish\n+  #109 = Methodref          #48.#110      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.close:()V\n+  #110 = NameAndType        #111:#26      // close:()V\n+  #111 = Utf8               close\n+  #112 = String             #113          // Stream has already been finished\n+  #113 = Utf8               Stream has already been finished\n+  #114 = Class              #115          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #115 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #116 = Methodref          #114.#117     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+  #117 = NameAndType        #118:#119     // isGlobalPaxHeader:()Z\n+  #118 = Utf8               isGlobalPaxHeader\n+  #119 = Utf8               ()Z\n+  #120 = Methodref          #114.#121     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getExtraPaxHeaders:()Ljava/util/Map;\n+  #121 = NameAndType        #122:#123     // getExtraPaxHeaders:()Ljava/util/Map;\n+  #122 = Utf8               getExtraPaxHeaders\n+  #123 = Utf8               ()Ljava/util/Map;\n+  #124 = Methodref          #1.#125       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n+  #125 = NameAndType        #126:#127     // encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n+  #126 = Utf8               encodeExtendedPaxHeadersContents\n+  #127 = Utf8               (Ljava/util/Map;)[B\n+  #128 = Methodref          #114.#129     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n+  #129 = NameAndType        #130:#131     // setSize:(J)V\n+  #130 = Utf8               setSize\n+  #131 = Utf8               (J)V\n+  #132 = Methodref          #114.#133     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #133 = NameAndType        #134:#135     // writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #134 = Utf8               writeEntryHeader\n+  #135 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #136 = Methodref          #1.#137       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writeRecord:([B)V\n+  #137 = NameAndType        #138:#139     // writeRecord:([B)V\n+  #138 = Utf8               writeRecord\n+  #139 = Utf8               ([B)V\n+  #140 = Methodref          #114.#141     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+  #141 = NameAndType        #142:#88      // getSize:()J\n+  #142 = Utf8               getSize\n+  #143 = Fieldref           #1.#144       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currSize:J\n+  #144 = NameAndType        #145:#146     // currSize:J\n+  #145 = Utf8               currSize\n+  #146 = Utf8               J\n+  #147 = Fieldref           #1.#148       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currBytes:J\n+  #148 = NameAndType        #149:#146     // currBytes:J\n+  #149 = Utf8               currBytes\n+  #150 = Methodref          #1.#151       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:([B)V\n+  #151 = NameAndType        #152:#139     // write:([B)V\n+  #152 = Utf8               write\n+  #153 = Methodref          #1.#154       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.closeArchiveEntry:()V\n+  #154 = NameAndType        #155:#26      // closeArchiveEntry:()V\n+  #155 = Utf8               closeArchiveEntry\n+  #156 = Class              #157          // java/util/HashMap\n+  #157 = Utf8               java/util/HashMap\n+  #158 = Methodref          #156.#24      // java/util/HashMap.\"<init>\":()V\n+  #159 = Methodref          #114.#160     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+  #160 = NameAndType        #161:#162     // getName:()Ljava/lang/String;\n+  #161 = Utf8               getName\n+  #162 = Utf8               ()Ljava/lang/String;\n+  #163 = String             #164          // path\n+  #164 = Utf8               path\n+  #165 = Class              #166          // org/apache/commons/compress/archivers/tar/TarConstants\n+  #166 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+  #167 = String             #168          // file name\n+  #168 = Utf8               file name\n+  #169 = Methodref          #1.#170       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n+  #170 = NameAndType        #171:#172     // handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n+  #171 = Utf8               handleLongName\n+  #172 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n+  #173 = Methodref          #114.#174     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLinkName:()Ljava/lang/String;\n+  #174 = NameAndType        #175:#162     // getLinkName:()Ljava/lang/String;\n+  #175 = Utf8               getLinkName\n+  #176 = Methodref          #177.#178     // java/lang/String.length:()I\n+  #177 = Class              #179          // java/lang/String\n+  #178 = NameAndType        #180:#181     // length:()I\n+  #179 = Utf8               java/lang/String\n+  #180 = Utf8               length\n+  #181 = Utf8               ()I\n+  #182 = String             #183          // linkpath\n+  #183 = Utf8               linkpath\n+  #184 = String             #185          // link name\n+  #185 = Utf8               link name\n+  #186 = Methodref          #1.#187       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #187 = NameAndType        #188:#189     // addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #188 = Utf8               addPaxHeadersForBigNumbers\n+  #189 = Utf8               (Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #190 = Methodref          #1.#191       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #191 = NameAndType        #192:#193     // failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #192 = Utf8               failForBigNumbers\n+  #193 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #194 = Fieldref           #1.#195       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #195 = NameAndType        #196:#77      // ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #196 = Utf8               ASCII\n+  #197 = InterfaceMethodref #198.#199     // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n+  #198 = Class              #200          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #199 = NameAndType        #201:#202     // canEncode:(Ljava/lang/String;)Z\n+  #200 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #201 = Utf8               canEncode\n+  #202 = Utf8               (Ljava/lang/String;)Z\n+  #203 = InterfaceMethodref #204.#205     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #204 = Class              #206          // java/util/Map\n+  #205 = NameAndType        #207:#208     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #206 = Utf8               java/util/Map\n+  #207 = Utf8               put\n+  #208 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #209 = Methodref          #114.#210     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isLink:()Z\n+  #210 = NameAndType        #211:#119     // isLink:()Z\n+  #211 = Utf8               isLink\n+  #212 = Methodref          #114.#213     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSymbolicLink:()Z\n+  #213 = NameAndType        #214:#119     // isSymbolicLink:()Z\n+  #214 = Utf8               isSymbolicLink\n+  #215 = InterfaceMethodref #204.#216     // java/util/Map.putAll:(Ljava/util/Map;)V\n+  #216 = NameAndType        #217:#218     // putAll:(Ljava/util/Map;)V\n+  #217 = Utf8               putAll\n+  #218 = Utf8               (Ljava/util/Map;)V\n+  #219 = InterfaceMethodref #204.#220     // java/util/Map.size:()I\n+  #220 = NameAndType        #221:#181     // size:()I\n+  #221 = Utf8               size\n+  #222 = Methodref          #1.#223       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n+  #223 = NameAndType        #224:#225     // writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n+  #224 = Utf8               writePaxHeaders\n+  #225 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n+  #226 = Methodref          #114.#227     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+  #227 = NameAndType        #228:#119     // isDirectory:()Z\n+  #228 = Utf8               isDirectory\n+  #229 = Fieldref           #1.#230       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currName:Ljava/lang/String;\n+  #230 = NameAndType        #231:#67      // currName:Ljava/lang/String;\n+  #231 = Utf8               currName\n+  #232 = String             #233          // No current entry to close\n+  #233 = Utf8               No current entry to close\n+  #234 = Methodref          #48.#235      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n+  #235 = NameAndType        #236:#26      // flushBlock:()V\n+  #236 = Utf8               flushBlock\n+  #237 = InvokeDynamic      #2:#238       // #2:makeConcatWithConstants:(Ljava/lang/String;JJ)Ljava/lang/String;\n+  #238 = NameAndType        #17:#239      // makeConcatWithConstants:(Ljava/lang/String;JJ)Ljava/lang/String;\n+  #239 = Utf8               (Ljava/lang/String;JJ)Ljava/lang/String;\n+  #240 = Fieldref           #1.#241       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordsWritten:I\n+  #241 = NameAndType        #242:#30      // recordsWritten:I\n+  #242 = Utf8               recordsWritten\n+  #243 = Long               512l\n+  #245 = Class              #246          // java/lang/IllegalStateException\n+  #246 = Utf8               java/lang/IllegalStateException\n+  #247 = String             #248          // No current tar entry\n+  #248 = Utf8               No current tar entry\n+  #249 = Methodref          #245.#20      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #250 = InvokeDynamic      #3:#251       // #3:makeConcatWithConstants:(IJLjava/lang/String;)Ljava/lang/String;\n+  #251 = NameAndType        #17:#252      // makeConcatWithConstants:(IJLjava/lang/String;)Ljava/lang/String;\n+  #252 = Utf8               (IJLjava/lang/String;)Ljava/lang/String;\n+  #253 = Methodref          #48.#254      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([BII)V\n+  #254 = NameAndType        #152:#255     // write:([BII)V\n+  #255 = Utf8               ([BII)V\n+  #256 = Methodref          #1.#257       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n+  #257 = NameAndType        #258:#259     // stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n+  #258 = Utf8               stripTo7Bits\n+  #259 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #260 = InvokeDynamic      #4:#261       // #4:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+  #261 = NameAndType        #17:#259      // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+  #262 = Methodref          #177.#263     // java/lang/String.substring:(II)Ljava/lang/String;\n+  #263 = NameAndType        #264:#265     // substring:(II)Ljava/lang/String;\n+  #264 = Utf8               substring\n+  #265 = Utf8               (II)Ljava/lang/String;\n+  #266 = Methodref          #114.#267     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;B)V\n+  #267 = NameAndType        #5:#268       // \"<init>\":(Ljava/lang/String;B)V\n+  #268 = Utf8               (Ljava/lang/String;B)V\n+  #269 = Methodref          #1.#270       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #270 = NameAndType        #271:#272     // transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #271 = Utf8               transferModTime\n+  #272 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #273 = Methodref          #1.#274       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #274 = NameAndType        #275:#276     // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #275 = Utf8               putArchiveEntry\n+  #276 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #277 = Class              #278          // java/io/StringWriter\n+  #278 = Utf8               java/io/StringWriter\n+  #279 = Methodref          #277.#24      // java/io/StringWriter.\"<init>\":()V\n+  #280 = InterfaceMethodref #204.#281     // java/util/Map.entrySet:()Ljava/util/Set;\n+  #281 = NameAndType        #282:#283     // entrySet:()Ljava/util/Set;\n+  #282 = Utf8               entrySet\n+  #283 = Utf8               ()Ljava/util/Set;\n+  #284 = InterfaceMethodref #285.#286     // java/util/Set.iterator:()Ljava/util/Iterator;\n+  #285 = Class              #287          // java/util/Set\n+  #286 = NameAndType        #288:#289     // iterator:()Ljava/util/Iterator;\n+  #287 = Utf8               java/util/Set\n+  #288 = Utf8               iterator\n+  #289 = Utf8               ()Ljava/util/Iterator;\n+  #290 = InterfaceMethodref #291.#292     // java/util/Iterator.hasNext:()Z\n+  #291 = Class              #293          // java/util/Iterator\n+  #292 = NameAndType        #294:#119     // hasNext:()Z\n+  #293 = Utf8               java/util/Iterator\n+  #294 = Utf8               hasNext\n+  #295 = InterfaceMethodref #291.#296     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #296 = NameAndType        #297:#298     // next:()Ljava/lang/Object;\n+  #297 = Utf8               next\n+  #298 = Utf8               ()Ljava/lang/Object;\n+  #299 = Class              #300          // java/util/Map$Entry\n+  #300 = Utf8               java/util/Map$Entry\n+  #301 = InterfaceMethodref #299.#302     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+  #302 = NameAndType        #303:#298     // getKey:()Ljava/lang/Object;\n+  #303 = Utf8               getKey\n+  #304 = InterfaceMethodref #299.#305     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+  #305 = NameAndType        #306:#298     // getValue:()Ljava/lang/Object;\n+  #306 = Utf8               getValue\n+  #307 = InvokeDynamic      #5:#308       // #5:makeConcatWithConstants:(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #308 = NameAndType        #17:#309      // makeConcatWithConstants:(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #309 = Utf8               (ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #310 = Class              #311          // org/apache/commons/compress/utils/CharsetNames\n+  #311 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #312 = String             #313          // UTF-8\n+  #313 = Utf8               UTF-8\n+  #314 = Methodref          #177.#315     // java/lang/String.getBytes:(Ljava/lang/String;)[B\n+  #315 = NameAndType        #316:#317     // getBytes:(Ljava/lang/String;)[B\n+  #316 = Utf8               getBytes\n+  #317 = Utf8               (Ljava/lang/String;)[B\n+  #318 = Methodref          #277.#319     // java/io/StringWriter.write:(Ljava/lang/String;)V\n+  #319 = NameAndType        #152:#21      // write:(Ljava/lang/String;)V\n+  #320 = Methodref          #277.#321     // java/io/StringWriter.toString:()Ljava/lang/String;\n+  #321 = NameAndType        #322:#162     // toString:()Ljava/lang/String;\n+  #322 = Utf8               toString\n+  #323 = Class              #324          // java/lang/StringBuilder\n+  #324 = Utf8               java/lang/StringBuilder\n+  #325 = Methodref          #323.#326     // java/lang/StringBuilder.\"<init>\":(I)V\n+  #326 = NameAndType        #5:#327       // \"<init>\":(I)V\n+  #327 = Utf8               (I)V\n+  #328 = Methodref          #177.#329     // java/lang/String.charAt:(I)C\n+  #329 = NameAndType        #330:#331     // charAt:(I)C\n+  #330 = Utf8               charAt\n+  #331 = Utf8               (I)C\n+  #332 = Methodref          #1.#333       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.shouldBeReplaced:(C)Z\n+  #333 = NameAndType        #334:#335     // shouldBeReplaced:(C)Z\n+  #334 = Utf8               shouldBeReplaced\n+  #335 = Utf8               (C)Z\n+  #336 = String             #337          // _\n+  #337 = Utf8               _\n+  #338 = Methodref          #323.#339     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #339 = NameAndType        #340:#341     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #340 = Utf8               append\n+  #341 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #342 = Methodref          #323.#343     // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #343 = NameAndType        #340:#344     // append:(C)Ljava/lang/StringBuilder;\n+  #344 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #345 = Methodref          #323.#321     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #346 = Methodref          #347.#348     // java/util/Arrays.fill:([BB)V\n+  #347 = Class              #349          // java/util/Arrays\n+  #348 = NameAndType        #350:#351     // fill:([BB)V\n+  #349 = Utf8               java/util/Arrays\n+  #350 = Utf8               fill\n+  #351 = Utf8               ([BB)V\n+  #352 = Methodref          #114.#353     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #353 = NameAndType        #5:#354       // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #354 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #355 = InvokeDynamic      #6:#16        // #6:makeConcatWithConstants:(I)Ljava/lang/String;\n+  #356 = Methodref          #48.#151      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([B)V\n+  #357 = String             #221          // size\n+  #358 = Long               8589934591l\n+  #360 = Methodref          #1.#361       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #361 = NameAndType        #362:#363     // addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #362 = Utf8               addPaxHeaderForBigNumber\n+  #363 = Utf8               (Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #364 = String             #365          // gid\n+  #365 = Utf8               gid\n+  #366 = Methodref          #114.#367     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongGroupId:()J\n+  #367 = NameAndType        #368:#88      // getLongGroupId:()J\n+  #368 = Utf8               getLongGroupId\n+  #369 = Long               2097151l\n+  #371 = String             #372          // mtime\n+  #372 = Utf8               mtime\n+  #373 = Methodref          #114.#374     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n+  #374 = NameAndType        #375:#376     // getModTime:()Ljava/util/Date;\n+  #375 = Utf8               getModTime\n+  #376 = Utf8               ()Ljava/util/Date;\n+  #377 = Methodref          #378.#379     // java/util/Date.getTime:()J\n+  #378 = Class              #380          // java/util/Date\n+  #379 = NameAndType        #381:#88      // getTime:()J\n+  #380 = Utf8               java/util/Date\n+  #381 = Utf8               getTime\n+  #382 = Long               1000l\n+  #384 = String             #385          // uid\n+  #385 = Utf8               uid\n+  #386 = Methodref          #114.#387     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongUserId:()J\n+  #387 = NameAndType        #388:#88      // getLongUserId:()J\n+  #388 = Utf8               getLongUserId\n+  #389 = String             #390          // SCHILY.devmajor\n+  #390 = Utf8               SCHILY.devmajor\n+  #391 = Methodref          #114.#392     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMajor:()I\n+  #392 = NameAndType        #393:#181     // getDevMajor:()I\n+  #393 = Utf8               getDevMajor\n+  #394 = String             #395          // SCHILY.devminor\n+  #395 = Utf8               SCHILY.devminor\n+  #396 = Methodref          #114.#397     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMinor:()I\n+  #397 = NameAndType        #398:#181     // getDevMinor:()I\n+  #398 = Utf8               getDevMinor\n+  #399 = String             #400          // mode\n+  #400 = Utf8               mode\n+  #401 = Methodref          #114.#402     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getMode:()I\n+  #402 = NameAndType        #403:#181     // getMode:()I\n+  #403 = Utf8               getMode\n+  #404 = Methodref          #1.#405       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumber:(Ljava/lang/String;JJ)V\n+  #405 = NameAndType        #406:#407     // failForBigNumber:(Ljava/lang/String;JJ)V\n+  #406 = Utf8               failForBigNumber\n+  #407 = Utf8               (Ljava/lang/String;JJ)V\n+  #408 = Methodref          #177.#409     // java/lang/String.valueOf:(J)Ljava/lang/String;\n+  #409 = NameAndType        #410:#411     // valueOf:(J)Ljava/lang/String;\n+  #410 = Utf8               valueOf\n+  #411 = Utf8               (J)Ljava/lang/String;\n+  #412 = String             #413          // entry size\n+  #413 = Utf8               entry size\n+  #414 = String             #415          // group id\n+  #415 = Utf8               group id\n+  #416 = Methodref          #1.#417       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n+  #417 = NameAndType        #418:#407     // failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n+  #418 = Utf8               failForBigNumberWithPosixMessage\n+  #419 = String             #420          // last modification time\n+  #420 = Utf8               last modification time\n+  #421 = String             #422          // user id\n+  #422 = Utf8               user id\n+  #423 = String             #424          // major device number\n+  #424 = Utf8               major device number\n+  #425 = String             #426          // minor device number\n+  #426 = Utf8               minor device number\n+  #427 = String             #428          //\n+  #428 = Utf8\n+  #429 = Methodref          #1.#430       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n+  #430 = NameAndType        #406:#431     // failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n+  #431 = Utf8               (Ljava/lang/String;JJLjava/lang/String;)V\n+  #432 = String             #433          //  Use STAR or POSIX extensions to overcome this limit\n+  #433 = Utf8                Use STAR or POSIX extensions to overcome this limit\n+  #434 = Class              #435          // java/lang/RuntimeException\n+  #435 = Utf8               java/lang/RuntimeException\n+  #436 = InvokeDynamic      #7:#437       // #7:makeConcatWithConstants:(Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;\n+  #437 = NameAndType        #17:#438      // makeConcatWithConstants:(Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;\n+  #438 = Utf8               (Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;\n+  #439 = Methodref          #434.#20      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n+  #440 = InterfaceMethodref #198.#441     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #441 = NameAndType        #442:#443     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #442 = Utf8               encode\n+  #443 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #444 = Methodref          #445.#446     // java/nio/ByteBuffer.limit:()I\n+  #445 = Class              #447          // java/nio/ByteBuffer\n+  #446 = NameAndType        #448:#181     // limit:()I\n+  #447 = Utf8               java/nio/ByteBuffer\n+  #448 = Utf8               limit\n+  #449 = Methodref          #445.#450     // java/nio/ByteBuffer.position:()I\n+  #450 = NameAndType        #451:#181     // position:()I\n+  #451 = Utf8               position\n+  #452 = String             #453          // ././@LongLink\n+  #453 = Utf8               ././@LongLink\n+  #454 = Methodref          #445.#455     // java/nio/ByteBuffer.array:()[B\n+  #455 = NameAndType        #456:#457     // array:()[B\n+  #456 = Utf8               array\n+  #457 = Utf8               ()[B\n+  #458 = Methodref          #445.#459     // java/nio/ByteBuffer.arrayOffset:()I\n+  #459 = NameAndType        #460:#181     // arrayOffset:()I\n+  #460 = Utf8               arrayOffset\n+  #461 = Methodref          #1.#254       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:([BII)V\n+  #462 = Methodref          #1.#463       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:(I)V\n+  #463 = NameAndType        #152:#327     // write:(I)V\n+  #464 = InvokeDynamic      #8:#465       // #8:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #465 = NameAndType        #17:#466      // makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #466 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #467 = Methodref          #378.#468     // java/util/Date.\"<init>\":(J)V\n+  #468 = NameAndType        #5:#131       // \"<init>\":(J)V\n+  #469 = Methodref          #114.#470     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setModTime:(Ljava/util/Date;)V\n+  #470 = NameAndType        #471:#472     // setModTime:(Ljava/util/Date;)V\n+  #471 = Utf8               setModTime\n+  #472 = Utf8               (Ljava/util/Date;)V\n+  #473 = String             #196          // ASCII\n+  #474 = Utf8               LONGFILE_ERROR\n+  #475 = Utf8               ConstantValue\n+  #476 = Integer            0\n+  #477 = Utf8               LONGFILE_TRUNCATE\n+  #478 = Integer            1\n+  #479 = Utf8               LONGFILE_GNU\n+  #480 = Integer            2\n+  #481 = Utf8               LONGFILE_POSIX\n+  #482 = Integer            3\n+  #483 = Utf8               BIGNUMBER_ERROR\n+  #484 = Utf8               BIGNUMBER_STAR\n+  #485 = Utf8               BIGNUMBER_POSIX\n+  #486 = Utf8               RECORD_SIZE\n+  #487 = Integer            512\n+  #488 = Utf8               BLOCK_SIZE_UNSPECIFIED\n+  #489 = Integer            -511\n+  #490 = Utf8               Code\n+  #491 = Utf8               LineNumberTable\n+  #492 = Utf8               (Ljava/io/OutputStream;Ljava/lang/String;)V\n+  #493 = Utf8               (Ljava/io/OutputStream;II)V\n+  #494 = Utf8               Deprecated\n+  #495 = Utf8               RuntimeVisibleAnnotations\n+  #496 = Utf8               Ljava/lang/Deprecated;\n+  #497 = Utf8               StackMapTable\n+  #498 = Class              #499          // java/io/OutputStream\n+  #499 = Utf8               java/io/OutputStream\n+  #500 = Utf8               setLongFileMode\n+  #501 = Utf8               setBigNumberMode\n+  #502 = Utf8               setAddPaxHeadersForNonAsciiNames\n+  #503 = Utf8               (Z)V\n+  #504 = Utf8               getCount\n+  #505 = Utf8               Exceptions\n+  #506 = Class              #507          // java/lang/Throwable\n+  #507 = Utf8               java/lang/Throwable\n+  #508 = Utf8               getRecordSize\n+  #509 = Class              #510          // org/apache/commons/compress/archivers/ArchiveEntry\n+  #510 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n+  #511 = Class              #81           // \"[B\"\n+  #512 = Utf8               Signature\n+  #513 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+  #514 = Class              #515          // java/io/UnsupportedEncodingException\n+  #515 = Utf8               java/io/UnsupportedEncodingException\n+  #516 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B\n+  #517 = Utf8               createArchiveEntry\n+  #518 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #519 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #520 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JJ)V\n+  #521 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;BLjava/lang/String;)Z\n+  #522 = Utf8               <clinit>\n+  #523 = Utf8               SourceFile\n+  #524 = Utf8               TarArchiveOutputStream.java\n+  #525 = Utf8               BootstrapMethods\n+  #526 = MethodHandle       6:#527        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #527 = Methodref          #528.#529     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #528 = Class              #530          // java/lang/invoke/StringConcatFactory\n+  #529 = NameAndType        #17:#531      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #530 = Utf8               java/lang/invoke/StringConcatFactory\n+  #531 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #532 = String             #533          // Tar record size must always be 512 bytes. Attempt to set size of \\u0001\n+  #533 = Utf8               Tar record size must always be 512 bytes. Attempt to set size of \\u0001\n+  #534 = String             #535          // Block size must be a multiple of 512 bytes. Attempt to use set size of \\u0001\n+  #535 = Utf8               Block size must be a multiple of 512 bytes. Attempt to use set size of \\u0001\n+  #536 = String             #537          // Entry \\'\\u0001\\' closed at \\'\\u0001\\' before the \\'\\u0001\\' bytes specified in the header were written\n+  #537 = Utf8               Entry \\'\\u0001\\' closed at \\'\\u0001\\' before the \\'\\u0001\\' bytes specified in the header were written\n+  #538 = String             #539          // Request to write \\'\\u0001\\' bytes exceeds size in header of \\'\\u0001\\' bytes for entry \\'\\u0001\\'\n+  #539 = Utf8               Request to write \\'\\u0001\\' bytes exceeds size in header of \\'\\u0001\\' bytes for entry \\'\\u0001\\'\n+  #540 = String             #541          // ./PaxHeaders.X/\\u0001\n+  #541 = Utf8               ./PaxHeaders.X/\\u0001\n+  #542 = String             #543          // \\u0001 \\u0001=\\u0001\\n\n+  #543 = Utf8               \\u0001 \\u0001=\\u0001\\n\n+  #544 = String             #545          // Record to write has length \\'\\u0001\\' which is not the record size of \\'512\\'\n+  #545 = Utf8               Record to write has length \\'\\u0001\\' which is not the record size of \\'512\\'\n+  #546 = String             #547          // \\u0001 \\'\\u0001\\' is too big ( > \\u0001 ).\\u0001\n+  #547 = Utf8               \\u0001 \\'\\u0001\\' is too big ( > \\u0001 ).\\u0001\n+  #548 = String             #549          // \\u0001 \\'\\u0001\\' is too long ( > 100 bytes)\n+  #549 = Utf8               \\u0001 \\'\\u0001\\' is too long ( > 100 bytes)\n+  #550 = Utf8               InnerClasses\n+  #551 = Utf8               Entry\n+  #552 = Class              #553          // java/lang/invoke/MethodHandles$Lookup\n+  #553 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #554 = Class              #555          // java/lang/invoke/MethodHandles\n+  #555 = Utf8               java/lang/invoke/MethodHandles\n+  #556 = Utf8               Lookup\n {\n   public static final int LONGFILE_ERROR = 0;\n     descriptor: I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 0\n \n   public static final int LONGFILE_TRUNCATE = 1;\n@@ -678,45 +678,45 @@\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        -511\n-         5: invokespecial #2                  // Method \"<init>\":(Ljava/io/OutputStream;I)V\n+         5: invokespecial #3                  // Method \"<init>\":(Ljava/io/OutputStream;I)V\n          8: return\n       LineNumberTable:\n         line 135: 0\n         line 136: 8\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(java.io.OutputStream, java.lang.String);\n     descriptor: (Ljava/io/OutputStream;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: sipush        -511\n          5: aload_2\n-         6: invokespecial #3                  // Method \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n+         6: invokespecial #7                  // Method \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n          9: return\n       LineNumberTable:\n         line 148: 0\n         line 149: 9\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(java.io.OutputStream, int);\n     descriptor: (Ljava/io/OutputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: aconst_null\n-         4: invokespecial #3                  // Method \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n+         4: invokespecial #7                  // Method \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n          7: return\n       LineNumberTable:\n         line 158: 0\n         line 159: 7\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(java.io.OutputStream, int, int);\n     descriptor: (Ljava/io/OutputStream;II)V\n@@ -724,133 +724,133 @@\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n          4: aconst_null\n-         5: invokespecial #4                  // Method \"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n+         5: invokespecial #10                 // Method \"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n          8: return\n       LineNumberTable:\n         line 174: 0\n         line 175: 8\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #219()\n+      0: #496()\n         java.lang.Deprecated\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(java.io.OutputStream, int, int, java.lang.String);\n     descriptor: (Ljava/io/OutputStream;IILjava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=5\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: aload         4\n-         5: invokespecial #3                  // Method \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n+         5: invokespecial #7                  // Method \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n          8: iload_3\n          9: sipush        512\n         12: if_icmpeq     29\n-        15: new           #5                  // class java/lang/IllegalArgumentException\n+        15: new           #13                 // class java/lang/IllegalArgumentException\n         18: dup\n         19: iload_3\n-        20: invokedynamic #6,  0              // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-        25: invokespecial #7                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        20: invokedynamic #15,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+        25: invokespecial #19                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         28: athrow\n         29: return\n       LineNumberTable:\n         line 191: 0\n         line 192: 8\n         line 193: 15\n         line 197: 29\n       StackMapTable: number_of_entries = 1\n         frame_type = 255 /* full_frame */\n           offset_delta = 29\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveOutputStream, class java/io/OutputStream, int, int, class java/lang/String ]\n           stack = []\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #219()\n+      0: #496()\n         java.lang.Deprecated\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(java.io.OutputStream, int, java.lang.String);\n     descriptor: (Ljava/io/OutputStream;ILjava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=7, locals=5, args_size=4\n          0: aload_0\n-         1: invokespecial #8                  // Method org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n+         1: invokespecial #22                 // Method org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n          4: aload_0\n          5: iconst_0\n-         6: putfield      #9                  // Field longFileMode:I\n+         6: putfield      #27                 // Field longFileMode:I\n          9: aload_0\n         10: iconst_0\n-        11: putfield      #10                 // Field bigNumberMode:I\n+        11: putfield      #31                 // Field bigNumberMode:I\n         14: aload_0\n         15: iconst_0\n-        16: putfield      #11                 // Field closed:Z\n+        16: putfield      #34                 // Field closed:Z\n         19: aload_0\n         20: iconst_0\n-        21: putfield      #12                 // Field haveUnclosedEntry:Z\n+        21: putfield      #38                 // Field haveUnclosedEntry:Z\n         24: aload_0\n         25: iconst_0\n-        26: putfield      #13                 // Field finished:Z\n+        26: putfield      #41                 // Field finished:Z\n         29: aload_0\n         30: iconst_0\n-        31: putfield      #14                 // Field addPaxHeadersForNonAsciiNames:Z\n+        31: putfield      #44                 // Field addPaxHeadersForNonAsciiNames:Z\n         34: sipush        -511\n         37: iload_2\n         38: if_icmpne     49\n         41: sipush        512\n         44: istore        4\n         46: goto          52\n         49: iload_2\n         50: istore        4\n         52: iload         4\n         54: ifle          66\n         57: iload         4\n         59: sipush        512\n         62: irem\n         63: ifeq          80\n-        66: new           #5                  // class java/lang/IllegalArgumentException\n+        66: new           #13                 // class java/lang/IllegalArgumentException\n         69: dup\n         70: iload_2\n-        71: invokedynamic #15,  0             // InvokeDynamic #1:makeConcatWithConstants:(I)Ljava/lang/String;\n-        76: invokespecial #7                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        71: invokedynamic #47,  0             // InvokeDynamic #1:makeConcatWithConstants:(I)Ljava/lang/String;\n+        76: invokespecial #19                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         79: athrow\n         80: aload_0\n-        81: new           #16                 // class org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+        81: new           #48                 // class org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n         84: dup\n         85: aload_0\n-        86: new           #17                 // class org/apache/commons/compress/utils/CountingOutputStream\n+        86: new           #50                 // class org/apache/commons/compress/utils/CountingOutputStream\n         89: dup\n         90: aload_1\n-        91: invokespecial #18                 // Method org/apache/commons/compress/utils/CountingOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+        91: invokespecial #52                 // Method org/apache/commons/compress/utils/CountingOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n         94: dup_x1\n-        95: putfield      #19                 // Field countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n+        95: putfield      #55                 // Field countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n         98: sipush        512\n-       101: invokespecial #20                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n-       104: putfield      #21                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+       101: invokespecial #59                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n+       104: putfield      #60                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n        107: aload_0\n        108: aload_3\n-       109: putfield      #22                 // Field encoding:Ljava/lang/String;\n+       109: putfield      #64                 // Field encoding:Ljava/lang/String;\n        112: aload_0\n        113: aload_3\n-       114: invokestatic  #23                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-       117: putfield      #24                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       114: invokestatic  #68                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       117: putfield      #74                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        120: aload_0\n        121: sipush        512\n        124: newarray       byte\n-       126: putfield      #25                 // Field recordBuf:[B\n+       126: putfield      #78                 // Field recordBuf:[B\n        129: aload_0\n        130: iload         4\n        132: sipush        512\n        135: idiv\n-       136: putfield      #26                 // Field recordsPerBlock:I\n+       136: putfield      #82                 // Field recordsPerBlock:I\n        139: return\n       LineNumberTable:\n         line 208: 0\n         line 96: 4\n         line 97: 9\n         line 101: 14\n         line 106: 19\n@@ -881,107 +881,107 @@\n   public void setLongFileMode(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #9                  // Field longFileMode:I\n+         2: putfield      #27                 // Field longFileMode:I\n          5: return\n       LineNumberTable:\n         line 236: 0\n         line 237: 5\n \n   public void setBigNumberMode(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #10                 // Field bigNumberMode:I\n+         2: putfield      #31                 // Field bigNumberMode:I\n          5: return\n       LineNumberTable:\n         line 249: 0\n         line 250: 5\n \n   public void setAddPaxHeadersForNonAsciiNames(boolean);\n     descriptor: (Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #14                 // Field addPaxHeadersForNonAsciiNames:Z\n+         2: putfield      #44                 // Field addPaxHeadersForNonAsciiNames:Z\n          5: return\n       LineNumberTable:\n         line 259: 0\n         line 260: 5\n \n   public int getCount();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #27                 // Method getBytesWritten:()J\n+         1: invokevirtual #85                 // Method getBytesWritten:()J\n          4: l2i\n          5: ireturn\n       LineNumberTable:\n         line 265: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #219()\n+      0: #496()\n         java.lang.Deprecated\n \n   public long getBytesWritten();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #19                 // Field countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n-         4: invokevirtual #28                 // Method org/apache/commons/compress/utils/CountingOutputStream.getBytesWritten:()J\n+         1: getfield      #55                 // Field countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n+         4: invokevirtual #89                 // Method org/apache/commons/compress/utils/CountingOutputStream.getBytesWritten:()J\n          7: lreturn\n       LineNumberTable:\n         line 270: 0\n \n   public void finish() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field finished:Z\n+         1: getfield      #41                 // Field finished:Z\n          4: ifeq          17\n-         7: new           #29                 // class java/io/IOException\n+         7: new           #90                 // class java/io/IOException\n         10: dup\n-        11: ldc           #30                 // String This archive has already been finished\n-        13: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #92                 // String This archive has already been finished\n+        13: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #12                 // Field haveUnclosedEntry:Z\n+        18: getfield      #38                 // Field haveUnclosedEntry:Z\n         21: ifeq          34\n-        24: new           #29                 // class java/io/IOException\n+        24: new           #90                 // class java/io/IOException\n         27: dup\n-        28: ldc           #32                 // String This archive contains unclosed entries.\n-        30: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        28: ldc           #95                 // String This archive contains unclosed entries.\n+        30: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         33: athrow\n         34: aload_0\n-        35: invokespecial #33                 // Method writeEOFRecord:()V\n+        35: invokespecial #97                 // Method writeEOFRecord:()V\n         38: aload_0\n-        39: invokespecial #33                 // Method writeEOFRecord:()V\n+        39: invokespecial #97                 // Method writeEOFRecord:()V\n         42: aload_0\n-        43: invokespecial #34                 // Method padAsNeeded:()V\n+        43: invokespecial #100                // Method padAsNeeded:()V\n         46: aload_0\n-        47: getfield      #21                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-        50: invokevirtual #35                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flush:()V\n+        47: getfield      #60                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+        50: invokevirtual #103                // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flush:()V\n         53: aload_0\n         54: iconst_1\n-        55: putfield      #13                 // Field finished:Z\n+        55: putfield      #41                 // Field finished:Z\n         58: return\n       LineNumberTable:\n         line 284: 0\n         line 285: 7\n         line 288: 17\n         line 289: 24\n         line 291: 34\n@@ -998,38 +998,38 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field finished:Z\n+         1: getfield      #41                 // Field finished:Z\n          4: ifne          11\n          7: aload_0\n-         8: invokevirtual #36                 // Method finish:()V\n+         8: invokevirtual #106                // Method finish:()V\n         11: aload_0\n-        12: getfield      #11                 // Field closed:Z\n+        12: getfield      #34                 // Field closed:Z\n         15: ifne          55\n         18: aload_0\n-        19: getfield      #21                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-        22: invokevirtual #37                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.close:()V\n+        19: getfield      #60                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+        22: invokevirtual #109                // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.close:()V\n         25: aload_0\n         26: iconst_1\n-        27: putfield      #11                 // Field closed:Z\n+        27: putfield      #34                 // Field closed:Z\n         30: goto          55\n         33: astore_1\n         34: aload_0\n-        35: getfield      #11                 // Field closed:Z\n+        35: getfield      #34                 // Field closed:Z\n         38: ifne          53\n         41: aload_0\n-        42: getfield      #21                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-        45: invokevirtual #37                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.close:()V\n+        42: getfield      #60                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+        45: invokevirtual #109                // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.close:()V\n         48: aload_0\n         49: iconst_1\n-        50: putfield      #11                 // Field closed:Z\n+        50: putfield      #34                 // Field closed:Z\n         53: aload_1\n         54: athrow\n         55: return\n       Exception table:\n          from    to  target type\n              0    11    33   any\n       LineNumberTable:\n@@ -1062,215 +1062,215 @@\n       stack=1, locals=1, args_size=1\n          0: sipush        512\n          3: ireturn\n       LineNumberTable:\n         line 325: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #219()\n+      0: #496()\n         java.lang.Deprecated\n \n   public void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=7, locals=8, args_size=2\n          0: aload_0\n-         1: getfield      #13                 // Field finished:Z\n+         1: getfield      #41                 // Field finished:Z\n          4: ifeq          17\n-         7: new           #29                 // class java/io/IOException\n+         7: new           #90                 // class java/io/IOException\n         10: dup\n-        11: ldc           #38                 // String Stream has already been finished\n-        13: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #112                // String Stream has already been finished\n+        13: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_1\n-        18: checkcast     #39                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+        18: checkcast     #114                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n         21: astore_2\n         22: aload_2\n-        23: invokevirtual #40                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+        23: invokevirtual #116                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n         26: ifeq          108\n         29: aload_0\n         30: aload_2\n-        31: invokevirtual #41                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getExtraPaxHeaders:()Ljava/util/Map;\n-        34: invokespecial #42                 // Method encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n+        31: invokevirtual #120                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getExtraPaxHeaders:()Ljava/util/Map;\n+        34: invokespecial #124                // Method encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n         37: astore_3\n         38: aload_2\n         39: aload_3\n         40: arraylength\n         41: i2l\n-        42: invokevirtual #43                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n+        42: invokevirtual #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n         45: aload_2\n         46: aload_0\n-        47: getfield      #25                 // Field recordBuf:[B\n+        47: getfield      #78                 // Field recordBuf:[B\n         50: aload_0\n-        51: getfield      #24                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        51: getfield      #74                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         54: aload_0\n-        55: getfield      #10                 // Field bigNumberMode:I\n+        55: getfield      #31                 // Field bigNumberMode:I\n         58: iconst_1\n         59: if_icmpne     66\n         62: iconst_1\n         63: goto          67\n         66: iconst_0\n-        67: invokevirtual #44                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+        67: invokevirtual #132                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n         70: aload_0\n         71: aload_0\n-        72: getfield      #25                 // Field recordBuf:[B\n-        75: invokespecial #45                 // Method writeRecord:([B)V\n+        72: getfield      #78                 // Field recordBuf:[B\n+        75: invokespecial #136                // Method writeRecord:([B)V\n         78: aload_0\n         79: aload_2\n-        80: invokevirtual #46                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-        83: putfield      #47                 // Field currSize:J\n+        80: invokevirtual #140                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        83: putfield      #143                // Field currSize:J\n         86: aload_0\n         87: lconst_0\n-        88: putfield      #48                 // Field currBytes:J\n+        88: putfield      #147                // Field currBytes:J\n         91: aload_0\n         92: iconst_1\n-        93: putfield      #12                 // Field haveUnclosedEntry:Z\n+        93: putfield      #38                 // Field haveUnclosedEntry:Z\n         96: aload_0\n         97: aload_3\n-        98: invokevirtual #49                 // Method write:([B)V\n+        98: invokevirtual #150                // Method write:([B)V\n        101: aload_0\n-       102: invokevirtual #50                 // Method closeArchiveEntry:()V\n+       102: invokevirtual #153                // Method closeArchiveEntry:()V\n        105: goto          396\n-       108: new           #51                 // class java/util/HashMap\n+       108: new           #156                // class java/util/HashMap\n        111: dup\n-       112: invokespecial #52                 // Method java/util/HashMap.\"<init>\":()V\n+       112: invokespecial #158                // Method java/util/HashMap.\"<init>\":()V\n        115: astore_3\n        116: aload_2\n-       117: invokevirtual #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+       117: invokevirtual #159                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n        120: astore        4\n        122: aload_0\n        123: aload_2\n        124: aload         4\n        126: aload_3\n-       127: ldc           #54                 // String path\n+       127: ldc           #163                // String path\n        129: bipush        76\n-       131: ldc           #56                 // String file name\n-       133: invokespecial #57                 // Method handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n+       131: ldc           #167                // String file name\n+       133: invokespecial #169                // Method handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n        136: istore        5\n        138: aload_2\n-       139: invokevirtual #58                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLinkName:()Ljava/lang/String;\n+       139: invokevirtual #173                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLinkName:()Ljava/lang/String;\n        142: astore        6\n        144: aload         6\n        146: ifnull        178\n        149: aload         6\n-       151: invokevirtual #59                 // Method java/lang/String.length:()I\n+       151: invokevirtual #176                // Method java/lang/String.length:()I\n        154: ifle          178\n        157: aload_0\n        158: aload_2\n        159: aload         6\n        161: aload_3\n-       162: ldc           #60                 // String linkpath\n+       162: ldc           #182                // String linkpath\n        164: bipush        75\n-       166: ldc           #61                 // String link name\n-       168: invokespecial #57                 // Method handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n+       166: ldc           #184                // String link name\n+       168: invokespecial #169                // Method handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n        171: ifeq          178\n        174: iconst_1\n        175: goto          179\n        178: iconst_0\n        179: istore        7\n        181: aload_0\n-       182: getfield      #10                 // Field bigNumberMode:I\n+       182: getfield      #31                 // Field bigNumberMode:I\n        185: iconst_2\n        186: if_icmpne     198\n        189: aload_0\n        190: aload_3\n        191: aload_2\n-       192: invokespecial #62                 // Method addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+       192: invokespecial #186                // Method addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n        195: goto          211\n        198: aload_0\n-       199: getfield      #10                 // Field bigNumberMode:I\n+       199: getfield      #31                 // Field bigNumberMode:I\n        202: iconst_1\n        203: if_icmpeq     211\n        206: aload_0\n        207: aload_2\n-       208: invokespecial #63                 // Method failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+       208: invokespecial #190                // Method failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n        211: aload_0\n-       212: getfield      #14                 // Field addPaxHeadersForNonAsciiNames:Z\n+       212: getfield      #44                 // Field addPaxHeadersForNonAsciiNames:Z\n        215: ifeq          247\n        218: iload         5\n        220: ifne          247\n-       223: getstatic     #64                 // Field ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       223: getstatic     #194                // Field ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        226: aload         4\n-       228: invokeinterface #65,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n+       228: invokeinterface #197,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n        233: ifne          247\n        236: aload_3\n-       237: ldc           #54                 // String path\n+       237: ldc           #163                // String path\n        239: aload         4\n-       241: invokeinterface #66,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       241: invokeinterface #203,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n        246: pop\n        247: aload_0\n-       248: getfield      #14                 // Field addPaxHeadersForNonAsciiNames:Z\n+       248: getfield      #44                 // Field addPaxHeadersForNonAsciiNames:Z\n        251: ifeq          297\n        254: iload         7\n        256: ifne          297\n        259: aload_2\n-       260: invokevirtual #67                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isLink:()Z\n+       260: invokevirtual #209                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isLink:()Z\n        263: ifne          273\n        266: aload_2\n-       267: invokevirtual #68                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSymbolicLink:()Z\n+       267: invokevirtual #212                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSymbolicLink:()Z\n        270: ifeq          297\n-       273: getstatic     #64                 // Field ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       273: getstatic     #194                // Field ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        276: aload         6\n-       278: invokeinterface #65,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n+       278: invokeinterface #197,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n        283: ifne          297\n        286: aload_3\n-       287: ldc           #60                 // String linkpath\n+       287: ldc           #182                // String linkpath\n        289: aload         6\n-       291: invokeinterface #66,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       291: invokeinterface #203,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n        296: pop\n        297: aload_3\n        298: aload_2\n-       299: invokevirtual #41                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getExtraPaxHeaders:()Ljava/util/Map;\n-       302: invokeinterface #69,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V\n+       299: invokevirtual #120                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getExtraPaxHeaders:()Ljava/util/Map;\n+       302: invokeinterface #215,  2          // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V\n        307: aload_3\n-       308: invokeinterface #70,  1           // InterfaceMethod java/util/Map.size:()I\n+       308: invokeinterface #219,  1          // InterfaceMethod java/util/Map.size:()I\n        313: ifle          324\n        316: aload_0\n        317: aload_2\n        318: aload         4\n        320: aload_3\n-       321: invokevirtual #71                 // Method writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n+       321: invokevirtual #222                // Method writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n        324: aload_2\n        325: aload_0\n-       326: getfield      #25                 // Field recordBuf:[B\n+       326: getfield      #78                 // Field recordBuf:[B\n        329: aload_0\n-       330: getfield      #24                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       330: getfield      #74                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        333: aload_0\n-       334: getfield      #10                 // Field bigNumberMode:I\n+       334: getfield      #31                 // Field bigNumberMode:I\n        337: iconst_1\n        338: if_icmpne     345\n        341: iconst_1\n        342: goto          346\n        345: iconst_0\n-       346: invokevirtual #44                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+       346: invokevirtual #132                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n        349: aload_0\n        350: aload_0\n-       351: getfield      #25                 // Field recordBuf:[B\n-       354: invokespecial #45                 // Method writeRecord:([B)V\n+       351: getfield      #78                 // Field recordBuf:[B\n+       354: invokespecial #136                // Method writeRecord:([B)V\n        357: aload_0\n        358: lconst_0\n-       359: putfield      #48                 // Field currBytes:J\n+       359: putfield      #147                // Field currBytes:J\n        362: aload_2\n-       363: invokevirtual #72                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+       363: invokevirtual #226                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n        366: ifeq          377\n        369: aload_0\n        370: lconst_0\n-       371: putfield      #47                 // Field currSize:J\n+       371: putfield      #143                // Field currSize:J\n        374: goto          385\n        377: aload_0\n        378: aload_2\n-       379: invokevirtual #46                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-       382: putfield      #47                 // Field currSize:J\n+       379: invokevirtual #140                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+       382: putfield      #143                // Field currSize:J\n        385: aload_0\n        386: aload         4\n-       388: putfield      #73                 // Field currName:Ljava/lang/String;\n+       388: putfield      #229                // Field currName:Ljava/lang/String;\n        391: aload_0\n        392: iconst_1\n-       393: putfield      #12                 // Field haveUnclosedEntry:Z\n+       393: putfield      #38                 // Field haveUnclosedEntry:Z\n        396: return\n       LineNumberTable:\n         line 341: 0\n         line 342: 7\n         line 344: 17\n         line 345: 22\n         line 346: 29\n@@ -1357,76 +1357,76 @@\n \n   public void closeArchiveEntry() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=7, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field finished:Z\n+         1: getfield      #41                 // Field finished:Z\n          4: ifeq          17\n-         7: new           #29                 // class java/io/IOException\n+         7: new           #90                 // class java/io/IOException\n         10: dup\n-        11: ldc           #38                 // String Stream has already been finished\n-        13: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #112                // String Stream has already been finished\n+        13: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #12                 // Field haveUnclosedEntry:Z\n+        18: getfield      #38                 // Field haveUnclosedEntry:Z\n         21: ifne          34\n-        24: new           #29                 // class java/io/IOException\n+        24: new           #90                 // class java/io/IOException\n         27: dup\n-        28: ldc           #74                 // String No current entry to close\n-        30: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        28: ldc           #232                // String No current entry to close\n+        30: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         33: athrow\n         34: aload_0\n-        35: getfield      #21                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-        38: invokevirtual #75                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n+        35: getfield      #60                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+        38: invokevirtual #234                // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n         41: aload_0\n-        42: getfield      #48                 // Field currBytes:J\n+        42: getfield      #147                // Field currBytes:J\n         45: aload_0\n-        46: getfield      #47                 // Field currSize:J\n+        46: getfield      #143                // Field currSize:J\n         49: lcmp\n         50: ifge          78\n-        53: new           #29                 // class java/io/IOException\n+        53: new           #90                 // class java/io/IOException\n         56: dup\n         57: aload_0\n-        58: getfield      #73                 // Field currName:Ljava/lang/String;\n+        58: getfield      #229                // Field currName:Ljava/lang/String;\n         61: aload_0\n-        62: getfield      #48                 // Field currBytes:J\n+        62: getfield      #147                // Field currBytes:J\n         65: aload_0\n-        66: getfield      #47                 // Field currSize:J\n-        69: invokedynamic #76,  0             // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;JJ)Ljava/lang/String;\n-        74: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        66: getfield      #143                // Field currSize:J\n+        69: invokedynamic #237,  0            // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;JJ)Ljava/lang/String;\n+        74: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         77: athrow\n         78: aload_0\n         79: dup\n-        80: getfield      #77                 // Field recordsWritten:I\n+        80: getfield      #240                // Field recordsWritten:I\n         83: i2l\n         84: aload_0\n-        85: getfield      #47                 // Field currSize:J\n-        88: ldc2_w        #78                 // long 512l\n+        85: getfield      #143                // Field currSize:J\n+        88: ldc2_w        #243                // long 512l\n         91: ldiv\n         92: ladd\n         93: l2i\n-        94: putfield      #77                 // Field recordsWritten:I\n+        94: putfield      #240                // Field recordsWritten:I\n         97: lconst_0\n         98: aload_0\n-        99: getfield      #47                 // Field currSize:J\n-       102: ldc2_w        #78                 // long 512l\n+        99: getfield      #143                // Field currSize:J\n+       102: ldc2_w        #243                // long 512l\n        105: lrem\n        106: lcmp\n        107: ifeq          120\n        110: aload_0\n        111: dup\n-       112: getfield      #77                 // Field recordsWritten:I\n+       112: getfield      #240                // Field recordsWritten:I\n        115: iconst_1\n        116: iadd\n-       117: putfield      #77                 // Field recordsWritten:I\n+       117: putfield      #240                // Field recordsWritten:I\n        120: aload_0\n        121: iconst_0\n-       122: putfield      #12                 // Field haveUnclosedEntry:Z\n+       122: putfield      #38                 // Field haveUnclosedEntry:Z\n        125: return\n       LineNumberTable:\n         line 413: 0\n         line 414: 7\n         line 416: 17\n         line 417: 24\n         line 419: 34\n@@ -1447,53 +1447,53 @@\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #12                 // Field haveUnclosedEntry:Z\n+         1: getfield      #38                 // Field haveUnclosedEntry:Z\n          4: ifne          17\n-         7: new           #80                 // class java/lang/IllegalStateException\n+         7: new           #245                // class java/lang/IllegalStateException\n         10: dup\n-        11: ldc           #81                 // String No current tar entry\n-        13: invokespecial #82                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #247                // String No current tar entry\n+        13: invokespecial #249                // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #48                 // Field currBytes:J\n+        18: getfield      #147                // Field currBytes:J\n         21: iload_3\n         22: i2l\n         23: ladd\n         24: aload_0\n-        25: getfield      #47                 // Field currSize:J\n+        25: getfield      #143                // Field currSize:J\n         28: lcmp\n         29: ifle          54\n-        32: new           #29                 // class java/io/IOException\n+        32: new           #90                 // class java/io/IOException\n         35: dup\n         36: iload_3\n         37: aload_0\n-        38: getfield      #47                 // Field currSize:J\n+        38: getfield      #143                // Field currSize:J\n         41: aload_0\n-        42: getfield      #73                 // Field currName:Ljava/lang/String;\n-        45: invokedynamic #83,  0             // InvokeDynamic #3:makeConcatWithConstants:(IJLjava/lang/String;)Ljava/lang/String;\n-        50: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        42: getfield      #229                // Field currName:Ljava/lang/String;\n+        45: invokedynamic #250,  0            // InvokeDynamic #3:makeConcatWithConstants:(IJLjava/lang/String;)Ljava/lang/String;\n+        50: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         53: athrow\n         54: aload_0\n-        55: getfield      #21                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+        55: getfield      #60                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n         58: aload_1\n         59: iload_2\n         60: iload_3\n-        61: invokevirtual #84                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([BII)V\n+        61: invokevirtual #253                // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([BII)V\n         64: aload_0\n         65: dup\n-        66: getfield      #48                 // Field currBytes:J\n+        66: getfield      #147                // Field currBytes:J\n         69: iload_3\n         70: i2l\n         71: ladd\n-        72: putfield      #48                 // Field currBytes:J\n+        72: putfield      #147                // Field currBytes:J\n         75: return\n       LineNumberTable:\n         line 445: 0\n         line 446: 7\n         line 448: 17\n         line 449: 32\n         line 454: 54\n@@ -1508,53 +1508,53 @@\n   void writePaxHeaders(org.apache.commons.compress.archivers.tar.TarArchiveEntry, java.lang.String, java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n     flags: (0x0000)\n     Code:\n       stack=4, locals=7, args_size=4\n          0: aload_0\n          1: aload_2\n-         2: invokespecial #85                 // Method stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n-         5: invokedynamic #86,  0             // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+         2: invokespecial #256                // Method stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n+         5: invokedynamic #260,  0            // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n         10: astore        4\n         12: aload         4\n-        14: invokevirtual #59                 // Method java/lang/String.length:()I\n+        14: invokevirtual #176                // Method java/lang/String.length:()I\n         17: bipush        100\n         19: if_icmplt     32\n         22: aload         4\n         24: iconst_0\n         25: bipush        99\n-        27: invokevirtual #87                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n+        27: invokevirtual #262                // Method java/lang/String.substring:(II)Ljava/lang/String;\n         30: astore        4\n-        32: new           #39                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+        32: new           #114                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n         35: dup\n         36: aload         4\n         38: bipush        120\n-        40: invokespecial #88                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;B)V\n+        40: invokespecial #266                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;B)V\n         43: astore        5\n         45: aload_0\n         46: aload_1\n         47: aload         5\n-        49: invokespecial #89                 // Method transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+        49: invokespecial #269                // Method transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n         52: aload_0\n         53: aload_3\n-        54: invokespecial #42                 // Method encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n+        54: invokespecial #124                // Method encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n         57: astore        6\n         59: aload         5\n         61: aload         6\n         63: arraylength\n         64: i2l\n-        65: invokevirtual #43                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n+        65: invokevirtual #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n         68: aload_0\n         69: aload         5\n-        71: invokevirtual #90                 // Method putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+        71: invokevirtual #273                // Method putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n         74: aload_0\n         75: aload         6\n-        77: invokevirtual #49                 // Method write:([B)V\n+        77: invokevirtual #150                // Method write:([B)V\n         80: aload_0\n-        81: invokevirtual #50                 // Method closeArchiveEntry:()V\n+        81: invokevirtual #153                // Method closeArchiveEntry:()V\n         84: return\n       LineNumberTable:\n         line 466: 0\n         line 467: 12\n         line 468: 22\n         line 470: 32\n         line 472: 45\n@@ -1566,180 +1566,180 @@\n         line 479: 84\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 32\n           locals = [ class java/lang/String ]\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #251                         // (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+    Signature: #513                         // (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n \n   private byte[] encodeExtendedPaxHeadersContents(java.util.Map<java.lang.String, java.lang.String>) throws java.io.UnsupportedEncodingException;\n     descriptor: (Ljava/util/Map;)[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=10, args_size=2\n-         0: new           #91                 // class java/io/StringWriter\n+         0: new           #277                // class java/io/StringWriter\n          3: dup\n-         4: invokespecial #92                 // Method java/io/StringWriter.\"<init>\":()V\n+         4: invokespecial #279                // Method java/io/StringWriter.\"<init>\":()V\n          7: astore_2\n          8: aload_1\n-         9: invokeinterface #93,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;\n-        14: invokeinterface #94,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;\n+         9: invokeinterface #280,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;\n+        14: invokeinterface #284,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;\n         19: astore_3\n         20: aload_3\n-        21: invokeinterface #95,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n-        26: ifeq          150\n+        21: invokeinterface #290,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        26: ifeq          152\n         29: aload_3\n-        30: invokeinterface #96,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        35: checkcast     #97                 // class java/util/Map$Entry\n+        30: invokeinterface #295,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        35: checkcast     #299                // class java/util/Map$Entry\n         38: astore        4\n         40: aload         4\n-        42: invokeinterface #98,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-        47: checkcast     #99                 // class java/lang/String\n+        42: invokeinterface #301,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+        47: checkcast     #177                // class java/lang/String\n         50: astore        5\n         52: aload         4\n-        54: invokeinterface #100,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-        59: checkcast     #99                 // class java/lang/String\n+        54: invokeinterface #304,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+        59: checkcast     #177                // class java/lang/String\n         62: astore        6\n         64: aload         5\n-        66: invokevirtual #59                 // Method java/lang/String.length:()I\n+        66: invokevirtual #176                // Method java/lang/String.length:()I\n         69: aload         6\n-        71: invokevirtual #59                 // Method java/lang/String.length:()I\n+        71: invokevirtual #176                // Method java/lang/String.length:()I\n         74: iadd\n         75: iconst_3\n         76: iadd\n         77: iconst_2\n         78: iadd\n         79: istore        7\n         81: iload         7\n         83: aload         5\n         85: aload         6\n-        87: invokedynamic #101,  0            // InvokeDynamic #5:makeConcatWithConstants:(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+        87: invokedynamic #307,  0            // InvokeDynamic #5:makeConcatWithConstants:(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n         92: astore        8\n         94: aload         8\n-        96: ldc           #103                // String UTF-8\n-        98: invokevirtual #104                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n-       101: arraylength\n-       102: istore        9\n-       104: iload         7\n-       106: iload         9\n-       108: if_icmpeq     141\n-       111: iload         9\n-       113: istore        7\n-       115: iload         7\n-       117: aload         5\n-       119: aload         6\n-       121: invokedynamic #101,  0            // InvokeDynamic #5:makeConcatWithConstants:(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-       126: astore        8\n-       128: aload         8\n-       130: ldc           #103                // String UTF-8\n-       132: invokevirtual #104                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n-       135: arraylength\n-       136: istore        9\n-       138: goto          104\n-       141: aload_2\n-       142: aload         8\n-       144: invokevirtual #105                // Method java/io/StringWriter.write:(Ljava/lang/String;)V\n-       147: goto          20\n-       150: aload_2\n-       151: invokevirtual #106                // Method java/io/StringWriter.toString:()Ljava/lang/String;\n-       154: ldc           #103                // String UTF-8\n-       156: invokevirtual #104                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n-       159: areturn\n+        96: ldc_w         #312                // String UTF-8\n+        99: invokevirtual #314                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n+       102: arraylength\n+       103: istore        9\n+       105: iload         7\n+       107: iload         9\n+       109: if_icmpeq     143\n+       112: iload         9\n+       114: istore        7\n+       116: iload         7\n+       118: aload         5\n+       120: aload         6\n+       122: invokedynamic #307,  0            // InvokeDynamic #5:makeConcatWithConstants:(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+       127: astore        8\n+       129: aload         8\n+       131: ldc_w         #312                // String UTF-8\n+       134: invokevirtual #314                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n+       137: arraylength\n+       138: istore        9\n+       140: goto          105\n+       143: aload_2\n+       144: aload         8\n+       146: invokevirtual #318                // Method java/io/StringWriter.write:(Ljava/lang/String;)V\n+       149: goto          20\n+       152: aload_2\n+       153: invokevirtual #320                // Method java/io/StringWriter.toString:()Ljava/lang/String;\n+       156: ldc_w         #312                // String UTF-8\n+       159: invokevirtual #314                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n+       162: areturn\n       LineNumberTable:\n         line 483: 0\n         line 484: 8\n         line 485: 40\n         line 486: 52\n         line 487: 64\n         line 490: 81\n         line 491: 94\n-        line 492: 104\n-        line 498: 111\n-        line 499: 115\n-        line 500: 128\n-        line 502: 141\n-        line 503: 147\n-        line 504: 150\n+        line 492: 105\n+        line 498: 112\n+        line 499: 116\n+        line 500: 129\n+        line 502: 143\n+        line 503: 149\n+        line 504: 152\n       StackMapTable: number_of_entries = 4\n         frame_type = 253 /* append */\n           offset_delta = 20\n           locals = [ class java/io/StringWriter, class java/util/Iterator ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 83\n+          offset_delta = 84\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveOutputStream, class java/util/Map, class java/io/StringWriter, class java/util/Iterator, class java/util/Map$Entry, class java/lang/String, class java/lang/String, int, class java/lang/String, int ]\n           stack = []\n-        frame_type = 36 /* same */\n+        frame_type = 37 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 8\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveOutputStream, class java/util/Map, class java/io/StringWriter ]\n           stack = []\n     Exceptions:\n       throws java.io.UnsupportedEncodingException\n-    Signature: #256                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B\n+    Signature: #516                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B\n \n   private java.lang.String stripTo7Bits(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/String;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=6, args_size=2\n          0: aload_1\n-         1: invokevirtual #59                 // Method java/lang/String.length:()I\n+         1: invokevirtual #176                // Method java/lang/String.length:()I\n          4: istore_2\n-         5: new           #107                // class java/lang/StringBuilder\n+         5: new           #323                // class java/lang/StringBuilder\n          8: dup\n          9: iload_2\n-        10: invokespecial #108                // Method java/lang/StringBuilder.\"<init>\":(I)V\n+        10: invokespecial #325                // Method java/lang/StringBuilder.\"<init>\":(I)V\n         13: astore_3\n         14: iconst_0\n         15: istore        4\n         17: iload         4\n         19: iload_2\n-        20: if_icmpge     67\n+        20: if_icmpge     68\n         23: aload_1\n         24: iload         4\n-        26: invokevirtual #109                // Method java/lang/String.charAt:(I)C\n+        26: invokevirtual #328                // Method java/lang/String.charAt:(I)C\n         29: bipush        127\n         31: iand\n         32: i2c\n         33: istore        5\n         35: aload_0\n         36: iload         5\n-        38: invokespecial #110                // Method shouldBeReplaced:(C)Z\n-        41: ifeq          54\n+        38: invokespecial #332                // Method shouldBeReplaced:(C)Z\n+        41: ifeq          55\n         44: aload_3\n-        45: ldc           #111                // String _\n-        47: invokevirtual #112                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        50: pop\n-        51: goto          61\n-        54: aload_3\n-        55: iload         5\n-        57: invokevirtual #113                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-        60: pop\n-        61: iinc          4, 1\n-        64: goto          17\n-        67: aload_3\n-        68: invokevirtual #114                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        71: areturn\n+        45: ldc_w         #336                // String _\n+        48: invokevirtual #338                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        51: pop\n+        52: goto          62\n+        55: aload_3\n+        56: iload         5\n+        58: invokevirtual #342                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+        61: pop\n+        62: iinc          4, 1\n+        65: goto          17\n+        68: aload_3\n+        69: invokevirtual #345                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        72: areturn\n       LineNumberTable:\n         line 508: 0\n         line 509: 5\n         line 510: 14\n         line 511: 23\n         line 512: 35\n         line 513: 44\n-        line 515: 54\n-        line 510: 61\n-        line 518: 67\n+        line 515: 55\n+        line 510: 62\n+        line 518: 68\n       StackMapTable: number_of_entries = 4\n         frame_type = 254 /* append */\n           offset_delta = 17\n           locals = [ int, class java/lang/StringBuilder, int ]\n         frame_type = 252 /* append */\n-          offset_delta = 36\n+          offset_delta = 37\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 6\n         frame_type = 250 /* chop */\n           offset_delta = 5\n \n   private boolean shouldBeReplaced(char);\n@@ -1769,62 +1769,62 @@\n \n   private void writeEOFRecord() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field recordBuf:[B\n+         1: getfield      #78                 // Field recordBuf:[B\n          4: iconst_0\n-         5: invokestatic  #115                // Method java/util/Arrays.fill:([BB)V\n+         5: invokestatic  #346                // Method java/util/Arrays.fill:([BB)V\n          8: aload_0\n          9: aload_0\n-        10: getfield      #25                 // Field recordBuf:[B\n-        13: invokespecial #45                 // Method writeRecord:([B)V\n+        10: getfield      #78                 // Field recordBuf:[B\n+        13: invokespecial #136                // Method writeRecord:([B)V\n         16: return\n       LineNumberTable:\n         line 536: 0\n         line 537: 8\n         line 538: 16\n     Exceptions:\n       throws java.io.IOException\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-         4: invokevirtual #35                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flush:()V\n+         1: getfield      #60                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+         4: invokevirtual #103                // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flush:()V\n          7: return\n       LineNumberTable:\n         line 542: 0\n         line 543: 7\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.archivers.ArchiveEntry createArchiveEntry(java.io.File, java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n-         1: getfield      #13                 // Field finished:Z\n+         1: getfield      #41                 // Field finished:Z\n          4: ifeq          17\n-         7: new           #29                 // class java/io/IOException\n+         7: new           #90                 // class java/io/IOException\n         10: dup\n-        11: ldc           #38                 // String Stream has already been finished\n-        13: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #112                // String Stream has already been finished\n+        13: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n-        17: new           #39                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+        17: new           #114                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n         20: dup\n         21: aload_1\n         22: aload_2\n-        23: invokespecial #116                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+        23: invokespecial #352                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n         26: areturn\n       LineNumberTable:\n         line 548: 0\n         line 549: 7\n         line 551: 17\n       StackMapTable: number_of_entries = 1\n         frame_type = 17 /* same */\n@@ -1836,31 +1836,31 @@\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_1\n          1: arraylength\n          2: sipush        512\n          5: if_icmpeq     23\n-         8: new           #29                 // class java/io/IOException\n+         8: new           #90                 // class java/io/IOException\n         11: dup\n         12: aload_1\n         13: arraylength\n-        14: invokedynamic #117,  0            // InvokeDynamic #6:makeConcatWithConstants:(I)Ljava/lang/String;\n-        19: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        14: invokedynamic #355,  0            // InvokeDynamic #6:makeConcatWithConstants:(I)Ljava/lang/String;\n+        19: invokespecial #94                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         22: athrow\n         23: aload_0\n-        24: getfield      #21                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+        24: getfield      #60                 // Field out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n         27: aload_1\n-        28: invokevirtual #118                // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([B)V\n+        28: invokevirtual #356                // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([B)V\n         31: aload_0\n         32: dup\n-        33: getfield      #77                 // Field recordsWritten:I\n+        33: getfield      #240                // Field recordsWritten:I\n         36: iconst_1\n         37: iadd\n-        38: putfield      #77                 // Field recordsWritten:I\n+        38: putfield      #240                // Field recordsWritten:I\n         41: return\n       LineNumberTable:\n         line 561: 0\n         line 562: 8\n         line 568: 23\n         line 569: 31\n         line 570: 41\n@@ -1871,29 +1871,29 @@\n \n   private void padAsNeeded() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #77                 // Field recordsWritten:I\n+         1: getfield      #240                // Field recordsWritten:I\n          4: aload_0\n-         5: getfield      #26                 // Field recordsPerBlock:I\n+         5: getfield      #82                 // Field recordsPerBlock:I\n          8: irem\n          9: istore_1\n         10: iload_1\n         11: ifeq          34\n         14: iload_1\n         15: istore_2\n         16: iload_2\n         17: aload_0\n-        18: getfield      #26                 // Field recordsPerBlock:I\n+        18: getfield      #82                 // Field recordsPerBlock:I\n         21: if_icmpge     34\n         24: aload_0\n-        25: invokespecial #33                 // Method writeEOFRecord:()V\n+        25: invokespecial #97                 // Method writeEOFRecord:()V\n         28: iinc          2, 1\n         31: goto          16\n         34: return\n       LineNumberTable:\n         line 573: 0\n         line 574: 10\n         line 575: 14\n@@ -1912,83 +1912,83 @@\n   private void addPaxHeadersForBigNumbers(java.util.Map<java.lang.String, java.lang.String>, org.apache.commons.compress.archivers.tar.TarArchiveEntry);\n     descriptor: (Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: ldc           #119                // String size\n-         4: aload_2\n-         5: invokevirtual #46                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-         8: ldc2_w        #120                // long 8589934591l\n-        11: invokespecial #122                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-        14: aload_0\n-        15: aload_1\n-        16: ldc           #123                // String gid\n-        18: aload_2\n-        19: invokevirtual #124                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongGroupId:()J\n-        22: ldc2_w        #125                // long 2097151l\n-        25: invokespecial #122                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-        28: aload_0\n-        29: aload_1\n-        30: ldc           #127                // String mtime\n-        32: aload_2\n-        33: invokevirtual #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n-        36: invokevirtual #129                // Method java/util/Date.getTime:()J\n-        39: ldc2_w        #130                // long 1000l\n-        42: ldiv\n-        43: ldc2_w        #120                // long 8589934591l\n-        46: invokespecial #122                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-        49: aload_0\n-        50: aload_1\n-        51: ldc           #132                // String uid\n-        53: aload_2\n-        54: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongUserId:()J\n-        57: ldc2_w        #125                // long 2097151l\n-        60: invokespecial #122                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-        63: aload_0\n-        64: aload_1\n-        65: ldc           #134                // String SCHILY.devmajor\n-        67: aload_2\n-        68: invokevirtual #135                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMajor:()I\n-        71: i2l\n-        72: ldc2_w        #125                // long 2097151l\n-        75: invokespecial #122                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-        78: aload_0\n-        79: aload_1\n-        80: ldc           #136                // String SCHILY.devminor\n-        82: aload_2\n-        83: invokevirtual #137                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMinor:()I\n-        86: i2l\n-        87: ldc2_w        #125                // long 2097151l\n-        90: invokespecial #122                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-        93: aload_0\n-        94: ldc           #138                // String mode\n-        96: aload_2\n-        97: invokevirtual #139                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getMode:()I\n-       100: i2l\n-       101: ldc2_w        #125                // long 2097151l\n-       104: invokespecial #140                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n-       107: return\n+         2: ldc_w         #357                // String size\n+         5: aload_2\n+         6: invokevirtual #140                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+         9: ldc2_w        #358                // long 8589934591l\n+        12: invokespecial #360                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+        15: aload_0\n+        16: aload_1\n+        17: ldc_w         #364                // String gid\n+        20: aload_2\n+        21: invokevirtual #366                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongGroupId:()J\n+        24: ldc2_w        #369                // long 2097151l\n+        27: invokespecial #360                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+        30: aload_0\n+        31: aload_1\n+        32: ldc_w         #371                // String mtime\n+        35: aload_2\n+        36: invokevirtual #373                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n+        39: invokevirtual #377                // Method java/util/Date.getTime:()J\n+        42: ldc2_w        #382                // long 1000l\n+        45: ldiv\n+        46: ldc2_w        #358                // long 8589934591l\n+        49: invokespecial #360                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+        52: aload_0\n+        53: aload_1\n+        54: ldc_w         #384                // String uid\n+        57: aload_2\n+        58: invokevirtual #386                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongUserId:()J\n+        61: ldc2_w        #369                // long 2097151l\n+        64: invokespecial #360                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+        67: aload_0\n+        68: aload_1\n+        69: ldc_w         #389                // String SCHILY.devmajor\n+        72: aload_2\n+        73: invokevirtual #391                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMajor:()I\n+        76: i2l\n+        77: ldc2_w        #369                // long 2097151l\n+        80: invokespecial #360                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+        83: aload_0\n+        84: aload_1\n+        85: ldc_w         #394                // String SCHILY.devminor\n+        88: aload_2\n+        89: invokevirtual #396                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMinor:()I\n+        92: i2l\n+        93: ldc2_w        #369                // long 2097151l\n+        96: invokespecial #360                // Method addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+        99: aload_0\n+       100: ldc_w         #399                // String mode\n+       103: aload_2\n+       104: invokevirtual #401                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getMode:()I\n+       107: i2l\n+       108: ldc2_w        #369                // long 2097151l\n+       111: invokespecial #404                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n+       114: return\n       LineNumberTable:\n         line 583: 0\n-        line 585: 14\n-        line 587: 28\n-        line 588: 33\n-        line 587: 46\n-        line 590: 49\n-        line 593: 63\n-        line 594: 68\n-        line 593: 75\n-        line 595: 78\n-        line 596: 83\n-        line 595: 90\n-        line 598: 93\n-        line 599: 107\n-    Signature: #270                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+        line 585: 15\n+        line 587: 30\n+        line 588: 36\n+        line 587: 49\n+        line 590: 52\n+        line 593: 67\n+        line 594: 73\n+        line 593: 80\n+        line 595: 83\n+        line 596: 89\n+        line 595: 96\n+        line 598: 99\n+        line 599: 114\n+    Signature: #519                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n \n   private void addPaxHeaderForBigNumber(java.util.Map<java.lang.String, java.lang.String>, java.lang.String, long, long);\n     descriptor: (Ljava/util/Map;Ljava/lang/String;JJ)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=7, args_size=5\n          0: lload_3\n@@ -1998,146 +1998,146 @@\n          6: lload_3\n          7: lload         5\n          9: lcmp\n         10: ifle          25\n         13: aload_1\n         14: aload_2\n         15: lload_3\n-        16: invokestatic  #141                // Method java/lang/String.valueOf:(J)Ljava/lang/String;\n-        19: invokeinterface #66,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+        16: invokestatic  #408                // Method java/lang/String.valueOf:(J)Ljava/lang/String;\n+        19: invokeinterface #203,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n         24: pop\n         25: return\n       LineNumberTable:\n         line 604: 0\n         line 605: 13\n         line 607: 25\n       StackMapTable: number_of_entries = 2\n         frame_type = 13 /* same */\n         frame_type = 11 /* same */\n-    Signature: #273                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JJ)V\n+    Signature: #520                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JJ)V\n \n   private void failForBigNumbers(org.apache.commons.compress.archivers.tar.TarArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=2, args_size=2\n          0: aload_0\n-         1: ldc           #142                // String entry size\n-         3: aload_1\n-         4: invokevirtual #46                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-         7: ldc2_w        #120                // long 8589934591l\n-        10: invokespecial #140                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n-        13: aload_0\n-        14: ldc           #143                // String group id\n-        16: aload_1\n-        17: invokevirtual #124                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongGroupId:()J\n-        20: ldc2_w        #125                // long 2097151l\n-        23: invokespecial #144                // Method failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n-        26: aload_0\n-        27: ldc           #145                // String last modification time\n-        29: aload_1\n-        30: invokevirtual #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n-        33: invokevirtual #129                // Method java/util/Date.getTime:()J\n-        36: ldc2_w        #130                // long 1000l\n-        39: ldiv\n-        40: ldc2_w        #120                // long 8589934591l\n-        43: invokespecial #140                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n-        46: aload_0\n-        47: ldc           #146                // String user id\n-        49: aload_1\n-        50: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongUserId:()J\n-        53: ldc2_w        #125                // long 2097151l\n-        56: invokespecial #140                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n-        59: aload_0\n-        60: ldc           #138                // String mode\n-        62: aload_1\n-        63: invokevirtual #139                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getMode:()I\n-        66: i2l\n-        67: ldc2_w        #125                // long 2097151l\n-        70: invokespecial #140                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n-        73: aload_0\n-        74: ldc           #147                // String major device number\n-        76: aload_1\n-        77: invokevirtual #135                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMajor:()I\n-        80: i2l\n-        81: ldc2_w        #125                // long 2097151l\n-        84: invokespecial #140                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n-        87: aload_0\n-        88: ldc           #148                // String minor device number\n-        90: aload_1\n-        91: invokevirtual #137                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMinor:()I\n-        94: i2l\n-        95: ldc2_w        #125                // long 2097151l\n-        98: invokespecial #140                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n-       101: return\n+         1: ldc_w         #412                // String entry size\n+         4: aload_1\n+         5: invokevirtual #140                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+         8: ldc2_w        #358                // long 8589934591l\n+        11: invokespecial #404                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n+        14: aload_0\n+        15: ldc_w         #414                // String group id\n+        18: aload_1\n+        19: invokevirtual #366                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongGroupId:()J\n+        22: ldc2_w        #369                // long 2097151l\n+        25: invokespecial #416                // Method failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n+        28: aload_0\n+        29: ldc_w         #419                // String last modification time\n+        32: aload_1\n+        33: invokevirtual #373                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n+        36: invokevirtual #377                // Method java/util/Date.getTime:()J\n+        39: ldc2_w        #382                // long 1000l\n+        42: ldiv\n+        43: ldc2_w        #358                // long 8589934591l\n+        46: invokespecial #404                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n+        49: aload_0\n+        50: ldc_w         #421                // String user id\n+        53: aload_1\n+        54: invokevirtual #386                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongUserId:()J\n+        57: ldc2_w        #369                // long 2097151l\n+        60: invokespecial #404                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n+        63: aload_0\n+        64: ldc_w         #399                // String mode\n+        67: aload_1\n+        68: invokevirtual #401                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getMode:()I\n+        71: i2l\n+        72: ldc2_w        #369                // long 2097151l\n+        75: invokespecial #404                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n+        78: aload_0\n+        79: ldc_w         #423                // String major device number\n+        82: aload_1\n+        83: invokevirtual #391                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMajor:()I\n+        86: i2l\n+        87: ldc2_w        #369                // long 2097151l\n+        90: invokespecial #404                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n+        93: aload_0\n+        94: ldc_w         #425                // String minor device number\n+        97: aload_1\n+        98: invokevirtual #396                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMinor:()I\n+       101: i2l\n+       102: ldc2_w        #369                // long 2097151l\n+       105: invokespecial #404                // Method failForBigNumber:(Ljava/lang/String;JJ)V\n+       108: return\n       LineNumberTable:\n         line 610: 0\n-        line 611: 13\n-        line 612: 26\n-        line 613: 30\n-        line 612: 43\n-        line 615: 46\n-        line 616: 59\n-        line 617: 73\n-        line 619: 87\n-        line 621: 101\n+        line 611: 14\n+        line 612: 28\n+        line 613: 33\n+        line 612: 46\n+        line 615: 49\n+        line 616: 63\n+        line 617: 78\n+        line 619: 93\n+        line 621: 108\n \n   private void failForBigNumber(java.lang.String, long, long);\n     descriptor: (Ljava/lang/String;JJ)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=6, args_size=4\n          0: aload_0\n          1: aload_1\n          2: lload_2\n          3: lload         4\n-         5: ldc           #149                // String\n-         7: invokespecial #150                // Method failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n-        10: return\n+         5: ldc_w         #427                // String\n+         8: invokespecial #429                // Method failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n+        11: return\n       LineNumberTable:\n         line 624: 0\n-        line 625: 10\n+        line 625: 11\n \n   private void failForBigNumberWithPosixMessage(java.lang.String, long, long);\n     descriptor: (Ljava/lang/String;JJ)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=6, args_size=4\n          0: aload_0\n          1: aload_1\n          2: lload_2\n          3: lload         4\n-         5: ldc           #151                // String  Use STAR or POSIX extensions to overcome this limit\n-         7: invokespecial #150                // Method failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n-        10: return\n+         5: ldc_w         #432                // String  Use STAR or POSIX extensions to overcome this limit\n+         8: invokespecial #429                // Method failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n+        11: return\n       LineNumberTable:\n         line 629: 0\n-        line 631: 10\n+        line 631: 11\n \n   private void failForBigNumber(java.lang.String, long, long, java.lang.String);\n     descriptor: (Ljava/lang/String;JJLjava/lang/String;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=8, locals=7, args_size=5\n          0: lload_2\n          1: lconst_0\n          2: lcmp\n          3: iflt          13\n          6: lload_2\n          7: lload         4\n          9: lcmp\n         10: ifle          32\n-        13: new           #152                // class java/lang/RuntimeException\n+        13: new           #434                // class java/lang/RuntimeException\n         16: dup\n         17: aload_1\n         18: lload_2\n         19: lload         4\n         21: aload         6\n-        23: invokedynamic #153,  0            // InvokeDynamic #7:makeConcatWithConstants:(Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;\n-        28: invokespecial #154                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n+        23: invokedynamic #436,  0            // InvokeDynamic #7:makeConcatWithConstants:(Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;\n+        28: invokespecial #439                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n         31: athrow\n         32: return\n       LineNumberTable:\n         line 635: 0\n         line 636: 13\n         line 640: 32\n       StackMapTable: number_of_entries = 2\n@@ -2146,145 +2146,145 @@\n \n   private boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.String, byte, java.lang.String) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=10, args_size=7\n          0: aload_0\n-         1: getfield      #24                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         1: getfield      #74                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n          4: aload_2\n-         5: invokeinterface #155,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+         5: invokeinterface #440,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         10: astore        7\n         12: aload         7\n-        14: invokevirtual #156                // Method java/nio/ByteBuffer.limit:()I\n+        14: invokevirtual #444                // Method java/nio/ByteBuffer.limit:()I\n         17: aload         7\n-        19: invokevirtual #157                // Method java/nio/ByteBuffer.position:()I\n+        19: invokevirtual #449                // Method java/nio/ByteBuffer.position:()I\n         22: isub\n         23: istore        8\n         25: iload         8\n         27: bipush        100\n-        29: if_icmplt     148\n+        29: if_icmplt     149\n         32: aload_0\n-        33: getfield      #9                  // Field longFileMode:I\n+        33: getfield      #27                 // Field longFileMode:I\n         36: iconst_3\n         37: if_icmpne     52\n         40: aload_3\n         41: aload         4\n         43: aload_2\n-        44: invokeinterface #66,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+        44: invokeinterface #203,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n         49: pop\n         50: iconst_1\n         51: ireturn\n         52: aload_0\n-        53: getfield      #9                  // Field longFileMode:I\n+        53: getfield      #27                 // Field longFileMode:I\n         56: iconst_2\n-        57: if_icmpne     124\n-        60: new           #39                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+        57: if_icmpne     125\n+        60: new           #114                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n         63: dup\n-        64: ldc           #158                // String ././@LongLink\n-        66: iload         5\n-        68: invokespecial #88                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;B)V\n-        71: astore        9\n-        73: aload         9\n-        75: iload         8\n-        77: i2l\n-        78: lconst_1\n-        79: ladd\n-        80: invokevirtual #43                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n-        83: aload_0\n-        84: aload_1\n-        85: aload         9\n-        87: invokespecial #89                 // Method transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-        90: aload_0\n-        91: aload         9\n-        93: invokevirtual #90                 // Method putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-        96: aload_0\n-        97: aload         7\n-        99: invokevirtual #159                // Method java/nio/ByteBuffer.array:()[B\n-       102: aload         7\n-       104: invokevirtual #160                // Method java/nio/ByteBuffer.arrayOffset:()I\n-       107: iload         8\n-       109: invokevirtual #161                // Method write:([BII)V\n-       112: aload_0\n-       113: iconst_0\n-       114: invokevirtual #162                // Method write:(I)V\n-       117: aload_0\n-       118: invokevirtual #50                 // Method closeArchiveEntry:()V\n-       121: goto          148\n-       124: aload_0\n-       125: getfield      #9                  // Field longFileMode:I\n-       128: iconst_1\n-       129: if_icmpeq     148\n-       132: new           #152                // class java/lang/RuntimeException\n-       135: dup\n-       136: aload         6\n-       138: aload_2\n-       139: invokedynamic #163,  0            // InvokeDynamic #8:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-       144: invokespecial #154                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n-       147: athrow\n-       148: iconst_0\n-       149: ireturn\n+        64: ldc_w         #452                // String ././@LongLink\n+        67: iload         5\n+        69: invokespecial #266                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;B)V\n+        72: astore        9\n+        74: aload         9\n+        76: iload         8\n+        78: i2l\n+        79: lconst_1\n+        80: ladd\n+        81: invokevirtual #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n+        84: aload_0\n+        85: aload_1\n+        86: aload         9\n+        88: invokespecial #269                // Method transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+        91: aload_0\n+        92: aload         9\n+        94: invokevirtual #273                // Method putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+        97: aload_0\n+        98: aload         7\n+       100: invokevirtual #454                // Method java/nio/ByteBuffer.array:()[B\n+       103: aload         7\n+       105: invokevirtual #458                // Method java/nio/ByteBuffer.arrayOffset:()I\n+       108: iload         8\n+       110: invokevirtual #461                // Method write:([BII)V\n+       113: aload_0\n+       114: iconst_0\n+       115: invokevirtual #462                // Method write:(I)V\n+       118: aload_0\n+       119: invokevirtual #153                // Method closeArchiveEntry:()V\n+       122: goto          149\n+       125: aload_0\n+       126: getfield      #27                 // Field longFileMode:I\n+       129: iconst_1\n+       130: if_icmpeq     149\n+       133: new           #434                // class java/lang/RuntimeException\n+       136: dup\n+       137: aload         6\n+       139: aload_2\n+       140: invokedynamic #464,  0            // InvokeDynamic #8:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+       145: invokespecial #439                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n+       148: athrow\n+       149: iconst_0\n+       150: ireturn\n       LineNumberTable:\n         line 663: 0\n         line 664: 12\n         line 665: 25\n         line 667: 32\n         line 668: 40\n         line 669: 50\n         line 670: 52\n         line 673: 60\n-        line 676: 73\n-        line 677: 83\n-        line 678: 90\n-        line 679: 96\n-        line 680: 112\n-        line 681: 117\n-        line 682: 121\n-        line 683: 132\n-        line 688: 148\n+        line 676: 74\n+        line 677: 84\n+        line 678: 91\n+        line 679: 97\n+        line 680: 113\n+        line 681: 118\n+        line 682: 122\n+        line 683: 133\n+        line 688: 149\n       StackMapTable: number_of_entries = 3\n         frame_type = 253 /* append */\n           offset_delta = 52\n           locals = [ class java/nio/ByteBuffer, int ]\n         frame_type = 251 /* same_frame_extended */\n-          offset_delta = 71\n+          offset_delta = 72\n         frame_type = 23 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #283                         // (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;BLjava/lang/String;)Z\n+    Signature: #521                         // (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;BLjava/lang/String;)Z\n \n   private void transferModTime(org.apache.commons.compress.archivers.tar.TarArchiveEntry, org.apache.commons.compress.archivers.tar.TarArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=6, args_size=3\n          0: aload_1\n-         1: invokevirtual #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n+         1: invokevirtual #373                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n          4: astore_3\n          5: aload_3\n-         6: invokevirtual #129                // Method java/util/Date.getTime:()J\n-         9: ldc2_w        #130                // long 1000l\n+         6: invokevirtual #377                // Method java/util/Date.getTime:()J\n+         9: ldc2_w        #382                // long 1000l\n         12: ldiv\n         13: lstore        4\n         15: lload         4\n         17: lconst_0\n         18: lcmp\n         19: iflt          31\n         22: lload         4\n-        24: ldc2_w        #120                // long 8589934591l\n+        24: ldc2_w        #358                // long 8589934591l\n         27: lcmp\n         28: ifle          40\n-        31: new           #164                // class java/util/Date\n+        31: new           #378                // class java/util/Date\n         34: dup\n         35: lconst_0\n-        36: invokespecial #165                // Method java/util/Date.\"<init>\":(J)V\n+        36: invokespecial #467                // Method java/util/Date.\"<init>\":(J)V\n         39: astore_3\n         40: aload_2\n         41: aload_3\n-        42: invokevirtual #166                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setModTime:(Ljava/util/Date;)V\n+        42: invokevirtual #469                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setModTime:(Ljava/util/Date;)V\n         45: return\n       LineNumberTable:\n         line 692: 0\n         line 693: 5\n         line 694: 15\n         line 695: 31\n         line 697: 40\n@@ -2296,48 +2296,48 @@\n         frame_type = 8 /* same */\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: ldc           #167                // String ASCII\n-         2: invokestatic  #23                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         5: putstatic     #64                 // Field ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         8: return\n+         0: ldc_w         #473                // String ASCII\n+         3: invokestatic  #68                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         6: putstatic     #194                // Field ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         9: return\n       LineNumberTable:\n         line 122: 0\n-        line 123: 2\n-        line 122: 8\n+        line 123: 3\n+        line 122: 9\n }\n SourceFile: \"TarArchiveOutputStream.java\"\n-InnerClasses:\n-  public static #386= #97 of #244;        // Entry=class java/util/Map$Entry of class java/util/Map\n-  public static final #552= #551 of #554; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #296 Tar record size must always be 512 bytes. Attempt to set size of \\u0001\n-  1: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #532 Tar record size must always be 512 bytes. Attempt to set size of \\u0001\n+  1: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #306 Block size must be a multiple of 512 bytes. Attempt to use set size of \\u0001\n-  2: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #534 Block size must be a multiple of 512 bytes. Attempt to use set size of \\u0001\n+  2: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #364 Entry \\'\\u0001\\' closed at \\'\\u0001\\' before the \\'\\u0001\\' bytes specified in the header were written\n-  3: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #536 Entry \\'\\u0001\\' closed at \\'\\u0001\\' before the \\'\\u0001\\' bytes specified in the header were written\n+  3: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #369 Request to write \\'\\u0001\\' bytes exceeds size in header of \\'\\u0001\\' bytes for entry \\'\\u0001\\'\n-  4: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #538 Request to write \\'\\u0001\\' bytes exceeds size in header of \\'\\u0001\\' bytes for entry \\'\\u0001\\'\n+  4: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #373 ./PaxHeaders.X/\\u0001\n-  5: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #540 ./PaxHeaders.X/\\u0001\n+  5: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #391 \\u0001 \\u0001=\\u0001\\n\n-  6: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #542 \\u0001 \\u0001=\\u0001\\n\n+  6: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #408 Record to write has length \\'\\u0001\\' which is not the record size of \\'512\\'\n-  7: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #544 Record to write has length \\'\\u0001\\' which is not the record size of \\'512\\'\n+  7: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #437 \\u0001 \\'\\u0001\\' is too big ( > \\u0001 ).\\u0001\n-  8: #295 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #546 \\u0001 \\'\\u0001\\' is too big ( > \\u0001 ).\\u0001\n+  8: #526 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #446 \\u0001 \\'\\u0001\\' is too long ( > 100 bytes)\n+      #548 \\u0001 \\'\\u0001\\' is too long ( > 100 bytes)\n+InnerClasses:\n+  public static #551= #299 of #204;       // Entry=class java/util/Map$Entry of class java/util/Map\n+  public static final #556= #552 of #554; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
