{"diffoscope-json-version": 1, "source1": "first/ZipArchiveInputStream.class", "source2": "second/ZipArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -71,15 +71,15 @@\n         this.twoDwordBuf = new byte[16];\n         this.entriesRead = 0;\n         this.encoding = encoding;\n         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n         this.useUnicodeExtraFields = useUnicodeExtraFields;\n         this.in = new PushbackInputStream(inputStream, this.buf.capacity());\n         this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;\n-        this.buf.limit();\n+        this.buf.limit(0);\n     }\n     \n     public ZipArchiveEntry getNextZipEntry() throws IOException {\n         boolean firstEntry = true;\n         if (this.closed || this.hitCentralDirectory) {\n             return null;\n         }\n@@ -273,31 +273,29 @@\n             return this.lastStoredEntry.read(buffer, offset, length);\n         }\n         final long csize = ZipArchiveInputStream.CurrentEntry.access$100(this.current).getSize();\n         if (ZipArchiveInputStream.CurrentEntry.access$600(this.current) >= csize) {\n             return -1;\n         }\n         if (this.buf.position() >= this.buf.limit()) {\n-            this.buf.position();\n+            this.buf.position(0);\n             final int l = this.in.read(this.buf.array());\n             if (l == -1) {\n                 return -1;\n             }\n-            this.buf.limit();\n+            this.buf.limit(l);\n             this.count(l);\n-            final ZipArchiveInputStream.CurrentEntry current = this.current;\n-            ZipArchiveInputStream.CurrentEntry.access$702(current, ZipArchiveInputStream.CurrentEntry.access$700(current) + (long)l);\n+            ZipArchiveInputStream.CurrentEntry.access$714(this.current, (long)l);\n         }\n         int toRead = Math.min(this.buf.remaining(), length);\n         if (csize - ZipArchiveInputStream.CurrentEntry.access$600(this.current) < toRead) {\n             toRead = (int)(csize - ZipArchiveInputStream.CurrentEntry.access$600(this.current));\n         }\n         this.buf.get(buffer, offset, toRead);\n-        final ZipArchiveInputStream.CurrentEntry current2 = this.current;\n-        ZipArchiveInputStream.CurrentEntry.access$602(current2, ZipArchiveInputStream.CurrentEntry.access$600(current2) + (long)toRead);\n+        ZipArchiveInputStream.CurrentEntry.access$614(this.current, (long)toRead);\n         return toRead;\n     }\n     \n     private int readDeflated(final byte[] buffer, final int offset, final int length) throws IOException {\n         final int read = this.readFromInflater(buffer, offset, length);\n         if (read <= 0) {\n             if (this.inf.finished()) {\n@@ -315,16 +313,15 @@\n     \n     private int readFromInflater(final byte[] buffer, final int offset, final int length) throws IOException {\n         int read = 0;\n         do {\n             if (this.inf.needsInput()) {\n                 final int l = this.fill();\n                 if (l > 0) {\n-                    final ZipArchiveInputStream.CurrentEntry current = this.current;\n-                    ZipArchiveInputStream.CurrentEntry.access$702(current, ZipArchiveInputStream.CurrentEntry.access$700(current) + (long)this.buf.limit());\n+                    ZipArchiveInputStream.CurrentEntry.access$714(this.current, (long)this.buf.limit());\n                 }\n                 else {\n                     if (l == -1) {\n                         return -1;\n                     }\n                     break;\n                 }\n@@ -392,16 +389,15 @@\n         }\n         else {\n             this.skip(Long.MAX_VALUE);\n             final long inB = (ZipArchiveInputStream.CurrentEntry.access$100(this.current).getMethod() == 8) ? this.getBytesInflated() : ZipArchiveInputStream.CurrentEntry.access$600(this.current);\n             final int diff = (int)(ZipArchiveInputStream.CurrentEntry.access$700(this.current) - inB);\n             if (diff > 0) {\n                 this.pushback(this.buf.array(), this.buf.limit() - diff, diff);\n-                final ZipArchiveInputStream.CurrentEntry current = this.current;\n-                ZipArchiveInputStream.CurrentEntry.access$702(current, ZipArchiveInputStream.CurrentEntry.access$700(current) - (long)diff);\n+                ZipArchiveInputStream.CurrentEntry.access$722(this.current, (long)diff);\n             }\n             if (this.currentEntryHasOutstandingBytes()) {\n                 this.drainCurrentEntryData();\n             }\n         }\n         if (this.lastStoredEntry == null && ZipArchiveInputStream.CurrentEntry.access$200(this.current)) {\n             this.readDataDescriptor();\n@@ -439,15 +435,15 @@\n     \n     private int fill() throws IOException {\n         if (this.closed) {\n             throw new IOException(\"The stream is closed\");\n         }\n         final int length = this.in.read(this.buf.array());\n         if (length > 0) {\n-            this.buf.limit();\n+            this.buf.limit(length);\n             this.count(this.buf.limit());\n             this.inf.setInput(this.buf.array(), 0, this.buf.limit());\n         }\n         return length;\n     }\n     \n     private void readFully(final byte[] b) throws IOException {\n"}]}
