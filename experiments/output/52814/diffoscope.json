{"diffoscope-json-version": 1, "source1": "first/GzipCompressorInputStream.class", "source2": "second/GzipCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -109,20 +109,41 @@\n         }\n         this.inf.reset();\n         this.crc.reset();\n         return true;\n     }\n     \n     private static byte[] readToNull(final DataInput inData) throws IOException {\n-        try (final ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n-            int b = 0;\n-            while ((b = inData.readUnsignedByte()) != 0) {\n-                bos.write(b);\n+        Throwable t = null;\n+        try {\n+            final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            try {\n+                int b = 0;\n+                while ((b = inData.readUnsignedByte()) != 0) {\n+                    bos.write(b);\n+                }\n+                return bos.toByteArray();\n+            }\n+            finally {\n+                if (bos != null) {\n+                    bos.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n-            return bos.toByteArray();\n         }\n     }\n     \n     public int read() throws IOException {\n         return (this.read(this.oneByte, 0, 1) == -1) ? -1 : (this.oneByte[0] & 0xFF);\n     }\n     \n@@ -143,15 +164,15 @@\n                 }\n                 this.inf.setInput(this.buf, 0, this.bufUsed);\n             }\n             int ret;\n             try {\n                 ret = this.inf.inflate(b, off, len);\n             }\n-            catch (final DataFormatException e) {\n+            catch (final DataFormatException ex) {\n                 throw new IOException(\"Gzip-compressed data is corrupt\");\n             }\n             this.crc.update(b, off, ret);\n             off += ret;\n             len -= ret;\n             size += ret;\n             this.count(ret);\n"}]}
