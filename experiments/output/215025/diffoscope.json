{"diffoscope-json-version": 1, "source1": "first/ElementValueGen.class", "source2": "second/ElementValueGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -43,95 +43,95 @@\n         return this.type;\n     }\n     \n     public abstract String stringifyValue();\n     \n     public abstract void dump(final DataOutputStream p0) throws IOException;\n     \n-    public static ElementValueGen readElementValue(final DataInput dis, final ConstantPoolGen cpGen) throws IOException {\n-        final int type = dis.readUnsignedByte();\n-        switch (type) {\n+    public static ElementValueGen readElementValue(final DataInput dataInput, final ConstantPoolGen constantPoolGen) throws IOException {\n+        final int unsignedByte = dataInput.readUnsignedByte();\n+        switch (unsignedByte) {\n             case 66: {\n-                return (ElementValueGen)new SimpleElementValueGen(66, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(66, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 67: {\n-                return (ElementValueGen)new SimpleElementValueGen(67, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(67, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 68: {\n-                return (ElementValueGen)new SimpleElementValueGen(68, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(68, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 70: {\n-                return (ElementValueGen)new SimpleElementValueGen(70, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(70, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 73: {\n-                return (ElementValueGen)new SimpleElementValueGen(73, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(73, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 74: {\n-                return (ElementValueGen)new SimpleElementValueGen(74, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(74, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 83: {\n-                return (ElementValueGen)new SimpleElementValueGen(83, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(83, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 90: {\n-                return (ElementValueGen)new SimpleElementValueGen(90, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(90, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 115: {\n-                return (ElementValueGen)new SimpleElementValueGen(115, dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new SimpleElementValueGen(115, dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 101: {\n-                return (ElementValueGen)new EnumElementValueGen(dis.readUnsignedShort(), dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new EnumElementValueGen(dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 99: {\n-                return (ElementValueGen)new ClassElementValueGen(dis.readUnsignedShort(), cpGen);\n+                return (ElementValueGen)new ClassElementValueGen(dataInput.readUnsignedShort(), constantPoolGen);\n             }\n             case 64: {\n-                return (ElementValueGen)new AnnotationElementValueGen(64, new AnnotationEntryGen(AnnotationEntry.read(dis, cpGen.getConstantPool(), true), cpGen, false), cpGen);\n+                return (ElementValueGen)new AnnotationElementValueGen(64, new AnnotationEntryGen(AnnotationEntry.read(dataInput, constantPoolGen.getConstantPool(), true), constantPoolGen, false), constantPoolGen);\n             }\n             case 91: {\n-                final int numArrayVals = dis.readUnsignedShort();\n-                final ElementValue[] evalues = new ElementValue[numArrayVals];\n-                for (int j = 0; j < numArrayVals; ++j) {\n-                    evalues[j] = ElementValue.readElementValue(dis, cpGen.getConstantPool());\n+                final int unsignedShort = dataInput.readUnsignedShort();\n+                final ElementValue[] array = new ElementValue[unsignedShort];\n+                for (int i = 0; i < unsignedShort; ++i) {\n+                    array[i] = ElementValue.readElementValue(dataInput, constantPoolGen.getConstantPool());\n                 }\n-                return (ElementValueGen)new ArrayElementValueGen(91, evalues, cpGen);\n+                return (ElementValueGen)new ArrayElementValueGen(91, array, constantPoolGen);\n             }\n             default: {\n-                throw new RuntimeException(\"Unexpected element value kind in annotation: \" + type);\n+                throw new RuntimeException(\"Unexpected element value kind in annotation: \" + unsignedByte);\n             }\n         }\n     }\n     \n     protected ConstantPoolGen getConstantPool() {\n         return this.cpGen;\n     }\n     \n-    public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {\n-        switch (value.getElementValueType()) {\n+    public static ElementValueGen copy(final ElementValue elementValue, final ConstantPoolGen constantPoolGen, final boolean b) {\n+        switch (elementValue.getElementValueType()) {\n             case 66:\n             case 67:\n             case 68:\n             case 70:\n             case 73:\n             case 74:\n             case 83:\n             case 90:\n             case 115: {\n-                return (ElementValueGen)new SimpleElementValueGen((SimpleElementValue)value, cpool, copyPoolEntries);\n+                return (ElementValueGen)new SimpleElementValueGen((SimpleElementValue)elementValue, constantPoolGen, b);\n             }\n             case 101: {\n-                return (ElementValueGen)new EnumElementValueGen((EnumElementValue)value, cpool, copyPoolEntries);\n+                return (ElementValueGen)new EnumElementValueGen((EnumElementValue)elementValue, constantPoolGen, b);\n             }\n             case 64: {\n-                return (ElementValueGen)new AnnotationElementValueGen((AnnotationElementValue)value, cpool, copyPoolEntries);\n+                return (ElementValueGen)new AnnotationElementValueGen((AnnotationElementValue)elementValue, constantPoolGen, b);\n             }\n             case 91: {\n-                return (ElementValueGen)new ArrayElementValueGen((ArrayElementValue)value, cpool, copyPoolEntries);\n+                return (ElementValueGen)new ArrayElementValueGen((ArrayElementValue)elementValue, constantPoolGen, b);\n             }\n             case 99: {\n-                return (ElementValueGen)new ClassElementValueGen((ClassElementValue)value, cpool, copyPoolEntries);\n+                return (ElementValueGen)new ClassElementValueGen((ClassElementValue)elementValue, constantPoolGen, b);\n             }\n             default: {\n-                throw new RuntimeException(\"Not implemented yet! (\" + value.getElementValueType() + \")\");\n+                throw new RuntimeException(\"Not implemented yet! (\" + elementValue.getElementValueType() + \")\");\n             }\n         }\n     }\n }\n"}]}
