{"diffoscope-json-version": 1, "source1": "first/DatabaseConfiguration.class", "source2": "second/DatabaseConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -88,97 +88,94 @@\n         return this.autoCommit;\n     }\n     \n     public void setAutoCommit(final boolean autoCommit) {\n         this.autoCommit = autoCommit;\n     }\n     \n-    protected Object getPropertyInternal(final String key) {\n-        final DatabaseConfiguration.JdbcOperation<Object> op = (DatabaseConfiguration.JdbcOperation<Object>)new DatabaseConfiguration.DatabaseConfiguration$1(this, ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, key, (Object)null, key);\n-        return op.execute();\n+    protected Object getPropertyInternal(final String s) {\n+        return ((DatabaseConfiguration.JdbcOperation)new DatabaseConfiguration.DatabaseConfiguration$1(this, ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, s, (Object)null, s)).execute();\n     }\n     \n-    protected void addPropertyDirect(final String key, final Object obj) {\n-        new DatabaseConfiguration.DatabaseConfiguration$2(this, ConfigurationErrorEvent.WRITE, ConfigurationEvent.ADD_PROPERTY, key, obj, key, obj).execute();\n+    protected void addPropertyDirect(final String s, final Object o) {\n+        new DatabaseConfiguration.DatabaseConfiguration$2(this, ConfigurationErrorEvent.WRITE, ConfigurationEvent.ADD_PROPERTY, s, o, s, o).execute();\n     }\n     \n-    protected void addPropertyInternal(final String key, final Object value) {\n-        final ListDelimiterHandler oldHandler = this.getListDelimiterHandler();\n+    protected void addPropertyInternal(final String s, final Object o) {\n+        final ListDelimiterHandler listDelimiterHandler = this.getListDelimiterHandler();\n         try {\n             this.setListDelimiterHandler(DisabledListDelimiterHandler.INSTANCE);\n-            super.addPropertyInternal(key, value);\n+            super.addPropertyInternal(s, o);\n         }\n         finally {\n-            this.setListDelimiterHandler(oldHandler);\n+            this.setListDelimiterHandler(listDelimiterHandler);\n         }\n     }\n     \n     protected boolean isEmptyInternal() {\n-        final DatabaseConfiguration.JdbcOperation<Integer> op = (DatabaseConfiguration.JdbcOperation<Integer>)new DatabaseConfiguration.DatabaseConfiguration$3(this, ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, (String)null, (Object)null);\n-        final Integer count = (Integer)op.execute();\n-        return count == null || count == 0;\n+        final Integer n = (Integer)((DatabaseConfiguration.JdbcOperation)new DatabaseConfiguration.DatabaseConfiguration$3(this, ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, (String)null, (Object)null)).execute();\n+        return n == null || n == 0;\n     }\n     \n-    protected boolean containsKeyInternal(final String key) {\n-        final DatabaseConfiguration.JdbcOperation<Boolean> op = (DatabaseConfiguration.JdbcOperation<Boolean>)new DatabaseConfiguration.DatabaseConfiguration$4(this, ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, key, (Object)null, key);\n-        final Boolean result = (Boolean)op.execute();\n-        return result != null && result;\n+    protected boolean containsKeyInternal(final String s) {\n+        final Boolean b = (Boolean)((DatabaseConfiguration.JdbcOperation)new DatabaseConfiguration.DatabaseConfiguration$4(this, ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, s, (Object)null, s)).execute();\n+        return b != null && b;\n     }\n     \n-    protected void clearPropertyDirect(final String key) {\n-        new DatabaseConfiguration.DatabaseConfiguration$5(this, ConfigurationErrorEvent.WRITE, ConfigurationEvent.CLEAR_PROPERTY, key, (Object)null, key).execute();\n+    protected void clearPropertyDirect(final String s) {\n+        new DatabaseConfiguration.DatabaseConfiguration$5(this, ConfigurationErrorEvent.WRITE, ConfigurationEvent.CLEAR_PROPERTY, s, (Object)null, s).execute();\n     }\n     \n     protected void clearInternal() {\n         new DatabaseConfiguration.DatabaseConfiguration$6(this, ConfigurationErrorEvent.WRITE, ConfigurationEvent.CLEAR, (String)null, (Object)null).execute();\n     }\n     \n     protected Iterator<String> getKeysInternal() {\n-        final Collection<String> keys = new ArrayList<String>();\n-        new DatabaseConfiguration.DatabaseConfiguration$7(this, ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, (String)null, (Object)null, (Collection)keys).execute();\n-        return keys.iterator();\n+        final ArrayList list = new ArrayList();\n+        new DatabaseConfiguration.DatabaseConfiguration$7(this, ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, (String)null, (Object)null, (Collection)list).execute();\n+        return list.iterator();\n     }\n     \n     public DataSource getDatasource() {\n         return this.dataSource;\n     }\n     \n-    protected void close(final Connection conn, final Statement stmt, final ResultSet rs) {\n+    protected void close(final Connection connection, final Statement statement, final ResultSet set) {\n         try {\n-            if (rs != null) {\n-                rs.close();\n+            if (set != null) {\n+                set.close();\n             }\n         }\n-        catch (final SQLException e) {\n-            this.getLogger().error(\"An error occurred on closing the result set\", (Throwable)e);\n+        catch (final SQLException ex) {\n+            this.getLogger().error(\"An error occurred on closing the result set\", (Throwable)ex);\n         }\n         try {\n-            if (stmt != null) {\n-                stmt.close();\n+            if (statement != null) {\n+                statement.close();\n             }\n         }\n-        catch (final SQLException e) {\n-            this.getLogger().error(\"An error occurred on closing the statement\", (Throwable)e);\n+        catch (final SQLException ex2) {\n+            this.getLogger().error(\"An error occurred on closing the statement\", (Throwable)ex2);\n         }\n         try {\n-            if (conn != null) {\n-                conn.close();\n+            if (connection != null) {\n+                connection.close();\n             }\n         }\n-        catch (final SQLException e) {\n-            this.getLogger().error(\"An error occurred on closing the connection\", (Throwable)e);\n+        catch (final SQLException ex3) {\n+            this.getLogger().error(\"An error occurred on closing the connection\", (Throwable)ex3);\n         }\n     }\n     \n-    protected Object extractPropertyValue(final ResultSet rs) throws SQLException {\n-        Object value = rs.getObject(this.valueColumn);\n-        if (value instanceof Clob) {\n-            value = convertClob((Clob)value);\n+    protected Object extractPropertyValue(final ResultSet set) throws SQLException {\n+        Object o = set.getObject(this.valueColumn);\n+        if (o instanceof Clob) {\n+            o = convertClob((Clob)o);\n         }\n-        return value;\n+        return o;\n     }\n     \n     private static Object convertClob(final Clob clob) throws SQLException {\n-        final int len = (int)clob.length();\n-        return (len > 0) ? clob.getSubString(1L, len) : \"\";\n+        final int n = (int)clob.length();\n+        return (n > 0) ? clob.getSubString(1L, n) : \"\";\n     }\n }\n"}]}
