{"diffoscope-json-version": 1, "source1": "first/Base64.class", "source2": "second/Base64.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,84 +1,84 @@\n-  SHA-256 checksum 4279377b6af57af840b19ca37134cff215c42a91ae32604ab768584edb17b1cd\n+  SHA-256 checksum ee9e404f4b729a011fc19e6f36a45417abecf2c23a6f7677c6d2a5216ca21ded\n   Compiled from \"Base64.java\"\n public class org.apache.commons.codec.binary.Base64 extends org.apache.commons.codec.binary.BaseNCodec\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #6                          // org/apache/commons/codec/binary/Base64\n   super_class: #2                         // org/apache/commons/codec/binary/BaseNCodec\n   interfaces: 0, fields: 15, methods: 28, attributes: 2\n Constant pool:\n-    #1 = Methodref          #6.#181       // org/apache/commons/codec/binary/Base64.\"<init>\":(I)V\n-    #2 = Class              #182          // org/apache/commons/codec/binary/BaseNCodec\n-    #3 = Fieldref           #6.#183       // org/apache/commons/codec/binary/Base64.CHUNK_SEPARATOR:[B\n-    #4 = Methodref          #6.#184       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[BZ)V\n-    #5 = Methodref          #6.#185       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[B)V\n-    #6 = Class              #186          // org/apache/commons/codec/binary/Base64\n-    #7 = Methodref          #2.#187       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIII)V\n-    #8 = Fieldref           #6.#188       // org/apache/commons/codec/binary/Base64.DECODE_TABLE:[B\n-    #9 = Fieldref           #6.#189       // org/apache/commons/codec/binary/Base64.decodeTable:[B\n-   #10 = Methodref          #6.#190       // org/apache/commons/codec/binary/Base64.containsAlphabetOrPad:([B)Z\n-   #11 = Methodref          #191.#192     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n-   #12 = Class              #193          // java/lang/IllegalArgumentException\n-   #13 = Class              #194          // java/lang/StringBuilder\n-   #14 = Methodref          #13.#195      // java/lang/StringBuilder.\"<init>\":()V\n-   #15 = String             #196          // lineSeparator must not contain base64 characters: [\n-   #16 = Methodref          #13.#197      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #17 = String             #198          // ]\n-   #18 = Methodref          #13.#199      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #19 = Methodref          #12.#200      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #20 = Fieldref           #6.#201       // org/apache/commons/codec/binary/Base64.encodeSize:I\n-   #21 = Fieldref           #6.#202       // org/apache/commons/codec/binary/Base64.lineSeparator:[B\n-   #22 = Methodref          #203.#204     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #23 = Fieldref           #6.#205       // org/apache/commons/codec/binary/Base64.decodeSize:I\n-   #24 = Fieldref           #6.#206       // org/apache/commons/codec/binary/Base64.URL_SAFE_ENCODE_TABLE:[B\n-   #25 = Fieldref           #6.#207       // org/apache/commons/codec/binary/Base64.STANDARD_ENCODE_TABLE:[B\n-   #26 = Fieldref           #6.#208       // org/apache/commons/codec/binary/Base64.encodeTable:[B\n-   #27 = Fieldref           #113.#209     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n-   #28 = Fieldref           #113.#210     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n-   #29 = Fieldref           #6.#211       // org/apache/commons/codec/binary/Base64.lineLength:I\n-   #30 = Methodref          #6.#212       // org/apache/commons/codec/binary/Base64.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-   #31 = Fieldref           #113.#213     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n-   #32 = Fieldref           #113.#214     // org/apache/commons/codec/binary/BaseNCodec$Context.ibitWorkArea:I\n-   #33 = Fieldref           #6.#215       // org/apache/commons/codec/binary/Base64.pad:B\n-   #34 = Class              #216          // java/lang/IllegalStateException\n-   #35 = String             #217          // Impossible modulus\n-   #36 = Methodref          #13.#218      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #34.#200      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #38 = Fieldref           #113.#219     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n-   #39 = Methodref          #6.#220       // org/apache/commons/codec/binary/Base64.validateCharacter:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #40 = Methodref          #6.#221       // org/apache/commons/codec/binary/Base64.isBase64:([B)Z\n-   #41 = Methodref          #191.#222     // org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B\n-   #42 = Methodref          #6.#223       // org/apache/commons/codec/binary/Base64.isBase64:(B)Z\n-   #43 = Methodref          #6.#224       // org/apache/commons/codec/binary/Base64.isWhiteSpace:(B)Z\n-   #44 = Methodref          #6.#225       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZ)[B\n-   #45 = Methodref          #191.#226     // org/apache/commons/codec/binary/StringUtils.newStringUsAscii:([B)Ljava/lang/String;\n-   #46 = Methodref          #6.#227       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZ)[B\n-   #47 = Class              #228          // java/lang/Integer\n+    #1 = Methodref          #6.#180       // org/apache/commons/codec/binary/Base64.\"<init>\":(I)V\n+    #2 = Class              #181          // org/apache/commons/codec/binary/BaseNCodec\n+    #3 = Fieldref           #6.#182       // org/apache/commons/codec/binary/Base64.CHUNK_SEPARATOR:[B\n+    #4 = Methodref          #6.#183       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[BZ)V\n+    #5 = Methodref          #6.#184       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[B)V\n+    #6 = Class              #185          // org/apache/commons/codec/binary/Base64\n+    #7 = Methodref          #2.#186       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIII)V\n+    #8 = Fieldref           #6.#187       // org/apache/commons/codec/binary/Base64.DECODE_TABLE:[B\n+    #9 = Fieldref           #6.#188       // org/apache/commons/codec/binary/Base64.decodeTable:[B\n+   #10 = Methodref          #6.#189       // org/apache/commons/codec/binary/Base64.containsAlphabetOrPad:([B)Z\n+   #11 = Methodref          #190.#191     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n+   #12 = Class              #192          // java/lang/IllegalArgumentException\n+   #13 = Class              #193          // java/lang/StringBuilder\n+   #14 = Methodref          #13.#194      // java/lang/StringBuilder.\"<init>\":()V\n+   #15 = String             #195          // lineSeparator must not contain base64 characters: [\n+   #16 = Methodref          #13.#196      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #17 = String             #197          // ]\n+   #18 = Methodref          #13.#198      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #19 = Methodref          #12.#199      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #20 = Fieldref           #6.#200       // org/apache/commons/codec/binary/Base64.encodeSize:I\n+   #21 = Fieldref           #6.#201       // org/apache/commons/codec/binary/Base64.lineSeparator:[B\n+   #22 = Methodref          #202.#203     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #23 = Fieldref           #6.#204       // org/apache/commons/codec/binary/Base64.decodeSize:I\n+   #24 = Fieldref           #6.#205       // org/apache/commons/codec/binary/Base64.URL_SAFE_ENCODE_TABLE:[B\n+   #25 = Fieldref           #6.#206       // org/apache/commons/codec/binary/Base64.STANDARD_ENCODE_TABLE:[B\n+   #26 = Fieldref           #6.#207       // org/apache/commons/codec/binary/Base64.encodeTable:[B\n+   #27 = Fieldref           #112.#208     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+   #28 = Fieldref           #112.#209     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n+   #29 = Fieldref           #6.#210       // org/apache/commons/codec/binary/Base64.lineLength:I\n+   #30 = Methodref          #6.#211       // org/apache/commons/codec/binary/Base64.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+   #31 = Fieldref           #112.#212     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n+   #32 = Fieldref           #112.#213     // org/apache/commons/codec/binary/BaseNCodec$Context.ibitWorkArea:I\n+   #33 = Fieldref           #6.#214       // org/apache/commons/codec/binary/Base64.pad:B\n+   #34 = Class              #215          // java/lang/IllegalStateException\n+   #35 = String             #216          // Impossible modulus\n+   #36 = Methodref          #13.#217      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #37 = Methodref          #34.#199      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #38 = Fieldref           #112.#218     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n+   #39 = Methodref          #6.#219       // org/apache/commons/codec/binary/Base64.validateCharacter:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #40 = Methodref          #6.#220       // org/apache/commons/codec/binary/Base64.isBase64:([B)Z\n+   #41 = Methodref          #190.#221     // org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B\n+   #42 = Methodref          #6.#222       // org/apache/commons/codec/binary/Base64.isBase64:(B)Z\n+   #43 = Methodref          #6.#223       // org/apache/commons/codec/binary/Base64.isWhiteSpace:(B)Z\n+   #44 = Methodref          #6.#224       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZ)[B\n+   #45 = Methodref          #190.#225     // org/apache/commons/codec/binary/StringUtils.newStringUsAscii:([B)Ljava/lang/String;\n+   #46 = Methodref          #6.#226       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZ)[B\n+   #47 = Class              #227          // java/lang/Integer\n    #48 = Integer            2147483647\n-   #49 = Methodref          #6.#229       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZI)[B\n-   #50 = Methodref          #6.#230       // org/apache/commons/codec/binary/Base64.\"<init>\":(Z)V\n-   #51 = Methodref          #6.#231       // org/apache/commons/codec/binary/Base64.getEncodedLength:([B)J\n-   #52 = String             #232          // Input array too big, the output array would be bigger (\n-   #53 = Methodref          #13.#233      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #54 = String             #234          // ) than the specified maximum size of\n-   #55 = Methodref          #6.#235       // org/apache/commons/codec/binary/Base64.encode:([B)[B\n-   #56 = Methodref          #6.#195       // org/apache/commons/codec/binary/Base64.\"<init>\":()V\n-   #57 = Methodref          #6.#236       // org/apache/commons/codec/binary/Base64.decode:(Ljava/lang/String;)[B\n-   #58 = Methodref          #6.#237       // org/apache/commons/codec/binary/Base64.decode:([B)[B\n-   #59 = Class              #238          // java/math/BigInteger\n-   #60 = Methodref          #6.#239       // org/apache/commons/codec/binary/Base64.decodeBase64:([B)[B\n-   #61 = Methodref          #59.#185      // java/math/BigInteger.\"<init>\":(I[B)V\n-   #62 = String             #165          // bigInteger\n-   #63 = Methodref          #240.#241     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #64 = Methodref          #6.#242       // org/apache/commons/codec/binary/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n-   #65 = Methodref          #59.#243      // java/math/BigInteger.bitLength:()I\n-   #66 = Methodref          #59.#244      // java/math/BigInteger.toByteArray:()[B\n-   #67 = String             #245          // Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible value. Expected the discarded bits to be zero.\n+   #49 = Methodref          #6.#228       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZI)[B\n+   #50 = Methodref          #6.#229       // org/apache/commons/codec/binary/Base64.\"<init>\":(Z)V\n+   #51 = Methodref          #6.#230       // org/apache/commons/codec/binary/Base64.getEncodedLength:([B)J\n+   #52 = String             #231          // Input array too big, the output array would be bigger (\n+   #53 = Methodref          #13.#232      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #54 = String             #233          // ) than the specified maximum size of\n+   #55 = Methodref          #6.#234       // org/apache/commons/codec/binary/Base64.encode:([B)[B\n+   #56 = Methodref          #6.#194       // org/apache/commons/codec/binary/Base64.\"<init>\":()V\n+   #57 = Methodref          #6.#235       // org/apache/commons/codec/binary/Base64.decode:(Ljava/lang/String;)[B\n+   #58 = Methodref          #6.#236       // org/apache/commons/codec/binary/Base64.decode:([B)[B\n+   #59 = Class              #237          // java/math/BigInteger\n+   #60 = Methodref          #6.#238       // org/apache/commons/codec/binary/Base64.decodeBase64:([B)[B\n+   #61 = Methodref          #59.#184      // java/math/BigInteger.\"<init>\":(I[B)V\n+   #62 = String             #164          // bigInteger\n+   #63 = Methodref          #239.#240     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #64 = Methodref          #6.#241       // org/apache/commons/codec/binary/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n+   #65 = Methodref          #59.#242      // java/math/BigInteger.bitLength:()I\n+   #66 = Methodref          #59.#243      // java/math/BigInteger.toByteArray:()[B\n+   #67 = String             #244          // Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible value. Expected the discarded bits to be zero.\n    #68 = Utf8               BITS_PER_ENCODED_BYTE\n    #69 = Utf8               I\n    #70 = Utf8               ConstantValue\n    #71 = Integer            6\n    #72 = Utf8               BYTES_PER_UNENCODED_BLOCK\n    #73 = Integer            3\n    #74 = Utf8               BYTES_PER_ENCODED_BLOCK\n@@ -112,186 +112,185 @@\n   #102 = Utf8               lineLength\n   #103 = Utf8               (I[B)V\n   #104 = Utf8               (I[BZ)V\n   #105 = Utf8               sep\n   #106 = Utf8               Ljava/lang/String;\n   #107 = Utf8               StackMapTable\n   #108 = Class              #77           // \"[B\"\n-  #109 = Class              #186          // org/apache/commons/codec/binary/Base64\n-  #110 = Utf8               isUrlSafe\n-  #111 = Utf8               ()Z\n-  #112 = Utf8               encode\n-  #113 = Class              #246          // org/apache/commons/codec/binary/BaseNCodec$Context\n-  #114 = Utf8               Context\n-  #115 = Utf8               InnerClasses\n-  #116 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #117 = Utf8               buffer\n-  #118 = Utf8               savedPos\n-  #119 = Utf8               b\n-  #120 = Utf8               i\n-  #121 = Utf8               in\n-  #122 = Utf8               inPos\n-  #123 = Utf8               inAvail\n-  #124 = Utf8               context\n-  #125 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-  #126 = Utf8               decode\n-  #127 = Utf8               result\n-  #128 = Utf8               B\n-  #129 = Utf8               isArrayByteBase64\n-  #130 = Utf8               ([B)Z\n-  #131 = Utf8               arrayOctet\n-  #132 = Utf8               Deprecated\n-  #133 = Utf8               RuntimeVisibleAnnotations\n-  #134 = Utf8               Ljava/lang/Deprecated;\n-  #135 = Utf8               isBase64\n-  #136 = Utf8               (B)Z\n-  #137 = Utf8               octet\n-  #138 = Utf8               (Ljava/lang/String;)Z\n-  #139 = Utf8               base64\n-  #140 = Utf8               encodeBase64\n-  #141 = Utf8               ([B)[B\n-  #142 = Utf8               binaryData\n-  #143 = Utf8               encodeBase64String\n-  #144 = Utf8               ([B)Ljava/lang/String;\n-  #145 = Utf8               encodeBase64URLSafe\n-  #146 = Utf8               encodeBase64URLSafeString\n-  #147 = Utf8               encodeBase64Chunked\n-  #148 = Utf8               ([BZ)[B\n-  #149 = Utf8               isChunked\n-  #150 = Utf8               ([BZZ)[B\n-  #151 = Utf8               ([BZZI)[B\n-  #152 = Utf8               maxResultSize\n-  #153 = Utf8               b64\n-  #154 = Utf8               len\n-  #155 = Utf8               J\n-  #156 = Utf8               decodeBase64\n-  #157 = Utf8               (Ljava/lang/String;)[B\n-  #158 = Utf8               base64String\n-  #159 = Utf8               base64Data\n-  #160 = Utf8               decodeInteger\n-  #161 = Utf8               ([B)Ljava/math/BigInteger;\n-  #162 = Utf8               pArray\n-  #163 = Utf8               encodeInteger\n-  #164 = Utf8               (Ljava/math/BigInteger;)[B\n-  #165 = Utf8               bigInteger\n-  #166 = Utf8               Ljava/math/BigInteger;\n-  #167 = Utf8               toIntegerBytes\n-  #168 = Utf8               bigInt\n-  #169 = Utf8               bitlen\n-  #170 = Utf8               bigBytes\n-  #171 = Utf8               startSrc\n-  #172 = Utf8               startDst\n-  #173 = Utf8               resizedBytes\n-  #174 = Utf8               isInAlphabet\n-  #175 = Utf8               validateCharacter\n-  #176 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #177 = Utf8               emptyBitsMask\n-  #178 = Utf8               <clinit>\n-  #179 = Utf8               SourceFile\n-  #180 = Utf8               Base64.java\n-  #181 = NameAndType        #91:#101      // \"<init>\":(I)V\n-  #182 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-  #183 = NameAndType        #76:#77       // CHUNK_SEPARATOR:[B\n-  #184 = NameAndType        #91:#104      // \"<init>\":(I[BZ)V\n-  #185 = NameAndType        #91:#103      // \"<init>\":(I[B)V\n-  #186 = Utf8               org/apache/commons/codec/binary/Base64\n-  #187 = NameAndType        #91:#247      // \"<init>\":(IIII)V\n-  #188 = NameAndType        #80:#77       // DECODE_TABLE:[B\n-  #189 = NameAndType        #87:#77       // decodeTable:[B\n-  #190 = NameAndType        #248:#130     // containsAlphabetOrPad:([B)Z\n-  #191 = Class              #249          // org/apache/commons/codec/binary/StringUtils\n-  #192 = NameAndType        #250:#144     // newStringUtf8:([B)Ljava/lang/String;\n-  #193 = Utf8               java/lang/IllegalArgumentException\n-  #194 = Utf8               java/lang/StringBuilder\n-  #195 = NameAndType        #91:#92       // \"<init>\":()V\n-  #196 = Utf8               lineSeparator must not contain base64 characters: [\n-  #197 = NameAndType        #251:#252     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #198 = Utf8               ]\n-  #199 = NameAndType        #253:#254     // toString:()Ljava/lang/String;\n-  #200 = NameAndType        #91:#255      // \"<init>\":(Ljava/lang/String;)V\n-  #201 = NameAndType        #90:#69       // encodeSize:I\n-  #202 = NameAndType        #88:#77       // lineSeparator:[B\n-  #203 = Class              #256          // java/lang/System\n-  #204 = NameAndType        #257:#258     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #205 = NameAndType        #89:#69       // decodeSize:I\n-  #206 = NameAndType        #79:#77       // URL_SAFE_ENCODE_TABLE:[B\n-  #207 = NameAndType        #78:#77       // STANDARD_ENCODE_TABLE:[B\n-  #208 = NameAndType        #86:#77       // encodeTable:[B\n-  #209 = NameAndType        #259:#100     // eof:Z\n-  #210 = NameAndType        #260:#69      // modulus:I\n-  #211 = NameAndType        #102:#69      // lineLength:I\n-  #212 = NameAndType        #261:#262     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #213 = NameAndType        #263:#69      // pos:I\n-  #214 = NameAndType        #264:#69      // ibitWorkArea:I\n-  #215 = NameAndType        #265:#128     // pad:B\n-  #216 = Utf8               java/lang/IllegalStateException\n-  #217 = Utf8               Impossible modulus\n-  #218 = NameAndType        #251:#266     // append:(I)Ljava/lang/StringBuilder;\n-  #219 = NameAndType        #267:#69      // currentLinePos:I\n-  #220 = NameAndType        #175:#176     // validateCharacter:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #221 = NameAndType        #135:#130     // isBase64:([B)Z\n-  #222 = NameAndType        #268:#157     // getBytesUtf8:(Ljava/lang/String;)[B\n-  #223 = NameAndType        #135:#136     // isBase64:(B)Z\n-  #224 = NameAndType        #269:#136     // isWhiteSpace:(B)Z\n-  #225 = NameAndType        #140:#148     // encodeBase64:([BZ)[B\n-  #226 = NameAndType        #270:#144     // newStringUsAscii:([B)Ljava/lang/String;\n-  #227 = NameAndType        #140:#150     // encodeBase64:([BZZ)[B\n-  #228 = Utf8               java/lang/Integer\n-  #229 = NameAndType        #140:#151     // encodeBase64:([BZZI)[B\n-  #230 = NameAndType        #91:#98       // \"<init>\":(Z)V\n-  #231 = NameAndType        #271:#272     // getEncodedLength:([B)J\n-  #232 = Utf8               Input array too big, the output array would be bigger (\n-  #233 = NameAndType        #251:#273     // append:(J)Ljava/lang/StringBuilder;\n-  #234 = Utf8               ) than the specified maximum size of\n-  #235 = NameAndType        #112:#141     // encode:([B)[B\n-  #236 = NameAndType        #126:#157     // decode:(Ljava/lang/String;)[B\n-  #237 = NameAndType        #126:#141     // decode:([B)[B\n-  #238 = Utf8               java/math/BigInteger\n-  #239 = NameAndType        #156:#141     // decodeBase64:([B)[B\n-  #240 = Class              #274          // java/util/Objects\n-  #241 = NameAndType        #275:#276     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #242 = NameAndType        #167:#164     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n-  #243 = NameAndType        #277:#278     // bitLength:()I\n-  #244 = NameAndType        #279:#280     // toByteArray:()[B\n-  #245 = Utf8               Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible value. Expected the discarded bits to be zero.\n-  #246 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-  #247 = Utf8               (IIII)V\n-  #248 = Utf8               containsAlphabetOrPad\n-  #249 = Utf8               org/apache/commons/codec/binary/StringUtils\n-  #250 = Utf8               newStringUtf8\n-  #251 = Utf8               append\n-  #252 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #253 = Utf8               toString\n-  #254 = Utf8               ()Ljava/lang/String;\n-  #255 = Utf8               (Ljava/lang/String;)V\n-  #256 = Utf8               java/lang/System\n-  #257 = Utf8               arraycopy\n-  #258 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #259 = Utf8               eof\n-  #260 = Utf8               modulus\n-  #261 = Utf8               ensureBufferSize\n-  #262 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #263 = Utf8               pos\n-  #264 = Utf8               ibitWorkArea\n-  #265 = Utf8               pad\n-  #266 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #267 = Utf8               currentLinePos\n-  #268 = Utf8               getBytesUtf8\n-  #269 = Utf8               isWhiteSpace\n-  #270 = Utf8               newStringUsAscii\n-  #271 = Utf8               getEncodedLength\n-  #272 = Utf8               ([B)J\n-  #273 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #274 = Utf8               java/util/Objects\n-  #275 = Utf8               requireNonNull\n-  #276 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #277 = Utf8               bitLength\n-  #278 = Utf8               ()I\n-  #279 = Utf8               toByteArray\n-  #280 = Utf8               ()[B\n+  #109 = Utf8               isUrlSafe\n+  #110 = Utf8               ()Z\n+  #111 = Utf8               encode\n+  #112 = Class              #245          // org/apache/commons/codec/binary/BaseNCodec$Context\n+  #113 = Utf8               Context\n+  #114 = Utf8               InnerClasses\n+  #115 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #116 = Utf8               buffer\n+  #117 = Utf8               savedPos\n+  #118 = Utf8               b\n+  #119 = Utf8               i\n+  #120 = Utf8               in\n+  #121 = Utf8               inPos\n+  #122 = Utf8               inAvail\n+  #123 = Utf8               context\n+  #124 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+  #125 = Utf8               decode\n+  #126 = Utf8               result\n+  #127 = Utf8               B\n+  #128 = Utf8               isArrayByteBase64\n+  #129 = Utf8               ([B)Z\n+  #130 = Utf8               arrayOctet\n+  #131 = Utf8               Deprecated\n+  #132 = Utf8               RuntimeVisibleAnnotations\n+  #133 = Utf8               Ljava/lang/Deprecated;\n+  #134 = Utf8               isBase64\n+  #135 = Utf8               (B)Z\n+  #136 = Utf8               octet\n+  #137 = Utf8               (Ljava/lang/String;)Z\n+  #138 = Utf8               base64\n+  #139 = Utf8               encodeBase64\n+  #140 = Utf8               ([B)[B\n+  #141 = Utf8               binaryData\n+  #142 = Utf8               encodeBase64String\n+  #143 = Utf8               ([B)Ljava/lang/String;\n+  #144 = Utf8               encodeBase64URLSafe\n+  #145 = Utf8               encodeBase64URLSafeString\n+  #146 = Utf8               encodeBase64Chunked\n+  #147 = Utf8               ([BZ)[B\n+  #148 = Utf8               isChunked\n+  #149 = Utf8               ([BZZ)[B\n+  #150 = Utf8               ([BZZI)[B\n+  #151 = Utf8               maxResultSize\n+  #152 = Utf8               b64\n+  #153 = Utf8               len\n+  #154 = Utf8               J\n+  #155 = Utf8               decodeBase64\n+  #156 = Utf8               (Ljava/lang/String;)[B\n+  #157 = Utf8               base64String\n+  #158 = Utf8               base64Data\n+  #159 = Utf8               decodeInteger\n+  #160 = Utf8               ([B)Ljava/math/BigInteger;\n+  #161 = Utf8               pArray\n+  #162 = Utf8               encodeInteger\n+  #163 = Utf8               (Ljava/math/BigInteger;)[B\n+  #164 = Utf8               bigInteger\n+  #165 = Utf8               Ljava/math/BigInteger;\n+  #166 = Utf8               toIntegerBytes\n+  #167 = Utf8               bigInt\n+  #168 = Utf8               bitlen\n+  #169 = Utf8               bigBytes\n+  #170 = Utf8               startSrc\n+  #171 = Utf8               startDst\n+  #172 = Utf8               resizedBytes\n+  #173 = Utf8               isInAlphabet\n+  #174 = Utf8               validateCharacter\n+  #175 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #176 = Utf8               emptyBitsMask\n+  #177 = Utf8               <clinit>\n+  #178 = Utf8               SourceFile\n+  #179 = Utf8               Base64.java\n+  #180 = NameAndType        #91:#101      // \"<init>\":(I)V\n+  #181 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+  #182 = NameAndType        #76:#77       // CHUNK_SEPARATOR:[B\n+  #183 = NameAndType        #91:#104      // \"<init>\":(I[BZ)V\n+  #184 = NameAndType        #91:#103      // \"<init>\":(I[B)V\n+  #185 = Utf8               org/apache/commons/codec/binary/Base64\n+  #186 = NameAndType        #91:#246      // \"<init>\":(IIII)V\n+  #187 = NameAndType        #80:#77       // DECODE_TABLE:[B\n+  #188 = NameAndType        #87:#77       // decodeTable:[B\n+  #189 = NameAndType        #247:#129     // containsAlphabetOrPad:([B)Z\n+  #190 = Class              #248          // org/apache/commons/codec/binary/StringUtils\n+  #191 = NameAndType        #249:#143     // newStringUtf8:([B)Ljava/lang/String;\n+  #192 = Utf8               java/lang/IllegalArgumentException\n+  #193 = Utf8               java/lang/StringBuilder\n+  #194 = NameAndType        #91:#92       // \"<init>\":()V\n+  #195 = Utf8               lineSeparator must not contain base64 characters: [\n+  #196 = NameAndType        #250:#251     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #197 = Utf8               ]\n+  #198 = NameAndType        #252:#253     // toString:()Ljava/lang/String;\n+  #199 = NameAndType        #91:#254      // \"<init>\":(Ljava/lang/String;)V\n+  #200 = NameAndType        #90:#69       // encodeSize:I\n+  #201 = NameAndType        #88:#77       // lineSeparator:[B\n+  #202 = Class              #255          // java/lang/System\n+  #203 = NameAndType        #256:#257     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #204 = NameAndType        #89:#69       // decodeSize:I\n+  #205 = NameAndType        #79:#77       // URL_SAFE_ENCODE_TABLE:[B\n+  #206 = NameAndType        #78:#77       // STANDARD_ENCODE_TABLE:[B\n+  #207 = NameAndType        #86:#77       // encodeTable:[B\n+  #208 = NameAndType        #258:#100     // eof:Z\n+  #209 = NameAndType        #259:#69      // modulus:I\n+  #210 = NameAndType        #102:#69      // lineLength:I\n+  #211 = NameAndType        #260:#261     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #212 = NameAndType        #262:#69      // pos:I\n+  #213 = NameAndType        #263:#69      // ibitWorkArea:I\n+  #214 = NameAndType        #264:#127     // pad:B\n+  #215 = Utf8               java/lang/IllegalStateException\n+  #216 = Utf8               Impossible modulus\n+  #217 = NameAndType        #250:#265     // append:(I)Ljava/lang/StringBuilder;\n+  #218 = NameAndType        #266:#69      // currentLinePos:I\n+  #219 = NameAndType        #174:#175     // validateCharacter:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #220 = NameAndType        #134:#129     // isBase64:([B)Z\n+  #221 = NameAndType        #267:#156     // getBytesUtf8:(Ljava/lang/String;)[B\n+  #222 = NameAndType        #134:#135     // isBase64:(B)Z\n+  #223 = NameAndType        #268:#135     // isWhiteSpace:(B)Z\n+  #224 = NameAndType        #139:#147     // encodeBase64:([BZ)[B\n+  #225 = NameAndType        #269:#143     // newStringUsAscii:([B)Ljava/lang/String;\n+  #226 = NameAndType        #139:#149     // encodeBase64:([BZZ)[B\n+  #227 = Utf8               java/lang/Integer\n+  #228 = NameAndType        #139:#150     // encodeBase64:([BZZI)[B\n+  #229 = NameAndType        #91:#98       // \"<init>\":(Z)V\n+  #230 = NameAndType        #270:#271     // getEncodedLength:([B)J\n+  #231 = Utf8               Input array too big, the output array would be bigger (\n+  #232 = NameAndType        #250:#272     // append:(J)Ljava/lang/StringBuilder;\n+  #233 = Utf8               ) than the specified maximum size of\n+  #234 = NameAndType        #111:#140     // encode:([B)[B\n+  #235 = NameAndType        #125:#156     // decode:(Ljava/lang/String;)[B\n+  #236 = NameAndType        #125:#140     // decode:([B)[B\n+  #237 = Utf8               java/math/BigInteger\n+  #238 = NameAndType        #155:#140     // decodeBase64:([B)[B\n+  #239 = Class              #273          // java/util/Objects\n+  #240 = NameAndType        #274:#275     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #241 = NameAndType        #166:#163     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n+  #242 = NameAndType        #276:#277     // bitLength:()I\n+  #243 = NameAndType        #278:#279     // toByteArray:()[B\n+  #244 = Utf8               Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible value. Expected the discarded bits to be zero.\n+  #245 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+  #246 = Utf8               (IIII)V\n+  #247 = Utf8               containsAlphabetOrPad\n+  #248 = Utf8               org/apache/commons/codec/binary/StringUtils\n+  #249 = Utf8               newStringUtf8\n+  #250 = Utf8               append\n+  #251 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #252 = Utf8               toString\n+  #253 = Utf8               ()Ljava/lang/String;\n+  #254 = Utf8               (Ljava/lang/String;)V\n+  #255 = Utf8               java/lang/System\n+  #256 = Utf8               arraycopy\n+  #257 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #258 = Utf8               eof\n+  #259 = Utf8               modulus\n+  #260 = Utf8               ensureBufferSize\n+  #261 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #262 = Utf8               pos\n+  #263 = Utf8               ibitWorkArea\n+  #264 = Utf8               pad\n+  #265 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #266 = Utf8               currentLinePos\n+  #267 = Utf8               getBytesUtf8\n+  #268 = Utf8               isWhiteSpace\n+  #269 = Utf8               newStringUsAscii\n+  #270 = Utf8               getEncodedLength\n+  #271 = Utf8               ([B)J\n+  #272 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #273 = Utf8               java/util/Objects\n+  #274 = Utf8               requireNonNull\n+  #275 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #276 = Utf8               bitLength\n+  #277 = Utf8               ()I\n+  #278 = Utf8               toByteArray\n+  #279 = Utf8               ()[B\n {\n   private static final int BITS_PER_ENCODED_BYTE = 6;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 6\n \n   private static final int BYTES_PER_UNENCODED_BLOCK = 3;\n@@ -517,14 +516,16 @@\n        148: getstatic     #24                 // Field URL_SAFE_ENCODE_TABLE:[B\n        151: goto          157\n        154: getstatic     #25                 // Field STANDARD_ENCODE_TABLE:[B\n        157: putfield      #26                 // Field encodeTable:[B\n        160: return\n       LineNumberTable:\n         line 279: 0\n+        line 281: 4\n+        line 279: 14\n         line 149: 17\n         line 284: 24\n         line 285: 28\n         line 286: 36\n         line 287: 42\n         line 289: 75\n         line 290: 79\n@@ -1339,15 +1340,15 @@\n       LineNumberTable:\n         line 505: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0 arrayOctet   [B\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #134()\n+      0: #133()\n         java.lang.Deprecated\n \n   public static boolean isBase64(byte);\n     descriptor: (B)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -2903,8 +2904,8 @@\n         line 74: 0\n         line 83: 16\n         line 96: 401\n         line 115: 786\n }\n SourceFile: \"Base64.java\"\n InnerClasses:\n-  static #114= #113 of #2;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #113= #112 of #2;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
