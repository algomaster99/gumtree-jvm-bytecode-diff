{"diffoscope-json-version": 1, "source1": "first/CPNameAndType.class", "source2": "second/CPNameAndType.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,41 +11,37 @@\n     CPUTF8 descriptor;\n     transient int descriptorIndex;\n     CPUTF8 name;\n     transient int nameIndex;\n     private boolean hashCodeComputed;\n     private int cachedHashCode;\n     \n-    public CPNameAndType(final CPUTF8 name, final CPUTF8 descriptor, final int globalIndex) {\n-        super((byte)12, globalIndex);\n-        this.name = Objects.requireNonNull(name, \"name\");\n-        this.descriptor = Objects.requireNonNull(descriptor, \"descriptor\");\n+    public CPNameAndType(final CPUTF8 obj, final CPUTF8 obj2, final int n) {\n+        super((byte)12, n);\n+        this.name = Objects.requireNonNull(obj, \"name\");\n+        this.descriptor = Objects.requireNonNull(obj2, \"descriptor\");\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null) {\n+        if (o == null) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final CPNameAndType other = (CPNameAndType)obj;\n-        return this.descriptor.equals((Object)other.descriptor) && this.name.equals((Object)other.name);\n+        final CPNameAndType cpNameAndType = (CPNameAndType)o;\n+        return this.descriptor.equals((Object)cpNameAndType.descriptor) && this.name.equals((Object)cpNameAndType.name);\n     }\n     \n     private void generateHashCode() {\n         this.hashCodeComputed = true;\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = 31 * result + this.descriptor.hashCode();\n-        result = 31 * result + this.name.hashCode();\n-        this.cachedHashCode = result;\n+        this.cachedHashCode = 31 * (31 * 1 + this.descriptor.hashCode()) + this.name.hashCode();\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n         return new ClassFileEntry[] { (ClassFileEntry)this.name, (ClassFileEntry)this.descriptor };\n     }\n     \n     public int hashCode() {\n@@ -55,22 +51,22 @@\n         return this.cachedHashCode;\n     }\n     \n     public int invokeInterfaceCount() {\n         return 1 + SegmentUtils.countInvokeInterfaceArgs(this.descriptor.underlyingString());\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        this.descriptorIndex = pool.indexOf((ClassFileEntry)this.descriptor);\n-        this.nameIndex = pool.indexOf((ClassFileEntry)this.name);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        this.descriptorIndex = classConstantPool.indexOf((ClassFileEntry)this.descriptor);\n+        this.nameIndex = classConstantPool.indexOf((ClassFileEntry)this.name);\n     }\n     \n     public String toString() {\n         return \"NameAndType: \" + this.name + \"(\" + this.descriptor + \")\";\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.nameIndex);\n-        dos.writeShort(this.descriptorIndex);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.nameIndex);\n+        dataOutputStream.writeShort(this.descriptorIndex);\n     }\n }\n"}]}
