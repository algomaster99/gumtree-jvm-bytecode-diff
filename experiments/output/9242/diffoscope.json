{"diffoscope-json-version": 1, "source1": "first/ArjArchiveInputStream.class", "source2": "second/ArjArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -67,30 +67,21 @@\n     private int read32(final DataInputStream dataIn) throws IOException {\n         final int value = dataIn.readInt();\n         this.count(4);\n         return Integer.reverseBytes(value);\n     }\n     \n     private String readString(final DataInputStream dataIn) throws IOException {\n-        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-        Throwable x0 = null;\n-        try {\n+        try (final ByteArrayOutputStream buffer = new ByteArrayOutputStream()) {\n             int nextByte;\n             while ((nextByte = dataIn.readUnsignedByte()) != 0) {\n                 buffer.write(nextByte);\n             }\n             return buffer.toString(Charsets.toCharset(this.charsetName).name());\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, buffer);\n-        }\n     }\n     \n     private byte[] readRange(final InputStream in, final int len) throws IOException {\n         final byte[] b = IOUtils.readRange(in, len);\n         this.count(b.length);\n         if (b.length < len) {\n             throw new EOFException();\n@@ -176,23 +167,19 @@\n     }\n     \n     private LocalFileHeader readLocalFileHeader() throws IOException {\n         final byte[] basicHeaderBytes = this.readHeader();\n         if (basicHeaderBytes == null) {\n             return null;\n         }\n-        final DataInputStream basicHeader = new DataInputStream(new ByteArrayInputStream(basicHeaderBytes));\n-        Throwable x0 = null;\n-        try {\n+        try (final DataInputStream basicHeader = new DataInputStream(new ByteArrayInputStream(basicHeaderBytes))) {\n             final int firstHeaderSize = basicHeader.readUnsignedByte();\n             final byte[] firstHeaderBytes = this.readRange(basicHeader, firstHeaderSize - 1);\n             this.pushedBackBytes((long)firstHeaderBytes.length);\n-            final DataInputStream firstHeader = new DataInputStream(new ByteArrayInputStream(firstHeaderBytes));\n-            Throwable x2 = null;\n-            try {\n+            try (final DataInputStream firstHeader = new DataInputStream(new ByteArrayInputStream(firstHeaderBytes))) {\n                 final LocalFileHeader localFileHeader = new LocalFileHeader();\n                 localFileHeader.archiverVersionNumber = firstHeader.readUnsignedByte();\n                 localFileHeader.minVersionToExtract = firstHeader.readUnsignedByte();\n                 localFileHeader.hostOS = firstHeader.readUnsignedByte();\n                 localFileHeader.arjFlags = firstHeader.readUnsignedByte();\n                 localFileHeader.method = firstHeader.readUnsignedByte();\n                 localFileHeader.fileType = firstHeader.readUnsignedByte();\n@@ -220,28 +207,14 @@\n                         throw new IOException(\"Extended header CRC32 verification failure\");\n                     }\n                     extendedHeaders.add(extendedHeaderBytes);\n                 }\n                 localFileHeader.extendedHeaders = extendedHeaders.toArray(new byte[0][]);\n                 return localFileHeader;\n             }\n-            catch (final Throwable t) {\n-                x2 = t;\n-                throw t;\n-            }\n-            finally {\n-                $closeResource(x2, firstHeader);\n-            }\n-        }\n-        catch (final Throwable t2) {\n-            x0 = t2;\n-            throw t2;\n-        }\n-        finally {\n-            $closeResource(x0, basicHeader);\n         }\n     }\n     \n     private void readExtraData(final int firstHeaderSize, final DataInputStream firstHeader, final LocalFileHeader localFileHeader) throws IOException {\n         if (firstHeaderSize >= 33) {\n             localFileHeader.extendedFilePosition = this.read32(firstHeader);\n             if (firstHeaderSize >= 45) {\n@@ -297,22 +270,8 @@\n             throw new IllegalStateException(\"No current arj entry\");\n         }\n         if (this.currentLocalFileHeader.method != 0) {\n             throw new IOException(\"Unsupported compression method \" + this.currentLocalFileHeader.method);\n         }\n         return this.currentInputStream.read(b, off, len);\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
