{"diffoscope-json-version": 1, "source1": "first/IllegalThrowsCheck.class", "source2": "second/IllegalThrowsCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,17 +26,17 @@\n     \n     public IllegalThrowsCheck() {\n         this.ignoredMethodNames = Arrays.stream(new String[] { \"finalize\" }).collect((Collector<? super String, ?, Set<String>>)Collectors.toCollection((Supplier<R>)HashSet::new));\n         this.illegalClassNames = Arrays.stream(new String[] { \"Error\", \"RuntimeException\", \"Throwable\", \"java.lang.Error\", \"java.lang.RuntimeException\", \"java.lang.Throwable\" }).collect((Collector<? super String, ?, Set<String>>)Collectors.toCollection((Supplier<R>)HashSet::new));\n         this.ignoreOverriddenMethods = true;\n     }\n     \n-    public void setIllegalClassNames(final String... classNames) {\n+    public void setIllegalClassNames(final String... array) {\n         this.illegalClassNames.clear();\n-        this.illegalClassNames.addAll(CheckUtil.parseClassNames(classNames));\n+        this.illegalClassNames.addAll(CheckUtil.parseClassNames(array));\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n@@ -44,36 +44,34 @@\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public void visitToken(final DetailAST detailAST) {\n-        final DetailAST methodDef = detailAST.getParent();\n-        if (!this.isIgnorableMethod(methodDef)) {\n-            for (DetailAST token = detailAST.getFirstChild(); token != null; token = token.getNextSibling()) {\n-                final FullIdent ident = FullIdent.createFullIdent(token);\n-                final String identText = ident.getText();\n-                if (this.illegalClassNames.contains(identText)) {\n-                    this.log(token, \"illegal.throw\", new Object[] { identText });\n+        if (!this.isIgnorableMethod(detailAST.getParent())) {\n+            for (DetailAST detailAST2 = detailAST.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+                final String text = FullIdent.createFullIdent(detailAST2).getText();\n+                if (this.illegalClassNames.contains(text)) {\n+                    this.log(detailAST2, \"illegal.throw\", new Object[] { text });\n                 }\n             }\n         }\n     }\n     \n-    private boolean isIgnorableMethod(final DetailAST methodDef) {\n-        return this.shouldIgnoreMethod(methodDef.findFirstToken(58).getText()) || (this.ignoreOverriddenMethods && AnnotationUtil.hasOverrideAnnotation(methodDef));\n+    private boolean isIgnorableMethod(final DetailAST detailAST) {\n+        return this.shouldIgnoreMethod(detailAST.findFirstToken(58).getText()) || (this.ignoreOverriddenMethods && AnnotationUtil.hasOverrideAnnotation(detailAST));\n     }\n     \n-    private boolean shouldIgnoreMethod(final String name) {\n-        return this.ignoredMethodNames.contains(name);\n+    private boolean shouldIgnoreMethod(final String s) {\n+        return this.ignoredMethodNames.contains(s);\n     }\n     \n-    public void setIgnoredMethodNames(final String... methodNames) {\n+    public void setIgnoredMethodNames(final String... elements) {\n         this.ignoredMethodNames.clear();\n-        Collections.addAll(this.ignoredMethodNames, methodNames);\n+        Collections.addAll(this.ignoredMethodNames, elements);\n     }\n     \n     public void setIgnoreOverriddenMethods(final boolean ignoreOverriddenMethods) {\n         this.ignoreOverriddenMethods = ignoreOverriddenMethods;\n     }\n }\n"}]}
