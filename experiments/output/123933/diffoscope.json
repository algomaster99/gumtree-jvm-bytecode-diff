{"diffoscope-json-version": 1, "source1": "first/AbstractAutomaticBean.class", "source2": "second/AbstractAutomaticBean.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -80,24 +80,26 @@\n         cub.register((Converter)new AbstractAutomaticBean.ScopeConverter(), (Class)Scope.class);\n         cub.register((Converter)new AbstractAutomaticBean.UriConverter(), (Class)URI.class);\n         cub.register((Converter)new AbstractAutomaticBean.RelaxedAccessModifierArrayConverter(), (Class)AccessModifierOption[].class);\n     }\n     \n     public final void configure(final Configuration config) throws CheckstyleException {\n         this.configuration = config;\n-        final String[] propertyNames;\n-        final String[] attributes = propertyNames = config.getPropertyNames();\n-        for (final String key : propertyNames) {\n+        final String[] attributes = config.getPropertyNames();\n+        String[] array;\n+        for (int length = (array = attributes).length, i = 0; i < length; ++i) {\n+            final String key = array[i];\n             final String value = config.getProperty(key);\n             this.tryCopyProperty(key, value, true);\n         }\n         this.finishLocalSetup();\n-        final Configuration[] children;\n-        final Configuration[] childConfigs = children = config.getChildren();\n-        for (final Configuration childConfig : children) {\n+        final Configuration[] childConfigs = config.getChildren();\n+        Configuration[] array2;\n+        for (int length2 = (array2 = childConfigs).length, j = 0; j < length2; ++j) {\n+            final Configuration childConfig = array2[j];\n             this.setupChild(childConfig);\n         }\n     }\n     \n     private void tryCopyProperty(final String key, final Object value, final boolean recheck) throws CheckstyleException {\n         final BeanUtilsBean beanUtils = createBeanUtilsBean();\n         try {\n@@ -130,11 +132,11 @@\n     \n     protected final Configuration getConfiguration() {\n         return this.configuration;\n     }\n     \n     protected void setupChild(final Configuration childConf) throws CheckstyleException {\n         if (childConf != null) {\n-            throw new CheckstyleException(childConf.getName() + \" is not allowed as a child in \" + this.configuration.getName() + \". Please review 'Parent Module' section for this Check in web documentation if Check is standard.\");\n+            throw new CheckstyleException(String.valueOf(childConf.getName()) + \" is not allowed as a child in \" + this.configuration.getName() + \". Please review 'Parent Module' section \" + \"for this Check in web documentation if Check is standard.\");\n         }\n     }\n }\n"}]}
