{"diffoscope-json-version": 1, "source1": "first/VerifierFactoryListModel.class", "source2": "second/VerifierFactoryListModel.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,34 +20,35 @@\n         this.cache = new TreeSet<String>();\n         VerifierFactory.attach((VerifierFactoryObserver)this);\n         this.update(null);\n     }\n     \n     public synchronized void update(final String s) {\n         final Verifier[] verifiers = VerifierFactory.getVerifiers();\n-        final int num_of_verifiers = verifiers.length;\n+        final int length = verifiers.length;\n         this.cache.clear();\n-        for (final Verifier verifier : verifiers) {\n-            this.cache.add(verifier.getClassName());\n+        final Verifier[] array = verifiers;\n+        for (int length2 = array.length, i = 0; i < length2; ++i) {\n+            this.cache.add(array[i].getClassName());\n         }\n-        for (final ListDataListener listener : this.listeners) {\n-            final ListDataEvent e = new ListDataEvent(this, 0, 0, num_of_verifiers - 1);\n-            listener.contentsChanged(e);\n+        final Iterator<ListDataListener> iterator = this.listeners.iterator();\n+        while (iterator.hasNext()) {\n+            ((ListDataListener)iterator.next()).contentsChanged(new ListDataEvent((Object)this, 0, 0, length - 1));\n         }\n     }\n     \n-    public synchronized void addListDataListener(final ListDataListener l) {\n-        this.listeners.add(l);\n+    public synchronized void addListDataListener(final ListDataListener listDataListener) {\n+        this.listeners.add(listDataListener);\n     }\n     \n-    public synchronized void removeListDataListener(final ListDataListener l) {\n-        this.listeners.remove(l);\n+    public synchronized void removeListDataListener(final ListDataListener listDataListener) {\n+        this.listeners.remove(listDataListener);\n     }\n     \n     public synchronized int getSize() {\n         return this.cache.size();\n     }\n     \n-    public synchronized String getElementAt(final int index) {\n-        return ((String[])this.cache.toArray(new String[this.cache.size()]))[index];\n+    public synchronized String getElementAt(final int n) {\n+        return ((String[])this.cache.toArray(new String[this.cache.size()]))[n];\n     }\n }\n"}]}
