{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands$Union.class", "source2": "second/NewAttributeBands$Union.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,56 +10,59 @@\n \n public class Union extends NewAttributeBands.LayoutElement\n {\n     private final NewAttributeBands.Integral unionTag;\n     private final List unionCases;\n     private final List defaultCaseBody;\n     \n-    public Union(final NewAttributeBands this$0, final String tag, final List unionCases, final List body) {\n+    public Union(final NewAttributeBands this$0, final String s, final List unionCases, final List defaultCaseBody) {\n         super(this.this$0 = this$0);\n-        this.unionTag = new NewAttributeBands.Integral(this$0, tag);\n+        this.unionTag = new NewAttributeBands.Integral(this$0, s);\n         this.unionCases = unionCases;\n-        this.defaultCaseBody = body;\n+        this.defaultCaseBody = defaultCaseBody;\n     }\n     \n-    public void addAttributeToBand(final NewAttribute attribute, final InputStream stream) {\n-        this.unionTag.addAttributeToBand(attribute, stream);\n-        final long tag = (long)this.unionTag.latestValue();\n-        boolean defaultCase = true;\n+    public void addAttributeToBand(final NewAttribute newAttribute, final InputStream inputStream) {\n+        this.unionTag.addAttributeToBand(newAttribute, inputStream);\n+        final long n = (long)this.unionTag.latestValue();\n+        boolean b = true;\n         for (int i = 0; i < this.unionCases.size(); ++i) {\n-            final NewAttributeBands.UnionCase element = (NewAttributeBands.UnionCase)this.unionCases.get(i);\n-            if (element.hasTag(tag)) {\n-                defaultCase = false;\n-                element.addAttributeToBand(attribute, stream);\n+            final NewAttributeBands.UnionCase unionCase = (NewAttributeBands.UnionCase)this.unionCases.get(i);\n+            if (unionCase.hasTag(n)) {\n+                b = false;\n+                unionCase.addAttributeToBand(newAttribute, inputStream);\n             }\n         }\n-        if (defaultCase) {\n-            for (int i = 0; i < this.defaultCaseBody.size(); ++i) {\n-                final NewAttributeBands.LayoutElement element2 = (NewAttributeBands.LayoutElement)this.defaultCaseBody.get(i);\n-                element2.addAttributeToBand(attribute, stream);\n+        if (b) {\n+            for (int j = 0; j < this.defaultCaseBody.size(); ++j) {\n+                ((NewAttributeBands.LayoutElement)this.defaultCaseBody.get(j)).addAttributeToBand(newAttribute, inputStream);\n             }\n         }\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n-        this.unionTag.pack(out);\n-        for (final NewAttributeBands.UnionCase unionCase : this.unionCases) {\n-            unionCase.pack(out);\n-        }\n-        for (final NewAttributeBands.AttributeLayoutElement layoutElement : this.defaultCaseBody) {\n-            layoutElement.pack(out);\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        this.unionTag.pack(outputStream);\n+        final Iterator iterator = this.unionCases.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.UnionCase)iterator.next()).pack(outputStream);\n+        }\n+        final Iterator iterator2 = this.defaultCaseBody.iterator();\n+        while (iterator2.hasNext()) {\n+            ((NewAttributeBands.AttributeLayoutElement)iterator2.next()).pack(outputStream);\n         }\n     }\n     \n-    public void renumberBci(final IntList bciRenumbering, final Map labelsToOffsets) {\n-        for (final NewAttributeBands.UnionCase unionCase : this.unionCases) {\n-            unionCase.renumberBci(bciRenumbering, labelsToOffsets);\n-        }\n-        for (final NewAttributeBands.AttributeLayoutElement layoutElement : this.defaultCaseBody) {\n-            layoutElement.renumberBci(bciRenumbering, labelsToOffsets);\n+    public void renumberBci(final IntList list, final Map map) {\n+        final Iterator iterator = this.unionCases.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.UnionCase)iterator.next()).renumberBci(list, map);\n+        }\n+        final Iterator iterator2 = this.defaultCaseBody.iterator();\n+        while (iterator2.hasNext()) {\n+            ((NewAttributeBands.AttributeLayoutElement)iterator2.next()).renumberBci(list, map);\n         }\n     }\n     \n     public NewAttributeBands.Integral getUnionTag() {\n         return this.unionTag;\n     }\n     \n"}]}
