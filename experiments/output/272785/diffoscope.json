{"diffoscope-json-version": 1, "source1": "first/RedundantModifierCheck.class", "source2": "second/RedundantModifierCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,15 @@\n \n package com.puppycrawl.tools.checkstyle.checks.modifier;\n \n import java.util.function.Consumer;\n import java.util.Objects;\n import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n+import java.util.Iterator;\n import java.util.Optional;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import com.puppycrawl.tools.checkstyle.StatelessCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n@@ -27,197 +27,192 @@\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 9, 10, 161, 15, 8, 14, 154, 178, 157, 199 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 15:\n             case 157: {\n-                this.checkInterfaceModifiers(ast);\n+                this.checkInterfaceModifiers(detailAST);\n                 break;\n             }\n             case 154: {\n-                this.checkForRedundantModifier(ast, 64);\n+                this.checkForRedundantModifier(detailAST, 64);\n                 break;\n             }\n             case 8: {\n-                this.checkConstructorModifiers(ast);\n+                this.checkConstructorModifiers(detailAST);\n                 break;\n             }\n             case 9: {\n-                this.processMethods(ast);\n+                this.processMethods(detailAST);\n                 break;\n             }\n             case 178: {\n-                this.processResources(ast);\n+                this.processResources(detailAST);\n                 break;\n             }\n             case 199: {\n-                this.checkForRedundantModifier(ast, 39, 64);\n+                this.checkForRedundantModifier(detailAST, 39, 64);\n                 break;\n             }\n             case 10:\n             case 14:\n             case 161: {\n                 break;\n             }\n             default: {\n-                throw new IllegalStateException(\"Unexpected token type: \" + ast.getType());\n+                throw new IllegalStateException(\"Unexpected token type: \" + detailAST.getType());\n             }\n         }\n-        if (isInterfaceOrAnnotationMember(ast)) {\n-            this.processInterfaceOrAnnotation(ast);\n+        if (isInterfaceOrAnnotationMember(detailAST)) {\n+            this.processInterfaceOrAnnotation(detailAST);\n         }\n     }\n     \n-    private void checkConstructorModifiers(final DetailAST ctorDefAst) {\n-        if (isEnumMember(ctorDefAst)) {\n-            this.checkEnumConstructorModifiers(ctorDefAst);\n+    private void checkConstructorModifiers(final DetailAST detailAST) {\n+        if (isEnumMember(detailAST)) {\n+            this.checkEnumConstructorModifiers(detailAST);\n         }\n         else {\n-            this.checkClassConstructorModifiers(ctorDefAst);\n+            this.checkClassConstructorModifiers(detailAST);\n         }\n     }\n     \n-    private void checkInterfaceModifiers(final DetailAST ast) {\n-        final DetailAST modifiers = ast.findFirstToken(5);\n-        for (final int tokenType : RedundantModifierCheck.TOKENS_FOR_INTERFACE_MODIFIERS) {\n-            final DetailAST modifier = modifiers.findFirstToken(tokenType);\n-            if (modifier != null) {\n-                this.log(modifier, \"redundantModifier\", new Object[] { modifier.getText() });\n+    private void checkInterfaceModifiers(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(5);\n+        final int[] tokens_FOR_INTERFACE_MODIFIERS = RedundantModifierCheck.TOKENS_FOR_INTERFACE_MODIFIERS;\n+        for (int length = tokens_FOR_INTERFACE_MODIFIERS.length, i = 0; i < length; ++i) {\n+            final DetailAST firstToken2 = firstToken.findFirstToken(tokens_FOR_INTERFACE_MODIFIERS[i]);\n+            if (firstToken2 != null) {\n+                this.log(firstToken2, \"redundantModifier\", new Object[] { firstToken2.getText() });\n             }\n         }\n     }\n     \n-    private void checkEnumConstructorModifiers(final DetailAST ast) {\n-        final DetailAST modifiers = ast.findFirstToken(5);\n-        TokenUtil.findFirstTokenByPredicate(modifiers, mod -> mod.getType() != 159).ifPresent(modifier -> this.log(modifier, \"redundantModifier\", new Object[] { modifier.getText() }));\n+    private void checkEnumConstructorModifiers(final DetailAST detailAST) {\n+        TokenUtil.findFirstTokenByPredicate(detailAST.findFirstToken(5), detailAST2 -> detailAST2.getType() != 159).ifPresent(detailAST3 -> this.log(detailAST3, \"redundantModifier\", new Object[] { detailAST3.getText() }));\n     }\n     \n-    private void processInterfaceOrAnnotation(final DetailAST ast) {\n-        final DetailAST modifiers = ast.findFirstToken(5);\n-        for (DetailAST modifier = modifiers.getFirstChild(); modifier != null; modifier = modifier.getNextSibling()) {\n-            final int type = modifier.getType();\n-            if (type == 62 || (type == 64 && ast.getType() != 9) || (type == 40 && ast.getType() != 14) || (type == 39 && ast.getType() != 14)) {\n-                this.log(modifier, \"redundantModifier\", new Object[] { modifier.getText() });\n+    private void processInterfaceOrAnnotation(final DetailAST detailAST) {\n+        for (DetailAST detailAST2 = detailAST.findFirstToken(5).getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            final int type = detailAST2.getType();\n+            if (type == 62 || (type == 64 && detailAST.getType() != 9) || (type == 40 && detailAST.getType() != 14) || (type == 39 && detailAST.getType() != 14)) {\n+                this.log(detailAST2, \"redundantModifier\", new Object[] { detailAST2.getText() });\n             }\n         }\n     }\n     \n-    private void processMethods(final DetailAST ast) {\n-        final DetailAST modifiers = ast.findFirstToken(5);\n-        boolean checkFinal = modifiers.findFirstToken(61) != null;\n-        DetailAST parent = ast;\n-        while (parent != null && !checkFinal) {\n+    private void processMethods(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(5);\n+        int n = (firstToken.findFirstToken(61) != null) ? 1 : 0;\n+        DetailAST parent = detailAST;\n+        while (parent != null && n == 0) {\n             if (parent.getType() == 14) {\n-                final DetailAST classModifiers = parent.findFirstToken(5);\n-                checkFinal = (classModifiers.findFirstToken(39) != null);\n+                n = ((parent.findFirstToken(5).findFirstToken(39) != null) ? 1 : 0);\n                 parent = null;\n             }\n             else if (parent.getType() == 136 || parent.getType() == 155) {\n-                checkFinal = true;\n+                n = 1;\n                 parent = null;\n             }\n             else if (parent.getType() == 154) {\n-                checkFinal = (modifiers.findFirstToken(64) != null);\n+                n = ((firstToken.findFirstToken(64) != null) ? 1 : 0);\n                 parent = null;\n             }\n             else {\n                 parent = parent.getParent();\n             }\n         }\n-        if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {\n-            this.checkForRedundantModifier(ast, 39);\n+        if (n != 0 && !isAnnotatedWithSafeVarargs(detailAST)) {\n+            this.checkForRedundantModifier(detailAST, 39);\n         }\n-        if (ast.findFirstToken(7) == null) {\n-            this.processAbstractMethodParameters(ast);\n+        if (detailAST.findFirstToken(7) == null) {\n+            this.processAbstractMethodParameters(detailAST);\n         }\n     }\n     \n-    private void processAbstractMethodParameters(final DetailAST ast) {\n-        final DetailAST parameters = ast.findFirstToken(20);\n-        TokenUtil.forEachChild(parameters, 21, paramDef -> this.checkForRedundantModifier(paramDef, 39));\n+    private void processAbstractMethodParameters(final DetailAST detailAST) {\n+        TokenUtil.forEachChild(detailAST.findFirstToken(20), 21, detailAST2 -> this.checkForRedundantModifier(detailAST2, 39));\n     }\n     \n-    private void checkClassConstructorModifiers(final DetailAST classCtorAst) {\n-        final DetailAST classDef = classCtorAst.getParent().getParent();\n-        if (!isClassPublic(classDef) && !isClassProtected(classDef)) {\n-            this.checkForRedundantModifier(classCtorAst, 62);\n+    private void checkClassConstructorModifiers(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent().getParent();\n+        if (!isClassPublic(parent) && !isClassProtected(parent)) {\n+            this.checkForRedundantModifier(detailAST, 62);\n         }\n     }\n     \n-    private void processResources(final DetailAST ast) {\n-        this.checkForRedundantModifier(ast, 39);\n+    private void processResources(final DetailAST detailAST) {\n+        this.checkForRedundantModifier(detailAST, 39);\n     }\n     \n-    private void checkForRedundantModifier(final DetailAST ast, final int... modifierTypes) {\n-        Optional.ofNullable(ast.findFirstToken(5)).ifPresent(modifiers -> {\n-            for (DetailAST childAst = modifiers.getFirstChild(); childAst != null; childAst = childAst.getNextSibling()) {\n-                if (TokenUtil.isOfType(childAst, modifierTypes)) {\n-                    this.log(childAst, \"redundantModifier\", new Object[] { childAst.getText() });\n+    private void checkForRedundantModifier(final DetailAST detailAST, final int... array) {\n+        Optional.ofNullable(detailAST.findFirstToken(5)).ifPresent(detailAST2 -> {\n+            detailAST2.getFirstChild();\n+            DetailAST nextSibling = null;\n+            while (nextSibling != null) {\n+                if (TokenUtil.isOfType(nextSibling, array2)) {\n+                    this.log(nextSibling, \"redundantModifier\", new Object[] { nextSibling.getText() });\n                 }\n+                nextSibling = nextSibling.getNextSibling();\n             }\n         });\n     }\n     \n-    private static boolean isClassProtected(final DetailAST classDef) {\n-        final DetailAST classModifiers = classDef.findFirstToken(5);\n-        return classModifiers.findFirstToken(63) != null;\n+    private static boolean isClassProtected(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(5).findFirstToken(63) != null;\n     }\n     \n-    private static boolean isClassPublic(final DetailAST ast) {\n-        boolean isAccessibleFromPublic = false;\n-        final DetailAST modifiersAst = ast.findFirstToken(5);\n-        final boolean hasPublicModifier = modifiersAst.findFirstToken(62) != null;\n-        if (TokenUtil.isRootNode(ast.getParent())) {\n-            isAccessibleFromPublic = hasPublicModifier;\n+    private static boolean isClassPublic(final DetailAST detailAST) {\n+        boolean classPublic = false;\n+        final boolean b = detailAST.findFirstToken(5).findFirstToken(62) != null;\n+        if (TokenUtil.isRootNode(detailAST.getParent())) {\n+            classPublic = b;\n         }\n         else {\n-            final DetailAST parentClassAst = ast.getParent().getParent();\n-            if (hasPublicModifier || parentClassAst.getType() == 15) {\n-                isAccessibleFromPublic = isClassPublic(parentClassAst);\n+            final DetailAST parent = detailAST.getParent().getParent();\n+            if (b || parent.getType() == 15) {\n+                classPublic = isClassPublic(parent);\n             }\n         }\n-        return isAccessibleFromPublic;\n+        return classPublic;\n     }\n     \n-    private static boolean isEnumMember(final DetailAST ast) {\n-        final DetailAST parentTypeDef = ast.getParent().getParent();\n-        return parentTypeDef.getType() == 154;\n+    private static boolean isEnumMember(final DetailAST detailAST) {\n+        return detailAST.getParent().getParent().getType() == 154;\n     }\n     \n-    private static boolean isInterfaceOrAnnotationMember(final DetailAST ast) {\n-        DetailAST parentTypeDef = ast.getParent();\n-        parentTypeDef = parentTypeDef.getParent();\n-        return parentTypeDef != null && (parentTypeDef.getType() == 15 || parentTypeDef.getType() == 157);\n+    private static boolean isInterfaceOrAnnotationMember(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent().getParent();\n+        return parent != null && (parent.getType() == 15 || parent.getType() == 157);\n     }\n     \n-    private static boolean isAnnotatedWithSafeVarargs(final DetailAST methodDef) {\n-        boolean result = false;\n-        final List<DetailAST> methodAnnotationsList = getMethodAnnotationsList(methodDef);\n-        for (final DetailAST annotationNode : methodAnnotationsList) {\n-            if (\"SafeVarargs\".equals(annotationNode.getLastChild().getText())) {\n-                result = true;\n+    private static boolean isAnnotatedWithSafeVarargs(final DetailAST detailAST) {\n+        boolean b = false;\n+        final Iterator<DetailAST> iterator = getMethodAnnotationsList(detailAST).iterator();\n+        while (iterator.hasNext()) {\n+            if (\"SafeVarargs\".equals(((DetailAST)iterator.next()).getLastChild().getText())) {\n+                b = true;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static List<DetailAST> getMethodAnnotationsList(final DetailAST methodDef) {\n-        final List<DetailAST> annotationsList = new ArrayList<DetailAST>();\n-        final DetailAST firstToken;\n-        final DetailAST modifiers = firstToken = methodDef.findFirstToken(5);\n+    private static List<DetailAST> getMethodAnnotationsList(final DetailAST detailAST) {\n+        final ArrayList list = new ArrayList();\n+        final DetailAST firstToken = detailAST.findFirstToken(5);\n         final int n = 159;\n-        final List<DetailAST> obj = annotationsList;\n-        Objects.requireNonNull((ArrayList)obj);\n+        final ArrayList obj = list;\n+        Objects.requireNonNull(obj);\n         TokenUtil.forEachChild(firstToken, n, (Consumer)obj::add);\n-        return annotationsList;\n+        return list;\n     }\n     \n     static {\n         TOKENS_FOR_INTERFACE_MODIFIERS = new int[] { 64, 40 };\n     }\n }\n"}]}
