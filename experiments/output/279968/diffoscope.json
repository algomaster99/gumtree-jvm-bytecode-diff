{"diffoscope-json-version": 1, "source1": "first/MultiFileConfigurationBuilderProvider.class", "source2": "second/MultiFileConfigurationBuilderProvider.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,42 +1,39 @@\n \n package org.apache.commons.configuration2.builder.combined;\n \n import org.apache.commons.configuration2.reloading.ReloadingControllerSupport;\n import org.apache.commons.configuration2.builder.BuilderConfigurationWrapperFactory;\n-import org.apache.commons.configuration2.HierarchicalConfiguration;\n import org.apache.commons.configuration2.ConfigurationUtils;\n+import org.apache.commons.configuration2.HierarchicalConfiguration;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n import org.apache.commons.configuration2.Configuration;\n import org.apache.commons.configuration2.builder.ConfigurationBuilder;\n import java.util.Collection;\n import java.util.Arrays;\n \n public class MultiFileConfigurationBuilderProvider extends BaseConfigurationBuilderProvider\n {\n     private static final String BUILDER_CLASS = \"org.apache.commons.configuration2.builder.combined.MultiFileConfigurationBuilder\";\n     private static final String RELOADING_BUILDER_CLASS = \"org.apache.commons.configuration2.builder.combined.ReloadingMultiFileConfigurationBuilder\";\n     private static final String PARAM_CLASS = \"org.apache.commons.configuration2.builder.combined.MultiFileBuilderParametersImpl\";\n     \n-    public MultiFileConfigurationBuilderProvider(final String configCls, final String paramCls) {\n-        super(\"org.apache.commons.configuration2.builder.combined.MultiFileConfigurationBuilder\", \"org.apache.commons.configuration2.builder.combined.ReloadingMultiFileConfigurationBuilder\", configCls, (Collection)Arrays.asList(paramCls, \"org.apache.commons.configuration2.builder.combined.MultiFileBuilderParametersImpl\"));\n+    public MultiFileConfigurationBuilderProvider(final String s, final String s2) {\n+        super(\"org.apache.commons.configuration2.builder.combined.MultiFileConfigurationBuilder\", \"org.apache.commons.configuration2.builder.combined.ReloadingMultiFileConfigurationBuilder\", s, (Collection)Arrays.asList(s2, \"org.apache.commons.configuration2.builder.combined.MultiFileBuilderParametersImpl\"));\n     }\n     \n-    public ConfigurationBuilder<? extends Configuration> getConfigurationBuilder(final ConfigurationDeclaration decl) throws ConfigurationException {\n-        final ConfigurationBuilder<? extends Configuration> multiBuilder = (ConfigurationBuilder<? extends Configuration>)super.getConfigurationBuilder(decl);\n-        final Configuration wrapConfig = this.createWrapperConfiguration(multiBuilder);\n-        return createWrapperBuilder(multiBuilder, wrapConfig);\n+    public ConfigurationBuilder<? extends Configuration> getConfigurationBuilder(final ConfigurationDeclaration configurationDeclaration) throws ConfigurationException {\n+        final ConfigurationBuilder configurationBuilder = super.getConfigurationBuilder(configurationDeclaration);\n+        return createWrapperBuilder((ConfigurationBuilder<? extends Configuration>)configurationBuilder, this.createWrapperConfiguration(configurationBuilder));\n     }\n     \n-    private Configuration createWrapperConfiguration(final ConfigurationBuilder builder) {\n-        final Class<?> configClass = ConfigurationUtils.loadClassNoEx(this.getConfigurationClass());\n-        final Class ifcClass = (Class)(HierarchicalConfiguration.class.isAssignableFrom(configClass) ? HierarchicalConfiguration.class : Configuration.class);\n-        return (Configuration)BuilderConfigurationWrapperFactory.createBuilderConfigurationWrapper(ifcClass, builder, BuilderConfigurationWrapperFactory.EventSourceSupport.BUILDER);\n+    private Configuration createWrapperConfiguration(final ConfigurationBuilder configurationBuilder) {\n+        return (Configuration)BuilderConfigurationWrapperFactory.createBuilderConfigurationWrapper((Class)(HierarchicalConfiguration.class.isAssignableFrom(ConfigurationUtils.loadClassNoEx(this.getConfigurationClass())) ? HierarchicalConfiguration.class : Configuration.class), configurationBuilder, BuilderConfigurationWrapperFactory.EventSourceSupport.BUILDER);\n     }\n     \n-    private static ConfigurationBuilder<? extends Configuration> createWrapperBuilder(final ConfigurationBuilder<? extends Configuration> multiBuilder, final Configuration wrapConfig) {\n-        if (multiBuilder instanceof ReloadingControllerSupport) {\n-            return (ConfigurationBuilder<? extends Configuration>)new MultiFileConfigurationBuilderProvider.ReloadableWrapperBuilder(wrapConfig, (ConfigurationBuilder)multiBuilder);\n+    private static ConfigurationBuilder<? extends Configuration> createWrapperBuilder(final ConfigurationBuilder<? extends Configuration> configurationBuilder, final Configuration configuration) {\n+        if (configurationBuilder instanceof ReloadingControllerSupport) {\n+            return (ConfigurationBuilder<? extends Configuration>)new MultiFileConfigurationBuilderProvider.ReloadableWrapperBuilder(configuration, (ConfigurationBuilder)configurationBuilder);\n         }\n-        return (ConfigurationBuilder<? extends Configuration>)new MultiFileConfigurationBuilderProvider.WrapperBuilder(wrapConfig, (ConfigurationBuilder)multiBuilder);\n+        return (ConfigurationBuilder<? extends Configuration>)new MultiFileConfigurationBuilderProvider.WrapperBuilder(configuration, (ConfigurationBuilder)configurationBuilder);\n     }\n }\n"}]}
