{"diffoscope-json-version": 1, "source1": "first/NtpUtils.class", "source2": "second/NtpUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,18 +1,18 @@\n \n package org.apache.commons.net.ntp;\n \n public final class NtpUtils\n {\n-    public static String getHostAddress(final int address) {\n-        return (address >>> 24 & 0xFF) + \".\" + (address >>> 16 & 0xFF) + \".\" + (address >>> 8 & 0xFF) + \".\" + (address >>> 0 & 0xFF);\n+    public static String getHostAddress(final int n) {\n+        return (n >>> 24 & 0xFF) + \".\" + (n >>> 16 & 0xFF) + \".\" + (n >>> 8 & 0xFF) + \".\" + (n >>> 0 & 0xFF);\n     }\n     \n-    public static String getModeName(final int mode) {\n-        switch (mode) {\n+    public static String getModeName(final int n) {\n+        switch (n) {\n             case 0: {\n                 return \"Reserved\";\n             }\n             case 1: {\n                 return \"Symmetric Active\";\n             }\n             case 2: {\n@@ -35,34 +35,33 @@\n             }\n             default: {\n                 return \"Unknown\";\n             }\n         }\n     }\n     \n-    public static String getRefAddress(final NtpV3Packet packet) {\n-        final int address = (packet == null) ? 0 : packet.getReferenceId();\n-        return getHostAddress(address);\n+    public static String getRefAddress(final NtpV3Packet ntpV3Packet) {\n+        return getHostAddress((ntpV3Packet == null) ? 0 : ntpV3Packet.getReferenceId());\n     }\n     \n-    public static String getReferenceClock(final NtpV3Packet message) {\n-        if (message == null) {\n+    public static String getReferenceClock(final NtpV3Packet ntpV3Packet) {\n+        if (ntpV3Packet == null) {\n             return \"\";\n         }\n-        final int refId = message.getReferenceId();\n-        if (refId == 0) {\n+        final int referenceId = ntpV3Packet.getReferenceId();\n+        if (referenceId == 0) {\n             return \"\";\n         }\n-        final StringBuilder buf = new StringBuilder(4);\n-        for (int shiftBits = 24; shiftBits >= 0; shiftBits -= 8) {\n-            final char c = (char)(refId >>> shiftBits & 0xFF);\n+        final StringBuilder sb = new StringBuilder(4);\n+        for (int i = 24; i >= 0; i -= 8) {\n+            final char c = (char)(referenceId >>> i & 0xFF);\n             if (c == '\\0') {\n                 break;\n             }\n             if (!Character.isLetterOrDigit(c)) {\n                 return \"\";\n             }\n-            buf.append(c);\n+            sb.append(c);\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n }\n"}]}
