{"diffoscope-json-version": 1, "source1": "first/OneTopLevelClassCheck.class", "source2": "second/OneTopLevelClassCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,41 +19,38 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 1 };\n     }\n     \n-    public void visitToken(final DetailAST compilationUnit) {\n-        DetailAST currentNode = compilationUnit.getFirstChild();\n-        boolean publicTypeFound = false;\n-        DetailAST firstType = null;\n-        while (currentNode != null) {\n-            if (isTypeDef(currentNode)) {\n-                if (isPublic(currentNode)) {\n-                    publicTypeFound = true;\n+    public void visitToken(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getFirstChild();\n+        boolean b = false;\n+        DetailAST detailAST3 = null;\n+        while (detailAST2 != null) {\n+            if (isTypeDef(detailAST2)) {\n+                if (isPublic(detailAST2)) {\n+                    b = true;\n                 }\n-                if (firstType == null) {\n-                    firstType = currentNode;\n+                if (detailAST3 == null) {\n+                    detailAST3 = detailAST2;\n                 }\n-                else if (!isPublic(currentNode)) {\n-                    final String typeName = currentNode.findFirstToken(58).getText();\n-                    this.log(currentNode, \"one.top.level.class\", new Object[] { typeName });\n+                else if (!isPublic(detailAST2)) {\n+                    this.log(detailAST2, \"one.top.level.class\", new Object[] { detailAST2.findFirstToken(58).getText() });\n                 }\n             }\n-            currentNode = currentNode.getNextSibling();\n+            detailAST2 = detailAST2.getNextSibling();\n         }\n-        if (publicTypeFound && !isPublic(firstType)) {\n-            final String typeName = firstType.findFirstToken(58).getText();\n-            this.log(firstType, \"one.top.level.class\", new Object[] { typeName });\n+        if (b && !isPublic(detailAST3)) {\n+            this.log(detailAST3, \"one.top.level.class\", new Object[] { detailAST3.findFirstToken(58).getText() });\n         }\n     }\n     \n-    private static boolean isTypeDef(final DetailAST node) {\n-        return TokenUtil.isTypeDeclaration(node.getType());\n+    private static boolean isTypeDef(final DetailAST detailAST) {\n+        return TokenUtil.isTypeDeclaration(detailAST.getType());\n     }\n     \n-    private static boolean isPublic(final DetailAST typeDef) {\n-        final DetailAST modifiers = typeDef.findFirstToken(5);\n-        return modifiers.findFirstToken(62) != null;\n+    private static boolean isPublic(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(5).findFirstToken(62) != null;\n     }\n }\n"}]}
