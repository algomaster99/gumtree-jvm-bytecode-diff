{"diffoscope-json-version": 1, "source1": "first/FramedSnappyCompressorInputStream.class", "source2": "second/FramedSnappyCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,14 +33,18 @@\n     private boolean inUncompressedChunk;\n     private int uncompressedBytesRemaining;\n     private long expectedChecksum;\n     private final int blockSize;\n     private final PureJavaCrc32C checksum;\n     private final ByteUtils.ByteSupplier supplier;\n     \n+    static {\n+        SZ_SIGNATURE = new byte[] { -1, 6, 0, 0, 115, 78, 97, 80, 112, 89 };\n+    }\n+    \n     public static boolean matches(final byte[] signature, final int length) {\n         if (length < FramedSnappyCompressorInputStream.SZ_SIGNATURE.length) {\n             return false;\n         }\n         byte[] shortenedSig = signature;\n         if (signature.length > FramedSnappyCompressorInputStream.SZ_SIGNATURE.length) {\n             shortenedSig = Arrays.copyOf(signature, FramedSnappyCompressorInputStream.SZ_SIGNATURE.length);\n@@ -95,14 +99,15 @@\n                 this.currentCompressedChunk.close();\n                 this.currentCompressedChunk = null;\n             }\n         }\n         finally {\n             this.inputStream.close();\n         }\n+        this.inputStream.close();\n     }\n     \n     public long getCompressedCount() {\n         return this.countingStream.getBytesRead() - this.unreadBytes;\n     }\n     \n     public int read() throws IOException {\n@@ -150,15 +155,15 @@\n         }\n         else if (type == 254 || (type > 127 && type <= 253)) {\n             this.skipBlock();\n             this.readNextBlock();\n         }\n         else {\n             if (type >= 2 && type <= 127) {\n-                throw new IOException(\"Unskippable chunk with type \" + type + \" (hex \" + Integer.toHexString(type) + \") detected.\");\n+                throw new IOException(\"Unskippable chunk with type \" + type + \" (hex \" + Integer.toHexString(type) + \")\" + \" detected.\");\n             }\n             if (type == 1) {\n                 this.inUncompressedChunk = true;\n                 this.uncompressedBytesRemaining = this.readSize() - 4;\n                 if (this.uncompressedBytesRemaining < 0) {\n                     throw new IOException(\"Found illegal chunk with negative size\");\n                 }\n@@ -252,12 +257,8 @@\n     private void verifyLastChecksumAndReset() throws IOException {\n         if (this.expectedChecksum >= 0L && this.expectedChecksum != this.checksum.getValue()) {\n             throw new IOException(\"Checksum verification failed\");\n         }\n         this.expectedChecksum = -1L;\n         this.checksum.reset();\n     }\n-    \n-    static {\n-        SZ_SIGNATURE = new byte[] { -1, 6, 0, 0, 115, 78, 97, 80, 112, 89 };\n-    }\n }\n"}]}
