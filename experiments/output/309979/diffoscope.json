{"diffoscope-json-version": 1, "source1": "first/ZipFile$BoundedInputStream.class", "source2": "second/ZipFile$BoundedInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,120 +1,120 @@\n-  SHA-256 checksum 39f0758abf97f7cab9ae07eee6a1688e9936869ab43c03e13e5184f5f74eeae1\n+  SHA-256 checksum 19d3a2273e6302e6fbdeda775370bdec2c88af64aa1621c5c5b154ce2f84095b\n   Compiled from \"ZipFile.java\"\n class org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 53\n   flags: (0x0020) ACC_SUPER\n-  this_class: #18                         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n-  super_class: #19                        // java/io/InputStream\n+  this_class: #2                          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+  super_class: #8                         // java/io/InputStream\n   interfaces: 0, fields: 4, methods: 4, attributes: 3\n Constant pool:\n-    #1 = Fieldref           #18.#44       // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-    #2 = Methodref          #19.#45       // java/io/InputStream.\"<init>\":()V\n-    #3 = Fieldref           #18.#46       // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.end:J\n-    #4 = Class              #47           // java/lang/IllegalArgumentException\n-    #5 = InvokeDynamic      #0:#51        // #0:makeConcatWithConstants:(JJ)Ljava/lang/String;\n-    #6 = Methodref          #4.#52        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #7 = Fieldref           #18.#53       // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.loc:J\n-    #8 = Fieldref           #18.#54       // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.singleByteBuffer:Ljava/nio/ByteBuffer;\n-    #9 = Methodref          #38.#55       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #10 = Methodref          #38.#56       // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n-   #11 = Methodref          #18.#57       // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.read:(JLjava/nio/ByteBuffer;)I\n-   #12 = Methodref          #38.#58       // java/nio/ByteBuffer.get:()B\n-   #13 = Methodref          #38.#59       // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n-   #14 = Methodref          #32.#60       // org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n-   #15 = InterfaceMethodref #61.#62       // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #16 = InterfaceMethodref #61.#63       // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #17 = Methodref          #38.#64       // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-   #18 = Class              #65           // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n-   #19 = Class              #68           // java/io/InputStream\n-   #20 = Utf8               singleByteBuffer\n-   #21 = Utf8               Ljava/nio/ByteBuffer;\n-   #22 = Utf8               end\n-   #23 = Utf8               J\n-   #24 = Utf8               loc\n-   #25 = Utf8               this$0\n-   #26 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-   #27 = Utf8               <init>\n-   #28 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-   #29 = Utf8               Code\n-   #30 = Utf8               LineNumberTable\n-   #31 = Utf8               StackMapTable\n-   #32 = Class              #69           // org/apache/commons/compress/archivers/zip/ZipFile\n-   #33 = Utf8               read\n-   #34 = Utf8               ()I\n-   #35 = Utf8               Exceptions\n-   #36 = Class              #70           // java/io/IOException\n-   #37 = Utf8               ([BII)I\n-   #38 = Class              #71           // java/nio/ByteBuffer\n-   #39 = Utf8               (JLjava/nio/ByteBuffer;)I\n-   #40 = Class              #72           // java/lang/Object\n-   #41 = Class              #73           // java/lang/Throwable\n-   #42 = Utf8               SourceFile\n-   #43 = Utf8               ZipFile.java\n-   #44 = NameAndType        #25:#26       // this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-   #45 = NameAndType        #27:#74       // \"<init>\":()V\n-   #46 = NameAndType        #22:#23       // end:J\n-   #47 = Utf8               java/lang/IllegalArgumentException\n-   #48 = Utf8               BootstrapMethods\n-   #49 = MethodHandle       6:#75         // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-   #50 = String             #76           // Invalid length of stream at offset=\\u0001, length=\\u0001\n-   #51 = NameAndType        #77:#78       // makeConcatWithConstants:(JJ)Ljava/lang/String;\n-   #52 = NameAndType        #27:#79       // \"<init>\":(Ljava/lang/String;)V\n-   #53 = NameAndType        #24:#23       // loc:J\n-   #54 = NameAndType        #20:#21       // singleByteBuffer:Ljava/nio/ByteBuffer;\n-   #55 = NameAndType        #80:#81       // allocate:(I)Ljava/nio/ByteBuffer;\n-   #56 = NameAndType        #82:#83       // rewind:()Ljava/nio/ByteBuffer;\n-   #57 = NameAndType        #33:#39       // read:(JLjava/nio/ByteBuffer;)I\n-   #58 = NameAndType        #84:#85       // get:()B\n-   #59 = NameAndType        #86:#87       // wrap:([BII)Ljava/nio/ByteBuffer;\n-   #60 = NameAndType        #88:#89       // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n-   #61 = Class              #90           // java/nio/channels/SeekableByteChannel\n-   #62 = NameAndType        #91:#92       // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #63 = NameAndType        #33:#93       // read:(Ljava/nio/ByteBuffer;)I\n-   #64 = NameAndType        #94:#83       // flip:()Ljava/nio/ByteBuffer;\n-   #65 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n-   #66 = Utf8               BoundedInputStream\n-   #67 = Utf8               InnerClasses\n-   #68 = Utf8               java/io/InputStream\n-   #69 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n-   #70 = Utf8               java/io/IOException\n-   #71 = Utf8               java/nio/ByteBuffer\n-   #72 = Utf8               java/lang/Object\n-   #73 = Utf8               java/lang/Throwable\n-   #74 = Utf8               ()V\n-   #75 = Methodref          #95.#96       // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-   #76 = Utf8               Invalid length of stream at offset=\\u0001, length=\\u0001\n-   #77 = Utf8               makeConcatWithConstants\n-   #78 = Utf8               (JJ)Ljava/lang/String;\n-   #79 = Utf8               (Ljava/lang/String;)V\n-   #80 = Utf8               allocate\n-   #81 = Utf8               (I)Ljava/nio/ByteBuffer;\n-   #82 = Utf8               rewind\n-   #83 = Utf8               ()Ljava/nio/ByteBuffer;\n-   #84 = Utf8               get\n-   #85 = Utf8               ()B\n-   #86 = Utf8               wrap\n-   #87 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-   #88 = Utf8               access$300\n-   #89 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n-   #90 = Utf8               java/nio/channels/SeekableByteChannel\n-   #91 = Utf8               position\n-   #92 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-   #93 = Utf8               (Ljava/nio/ByteBuffer;)I\n-   #94 = Utf8               flip\n-   #95 = Class              #97           // java/lang/invoke/StringConcatFactory\n-   #96 = NameAndType        #77:#100      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-   #97 = Utf8               java/lang/invoke/StringConcatFactory\n-   #98 = Class              #102          // java/lang/invoke/MethodHandles$Lookup\n-   #99 = Utf8               Lookup\n-  #100 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #101 = Class              #103          // java/lang/invoke/MethodHandles\n-  #102 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #103 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Fieldref           #2.#3         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+    #2 = Class              #4            // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+    #3 = NameAndType        #5:#6         // this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+    #4 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+    #5 = Utf8               this$0\n+    #6 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+    #7 = Methodref          #8.#9         // java/io/InputStream.\"<init>\":()V\n+    #8 = Class              #10           // java/io/InputStream\n+    #9 = NameAndType        #11:#12       // \"<init>\":()V\n+   #10 = Utf8               java/io/InputStream\n+   #11 = Utf8               <init>\n+   #12 = Utf8               ()V\n+   #13 = Fieldref           #2.#14        // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.end:J\n+   #14 = NameAndType        #15:#16       // end:J\n+   #15 = Utf8               end\n+   #16 = Utf8               J\n+   #17 = Class              #18           // java/lang/IllegalArgumentException\n+   #18 = Utf8               java/lang/IllegalArgumentException\n+   #19 = InvokeDynamic      #0:#20        // #0:makeConcatWithConstants:(JJ)Ljava/lang/String;\n+   #20 = NameAndType        #21:#22       // makeConcatWithConstants:(JJ)Ljava/lang/String;\n+   #21 = Utf8               makeConcatWithConstants\n+   #22 = Utf8               (JJ)Ljava/lang/String;\n+   #23 = Methodref          #17.#24       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #24 = NameAndType        #11:#25       // \"<init>\":(Ljava/lang/String;)V\n+   #25 = Utf8               (Ljava/lang/String;)V\n+   #26 = Fieldref           #2.#27        // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.loc:J\n+   #27 = NameAndType        #28:#16       // loc:J\n+   #28 = Utf8               loc\n+   #29 = Fieldref           #2.#30        // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.singleByteBuffer:Ljava/nio/ByteBuffer;\n+   #30 = NameAndType        #31:#32       // singleByteBuffer:Ljava/nio/ByteBuffer;\n+   #31 = Utf8               singleByteBuffer\n+   #32 = Utf8               Ljava/nio/ByteBuffer;\n+   #33 = Methodref          #34.#35       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #34 = Class              #36           // java/nio/ByteBuffer\n+   #35 = NameAndType        #37:#38       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #36 = Utf8               java/nio/ByteBuffer\n+   #37 = Utf8               allocate\n+   #38 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #39 = Methodref          #34.#40       // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+   #40 = NameAndType        #41:#42       // rewind:()Ljava/nio/ByteBuffer;\n+   #41 = Utf8               rewind\n+   #42 = Utf8               ()Ljava/nio/ByteBuffer;\n+   #43 = Methodref          #2.#44        // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.read:(JLjava/nio/ByteBuffer;)I\n+   #44 = NameAndType        #45:#46       // read:(JLjava/nio/ByteBuffer;)I\n+   #45 = Utf8               read\n+   #46 = Utf8               (JLjava/nio/ByteBuffer;)I\n+   #47 = Methodref          #34.#48       // java/nio/ByteBuffer.get:()B\n+   #48 = NameAndType        #49:#50       // get:()B\n+   #49 = Utf8               get\n+   #50 = Utf8               ()B\n+   #51 = Methodref          #34.#52       // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n+   #52 = NameAndType        #53:#54       // wrap:([BII)Ljava/nio/ByteBuffer;\n+   #53 = Utf8               wrap\n+   #54 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+   #55 = Methodref          #56.#57       // org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+   #56 = Class              #58           // org/apache/commons/compress/archivers/zip/ZipFile\n+   #57 = NameAndType        #59:#60       // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+   #58 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n+   #59 = Utf8               access$300\n+   #60 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+   #61 = InterfaceMethodref #62.#63       // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #62 = Class              #64           // java/nio/channels/SeekableByteChannel\n+   #63 = NameAndType        #65:#66       // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #64 = Utf8               java/nio/channels/SeekableByteChannel\n+   #65 = Utf8               position\n+   #66 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+   #67 = InterfaceMethodref #62.#68       // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+   #68 = NameAndType        #45:#69       // read:(Ljava/nio/ByteBuffer;)I\n+   #69 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #70 = Methodref          #34.#71       // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+   #71 = NameAndType        #72:#42       // flip:()Ljava/nio/ByteBuffer;\n+   #72 = Utf8               flip\n+   #73 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+   #74 = Utf8               Code\n+   #75 = Utf8               LineNumberTable\n+   #76 = Utf8               StackMapTable\n+   #77 = Utf8               ()I\n+   #78 = Utf8               Exceptions\n+   #79 = Class              #80           // java/io/IOException\n+   #80 = Utf8               java/io/IOException\n+   #81 = Utf8               ([BII)I\n+   #82 = Class              #83           // java/lang/Object\n+   #83 = Utf8               java/lang/Object\n+   #84 = Class              #85           // java/lang/Throwable\n+   #85 = Utf8               java/lang/Throwable\n+   #86 = Utf8               SourceFile\n+   #87 = Utf8               ZipFile.java\n+   #88 = Utf8               BootstrapMethods\n+   #89 = MethodHandle       6:#90         // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #90 = Methodref          #91.#92       // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #91 = Class              #93           // java/lang/invoke/StringConcatFactory\n+   #92 = NameAndType        #21:#94       // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #93 = Utf8               java/lang/invoke/StringConcatFactory\n+   #94 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #95 = String             #96           // Invalid length of stream at offset=\\u0001, length=\\u0001\n+   #96 = Utf8               Invalid length of stream at offset=\\u0001, length=\\u0001\n+   #97 = Utf8               InnerClasses\n+   #98 = Utf8               BoundedInputStream\n+   #99 = Class              #100          // java/lang/invoke/MethodHandles$Lookup\n+  #100 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #101 = Class              #102          // java/lang/invoke/MethodHandles\n+  #102 = Utf8               java/lang/invoke/MethodHandles\n+  #103 = Utf8               Lookup\n {\n   private java.nio.ByteBuffer singleByteBuffer;\n     descriptor: Ljava/nio/ByteBuffer;\n     flags: (0x0002) ACC_PRIVATE\n \n   private final long end;\n     descriptor: J\n@@ -133,35 +133,35 @@\n     flags: (0x0000)\n     Code:\n       stack=6, locals=6, args_size=4\n          0: aload_0\n          1: aload_1\n          2: putfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n          5: aload_0\n-         6: invokespecial #2                  // Method java/io/InputStream.\"<init>\":()V\n+         6: invokespecial #7                  // Method java/io/InputStream.\"<init>\":()V\n          9: aload_0\n         10: lload_2\n         11: lload         4\n         13: ladd\n-        14: putfield      #3                  // Field end:J\n+        14: putfield      #13                 // Field end:J\n         17: aload_0\n-        18: getfield      #3                  // Field end:J\n+        18: getfield      #13                 // Field end:J\n         21: lload_2\n         22: lcmp\n         23: ifge          42\n-        26: new           #4                  // class java/lang/IllegalArgumentException\n+        26: new           #17                 // class java/lang/IllegalArgumentException\n         29: dup\n         30: lload_2\n         31: lload         4\n-        33: invokedynamic #5,  0              // InvokeDynamic #0:makeConcatWithConstants:(JJ)Ljava/lang/String;\n-        38: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        33: invokedynamic #19,  0             // InvokeDynamic #0:makeConcatWithConstants:(JJ)Ljava/lang/String;\n+        38: invokespecial #23                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         41: athrow\n         42: aload_0\n         43: lload_2\n-        44: putfield      #7                  // Field loc:J\n+        44: putfield      #26                 // Field loc:J\n         47: return\n       LineNumberTable:\n         line 1323: 0\n         line 1324: 9\n         line 1325: 17\n         line 1327: 26\n         line 1329: 42\n@@ -174,53 +174,53 @@\n \n   public synchronized int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field loc:J\n+         1: getfield      #26                 // Field loc:J\n          4: aload_0\n-         5: getfield      #3                  // Field end:J\n+         5: getfield      #13                 // Field end:J\n          8: lcmp\n          9: iflt          14\n         12: iconst_m1\n         13: ireturn\n         14: aload_0\n-        15: getfield      #8                  // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        15: getfield      #29                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n         18: ifnonnull     32\n         21: aload_0\n         22: iconst_1\n-        23: invokestatic  #9                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        26: putfield      #8                  // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        23: invokestatic  #33                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        26: putfield      #29                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n         29: goto          40\n         32: aload_0\n-        33: getfield      #8                  // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n-        36: invokevirtual #10                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        33: getfield      #29                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        36: invokevirtual #39                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         39: pop\n         40: aload_0\n         41: aload_0\n-        42: getfield      #7                  // Field loc:J\n+        42: getfield      #26                 // Field loc:J\n         45: aload_0\n-        46: getfield      #8                  // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n-        49: invokevirtual #11                 // Method read:(JLjava/nio/ByteBuffer;)I\n+        46: getfield      #29                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        49: invokevirtual #43                 // Method read:(JLjava/nio/ByteBuffer;)I\n         52: istore_1\n         53: iload_1\n         54: ifge          59\n         57: iload_1\n         58: ireturn\n         59: aload_0\n         60: dup\n-        61: getfield      #7                  // Field loc:J\n+        61: getfield      #26                 // Field loc:J\n         64: lconst_1\n         65: ladd\n-        66: putfield      #7                  // Field loc:J\n+        66: putfield      #26                 // Field loc:J\n         69: aload_0\n-        70: getfield      #8                  // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n-        73: invokevirtual #12                 // Method java/nio/ByteBuffer.get:()B\n+        70: getfield      #29                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        73: invokevirtual #47                 // Method java/nio/ByteBuffer.get:()B\n         76: sipush        255\n         79: iand\n         80: ireturn\n       LineNumberTable:\n         line 1334: 0\n         line 1335: 12\n         line 1337: 14\n@@ -249,55 +249,55 @@\n          0: iload_3\n          1: ifgt          6\n          4: iconst_0\n          5: ireturn\n          6: iload_3\n          7: i2l\n          8: aload_0\n-         9: getfield      #3                  // Field end:J\n+         9: getfield      #13                 // Field end:J\n         12: aload_0\n-        13: getfield      #7                  // Field loc:J\n+        13: getfield      #26                 // Field loc:J\n         16: lsub\n         17: lcmp\n         18: ifle          46\n         21: aload_0\n-        22: getfield      #7                  // Field loc:J\n+        22: getfield      #26                 // Field loc:J\n         25: aload_0\n-        26: getfield      #3                  // Field end:J\n+        26: getfield      #13                 // Field end:J\n         29: lcmp\n         30: iflt          35\n         33: iconst_m1\n         34: ireturn\n         35: aload_0\n-        36: getfield      #3                  // Field end:J\n+        36: getfield      #13                 // Field end:J\n         39: aload_0\n-        40: getfield      #7                  // Field loc:J\n+        40: getfield      #26                 // Field loc:J\n         43: lsub\n         44: l2i\n         45: istore_3\n         46: aload_1\n         47: iload_2\n         48: iload_3\n-        49: invokestatic  #13                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n+        49: invokestatic  #51                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n         52: astore        4\n         54: aload_0\n         55: aload_0\n-        56: getfield      #7                  // Field loc:J\n+        56: getfield      #26                 // Field loc:J\n         59: aload         4\n-        61: invokevirtual #11                 // Method read:(JLjava/nio/ByteBuffer;)I\n+        61: invokevirtual #43                 // Method read:(JLjava/nio/ByteBuffer;)I\n         64: istore        5\n         66: iload         5\n         68: ifle          86\n         71: aload_0\n         72: dup\n-        73: getfield      #7                  // Field loc:J\n+        73: getfield      #26                 // Field loc:J\n         76: iload         5\n         78: i2l\n         79: ladd\n-        80: putfield      #7                  // Field loc:J\n+        80: putfield      #26                 // Field loc:J\n         83: iload         5\n         85: ireturn\n         86: iload         5\n         88: ireturn\n       LineNumberTable:\n         line 1353: 0\n         line 1354: 4\n@@ -324,40 +324,40 @@\n   protected int read(long, java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (JLjava/nio/ByteBuffer;)I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=7, args_size=3\n          0: aload_0\n          1: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-         4: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+         4: invokestatic  #55                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n          7: dup\n          8: astore        5\n         10: monitorenter\n         11: aload_0\n         12: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-        15: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+        15: invokestatic  #55                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n         18: lload_1\n-        19: invokeinterface #15,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        19: invokeinterface #61,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         24: pop\n         25: aload_0\n         26: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-        29: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+        29: invokestatic  #55                 // Method org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n         32: aload_3\n-        33: invokeinterface #16,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        33: invokeinterface #67,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         38: istore        4\n         40: aload         5\n         42: monitorexit\n         43: goto          54\n         46: astore        6\n         48: aload         5\n         50: monitorexit\n         51: aload         6\n         53: athrow\n         54: aload_3\n-        55: invokevirtual #17                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        55: invokevirtual #70                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         58: pop\n         59: iload         4\n         61: ireturn\n       Exception table:\n          from    to  target type\n             11    43    46   any\n             46    51    46   any\n@@ -377,14 +377,14 @@\n           offset_delta = 7\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream, long, class java/nio/ByteBuffer, int ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"ZipFile.java\"\n-InnerClasses:\n-  private #66= #18 of #32;                // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n-  public static final #99= #98 of #101;   // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #49 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #89 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #50 Invalid length of stream at offset=\\u0001, length=\\u0001\n+      #95 Invalid length of stream at offset=\\u0001, length=\\u0001\n+InnerClasses:\n+  private #98= #2 of #56;                 // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  public static final #103= #99 of #101;  // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
