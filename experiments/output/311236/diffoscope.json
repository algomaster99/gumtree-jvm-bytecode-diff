{"diffoscope-json-version": 1, "source1": "first/ZipUtil.class", "source2": "second/ZipUtil.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,332 +1,332 @@\n-  SHA-256 checksum a9bc1b9929a11e186ba50839f7b1dc8ffe9af20e7202f01ab7b7ae1701583d18\n+  SHA-256 checksum da7ad2fb6225a415689782bec8137c804e7f4b3089ea19e06fefe28adf089df4\n   Compiled from \"ZipUtil.java\"\n public abstract class org.apache.commons.compress.archivers.zip.ZipUtil\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #92                         // org/apache/commons/compress/archivers/zip/ZipUtil\n-  super_class: #93                        // java/lang/Object\n+  this_class: #16                         // org/apache/commons/compress/archivers/zip/ZipUtil\n+  super_class: #2                         // java/lang/Object\n   interfaces: 0, fields: 1, methods: 22, attributes: 2\n Constant pool:\n-    #1 = Methodref          #93.#143      // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #144          // org/apache/commons/compress/archivers/zip/ZipLong\n-    #3 = Methodref          #40.#145      // java/util/Date.getTime:()J\n-    #4 = Methodref          #92.#146      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J)[B\n-    #5 = Methodref          #2.#147       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n-    #6 = Methodref          #92.#148      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J[BI)V\n-    #7 = Methodref          #10.#149      // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n-    #8 = Methodref          #92.#150      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n-    #9 = Methodref          #10.#151      // java/util/Calendar.setTimeInMillis:(J)V\n-   #10 = Class              #152          // java/util/Calendar\n-   #11 = Methodref          #10.#153      // java/util/Calendar.get:(I)I\n-   #12 = Fieldref           #92.#154      // org/apache/commons/compress/archivers/zip/ZipUtil.DOS_TIME_MIN:[B\n-   #13 = Methodref          #92.#155      // org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B[BI)V\n-   #14 = Methodref          #2.#156       // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-   #15 = Class              #157          // java/lang/Integer\n-   #16 = Long               4294967296l\n-   #18 = Methodref          #158.#159     // java/math/BigInteger.bitLength:()I\n-   #19 = Methodref          #158.#160     // java/math/BigInteger.longValue:()J\n-   #20 = Class              #161          // java/lang/NumberFormatException\n-   #21 = Class              #162          // java/lang/StringBuilder\n-   #22 = Methodref          #21.#143      // java/lang/StringBuilder.\"<init>\":()V\n-   #23 = String             #163          // The BigInteger cannot fit inside a 64 bit java long: [\n-   #24 = Methodref          #21.#164      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #25 = Methodref          #21.#165      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #26 = String             #166          // ]\n-   #27 = Methodref          #21.#167      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #28 = Methodref          #20.#168      // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #29 = Long               -2147483648l\n-   #31 = Class              #169          // java/lang/IllegalArgumentException\n-   #32 = String             #170          // Negative longs < -2^31 not permitted: [\n-   #33 = Methodref          #21.#171      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #34 = Methodref          #31.#168      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #35 = Methodref          #92.#172      // org/apache/commons/compress/archivers/zip/ZipUtil.adjustToLong:(I)J\n-   #36 = Methodref          #158.#173     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #37 = String             #174          // Can only convert non-negative integers between [0,255] to byte: [\n-   #38 = Methodref          #21.#175      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #39 = Methodref          #2.#176       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #40 = Class              #177          // java/util/Date\n-   #41 = Methodref          #92.#178      // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-   #42 = Methodref          #40.#179      // java/util/Date.\"<init>\":(J)V\n-   #43 = Long               127l\n-   #45 = Methodref          #10.#180      // java/util/Calendar.set:(II)V\n-   #46 = Long               15l\n-   #48 = Methodref          #10.#181      // java/util/Calendar.getTime:()Ljava/util/Date;\n-   #49 = Fieldref           #51.#182      // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #50 = Methodref          #183.#184     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #51 = Class              #185          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-   #52 = Methodref          #92.#186      // org/apache/commons/compress/archivers/zip/ZipUtil.getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-   #53 = Methodref          #183.#187     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n-   #54 = Fieldref           #188.#189     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #55 = Methodref          #183.#190     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #56 = Fieldref           #57.#191      // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #57 = Class              #192          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-   #58 = Methodref          #183.#193     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n-   #59 = Fieldref           #194.#195     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-   #60 = Methodref          #183.#196     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-   #61 = Class              #197          // java/util/zip/CRC32\n-   #62 = Methodref          #61.#143      // java/util/zip/CRC32.\"<init>\":()V\n-   #63 = Methodref          #61.#198      // java/util/zip/CRC32.update:([B)V\n-   #64 = Methodref          #61.#176      // java/util/zip/CRC32.getValue:()J\n-   #65 = Methodref          #128.#199     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n-   #66 = Fieldref           #200.#201     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #67 = Methodref          #128.#202     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n-   #68 = InterfaceMethodref #203.#204     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #69 = Class              #205          // java/io/IOException\n-   #70 = Methodref          #206.#207     // java/util/Arrays.copyOf:([BI)[B\n-   #71 = Methodref          #208.#209     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #72 = Methodref          #92.#210      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #73 = Methodref          #92.#211      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #74 = Methodref          #183.#212     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #75 = Methodref          #213.#214     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n-   #76 = Methodref          #183.#215     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #77 = Fieldref           #138.#216     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #78 = Methodref          #138.#217     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-   #79 = Fieldref           #138.#218     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #80 = Class              #219          // java/util/zip/ZipEntry\n-   #81 = Fieldref           #138.#220     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #82 = Fieldref           #138.#221     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #83 = Class              #222          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-   #84 = Fieldref           #223.#224     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-   #85 = Methodref          #83.#225      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #86 = Methodref          #138.#226     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #87 = Fieldref           #223.#227     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-   #88 = Methodref          #83.#228      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #89 = Long               8448l\n-   #91 = Methodref          #2.#229       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-   #92 = Class              #230          // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #93 = Class              #231          // java/lang/Object\n-   #94 = Utf8               DOS_TIME_MIN\n-   #95 = Utf8               [B\n-   #96 = Utf8               <init>\n-   #97 = Utf8               ()V\n-   #98 = Utf8               Code\n-   #99 = Utf8               LineNumberTable\n-  #100 = Utf8               toDosTime\n-  #101 = Utf8               (Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #102 = Utf8               (J)[B\n-  #103 = Utf8               (J[BI)V\n-  #104 = Utf8               (Ljava/util/Calendar;J[BI)V\n-  #105 = Utf8               StackMapTable\n-  #106 = Utf8               adjustToLong\n-  #107 = Utf8               (I)J\n-  #108 = Utf8               reverse\n-  #109 = Utf8               ([B)[B\n-  #110 = Utf8               bigToLong\n-  #111 = Utf8               (Ljava/math/BigInteger;)J\n-  #112 = Utf8               longToBig\n-  #113 = Utf8               (J)Ljava/math/BigInteger;\n-  #114 = Utf8               signedByteToUnsignedInt\n-  #115 = Utf8               (B)I\n-  #116 = Utf8               unsignedIntToSignedByte\n-  #117 = Utf8               (I)B\n-  #118 = Utf8               fromDosTime\n-  #119 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)Ljava/util/Date;\n-  #120 = Utf8               dosToJavaTime\n-  #121 = Utf8               (J)J\n-  #122 = Utf8               setNameAndCommentFromExtraFields\n-  #123 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #124 = Class              #232          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #125 = Class              #233          // java/lang/String\n-  #126 = Utf8               getUnicodeStringIfOriginalMatches\n-  #127 = Utf8               (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-  #128 = Class              #234          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #129 = Class              #95           // \"[B\"\n-  #130 = Utf8               copy\n-  #131 = Utf8               ([B[BI)V\n-  #132 = Utf8               canHandleEntryData\n-  #133 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #134 = Utf8               supportsEncryptionOf\n-  #135 = Utf8               supportsMethodOf\n-  #136 = Utf8               checkRequestedFeatures\n-  #137 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #138 = Class              #235          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #139 = Utf8               Exceptions\n-  #140 = Utf8               <clinit>\n-  #141 = Utf8               SourceFile\n-  #142 = Utf8               ZipUtil.java\n-  #143 = NameAndType        #96:#97       // \"<init>\":()V\n-  #144 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #145 = NameAndType        #236:#237     // getTime:()J\n-  #146 = NameAndType        #100:#102     // toDosTime:(J)[B\n-  #147 = NameAndType        #96:#238      // \"<init>\":([B)V\n-  #148 = NameAndType        #100:#103     // toDosTime:(J[BI)V\n-  #149 = NameAndType        #239:#240     // getInstance:()Ljava/util/Calendar;\n-  #150 = NameAndType        #100:#104     // toDosTime:(Ljava/util/Calendar;J[BI)V\n-  #151 = NameAndType        #241:#242     // setTimeInMillis:(J)V\n-  #152 = Utf8               java/util/Calendar\n-  #153 = NameAndType        #243:#244     // get:(I)I\n-  #154 = NameAndType        #94:#95       // DOS_TIME_MIN:[B\n-  #155 = NameAndType        #130:#131     // copy:([B[BI)V\n-  #156 = NameAndType        #245:#103     // putLong:(J[BI)V\n-  #157 = Utf8               java/lang/Integer\n-  #158 = Class              #246          // java/math/BigInteger\n-  #159 = NameAndType        #247:#248     // bitLength:()I\n-  #160 = NameAndType        #249:#237     // longValue:()J\n-  #161 = Utf8               java/lang/NumberFormatException\n-  #162 = Utf8               java/lang/StringBuilder\n-  #163 = Utf8               The BigInteger cannot fit inside a 64 bit java long: [\n-  #164 = NameAndType        #250:#251     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #165 = NameAndType        #250:#252     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #166 = Utf8               ]\n-  #167 = NameAndType        #253:#254     // toString:()Ljava/lang/String;\n-  #168 = NameAndType        #96:#255      // \"<init>\":(Ljava/lang/String;)V\n-  #169 = Utf8               java/lang/IllegalArgumentException\n-  #170 = Utf8               Negative longs < -2^31 not permitted: [\n-  #171 = NameAndType        #250:#256     // append:(J)Ljava/lang/StringBuilder;\n-  #172 = NameAndType        #106:#107     // adjustToLong:(I)J\n-  #173 = NameAndType        #257:#113     // valueOf:(J)Ljava/math/BigInteger;\n-  #174 = Utf8               Can only convert non-negative integers between [0,255] to byte: [\n-  #175 = NameAndType        #250:#258     // append:(I)Ljava/lang/StringBuilder;\n-  #176 = NameAndType        #259:#237     // getValue:()J\n-  #177 = Utf8               java/util/Date\n-  #178 = NameAndType        #120:#121     // dosToJavaTime:(J)J\n-  #179 = NameAndType        #96:#242      // \"<init>\":(J)V\n-  #180 = NameAndType        #260:#261     // set:(II)V\n-  #181 = NameAndType        #236:#262     // getTime:()Ljava/util/Date;\n-  #182 = NameAndType        #263:#264     // UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #183 = Class              #265          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #184 = NameAndType        #266:#267     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #185 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #186 = NameAndType        #126:#127     // getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-  #187 = NameAndType        #268:#255     // setName:(Ljava/lang/String;)V\n-  #188 = Class              #269          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #189 = NameAndType        #272:#273     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #190 = NameAndType        #274:#275     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #191 = NameAndType        #276:#264     // UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #192 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #193 = NameAndType        #277:#255     // setComment:(Ljava/lang/String;)V\n-  #194 = Class              #278          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n-  #195 = NameAndType        #272:#280     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-  #196 = NameAndType        #281:#282     // setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-  #197 = Utf8               java/util/zip/CRC32\n-  #198 = NameAndType        #283:#238     // update:([B)V\n-  #199 = NameAndType        #284:#237     // getNameCRC32:()J\n-  #200 = Class              #285          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #201 = NameAndType        #286:#287     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #202 = NameAndType        #288:#289     // getUnicodeName:()[B\n-  #203 = Class              #290          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #204 = NameAndType        #291:#292     // decode:([B)Ljava/lang/String;\n-  #205 = Utf8               java/io/IOException\n-  #206 = Class              #293          // java/util/Arrays\n-  #207 = NameAndType        #294:#295     // copyOf:([BI)[B\n-  #208 = Class              #296          // java/lang/System\n-  #209 = NameAndType        #297:#298     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #210 = NameAndType        #134:#133     // supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #211 = NameAndType        #135:#133     // supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #212 = NameAndType        #299:#300     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #213 = Class              #301          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #214 = NameAndType        #302:#303     // usesEncryption:()Z\n-  #215 = NameAndType        #304:#248     // getMethod:()I\n-  #216 = NameAndType        #305:#306     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #217 = NameAndType        #307:#248     // getCode:()I\n-  #218 = NameAndType        #308:#306     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #219 = Utf8               java/util/zip/ZipEntry\n-  #220 = NameAndType        #309:#306     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #221 = NameAndType        #310:#306     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #222 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #223 = Class              #311          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #224 = NameAndType        #313:#314     // ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #225 = NameAndType        #96:#315      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #226 = NameAndType        #316:#317     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #227 = NameAndType        #318:#314     // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #228 = NameAndType        #96:#319      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #229 = NameAndType        #320:#102     // getBytes:(J)[B\n-  #230 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #231 = Utf8               java/lang/Object\n-  #232 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #233 = Utf8               java/lang/String\n-  #234 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #235 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #236 = Utf8               getTime\n-  #237 = Utf8               ()J\n-  #238 = Utf8               ([B)V\n-  #239 = Utf8               getInstance\n-  #240 = Utf8               ()Ljava/util/Calendar;\n-  #241 = Utf8               setTimeInMillis\n-  #242 = Utf8               (J)V\n-  #243 = Utf8               get\n-  #244 = Utf8               (I)I\n-  #245 = Utf8               putLong\n-  #246 = Utf8               java/math/BigInteger\n-  #247 = Utf8               bitLength\n-  #248 = Utf8               ()I\n-  #249 = Utf8               longValue\n-  #250 = Utf8               append\n-  #251 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #252 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #253 = Utf8               toString\n-  #254 = Utf8               ()Ljava/lang/String;\n-  #255 = Utf8               (Ljava/lang/String;)V\n-  #256 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #257 = Utf8               valueOf\n-  #258 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #259 = Utf8               getValue\n-  #260 = Utf8               set\n-  #261 = Utf8               (II)V\n-  #262 = Utf8               ()Ljava/util/Date;\n-  #263 = Utf8               UPATH_ID\n-  #264 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #265 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #266 = Utf8               getExtraField\n-  #267 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #268 = Utf8               setName\n-  #269 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #270 = Utf8               NameSource\n-  #271 = Utf8               InnerClasses\n-  #272 = Utf8               UNICODE_EXTRA_FIELD\n-  #273 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #274 = Utf8               setNameSource\n-  #275 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #276 = Utf8               UCOM_ID\n-  #277 = Utf8               setComment\n-  #278 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n-  #279 = Utf8               CommentSource\n-  #280 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-  #281 = Utf8               setCommentSource\n-  #282 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-  #283 = Utf8               update\n-  #284 = Utf8               getNameCRC32\n-  #285 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #286 = Utf8               UTF8_ZIP_ENCODING\n-  #287 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #288 = Utf8               getUnicodeName\n-  #289 = Utf8               ()[B\n-  #290 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #291 = Utf8               decode\n-  #292 = Utf8               ([B)Ljava/lang/String;\n-  #293 = Utf8               java/util/Arrays\n-  #294 = Utf8               copyOf\n-  #295 = Utf8               ([BI)[B\n-  #296 = Utf8               java/lang/System\n-  #297 = Utf8               arraycopy\n-  #298 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #299 = Utf8               getGeneralPurposeBit\n-  #300 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #301 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #302 = Utf8               usesEncryption\n-  #303 = Utf8               ()Z\n-  #304 = Utf8               getMethod\n-  #305 = Utf8               UNSHRINKING\n-  #306 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #307 = Utf8               getCode\n-  #308 = Utf8               IMPLODING\n-  #309 = Utf8               ENHANCED_DEFLATED\n-  #310 = Utf8               BZIP2\n-  #311 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #312 = Utf8               Feature\n-  #313 = Utf8               ENCRYPTION\n-  #314 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #315 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #316 = Utf8               getMethodByCode\n-  #317 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #318 = Utf8               METHOD\n-  #319 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #320 = Utf8               getBytes\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // org/apache/commons/compress/archivers/zip/ZipLong\n+    #8 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+    #9 = Methodref          #10.#11       // java/util/Date.getTime:()J\n+   #10 = Class              #12           // java/util/Date\n+   #11 = NameAndType        #13:#14       // getTime:()J\n+   #12 = Utf8               java/util/Date\n+   #13 = Utf8               getTime\n+   #14 = Utf8               ()J\n+   #15 = Methodref          #16.#17       // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J)[B\n+   #16 = Class              #18           // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #17 = NameAndType        #19:#20       // toDosTime:(J)[B\n+   #18 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+   #19 = Utf8               toDosTime\n+   #20 = Utf8               (J)[B\n+   #21 = Methodref          #7.#22        // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+   #22 = NameAndType        #5:#23        // \"<init>\":([B)V\n+   #23 = Utf8               ([B)V\n+   #24 = Methodref          #16.#25       // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J[BI)V\n+   #25 = NameAndType        #19:#26       // toDosTime:(J[BI)V\n+   #26 = Utf8               (J[BI)V\n+   #27 = Methodref          #28.#29       // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+   #28 = Class              #30           // java/util/Calendar\n+   #29 = NameAndType        #31:#32       // getInstance:()Ljava/util/Calendar;\n+   #30 = Utf8               java/util/Calendar\n+   #31 = Utf8               getInstance\n+   #32 = Utf8               ()Ljava/util/Calendar;\n+   #33 = Methodref          #16.#34       // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n+   #34 = NameAndType        #19:#35       // toDosTime:(Ljava/util/Calendar;J[BI)V\n+   #35 = Utf8               (Ljava/util/Calendar;J[BI)V\n+   #36 = Methodref          #28.#37       // java/util/Calendar.setTimeInMillis:(J)V\n+   #37 = NameAndType        #38:#39       // setTimeInMillis:(J)V\n+   #38 = Utf8               setTimeInMillis\n+   #39 = Utf8               (J)V\n+   #40 = Methodref          #28.#41       // java/util/Calendar.get:(I)I\n+   #41 = NameAndType        #42:#43       // get:(I)I\n+   #42 = Utf8               get\n+   #43 = Utf8               (I)I\n+   #44 = Fieldref           #16.#45       // org/apache/commons/compress/archivers/zip/ZipUtil.DOS_TIME_MIN:[B\n+   #45 = NameAndType        #46:#47       // DOS_TIME_MIN:[B\n+   #46 = Utf8               DOS_TIME_MIN\n+   #47 = Utf8               [B\n+   #48 = Methodref          #16.#49       // org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B[BI)V\n+   #49 = NameAndType        #50:#51       // copy:([B[BI)V\n+   #50 = Utf8               copy\n+   #51 = Utf8               ([B[BI)V\n+   #52 = Methodref          #7.#53        // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+   #53 = NameAndType        #54:#26       // putLong:(J[BI)V\n+   #54 = Utf8               putLong\n+   #55 = Class              #56           // java/lang/Integer\n+   #56 = Utf8               java/lang/Integer\n+   #57 = Long               4294967296l\n+   #59 = Methodref          #60.#61       // java/math/BigInteger.bitLength:()I\n+   #60 = Class              #62           // java/math/BigInteger\n+   #61 = NameAndType        #63:#64       // bitLength:()I\n+   #62 = Utf8               java/math/BigInteger\n+   #63 = Utf8               bitLength\n+   #64 = Utf8               ()I\n+   #65 = Methodref          #60.#66       // java/math/BigInteger.longValue:()J\n+   #66 = NameAndType        #67:#14       // longValue:()J\n+   #67 = Utf8               longValue\n+   #68 = Class              #69           // java/lang/NumberFormatException\n+   #69 = Utf8               java/lang/NumberFormatException\n+   #70 = Class              #71           // java/lang/StringBuilder\n+   #71 = Utf8               java/lang/StringBuilder\n+   #72 = Methodref          #70.#3        // java/lang/StringBuilder.\"<init>\":()V\n+   #73 = String             #74           // The BigInteger cannot fit inside a 64 bit java long: [\n+   #74 = Utf8               The BigInteger cannot fit inside a 64 bit java long: [\n+   #75 = Methodref          #70.#76       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #76 = NameAndType        #77:#78       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #77 = Utf8               append\n+   #78 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #79 = Methodref          #70.#80       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #80 = NameAndType        #77:#81       // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #81 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #82 = String             #83           // ]\n+   #83 = Utf8               ]\n+   #84 = Methodref          #70.#85       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #85 = NameAndType        #86:#87       // toString:()Ljava/lang/String;\n+   #86 = Utf8               toString\n+   #87 = Utf8               ()Ljava/lang/String;\n+   #88 = Methodref          #68.#89       // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #89 = NameAndType        #5:#90        // \"<init>\":(Ljava/lang/String;)V\n+   #90 = Utf8               (Ljava/lang/String;)V\n+   #91 = Long               -2147483648l\n+   #93 = Class              #94           // java/lang/IllegalArgumentException\n+   #94 = Utf8               java/lang/IllegalArgumentException\n+   #95 = String             #96           // Negative longs < -2^31 not permitted: [\n+   #96 = Utf8               Negative longs < -2^31 not permitted: [\n+   #97 = Methodref          #70.#98       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #98 = NameAndType        #77:#99       // append:(J)Ljava/lang/StringBuilder;\n+   #99 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #100 = Methodref          #93.#89       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #101 = Methodref          #16.#102      // org/apache/commons/compress/archivers/zip/ZipUtil.adjustToLong:(I)J\n+  #102 = NameAndType        #103:#104     // adjustToLong:(I)J\n+  #103 = Utf8               adjustToLong\n+  #104 = Utf8               (I)J\n+  #105 = Methodref          #60.#106      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+  #106 = NameAndType        #107:#108     // valueOf:(J)Ljava/math/BigInteger;\n+  #107 = Utf8               valueOf\n+  #108 = Utf8               (J)Ljava/math/BigInteger;\n+  #109 = String             #110          // Can only convert non-negative integers between [0,255] to byte: [\n+  #110 = Utf8               Can only convert non-negative integers between [0,255] to byte: [\n+  #111 = Methodref          #70.#112      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #112 = NameAndType        #77:#113      // append:(I)Ljava/lang/StringBuilder;\n+  #113 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #114 = Methodref          #7.#115       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+  #115 = NameAndType        #116:#14      // getValue:()J\n+  #116 = Utf8               getValue\n+  #117 = Methodref          #16.#118      // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+  #118 = NameAndType        #119:#120     // dosToJavaTime:(J)J\n+  #119 = Utf8               dosToJavaTime\n+  #120 = Utf8               (J)J\n+  #121 = Methodref          #10.#122      // java/util/Date.\"<init>\":(J)V\n+  #122 = NameAndType        #5:#39        // \"<init>\":(J)V\n+  #123 = Long               127l\n+  #125 = Methodref          #28.#126      // java/util/Calendar.set:(II)V\n+  #126 = NameAndType        #127:#128     // set:(II)V\n+  #127 = Utf8               set\n+  #128 = Utf8               (II)V\n+  #129 = Long               15l\n+  #131 = Methodref          #28.#132      // java/util/Calendar.getTime:()Ljava/util/Date;\n+  #132 = NameAndType        #13:#133      // getTime:()Ljava/util/Date;\n+  #133 = Utf8               ()Ljava/util/Date;\n+  #134 = Fieldref           #135.#136     // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #135 = Class              #137          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+  #136 = NameAndType        #138:#139     // UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #137 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+  #138 = Utf8               UPATH_ID\n+  #139 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #140 = Methodref          #141.#142     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #141 = Class              #143          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #142 = NameAndType        #144:#145     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #143 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #144 = Utf8               getExtraField\n+  #145 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #146 = Methodref          #16.#147      // org/apache/commons/compress/archivers/zip/ZipUtil.getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #147 = NameAndType        #148:#149     // getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #148 = Utf8               getUnicodeStringIfOriginalMatches\n+  #149 = Utf8               (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #150 = Methodref          #141.#151     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n+  #151 = NameAndType        #152:#90      // setName:(Ljava/lang/String;)V\n+  #152 = Utf8               setName\n+  #153 = Fieldref           #154.#155     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #154 = Class              #156          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #155 = NameAndType        #157:#158     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #156 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #157 = Utf8               UNICODE_EXTRA_FIELD\n+  #158 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #159 = Methodref          #141.#160     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #160 = NameAndType        #161:#162     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #161 = Utf8               setNameSource\n+  #162 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #163 = Fieldref           #164.#165     // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #164 = Class              #166          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+  #165 = NameAndType        #167:#139     // UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #166 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+  #167 = Utf8               UCOM_ID\n+  #168 = Methodref          #141.#169     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n+  #169 = NameAndType        #170:#90      // setComment:(Ljava/lang/String;)V\n+  #170 = Utf8               setComment\n+  #171 = Fieldref           #172.#173     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #172 = Class              #174          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n+  #173 = NameAndType        #157:#175     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #174 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n+  #175 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #176 = Methodref          #141.#177     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #177 = NameAndType        #178:#179     // setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #178 = Utf8               setCommentSource\n+  #179 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #180 = Class              #181          // java/util/zip/CRC32\n+  #181 = Utf8               java/util/zip/CRC32\n+  #182 = Methodref          #180.#3       // java/util/zip/CRC32.\"<init>\":()V\n+  #183 = Methodref          #180.#184     // java/util/zip/CRC32.update:([B)V\n+  #184 = NameAndType        #185:#23      // update:([B)V\n+  #185 = Utf8               update\n+  #186 = Methodref          #180.#115     // java/util/zip/CRC32.getValue:()J\n+  #187 = Methodref          #188.#189     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n+  #188 = Class              #190          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #189 = NameAndType        #191:#14      // getNameCRC32:()J\n+  #190 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #191 = Utf8               getNameCRC32\n+  #192 = Fieldref           #193.#194     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #193 = Class              #195          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #194 = NameAndType        #196:#197     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #195 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #196 = Utf8               UTF8_ZIP_ENCODING\n+  #197 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #198 = Methodref          #188.#199     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n+  #199 = NameAndType        #200:#201     // getUnicodeName:()[B\n+  #200 = Utf8               getUnicodeName\n+  #201 = Utf8               ()[B\n+  #202 = InterfaceMethodref #203.#204     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #203 = Class              #205          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #204 = NameAndType        #206:#207     // decode:([B)Ljava/lang/String;\n+  #205 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #206 = Utf8               decode\n+  #207 = Utf8               ([B)Ljava/lang/String;\n+  #208 = Class              #209          // java/io/IOException\n+  #209 = Utf8               java/io/IOException\n+  #210 = Methodref          #211.#212     // java/util/Arrays.copyOf:([BI)[B\n+  #211 = Class              #213          // java/util/Arrays\n+  #212 = NameAndType        #214:#215     // copyOf:([BI)[B\n+  #213 = Utf8               java/util/Arrays\n+  #214 = Utf8               copyOf\n+  #215 = Utf8               ([BI)[B\n+  #216 = Methodref          #217.#218     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #217 = Class              #219          // java/lang/System\n+  #218 = NameAndType        #220:#221     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #219 = Utf8               java/lang/System\n+  #220 = Utf8               arraycopy\n+  #221 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #222 = Methodref          #16.#223      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #223 = NameAndType        #224:#225     // supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #224 = Utf8               supportsEncryptionOf\n+  #225 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #226 = Methodref          #16.#227      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #227 = NameAndType        #228:#225     // supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #228 = Utf8               supportsMethodOf\n+  #229 = Methodref          #141.#230     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #230 = NameAndType        #231:#232     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #231 = Utf8               getGeneralPurposeBit\n+  #232 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #233 = Methodref          #234.#235     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n+  #234 = Class              #236          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #235 = NameAndType        #237:#238     // usesEncryption:()Z\n+  #236 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #237 = Utf8               usesEncryption\n+  #238 = Utf8               ()Z\n+  #239 = Methodref          #141.#240     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+  #240 = NameAndType        #241:#64      // getMethod:()I\n+  #241 = Utf8               getMethod\n+  #242 = Fieldref           #243.#244     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #243 = Class              #245          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #244 = NameAndType        #246:#247     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #245 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #246 = Utf8               UNSHRINKING\n+  #247 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #248 = Methodref          #243.#249     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+  #249 = NameAndType        #250:#64      // getCode:()I\n+  #250 = Utf8               getCode\n+  #251 = Fieldref           #243.#252     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #252 = NameAndType        #253:#247     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #253 = Utf8               IMPLODING\n+  #254 = Class              #255          // java/util/zip/ZipEntry\n+  #255 = Utf8               java/util/zip/ZipEntry\n+  #256 = Fieldref           #243.#257     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #257 = NameAndType        #258:#247     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #258 = Utf8               ENHANCED_DEFLATED\n+  #259 = Fieldref           #243.#260     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #260 = NameAndType        #261:#247     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #261 = Utf8               BZIP2\n+  #262 = Class              #263          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #263 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #264 = Fieldref           #265.#266     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #265 = Class              #267          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #266 = NameAndType        #268:#269     // ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #267 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #268 = Utf8               ENCRYPTION\n+  #269 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #270 = Methodref          #262.#271     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #271 = NameAndType        #5:#272       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #272 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #273 = Methodref          #243.#274     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #274 = NameAndType        #275:#276     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #275 = Utf8               getMethodByCode\n+  #276 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #277 = Fieldref           #265.#278     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #278 = NameAndType        #279:#269     // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #279 = Utf8               METHOD\n+  #280 = Methodref          #262.#281     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #281 = NameAndType        #5:#282       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #282 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #283 = Long               8448l\n+  #285 = Methodref          #7.#286       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+  #286 = NameAndType        #287:#20      // getBytes:(J)[B\n+  #287 = Utf8               getBytes\n+  #288 = Utf8               Code\n+  #289 = Utf8               LineNumberTable\n+  #290 = Utf8               (Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #291 = Utf8               StackMapTable\n+  #292 = Utf8               reverse\n+  #293 = Utf8               ([B)[B\n+  #294 = Utf8               bigToLong\n+  #295 = Utf8               (Ljava/math/BigInteger;)J\n+  #296 = Utf8               longToBig\n+  #297 = Utf8               signedByteToUnsignedInt\n+  #298 = Utf8               (B)I\n+  #299 = Utf8               unsignedIntToSignedByte\n+  #300 = Utf8               (I)B\n+  #301 = Utf8               fromDosTime\n+  #302 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)Ljava/util/Date;\n+  #303 = Utf8               setNameAndCommentFromExtraFields\n+  #304 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #305 = Class              #306          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #306 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #307 = Class              #308          // java/lang/String\n+  #308 = Utf8               java/lang/String\n+  #309 = Class              #47           // \"[B\"\n+  #310 = Utf8               canHandleEntryData\n+  #311 = Utf8               checkRequestedFeatures\n+  #312 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #313 = Utf8               Exceptions\n+  #314 = Utf8               <clinit>\n+  #315 = Utf8               SourceFile\n+  #316 = Utf8               ZipUtil.java\n+  #317 = Utf8               InnerClasses\n+  #318 = Utf8               NameSource\n+  #319 = Utf8               CommentSource\n+  #320 = Utf8               Feature\n {\n   private static final byte[] DOS_TIME_MIN;\n     descriptor: [B\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   public org.apache.commons.compress.archivers.zip.ZipUtil();\n     descriptor: ()V\n@@ -340,20 +340,20 @@\n         line 32: 0\n \n   public static org.apache.commons.compress.archivers.zip.ZipLong toDosTime(java.util.Date);\n     descriptor: (Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=1, args_size=1\n-         0: new           #2                  // class org/apache/commons/compress/archivers/zip/ZipLong\n+         0: new           #7                  // class org/apache/commons/compress/archivers/zip/ZipLong\n          3: dup\n          4: aload_0\n-         5: invokevirtual #3                  // Method java/util/Date.getTime:()J\n-         8: invokestatic  #4                  // Method toDosTime:(J)[B\n-        11: invokespecial #5                  // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+         5: invokevirtual #9                  // Method java/util/Date.getTime:()J\n+         8: invokestatic  #15                 // Method toDosTime:(J)[B\n+        11: invokespecial #21                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         14: areturn\n       LineNumberTable:\n         line 44: 0\n \n   public static byte[] toDosTime(long);\n     descriptor: (J)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n@@ -361,102 +361,102 @@\n       stack=4, locals=3, args_size=1\n          0: iconst_4\n          1: newarray       byte\n          3: astore_2\n          4: lload_0\n          5: aload_2\n          6: iconst_0\n-         7: invokestatic  #6                  // Method toDosTime:(J[BI)V\n+         7: invokestatic  #24                 // Method toDosTime:(J[BI)V\n         10: aload_2\n         11: areturn\n       LineNumberTable:\n         line 55: 0\n         line 56: 4\n         line 57: 10\n \n   public static void toDosTime(long, byte[], int);\n     descriptor: (J[BI)V\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=4, args_size=3\n-         0: invokestatic  #7                  // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+         0: invokestatic  #27                 // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;\n          3: lload_0\n          4: aload_2\n          5: iload_3\n-         6: invokestatic  #8                  // Method toDosTime:(Ljava/util/Calendar;J[BI)V\n+         6: invokestatic  #33                 // Method toDosTime:(Ljava/util/Calendar;J[BI)V\n          9: return\n       LineNumberTable:\n         line 71: 0\n         line 72: 9\n \n   static void toDosTime(java.util.Calendar, long, byte[], int);\n     descriptor: (Ljava/util/Calendar;J[BI)V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=4\n          0: aload_0\n          1: lload_1\n-         2: invokevirtual #9                  // Method java/util/Calendar.setTimeInMillis:(J)V\n+         2: invokevirtual #36                 // Method java/util/Calendar.setTimeInMillis:(J)V\n          5: aload_0\n          6: iconst_1\n-         7: invokevirtual #11                 // Method java/util/Calendar.get:(I)I\n+         7: invokevirtual #40                 // Method java/util/Calendar.get:(I)I\n         10: istore        5\n         12: iload         5\n         14: sipush        1980\n         17: if_icmpge     30\n-        20: getstatic     #12                 // Field DOS_TIME_MIN:[B\n+        20: getstatic     #44                 // Field DOS_TIME_MIN:[B\n         23: aload_3\n         24: iload         4\n-        26: invokestatic  #13                 // Method copy:([B[BI)V\n+        26: invokestatic  #48                 // Method copy:([B[BI)V\n         29: return\n         30: aload_0\n         31: iconst_2\n-        32: invokevirtual #11                 // Method java/util/Calendar.get:(I)I\n+        32: invokevirtual #40                 // Method java/util/Calendar.get:(I)I\n         35: iconst_1\n         36: iadd\n         37: istore        6\n         39: iload         5\n         41: sipush        1980\n         44: isub\n         45: bipush        25\n         47: ishl\n         48: iload         6\n         50: bipush        21\n         52: ishl\n         53: ior\n         54: aload_0\n         55: iconst_5\n-        56: invokevirtual #11                 // Method java/util/Calendar.get:(I)I\n+        56: invokevirtual #40                 // Method java/util/Calendar.get:(I)I\n         59: bipush        16\n         61: ishl\n         62: ior\n         63: aload_0\n         64: bipush        11\n-        66: invokevirtual #11                 // Method java/util/Calendar.get:(I)I\n+        66: invokevirtual #40                 // Method java/util/Calendar.get:(I)I\n         69: bipush        11\n         71: ishl\n         72: ior\n         73: aload_0\n         74: bipush        12\n-        76: invokevirtual #11                 // Method java/util/Calendar.get:(I)I\n+        76: invokevirtual #40                 // Method java/util/Calendar.get:(I)I\n         79: iconst_5\n         80: ishl\n         81: ior\n         82: aload_0\n         83: bipush        13\n-        85: invokevirtual #11                 // Method java/util/Calendar.get:(I)I\n+        85: invokevirtual #40                 // Method java/util/Calendar.get:(I)I\n         88: iconst_1\n         89: ishr\n         90: ior\n         91: i2l\n         92: lstore        7\n         94: lload         7\n         96: aload_3\n         97: iload         4\n-        99: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+        99: invokestatic  #52                 // Method org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n        102: return\n       LineNumberTable:\n         line 75: 0\n         line 77: 5\n         line 78: 12\n         line 79: 20\n         line 80: 29\n@@ -476,15 +476,15 @@\n   public static long adjustToLong(int);\n     descriptor: (I)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: iload_0\n          1: ifge          11\n-         4: ldc2_w        #16                 // long 4294967296l\n+         4: ldc2_w        #57                 // long 4294967296l\n          7: iload_0\n          8: i2l\n          9: ladd\n         10: lreturn\n         11: iload_0\n         12: i2l\n         13: lreturn\n@@ -552,78 +552,78 @@\n \n   static long bigToLong(java.math.BigInteger);\n     descriptor: (Ljava/math/BigInteger;)J\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #18                 // Method java/math/BigInteger.bitLength:()I\n+         1: invokevirtual #59                 // Method java/math/BigInteger.bitLength:()I\n          4: bipush        63\n          6: if_icmpgt     14\n          9: aload_0\n-        10: invokevirtual #19                 // Method java/math/BigInteger.longValue:()J\n+        10: invokevirtual #65                 // Method java/math/BigInteger.longValue:()J\n         13: lreturn\n-        14: new           #20                 // class java/lang/NumberFormatException\n+        14: new           #68                 // class java/lang/NumberFormatException\n         17: dup\n-        18: new           #21                 // class java/lang/StringBuilder\n+        18: new           #70                 // class java/lang/StringBuilder\n         21: dup\n-        22: invokespecial #22                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        25: ldc           #23                 // String The BigInteger cannot fit inside a 64 bit java long: [\n-        27: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        22: invokespecial #72                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        25: ldc           #73                 // String The BigInteger cannot fit inside a 64 bit java long: [\n+        27: invokevirtual #75                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         30: aload_0\n-        31: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        34: ldc           #26                 // String ]\n-        36: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        39: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        42: invokespecial #28                 // Method java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+        31: invokevirtual #79                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        34: ldc           #82                 // String ]\n+        36: invokevirtual #75                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        39: invokevirtual #84                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        42: invokespecial #88                 // Method java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n         45: athrow\n       LineNumberTable:\n         line 136: 0\n         line 137: 9\n         line 139: 14\n       StackMapTable: number_of_entries = 1\n         frame_type = 14 /* same */\n \n   static java.math.BigInteger longToBig(long);\n     descriptor: (J)Ljava/math/BigInteger;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=5, locals=2, args_size=1\n          0: lload_0\n-         1: ldc2_w        #29                 // long -2147483648l\n+         1: ldc2_w        #91                 // long -2147483648l\n          4: lcmp\n          5: ifge          40\n-         8: new           #31                 // class java/lang/IllegalArgumentException\n+         8: new           #93                 // class java/lang/IllegalArgumentException\n         11: dup\n-        12: new           #21                 // class java/lang/StringBuilder\n+        12: new           #70                 // class java/lang/StringBuilder\n         15: dup\n-        16: invokespecial #22                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        19: ldc           #32                 // String Negative longs < -2^31 not permitted: [\n-        21: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        16: invokespecial #72                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        19: ldc           #95                 // String Negative longs < -2^31 not permitted: [\n+        21: invokevirtual #75                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         24: lload_0\n-        25: invokevirtual #33                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        28: ldc           #26                 // String ]\n-        30: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        33: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        36: invokespecial #34                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        25: invokevirtual #97                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        28: ldc           #82                 // String ]\n+        30: invokevirtual #75                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        33: invokevirtual #84                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        36: invokespecial #100                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         39: athrow\n         40: lload_0\n         41: lconst_0\n         42: lcmp\n         43: ifge          60\n         46: lload_0\n-        47: ldc2_w        #29                 // long -2147483648l\n+        47: ldc2_w        #91                 // long -2147483648l\n         50: lcmp\n         51: iflt          60\n         54: lload_0\n         55: l2i\n-        56: invokestatic  #35                 // Method adjustToLong:(I)J\n+        56: invokestatic  #101                // Method adjustToLong:(I)J\n         59: lstore_0\n         60: lload_0\n-        61: invokestatic  #36                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        61: invokestatic  #105                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n         64: areturn\n       LineNumberTable:\n         line 154: 0\n         line 155: 8\n         line 157: 40\n         line 160: 54\n         line 162: 60\n@@ -657,27 +657,27 @@\n     Code:\n       stack=4, locals=1, args_size=1\n          0: iload_0\n          1: sipush        255\n          4: if_icmpgt     11\n          7: iload_0\n          8: ifge          43\n-        11: new           #31                 // class java/lang/IllegalArgumentException\n+        11: new           #93                 // class java/lang/IllegalArgumentException\n         14: dup\n-        15: new           #21                 // class java/lang/StringBuilder\n+        15: new           #70                 // class java/lang/StringBuilder\n         18: dup\n-        19: invokespecial #22                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        22: ldc           #37                 // String Can only convert non-negative integers between [0,255] to byte: [\n-        24: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        19: invokespecial #72                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        22: ldc           #109                // String Can only convert non-negative integers between [0,255] to byte: [\n+        24: invokevirtual #75                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         27: iload_0\n-        28: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        31: ldc           #26                 // String ]\n-        33: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        36: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        39: invokespecial #34                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        28: invokevirtual #111                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        31: ldc           #82                 // String ]\n+        33: invokevirtual #75                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        36: invokevirtual #84                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        39: invokespecial #100                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         42: athrow\n         43: iload_0\n         44: sipush        128\n         47: if_icmpge     53\n         50: iload_0\n         51: i2b\n         52: ireturn\n@@ -699,98 +699,98 @@\n \n   public static java.util.Date fromDosTime(org.apache.commons.compress.archivers.zip.ZipLong);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipLong;)Ljava/util/Date;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=1\n          0: aload_0\n-         1: invokevirtual #39                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+         1: invokevirtual #114                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n          4: lstore_1\n-         5: new           #40                 // class java/util/Date\n+         5: new           #10                 // class java/util/Date\n          8: dup\n          9: lload_1\n-        10: invokestatic  #41                 // Method dosToJavaTime:(J)J\n-        13: invokespecial #42                 // Method java/util/Date.\"<init>\":(J)V\n+        10: invokestatic  #117                // Method dosToJavaTime:(J)J\n+        13: invokespecial #121                // Method java/util/Date.\"<init>\":(J)V\n         16: areturn\n       LineNumberTable:\n         line 205: 0\n         line 206: 5\n \n   public static long dosToJavaTime(long);\n     descriptor: (J)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=3, args_size=1\n-         0: invokestatic  #7                  // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+         0: invokestatic  #27                 // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;\n          3: astore_2\n          4: aload_2\n          5: iconst_1\n          6: lload_0\n          7: bipush        25\n          9: lshr\n-        10: ldc2_w        #43                 // long 127l\n+        10: ldc2_w        #123                // long 127l\n         13: land\n         14: l2i\n         15: sipush        1980\n         18: iadd\n-        19: invokevirtual #45                 // Method java/util/Calendar.set:(II)V\n+        19: invokevirtual #125                // Method java/util/Calendar.set:(II)V\n         22: aload_2\n         23: iconst_2\n         24: lload_0\n         25: bipush        21\n         27: lshr\n-        28: ldc2_w        #46                 // long 15l\n+        28: ldc2_w        #129                // long 15l\n         31: land\n         32: l2i\n         33: iconst_1\n         34: isub\n-        35: invokevirtual #45                 // Method java/util/Calendar.set:(II)V\n+        35: invokevirtual #125                // Method java/util/Calendar.set:(II)V\n         38: aload_2\n         39: iconst_5\n         40: lload_0\n         41: bipush        16\n         43: lshr\n         44: l2i\n         45: bipush        31\n         47: iand\n-        48: invokevirtual #45                 // Method java/util/Calendar.set:(II)V\n+        48: invokevirtual #125                // Method java/util/Calendar.set:(II)V\n         51: aload_2\n         52: bipush        11\n         54: lload_0\n         55: bipush        11\n         57: lshr\n         58: l2i\n         59: bipush        31\n         61: iand\n-        62: invokevirtual #45                 // Method java/util/Calendar.set:(II)V\n+        62: invokevirtual #125                // Method java/util/Calendar.set:(II)V\n         65: aload_2\n         66: bipush        12\n         68: lload_0\n         69: iconst_5\n         70: lshr\n         71: l2i\n         72: bipush        63\n         74: iand\n-        75: invokevirtual #45                 // Method java/util/Calendar.set:(II)V\n+        75: invokevirtual #125                // Method java/util/Calendar.set:(II)V\n         78: aload_2\n         79: bipush        13\n         81: lload_0\n         82: iconst_1\n         83: lshl\n         84: l2i\n         85: bipush        62\n         87: iand\n-        88: invokevirtual #45                 // Method java/util/Calendar.set:(II)V\n+        88: invokevirtual #125                // Method java/util/Calendar.set:(II)V\n         91: aload_2\n         92: bipush        14\n         94: iconst_0\n-        95: invokevirtual #45                 // Method java/util/Calendar.set:(II)V\n+        95: invokevirtual #125                // Method java/util/Calendar.set:(II)V\n         98: aload_2\n-        99: invokevirtual #48                 // Method java/util/Calendar.getTime:()Ljava/util/Date;\n-       102: invokevirtual #3                  // Method java/util/Date.getTime:()J\n+        99: invokevirtual #131                // Method java/util/Calendar.getTime:()Ljava/util/Date;\n+       102: invokevirtual #9                  // Method java/util/Date.getTime:()J\n        105: lreturn\n       LineNumberTable:\n         line 216: 0\n         line 218: 4\n         line 219: 22\n         line 220: 38\n         line 221: 51\n@@ -801,66 +801,66 @@\n \n   static void setNameAndCommentFromExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, byte[], byte[]);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=9, args_size=3\n          0: aload_0\n-         1: getstatic     #49                 // Field org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-         4: invokevirtual #50                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+         1: getstatic     #134                // Field org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         4: invokevirtual #140                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n          7: astore_3\n          8: aload_3\n-         9: instanceof    #51                 // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+         9: instanceof    #135                // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n         12: ifeq          22\n         15: aload_3\n-        16: checkcast     #51                 // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+        16: checkcast     #135                // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n         19: goto          23\n         22: aconst_null\n         23: astore        4\n         25: aload         4\n         27: aload_1\n-        28: invokestatic  #52                 // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+        28: invokestatic  #146                // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n         31: astore        5\n         33: aload         5\n         35: ifnull        51\n         38: aload_0\n         39: aload         5\n-        41: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n+        41: invokevirtual #150                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n         44: aload_0\n-        45: getstatic     #54                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-        48: invokevirtual #55                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+        45: getstatic     #153                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+        48: invokevirtual #159                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n         51: aload_2\n         52: ifnull        114\n         55: aload_2\n         56: arraylength\n         57: ifle          114\n         60: aload_0\n-        61: getstatic     #56                 // Field org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-        64: invokevirtual #50                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+        61: getstatic     #163                // Field org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+        64: invokevirtual #140                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n         67: astore        6\n         69: aload         6\n-        71: instanceof    #57                 // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+        71: instanceof    #164                // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n         74: ifeq          85\n         77: aload         6\n-        79: checkcast     #57                 // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+        79: checkcast     #164                // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n         82: goto          86\n         85: aconst_null\n         86: astore        7\n         88: aload         7\n         90: aload_2\n-        91: invokestatic  #52                 // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+        91: invokestatic  #146                // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n         94: astore        8\n         96: aload         8\n         98: ifnull        114\n        101: aload_0\n        102: aload         8\n-       104: invokevirtual #58                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n+       104: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n        107: aload_0\n-       108: getstatic     #59                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-       111: invokevirtual #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+       108: getstatic     #171                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+       111: invokevirtual #176                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n        114: return\n       LineNumberTable:\n         line 237: 0\n         line 238: 8\n         line 239: 15\n         line 240: 25\n         line 242: 33\n@@ -896,33 +896,33 @@\n   private static java.lang.String getUnicodeStringIfOriginalMatches(org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField, byte[]);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=2\n          0: aload_0\n          1: ifnull        46\n-         4: new           #61                 // class java/util/zip/CRC32\n+         4: new           #180                // class java/util/zip/CRC32\n          7: dup\n-         8: invokespecial #62                 // Method java/util/zip/CRC32.\"<init>\":()V\n+         8: invokespecial #182                // Method java/util/zip/CRC32.\"<init>\":()V\n         11: astore_2\n         12: aload_2\n         13: aload_1\n-        14: invokevirtual #63                 // Method java/util/zip/CRC32.update:([B)V\n+        14: invokevirtual #183                // Method java/util/zip/CRC32.update:([B)V\n         17: aload_2\n-        18: invokevirtual #64                 // Method java/util/zip/CRC32.getValue:()J\n+        18: invokevirtual #186                // Method java/util/zip/CRC32.getValue:()J\n         21: lstore_3\n         22: lload_3\n         23: aload_0\n-        24: invokevirtual #65                 // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n+        24: invokevirtual #187                // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n         27: lcmp\n         28: ifne          46\n-        31: getstatic     #66                 // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        31: getstatic     #192                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         34: aload_0\n-        35: invokevirtual #67                 // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n-        38: invokeinterface #68,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        35: invokevirtual #198                // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n+        38: invokeinterface #202,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         43: areturn\n         44: astore        5\n         46: aconst_null\n         47: areturn\n       Exception table:\n          from    to  target type\n             31    43    44   Class java/io/IOException\n@@ -951,15 +951,15 @@\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: ifnull        11\n          4: aload_0\n          5: aload_0\n          6: arraylength\n-         7: invokestatic  #70                 // Method java/util/Arrays.copyOf:([BI)[B\n+         7: invokestatic  #210                // Method java/util/Arrays.copyOf:([BI)[B\n         10: areturn\n         11: aconst_null\n         12: areturn\n       LineNumberTable:\n         line 294: 0\n         line 295: 4\n         line 297: 11\n@@ -975,33 +975,33 @@\n          1: ifnull        13\n          4: aload_0\n          5: iconst_0\n          6: aload_1\n          7: iload_2\n          8: aload_0\n          9: arraylength\n-        10: invokestatic  #71                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        10: invokestatic  #216                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         13: return\n       LineNumberTable:\n         line 301: 0\n         line 302: 4\n         line 304: 13\n       StackMapTable: number_of_entries = 1\n         frame_type = 13 /* same */\n \n   static boolean canHandleEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokestatic  #72                 // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+         1: invokestatic  #222                // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n          4: ifeq          18\n          7: aload_0\n-         8: invokestatic  #73                 // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+         8: invokestatic  #226                // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         11: ifeq          18\n         14: iconst_1\n         15: goto          19\n         18: iconst_0\n         19: ireturn\n       LineNumberTable:\n         line 311: 0\n@@ -1012,16 +1012,16 @@\n \n   private static boolean supportsEncryptionOf(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #74                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-         4: invokevirtual #75                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n+         1: invokevirtual #229                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+         4: invokevirtual #233                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n          7: ifne          14\n         10: iconst_1\n         11: goto          15\n         14: iconst_0\n         15: ireturn\n       LineNumberTable:\n         line 321: 0\n@@ -1032,39 +1032,39 @@\n \n   private static boolean supportsMethodOf(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+         1: invokevirtual #239                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n          4: ifeq          68\n          7: aload_0\n-         8: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        11: getstatic     #77                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        14: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+         8: invokevirtual #239                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        11: getstatic     #242                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        14: invokevirtual #248                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         17: if_icmpeq     68\n         20: aload_0\n-        21: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        24: getstatic     #79                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        27: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        21: invokevirtual #239                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        24: getstatic     #251                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        27: invokevirtual #248                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         30: if_icmpeq     68\n         33: aload_0\n-        34: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        34: invokevirtual #239                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         37: bipush        8\n         39: if_icmpeq     68\n         42: aload_0\n-        43: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        46: getstatic     #81                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        49: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        43: invokevirtual #239                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        46: getstatic     #256                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        49: invokevirtual #248                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         52: if_icmpeq     68\n         55: aload_0\n-        56: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        59: getstatic     #82                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        62: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        56: invokevirtual #239                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        59: getstatic     #259                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        62: invokevirtual #248                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         65: if_icmpne     72\n         68: iconst_1\n         69: goto          73\n         72: iconst_0\n         73: ireturn\n       LineNumberTable:\n         line 331: 0\n@@ -1083,42 +1083,42 @@\n \n   static void checkRequestedFeatures(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: invokestatic  #72                 // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+         1: invokestatic  #222                // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n          4: ifne          19\n-         7: new           #83                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+         7: new           #262                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n         10: dup\n-        11: getstatic     #84                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        11: getstatic     #264                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n         14: aload_0\n-        15: invokespecial #85                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        15: invokespecial #270                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         18: athrow\n         19: aload_0\n-        20: invokestatic  #73                 // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        20: invokestatic  #226                // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         23: ifne          60\n         26: aload_0\n-        27: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        30: invokestatic  #86                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        27: invokevirtual #239                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        30: invokestatic  #273                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n         33: astore_1\n         34: aload_1\n         35: ifnonnull     50\n-        38: new           #83                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+        38: new           #262                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n         41: dup\n-        42: getstatic     #87                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        42: getstatic     #277                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n         45: aload_0\n-        46: invokespecial #85                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        46: invokespecial #270                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         49: athrow\n-        50: new           #83                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+        50: new           #262                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n         53: dup\n         54: aload_1\n         55: aload_0\n-        56: invokespecial #88                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        56: invokespecial #280                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         59: athrow\n         60: return\n       LineNumberTable:\n         line 345: 0\n         line 346: 7\n         line 350: 19\n         line 351: 26\n@@ -1137,19 +1137,19 @@\n       throws org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n-         0: ldc2_w        #89                 // long 8448l\n-         3: invokestatic  #91                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-         6: putstatic     #12                 // Field DOS_TIME_MIN:[B\n+         0: ldc2_w        #283                // long 8448l\n+         3: invokestatic  #285                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+         6: putstatic     #44                 // Field DOS_TIME_MIN:[B\n          9: return\n       LineNumberTable:\n         line 36: 0\n }\n SourceFile: \"ZipUtil.java\"\n InnerClasses:\n-  public static final #270= #188 of #183; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static final #279= #194 of #183; // CommentSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static #312= #223 of #83;        // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  public static final #318= #154 of #141; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static final #319= #172 of #141; // CommentSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static #320= #265 of #262;       // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n"}]}
