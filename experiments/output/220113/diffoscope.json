{"diffoscope-json-version": 1, "source1": "first/MutableExceptionCheck.class", "source2": "second/MutableExceptionCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,80 +24,75 @@\n         this.format = this.extendedClassNameFormat;\n     }\n     \n     public void setExtendedClassNameFormat(final Pattern extendedClassNameFormat) {\n         this.extendedClassNameFormat = extendedClassNameFormat;\n     }\n     \n-    public void setFormat(final Pattern pattern) {\n-        this.format = pattern;\n+    public void setFormat(final Pattern format) {\n+        this.format = format;\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 14, 10 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 14: {\n-                this.visitClassDef(ast);\n+                this.visitClassDef(detailAST);\n                 break;\n             }\n             case 10: {\n-                this.visitVariableDef(ast);\n+                this.visitVariableDef(detailAST);\n                 break;\n             }\n             default: {\n-                throw new IllegalStateException(ast.toString());\n+                throw new IllegalStateException(detailAST.toString());\n             }\n         }\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        if (ast.getType() == 14) {\n+    public void leaveToken(final DetailAST detailAST) {\n+        if (detailAST.getType() == 14) {\n             this.leaveClassDef();\n         }\n     }\n     \n-    private void visitClassDef(final DetailAST ast) {\n+    private void visitClassDef(final DetailAST detailAST) {\n         this.checkingStack.push(Boolean.valueOf(this.checking));\n-        this.checking = (this.isNamedAsException(ast) && this.isExtendedClassNamedAsException(ast));\n+        this.checking = (this.isNamedAsException(detailAST) && this.isExtendedClassNamedAsException(detailAST));\n     }\n     \n     private void leaveClassDef() {\n         this.checking = Boolean.valueOf(this.checkingStack.pop());\n     }\n     \n-    private void visitVariableDef(final DetailAST ast) {\n-        if (this.checking && ast.getParent().getType() == 6) {\n-            final DetailAST modifiersAST = ast.findFirstToken(5);\n-            if (modifiersAST.findFirstToken(39) == null) {\n-                this.log(ast, \"mutable.exception\", new Object[] { ast.findFirstToken(58).getText() });\n-            }\n+    private void visitVariableDef(final DetailAST detailAST) {\n+        if (this.checking && detailAST.getParent().getType() == 6 && detailAST.findFirstToken(5).findFirstToken(39) == null) {\n+            this.log(detailAST, \"mutable.exception\", new Object[] { detailAST.findFirstToken(58).getText() });\n         }\n     }\n     \n-    private boolean isNamedAsException(final DetailAST ast) {\n-        final String className = ast.findFirstToken(58).getText();\n-        return this.format.matcher(className).find();\n+    private boolean isNamedAsException(final DetailAST detailAST) {\n+        return this.format.matcher(detailAST.findFirstToken(58).getText()).find();\n     }\n     \n-    private boolean isExtendedClassNamedAsException(final DetailAST ast) {\n-        boolean result = false;\n-        final DetailAST extendsClause = ast.findFirstToken(18);\n-        if (extendsClause != null) {\n-            DetailAST currentNode;\n-            for (currentNode = extendsClause; currentNode.getLastChild() != null; currentNode = currentNode.getLastChild()) {}\n-            final String extendedClassName = currentNode.getText();\n-            result = this.extendedClassNameFormat.matcher(extendedClassName).matches();\n+    private boolean isExtendedClassNamedAsException(final DetailAST detailAST) {\n+        boolean matches = false;\n+        final DetailAST firstToken = detailAST.findFirstToken(18);\n+        if (firstToken != null) {\n+            DetailAST lastChild;\n+            for (lastChild = firstToken; lastChild.getLastChild() != null; lastChild = lastChild.getLastChild()) {}\n+            matches = this.extendedClassNameFormat.matcher(lastChild.getText()).matches();\n         }\n-        return result;\n+        return matches;\n     }\n }\n"}]}
