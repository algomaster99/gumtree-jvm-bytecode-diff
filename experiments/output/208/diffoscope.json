{"diffoscope-json-version": 1, "source1": "first/ArrayElementValue.class", "source2": "second/ArrayElementValue.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,117 +1,115 @@\n-  SHA-256 checksum 6d3f596b79bf8f2b60e047c5ec47cf0fd709f2233984cdbc392b2a5dfe0cee48\n+  SHA-256 checksum 3eb894868b6bb590ab9134a7b920aec3d04b57402df8f007d71080797ae5631e\n   Compiled from \"ArrayElementValue.java\"\n public class org.apache.bcel.classfile.ArrayElementValue extends org.apache.bcel.classfile.ElementValue\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #23                         // org/apache/bcel/classfile/ArrayElementValue\n   super_class: #11                        // org/apache/bcel/classfile/ElementValue\n   interfaces: 0, fields: 1, methods: 6, attributes: 1\n Constant pool:\n-    #1 = Class              #63           // java/lang/StringBuilder\n-    #2 = Methodref          #1.#64        // java/lang/StringBuilder.\"<init>\":()V\n-    #3 = String             #65           // {\n-    #4 = Methodref          #1.#66        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #5 = Fieldref           #23.#67       // org/apache/bcel/classfile/ArrayElementValue.evalues:[Lorg/apache/bcel/classfile/ElementValue;\n-    #6 = Methodref          #1.#68        // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-    #7 = String             #69           // ,\n-    #8 = String             #70           // }\n-    #9 = Methodref          #1.#71        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #10 = Methodref          #11.#72       // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #11 = Class              #73           // org/apache/bcel/classfile/ElementValue\n-   #12 = Class              #74           // java/lang/RuntimeException\n-   #13 = String             #75           // Only element values of type array can be built with this ctor - type specified:\n-   #14 = Methodref          #1.#76        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #15 = Methodref          #12.#77       // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n-   #16 = Methodref          #11.#78       // org/apache/bcel/classfile/ElementValue.getType:()I\n-   #17 = Methodref          #79.#80       // java/io/DataOutputStream.writeByte:(I)V\n-   #18 = Methodref          #79.#81       // java/io/DataOutputStream.writeShort:(I)V\n-   #19 = Methodref          #11.#82       // org/apache/bcel/classfile/ElementValue.dump:(Ljava/io/DataOutputStream;)V\n-   #20 = String             #83           // [\n-   #21 = Methodref          #11.#84       // org/apache/bcel/classfile/ElementValue.stringifyValue:()Ljava/lang/String;\n-   #22 = String             #85           // ]\n-   #23 = Class              #86           // org/apache/bcel/classfile/ArrayElementValue\n-   #24 = Utf8               evalues\n-   #25 = Utf8               [Lorg/apache/bcel/classfile/ElementValue;\n-   #26 = Utf8               toString\n-   #27 = Utf8               ()Ljava/lang/String;\n-   #28 = Utf8               Code\n-   #29 = Utf8               LineNumberTable\n-   #30 = Utf8               LocalVariableTable\n-   #31 = Utf8               i\n-   #32 = Utf8               I\n-   #33 = Utf8               this\n-   #34 = Utf8               Lorg/apache/bcel/classfile/ArrayElementValue;\n-   #35 = Utf8               sb\n-   #36 = Utf8               Ljava/lang/StringBuilder;\n-   #37 = Utf8               StackMapTable\n-   #38 = Class              #63           // java/lang/StringBuilder\n-   #39 = Utf8               <init>\n-   #40 = Utf8               (I[Lorg/apache/bcel/classfile/ElementValue;Lorg/apache/bcel/classfile/ConstantPool;)V\n-   #41 = Utf8               type\n-   #42 = Utf8               datums\n-   #43 = Utf8               cpool\n-   #44 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n-   #45 = Class              #86           // org/apache/bcel/classfile/ArrayElementValue\n-   #46 = Class              #25           // \"[Lorg/apache/bcel/classfile/ElementValue;\"\n-   #47 = Class              #87           // org/apache/bcel/classfile/ConstantPool\n-   #48 = Utf8               dump\n-   #49 = Utf8               (Ljava/io/DataOutputStream;)V\n-   #50 = Utf8               evalue\n-   #51 = Utf8               Lorg/apache/bcel/classfile/ElementValue;\n-   #52 = Utf8               dos\n-   #53 = Utf8               Ljava/io/DataOutputStream;\n-   #54 = Utf8               Exceptions\n-   #55 = Class              #88           // java/io/IOException\n-   #56 = Utf8               stringifyValue\n-   #57 = Utf8               getElementValuesArray\n-   #58 = Utf8               ()[Lorg/apache/bcel/classfile/ElementValue;\n-   #59 = Utf8               getElementValuesArraySize\n-   #60 = Utf8               ()I\n-   #61 = Utf8               SourceFile\n-   #62 = Utf8               ArrayElementValue.java\n-   #63 = Utf8               java/lang/StringBuilder\n-   #64 = NameAndType        #39:#89       // \"<init>\":()V\n-   #65 = Utf8               {\n-   #66 = NameAndType        #90:#91       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #67 = NameAndType        #24:#25       // evalues:[Lorg/apache/bcel/classfile/ElementValue;\n-   #68 = NameAndType        #90:#92       // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #69 = Utf8               ,\n-   #70 = Utf8               }\n-   #71 = NameAndType        #26:#27       // toString:()Ljava/lang/String;\n-   #72 = NameAndType        #39:#93       // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #73 = Utf8               org/apache/bcel/classfile/ElementValue\n-   #74 = Utf8               java/lang/RuntimeException\n-   #75 = Utf8               Only element values of type array can be built with this ctor - type specified:\n-   #76 = NameAndType        #90:#94       // append:(I)Ljava/lang/StringBuilder;\n-   #77 = NameAndType        #39:#95       // \"<init>\":(Ljava/lang/String;)V\n-   #78 = NameAndType        #96:#60       // getType:()I\n-   #79 = Class              #97           // java/io/DataOutputStream\n-   #80 = NameAndType        #98:#99       // writeByte:(I)V\n-   #81 = NameAndType        #100:#99      // writeShort:(I)V\n-   #82 = NameAndType        #48:#49       // dump:(Ljava/io/DataOutputStream;)V\n-   #83 = Utf8               [\n-   #84 = NameAndType        #56:#27       // stringifyValue:()Ljava/lang/String;\n-   #85 = Utf8               ]\n-   #86 = Utf8               org/apache/bcel/classfile/ArrayElementValue\n-   #87 = Utf8               org/apache/bcel/classfile/ConstantPool\n-   #88 = Utf8               java/io/IOException\n-   #89 = Utf8               ()V\n-   #90 = Utf8               append\n-   #91 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #92 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #93 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #94 = Utf8               (I)Ljava/lang/StringBuilder;\n-   #95 = Utf8               (Ljava/lang/String;)V\n-   #96 = Utf8               getType\n-   #97 = Utf8               java/io/DataOutputStream\n-   #98 = Utf8               writeByte\n-   #99 = Utf8               (I)V\n-  #100 = Utf8               writeShort\n+   #1 = Class              #61            // java/lang/StringBuilder\n+   #2 = Methodref          #1.#62         // java/lang/StringBuilder.\"<init>\":()V\n+   #3 = String             #63            // {\n+   #4 = Methodref          #1.#64         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #5 = Fieldref           #23.#65        // org/apache/bcel/classfile/ArrayElementValue.evalues:[Lorg/apache/bcel/classfile/ElementValue;\n+   #6 = Methodref          #1.#66         // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #7 = String             #67            // ,\n+   #8 = String             #68            // }\n+   #9 = Methodref          #1.#69         // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #10 = Methodref          #11.#70        // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+  #11 = Class              #71            // org/apache/bcel/classfile/ElementValue\n+  #12 = Class              #72            // java/lang/RuntimeException\n+  #13 = String             #73            // Only element values of type array can be built with this ctor - type specified:\n+  #14 = Methodref          #1.#74         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #15 = Methodref          #12.#75        // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n+  #16 = Methodref          #11.#76        // org/apache/bcel/classfile/ElementValue.getType:()I\n+  #17 = Methodref          #77.#78        // java/io/DataOutputStream.writeByte:(I)V\n+  #18 = Methodref          #77.#79        // java/io/DataOutputStream.writeShort:(I)V\n+  #19 = Methodref          #11.#80        // org/apache/bcel/classfile/ElementValue.dump:(Ljava/io/DataOutputStream;)V\n+  #20 = String             #81            // [\n+  #21 = Methodref          #11.#82        // org/apache/bcel/classfile/ElementValue.stringifyValue:()Ljava/lang/String;\n+  #22 = String             #83            // ]\n+  #23 = Class              #84            // org/apache/bcel/classfile/ArrayElementValue\n+  #24 = Utf8               evalues\n+  #25 = Utf8               [Lorg/apache/bcel/classfile/ElementValue;\n+  #26 = Utf8               toString\n+  #27 = Utf8               ()Ljava/lang/String;\n+  #28 = Utf8               Code\n+  #29 = Utf8               LineNumberTable\n+  #30 = Utf8               LocalVariableTable\n+  #31 = Utf8               i\n+  #32 = Utf8               I\n+  #33 = Utf8               this\n+  #34 = Utf8               Lorg/apache/bcel/classfile/ArrayElementValue;\n+  #35 = Utf8               sb\n+  #36 = Utf8               Ljava/lang/StringBuilder;\n+  #37 = Utf8               StackMapTable\n+  #38 = Utf8               <init>\n+  #39 = Utf8               (I[Lorg/apache/bcel/classfile/ElementValue;Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #40 = Utf8               type\n+  #41 = Utf8               datums\n+  #42 = Utf8               cpool\n+  #43 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n+  #44 = Class              #25            // \"[Lorg/apache/bcel/classfile/ElementValue;\"\n+  #45 = Class              #85            // org/apache/bcel/classfile/ConstantPool\n+  #46 = Utf8               dump\n+  #47 = Utf8               (Ljava/io/DataOutputStream;)V\n+  #48 = Utf8               evalue\n+  #49 = Utf8               Lorg/apache/bcel/classfile/ElementValue;\n+  #50 = Utf8               dos\n+  #51 = Utf8               Ljava/io/DataOutputStream;\n+  #52 = Utf8               Exceptions\n+  #53 = Class              #86            // java/io/IOException\n+  #54 = Utf8               stringifyValue\n+  #55 = Utf8               getElementValuesArray\n+  #56 = Utf8               ()[Lorg/apache/bcel/classfile/ElementValue;\n+  #57 = Utf8               getElementValuesArraySize\n+  #58 = Utf8               ()I\n+  #59 = Utf8               SourceFile\n+  #60 = Utf8               ArrayElementValue.java\n+  #61 = Utf8               java/lang/StringBuilder\n+  #62 = NameAndType        #38:#87        // \"<init>\":()V\n+  #63 = Utf8               {\n+  #64 = NameAndType        #88:#89        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #65 = NameAndType        #24:#25        // evalues:[Lorg/apache/bcel/classfile/ElementValue;\n+  #66 = NameAndType        #88:#90        // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #67 = Utf8               ,\n+  #68 = Utf8               }\n+  #69 = NameAndType        #26:#27        // toString:()Ljava/lang/String;\n+  #70 = NameAndType        #38:#91        // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+  #71 = Utf8               org/apache/bcel/classfile/ElementValue\n+  #72 = Utf8               java/lang/RuntimeException\n+  #73 = Utf8               Only element values of type array can be built with this ctor - type specified:\n+  #74 = NameAndType        #88:#92        // append:(I)Ljava/lang/StringBuilder;\n+  #75 = NameAndType        #38:#93        // \"<init>\":(Ljava/lang/String;)V\n+  #76 = NameAndType        #94:#58        // getType:()I\n+  #77 = Class              #95            // java/io/DataOutputStream\n+  #78 = NameAndType        #96:#97        // writeByte:(I)V\n+  #79 = NameAndType        #98:#97        // writeShort:(I)V\n+  #80 = NameAndType        #46:#47        // dump:(Ljava/io/DataOutputStream;)V\n+  #81 = Utf8               [\n+  #82 = NameAndType        #54:#27        // stringifyValue:()Ljava/lang/String;\n+  #83 = Utf8               ]\n+  #84 = Utf8               org/apache/bcel/classfile/ArrayElementValue\n+  #85 = Utf8               org/apache/bcel/classfile/ConstantPool\n+  #86 = Utf8               java/io/IOException\n+  #87 = Utf8               ()V\n+  #88 = Utf8               append\n+  #89 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #90 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #91 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n+  #92 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #93 = Utf8               (Ljava/lang/String;)V\n+  #94 = Utf8               getType\n+  #95 = Utf8               java/io/DataOutputStream\n+  #96 = Utf8               writeByte\n+  #97 = Utf8               (I)V\n+  #98 = Utf8               writeShort\n {\n   private final org.apache.bcel.classfile.ElementValue[] evalues;\n     descriptor: [Lorg/apache/bcel/classfile/ElementValue;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n"}]}
