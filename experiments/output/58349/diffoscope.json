{"diffoscope-json-version": 1, "source1": "first/IOUtils.class", "source2": "second/IOUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.commons.io;\n \n-import java.io.File;\n import org.apache.commons.io.output.AppendableWriter;\n import java.util.Iterator;\n import java.util.Collection;\n import org.apache.commons.io.output.StringBuilderWriter;\n import java.io.ByteArrayInputStream;\n import java.io.CharArrayWriter;\n import java.net.URI;\n@@ -35,14 +34,15 @@\n import java.io.BufferedReader;\n import java.io.Reader;\n import java.io.BufferedOutputStream;\n import java.io.OutputStream;\n import java.util.Objects;\n import java.io.BufferedInputStream;\n import java.io.InputStream;\n+import java.io.File;\n \n public class IOUtils\n {\n     private static final byte[] EMPTY_BYTE_ARRAY;\n     public static final int DEFAULT_BUFFER_SIZE = 8192;\n     public static final char DIR_SEPARATOR;\n     public static final char DIR_SEPARATOR_UNIX = '/';\n@@ -51,14 +51,21 @@\n     @Deprecated\n     public static final String LINE_SEPARATOR;\n     public static final String LINE_SEPARATOR_UNIX = \"\\n\";\n     public static final String LINE_SEPARATOR_WINDOWS = \"\\r\\n\";\n     private static final byte[] SKIP_BYTE_BUFFER;\n     private static char[] SKIP_CHAR_BUFFER;\n     \n+    static {\n+        EMPTY_BYTE_ARRAY = new byte[0];\n+        DIR_SEPARATOR = File.separatorChar;\n+        LINE_SEPARATOR = System.lineSeparator();\n+        SKIP_BYTE_BUFFER = new byte[8192];\n+    }\n+    \n     public static BufferedInputStream buffer(final InputStream inputStream) {\n         Objects.requireNonNull(inputStream, \"inputStream\");\n         return (inputStream instanceof BufferedInputStream) ? ((BufferedInputStream)inputStream) : new BufferedInputStream(inputStream);\n     }\n     \n     public static BufferedInputStream buffer(final InputStream inputStream, final int size) {\n         Objects.requireNonNull(inputStream, \"inputStream\");\n@@ -573,16 +580,16 @@\n         if (toSkip < 0L) {\n             throw new IllegalArgumentException(\"Skip count must be non-negative, actual: \" + toSkip);\n         }\n         final ByteBuffer skipByteBuffer = ByteBuffer.allocate((int)Math.min(toSkip, IOUtils.SKIP_BYTE_BUFFER.length));\n         long remain;\n         int n;\n         for (remain = toSkip; remain > 0L; remain -= n) {\n-            skipByteBuffer.position();\n-            skipByteBuffer.limit();\n+            skipByteBuffer.position(0);\n+            skipByteBuffer.limit((int)Math.min(remain, IOUtils.SKIP_BYTE_BUFFER.length));\n             n = input.read(skipByteBuffer);\n             if (n == -1) {\n                 break;\n             }\n         }\n         return toSkip - remain;\n     }\n@@ -645,17 +652,38 @@\n     }\n     \n     public static BufferedReader toBufferedReader(final Reader reader, final int size) {\n         return (reader instanceof BufferedReader) ? ((BufferedReader)reader) : new BufferedReader(reader, size);\n     }\n     \n     public static byte[] toByteArray(final InputStream input) throws IOException {\n-        try (final ByteArrayOutputStream output = new ByteArrayOutputStream()) {\n-            copy(input, (OutputStream)output);\n-            return output.toByteArray();\n+        Throwable t = null;\n+        try {\n+            final ByteArrayOutputStream output = new ByteArrayOutputStream();\n+            try {\n+                copy(input, (OutputStream)output);\n+                return output.toByteArray();\n+            }\n+            finally {\n+                if (output != null) {\n+                    output.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static byte[] toByteArray(final InputStream input, final int size) throws IOException {\n         if (size < 0) {\n             throw new IllegalArgumentException(\"Size must be equal or greater than zero: \" + size);\n         }\n@@ -681,17 +709,38 @@\n     \n     @Deprecated\n     public static byte[] toByteArray(final Reader input) throws IOException {\n         return toByteArray(input, Charset.defaultCharset());\n     }\n     \n     public static byte[] toByteArray(final Reader input, final Charset charset) throws IOException {\n-        try (final ByteArrayOutputStream output = new ByteArrayOutputStream()) {\n-            copy(input, (OutputStream)output, charset);\n-            return output.toByteArray();\n+        Throwable t = null;\n+        try {\n+            final ByteArrayOutputStream output = new ByteArrayOutputStream();\n+            try {\n+                copy(input, (OutputStream)output, charset);\n+                return output.toByteArray();\n+            }\n+            finally {\n+                if (output != null) {\n+                    output.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static byte[] toByteArray(final Reader input, final String charsetName) throws IOException {\n         return toByteArray(input, Charsets.toCharset(charsetName));\n     }\n     \n@@ -711,16 +760,37 @@\n         }\n         finally {\n             close(conn);\n         }\n     }\n     \n     public static byte[] toByteArray(final URLConnection urlConn) throws IOException {\n-        try (final InputStream inputStream = urlConn.getInputStream()) {\n-            return toByteArray(inputStream);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = urlConn.getInputStream();\n+            try {\n+                return toByteArray(inputStream);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public static char[] toCharArray(final InputStream is) throws IOException {\n         return toCharArray(is, Charset.defaultCharset());\n     }\n@@ -779,28 +849,70 @@\n     \n     @Deprecated\n     public static String toString(final InputStream input) throws IOException {\n         return toString(input, Charset.defaultCharset());\n     }\n     \n     public static String toString(final InputStream input, final Charset charset) throws IOException {\n-        try (final StringBuilderWriter sw = new StringBuilderWriter()) {\n-            copy(input, (Writer)sw, charset);\n-            return sw.toString();\n+        Throwable t = null;\n+        try {\n+            final StringBuilderWriter sw = new StringBuilderWriter();\n+            try {\n+                copy(input, (Writer)sw, charset);\n+                return sw.toString();\n+            }\n+            finally {\n+                if (sw != null) {\n+                    sw.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static String toString(final InputStream input, final String charsetName) throws IOException {\n         return toString(input, Charsets.toCharset(charsetName));\n     }\n     \n     public static String toString(final Reader input) throws IOException {\n-        try (final StringBuilderWriter sw = new StringBuilderWriter()) {\n-            copy(input, (Writer)sw);\n-            return sw.toString();\n+        Throwable t = null;\n+        try {\n+            final StringBuilderWriter sw = new StringBuilderWriter();\n+            try {\n+                copy(input, (Writer)sw);\n+                return sw.toString();\n+            }\n+            finally {\n+                if (sw != null) {\n+                    sw.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public static String toString(final URI uri) throws IOException {\n         return toString(uri, Charset.defaultCharset());\n     }\n@@ -815,16 +927,37 @@\n     \n     @Deprecated\n     public static String toString(final URL url) throws IOException {\n         return toString(url, Charset.defaultCharset());\n     }\n     \n     public static String toString(final URL url, final Charset encoding) throws IOException {\n-        try (final InputStream inputStream = url.openStream()) {\n-            return toString(inputStream, encoding);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = url.openStream();\n+            try {\n+                return toString(inputStream, encoding);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static String toString(final URL url, final String charsetName) throws IOException {\n         return toString(url, Charsets.toCharset(charsetName));\n     }\n     \n@@ -997,15 +1130,8 @@\n             return (Writer)appendable;\n         }\n         if (appendable instanceof StringBuilder) {\n             return (Writer)new StringBuilderWriter((StringBuilder)appendable);\n         }\n         return (Writer)new AppendableWriter(appendable);\n     }\n-    \n-    static {\n-        EMPTY_BYTE_ARRAY = new byte[0];\n-        DIR_SEPARATOR = File.separatorChar;\n-        LINE_SEPARATOR = System.lineSeparator();\n-        SKIP_BYTE_BUFFER = new byte[8192];\n-    }\n }\n"}]}
