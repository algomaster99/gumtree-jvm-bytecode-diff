{"diffoscope-json-version": 1, "source1": "first/CompositeFileComparator.class", "source2": "second/CompositeFileComparator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,41 +10,41 @@\n \n public class CompositeFileComparator extends AbstractFileComparator implements Serializable\n {\n     private static final Comparator<?>[] EMPTY_COMPARATOR_ARRAY;\n     private static final long serialVersionUID = -2224170307287243428L;\n     private final Comparator<File>[] delegates;\n     \n-    public CompositeFileComparator(final Comparator<File>... delegates) {\n-        this.delegates = ((delegates == null) ? this.emptyArray() : ((Comparator[])delegates.clone()));\n+    public CompositeFileComparator(final Comparator<File>... array) {\n+        this.delegates = ((array == null) ? this.emptyArray() : ((Comparator[])array.clone()));\n     }\n     \n-    public CompositeFileComparator(final Iterable<Comparator<File>> delegates) {\n-        this.delegates = ((delegates == null) ? this.emptyArray() : ((Comparator[])StreamSupport.stream(delegates.spliterator(), false).toArray(Comparator[]::new)));\n+    public CompositeFileComparator(final Iterable<Comparator<File>> iterable) {\n+        this.delegates = ((iterable == null) ? this.emptyArray() : ((Comparator[])StreamSupport.stream(iterable.spliterator(), false).toArray(Comparator[]::new)));\n     }\n     \n-    public int compare(final File file1, final File file2) {\n-        return Integer.valueOf(Stream.of(this.delegates).map(delegate -> Integer.valueOf(delegate.compare(file1, file2))).filter(r -> r != 0).findFirst().orElse(Integer.valueOf(0)));\n+    public int compare(final File file, final File file2) {\n+        return Integer.valueOf(Stream.of(this.delegates).map(comparator -> Integer.valueOf(comparator.compare(file3, file4))).filter(n -> n != 0).findFirst().orElse(Integer.valueOf(0)));\n     }\n     \n     private Comparator<File>[] emptyArray() {\n         return (Comparator<File>[])CompositeFileComparator.EMPTY_COMPARATOR_ARRAY;\n     }\n     \n     public String toString() {\n-        final StringBuilder builder = new StringBuilder();\n-        builder.append(super.toString());\n-        builder.append('{');\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append('{');\n         for (int i = 0; i < this.delegates.length; ++i) {\n             if (i > 0) {\n-                builder.append(',');\n+                sb.append(',');\n             }\n-            builder.append(this.delegates[i]);\n+            sb.append(this.delegates[i]);\n         }\n-        builder.append('}');\n-        return builder.toString();\n+        sb.append('}');\n+        return sb.toString();\n     }\n     \n     static {\n         EMPTY_COMPARATOR_ARRAY = new Comparator[0];\n     }\n }\n"}]}
