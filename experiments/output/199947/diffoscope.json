{"diffoscope-json-version": 1, "source1": "first/Repository.class", "source2": "second/Repository.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,105 +6,105 @@\n import org.apache.bcel.util.ClassPath;\n import org.apache.bcel.classfile.JavaClass;\n \n public abstract class Repository\n {\n     private static org.apache.bcel.util.Repository repository;\n     \n-    public static JavaClass addClass(final JavaClass clazz) {\n-        final JavaClass old = Repository.repository.findClass(clazz.getClassName());\n-        Repository.repository.storeClass(clazz);\n-        return old;\n+    public static JavaClass addClass(final JavaClass javaClass) {\n+        final JavaClass class1 = Repository.repository.findClass(javaClass.getClassName());\n+        Repository.repository.storeClass(javaClass);\n+        return class1;\n     }\n     \n     public static void clearCache() {\n         Repository.repository.clear();\n     }\n     \n-    public static JavaClass[] getInterfaces(final JavaClass clazz) throws ClassNotFoundException {\n-        return clazz.getAllInterfaces();\n+    public static JavaClass[] getInterfaces(final JavaClass javaClass) throws ClassNotFoundException {\n+        return javaClass.getAllInterfaces();\n     }\n     \n-    public static JavaClass[] getInterfaces(final String className) throws ClassNotFoundException {\n-        return getInterfaces(lookupClass(className));\n+    public static JavaClass[] getInterfaces(final String s) throws ClassNotFoundException {\n+        return getInterfaces(lookupClass(s));\n     }\n     \n     public static org.apache.bcel.util.Repository getRepository() {\n         return Repository.repository;\n     }\n     \n-    public static JavaClass[] getSuperClasses(final JavaClass clazz) throws ClassNotFoundException {\n-        return clazz.getSuperClasses();\n+    public static JavaClass[] getSuperClasses(final JavaClass javaClass) throws ClassNotFoundException {\n+        return javaClass.getSuperClasses();\n     }\n     \n-    public static JavaClass[] getSuperClasses(final String className) throws ClassNotFoundException {\n-        return getSuperClasses(lookupClass(className));\n+    public static JavaClass[] getSuperClasses(final String s) throws ClassNotFoundException {\n+        return getSuperClasses(lookupClass(s));\n     }\n     \n-    public static boolean implementationOf(final JavaClass clazz, final JavaClass inter) throws ClassNotFoundException {\n-        return clazz.implementationOf(inter);\n+    public static boolean implementationOf(final JavaClass javaClass, final JavaClass javaClass2) throws ClassNotFoundException {\n+        return javaClass.implementationOf(javaClass2);\n     }\n     \n-    public static boolean implementationOf(final JavaClass clazz, final String inter) throws ClassNotFoundException {\n-        return implementationOf(clazz, lookupClass(inter));\n+    public static boolean implementationOf(final JavaClass javaClass, final String s) throws ClassNotFoundException {\n+        return implementationOf(javaClass, lookupClass(s));\n     }\n     \n-    public static boolean implementationOf(final String clazz, final JavaClass inter) throws ClassNotFoundException {\n-        return implementationOf(lookupClass(clazz), inter);\n+    public static boolean implementationOf(final String s, final JavaClass javaClass) throws ClassNotFoundException {\n+        return implementationOf(lookupClass(s), javaClass);\n     }\n     \n-    public static boolean implementationOf(final String clazz, final String inter) throws ClassNotFoundException {\n-        return implementationOf(lookupClass(clazz), lookupClass(inter));\n+    public static boolean implementationOf(final String s, final String s2) throws ClassNotFoundException {\n+        return implementationOf(lookupClass(s), lookupClass(s2));\n     }\n     \n-    public static boolean instanceOf(final JavaClass clazz, final JavaClass superclass) throws ClassNotFoundException {\n-        return clazz.instanceOf(superclass);\n+    public static boolean instanceOf(final JavaClass javaClass, final JavaClass javaClass2) throws ClassNotFoundException {\n+        return javaClass.instanceOf(javaClass2);\n     }\n     \n-    public static boolean instanceOf(final JavaClass clazz, final String superclass) throws ClassNotFoundException {\n-        return instanceOf(clazz, lookupClass(superclass));\n+    public static boolean instanceOf(final JavaClass javaClass, final String s) throws ClassNotFoundException {\n+        return instanceOf(javaClass, lookupClass(s));\n     }\n     \n-    public static boolean instanceOf(final String clazz, final JavaClass superclass) throws ClassNotFoundException {\n-        return instanceOf(lookupClass(clazz), superclass);\n+    public static boolean instanceOf(final String s, final JavaClass javaClass) throws ClassNotFoundException {\n+        return instanceOf(lookupClass(s), javaClass);\n     }\n     \n-    public static boolean instanceOf(final String clazz, final String superclass) throws ClassNotFoundException {\n-        return instanceOf(lookupClass(clazz), lookupClass(superclass));\n+    public static boolean instanceOf(final String s, final String s2) throws ClassNotFoundException {\n+        return instanceOf(lookupClass(s), lookupClass(s2));\n     }\n     \n     public static JavaClass lookupClass(final Class<?> clazz) throws ClassNotFoundException {\n         return Repository.repository.loadClass((Class)clazz);\n     }\n     \n-    public static JavaClass lookupClass(final String className) throws ClassNotFoundException {\n-        return Repository.repository.loadClass(className);\n+    public static JavaClass lookupClass(final String s) throws ClassNotFoundException {\n+        return Repository.repository.loadClass(s);\n     }\n     \n-    public static ClassPath.ClassFile lookupClassFile(final String className) {\n-        try (final ClassPath path = Repository.repository.getClassPath()) {\n-            if (path == null) {\n+    public static ClassPath.ClassFile lookupClassFile(final String s) {\n+        try (final ClassPath classPath = Repository.repository.getClassPath()) {\n+            if (classPath == null) {\n                 return null;\n             }\n-            return path.getClassFile(className);\n+            return classPath.getClassFile(s);\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             return null;\n         }\n     }\n     \n-    public static void removeClass(final JavaClass clazz) {\n-        Repository.repository.removeClass(clazz);\n+    public static void removeClass(final JavaClass javaClass) {\n+        Repository.repository.removeClass(javaClass);\n     }\n     \n-    public static void removeClass(final String clazz) {\n-        Repository.repository.removeClass(Repository.repository.findClass(clazz));\n+    public static void removeClass(final String s) {\n+        Repository.repository.removeClass(Repository.repository.findClass(s));\n     }\n     \n-    public static void setRepository(final org.apache.bcel.util.Repository rep) {\n-        Repository.repository = rep;\n+    public static void setRepository(final org.apache.bcel.util.Repository repository) {\n+        Repository.repository = repository;\n     }\n     \n     static {\n         Repository.repository = (org.apache.bcel.util.Repository)SyntheticRepository.getInstance();\n     }\n }\n"}]}
