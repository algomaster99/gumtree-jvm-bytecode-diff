{"diffoscope-json-version": 1, "source1": "first/ZipLong.class", "source2": "second/ZipLong.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,54 +1,54 @@\n-  SHA-256 checksum 57dc20a28f08cd32ce92b682eb457d8e4e8dd8a3729b01b2e89635bbfd21ad23\n+  SHA-256 checksum fbdab630c38a2835cff2156ca0f40a928aae2ec8eb7a58dc499feb4c78d2d196\n   Compiled from \"ZipLong.java\"\n public final class org.apache.commons.compress.archivers.zip.ZipLong implements java.lang.Cloneable,java.io.Serializable\n   minor version: 0\n   major version: 51\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #10                         // org/apache/commons/compress/archivers/zip/ZipLong\n   super_class: #41                        // java/lang/Object\n   interfaces: 2, fields: 8, methods: 17, attributes: 1\n Constant pool:\n-    #1 = Class              #88           // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #41.#89       // java/lang/Object.\"<init>\":()V\n-    #3 = Fieldref           #10.#90       // org/apache/commons/compress/archivers/zip/ZipLong.value:J\n-    #4 = Methodref          #10.#91       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-    #5 = Methodref          #10.#92       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-    #6 = Methodref          #10.#93       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-    #7 = Methodref          #10.#94       // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-    #8 = Methodref          #95.#96       // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n-    #9 = Methodref          #95.#97       // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n-   #10 = Class              #98           // org/apache/commons/compress/archivers/zip/ZipLong\n-   #11 = Methodref          #10.#99       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #12 = Methodref          #41.#100      // java/lang/Object.clone:()Ljava/lang/Object;\n-   #13 = Class              #101          // java/lang/CloneNotSupportedException\n-   #14 = Class              #102          // java/lang/RuntimeException\n-   #15 = Methodref          #14.#103      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #16 = Class              #104          // java/lang/StringBuilder\n-   #17 = Methodref          #16.#89       // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = String             #105          // ZipLong value:\n-   #19 = Methodref          #16.#106      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = Methodref          #16.#107      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #21 = Methodref          #16.#108      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #1 = Class              #87           // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Methodref          #41.#88       // java/lang/Object.\"<init>\":()V\n+    #3 = Fieldref           #10.#89       // org/apache/commons/compress/archivers/zip/ZipLong.value:J\n+    #4 = Methodref          #10.#90       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+    #5 = Methodref          #10.#91       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+    #6 = Methodref          #10.#92       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+    #7 = Methodref          #10.#93       // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+    #8 = Methodref          #94.#95       // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+    #9 = Methodref          #94.#96       // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+   #10 = Class              #97           // org/apache/commons/compress/archivers/zip/ZipLong\n+   #11 = Methodref          #10.#98       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+   #12 = Methodref          #41.#99       // java/lang/Object.clone:()Ljava/lang/Object;\n+   #13 = Class              #100          // java/lang/CloneNotSupportedException\n+   #14 = Class              #101          // java/lang/RuntimeException\n+   #15 = Methodref          #14.#102      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #16 = Class              #103          // java/lang/StringBuilder\n+   #17 = Methodref          #16.#88       // java/lang/StringBuilder.\"<init>\":()V\n+   #18 = String             #104          // ZipLong value:\n+   #19 = Methodref          #16.#105      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #20 = Methodref          #16.#106      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #21 = Methodref          #16.#107      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n    #22 = Long               33639248l\n-   #24 = Methodref          #10.#109      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":(J)V\n-   #25 = Fieldref           #10.#110      // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #24 = Methodref          #10.#108      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":(J)V\n+   #25 = Fieldref           #10.#109      // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n    #26 = Long               67324752l\n-   #28 = Fieldref           #10.#111      // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #28 = Fieldref           #10.#110      // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n    #29 = Long               134695760l\n-   #31 = Fieldref           #10.#112      // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #31 = Fieldref           #10.#111      // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n    #32 = Long               4294967295l\n-   #34 = Fieldref           #10.#113      // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #34 = Fieldref           #10.#112      // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n    #35 = Long               808471376l\n-   #37 = Fieldref           #10.#114      // org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #37 = Fieldref           #10.#113      // org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n    #38 = Long               134630224l\n-   #40 = Fieldref           #10.#115      // org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #41 = Class              #116          // java/lang/Object\n-   #42 = Class              #117          // java/lang/Cloneable\n-   #43 = Class              #118          // java/io/Serializable\n+   #40 = Fieldref           #10.#114      // org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #41 = Class              #115          // java/lang/Object\n+   #42 = Class              #116          // java/lang/Cloneable\n+   #43 = Class              #117          // java/io/Serializable\n    #44 = Utf8               serialVersionUID\n    #45 = Utf8               J\n    #46 = Utf8               ConstantValue\n    #47 = Long               1l\n    #49 = Utf8               value\n    #50 = Utf8               CFH_SIG\n    #51 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n@@ -77,61 +77,60 @@\n    #74 = Utf8               ([B)J\n    #75 = Utf8               equals\n    #76 = Utf8               (Ljava/lang/Object;)Z\n    #77 = Utf8               StackMapTable\n    #78 = Utf8               hashCode\n    #79 = Utf8               clone\n    #80 = Utf8               ()Ljava/lang/Object;\n-   #81 = Class              #101          // java/lang/CloneNotSupportedException\n-   #82 = Utf8               toString\n-   #83 = Utf8               ()Ljava/lang/String;\n-   #84 = Utf8               <clinit>\n-   #85 = Utf8               ()V\n-   #86 = Utf8               SourceFile\n-   #87 = Utf8               ZipLong.java\n-   #88 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #89 = NameAndType        #57:#85       // \"<init>\":()V\n-   #90 = NameAndType        #49:#45       // value:J\n-   #91 = NameAndType        #57:#63       // \"<init>\":([BI)V\n-   #92 = NameAndType        #66:#73       // getValue:([BI)J\n-   #93 = NameAndType        #64:#70       // getBytes:(J)[B\n-   #94 = NameAndType        #71:#72       // putLong:(J[BI)V\n-   #95 = Class              #119          // org/apache/commons/compress/utils/ByteUtils\n-   #96 = NameAndType        #120:#121     // toLittleEndian:([BJII)V\n-   #97 = NameAndType        #122:#123     // fromLittleEndian:([BII)J\n-   #98 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-   #99 = NameAndType        #66:#67       // getValue:()J\n-  #100 = NameAndType        #79:#80       // clone:()Ljava/lang/Object;\n-  #101 = Utf8               java/lang/CloneNotSupportedException\n-  #102 = Utf8               java/lang/RuntimeException\n-  #103 = NameAndType        #57:#124      // \"<init>\":(Ljava/lang/Throwable;)V\n-  #104 = Utf8               java/lang/StringBuilder\n-  #105 = Utf8               ZipLong value:\n-  #106 = NameAndType        #125:#126     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #107 = NameAndType        #125:#127     // append:(J)Ljava/lang/StringBuilder;\n-  #108 = NameAndType        #82:#83       // toString:()Ljava/lang/String;\n-  #109 = NameAndType        #57:#58       // \"<init>\":(J)V\n-  #110 = NameAndType        #50:#51       // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #111 = NameAndType        #52:#51       // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #112 = NameAndType        #53:#51       // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #113 = NameAndType        #54:#51       // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #114 = NameAndType        #55:#51       // SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #115 = NameAndType        #56:#51       // AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #116 = Utf8               java/lang/Object\n-  #117 = Utf8               java/lang/Cloneable\n-  #118 = Utf8               java/io/Serializable\n-  #119 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #120 = Utf8               toLittleEndian\n-  #121 = Utf8               ([BJII)V\n-  #122 = Utf8               fromLittleEndian\n-  #123 = Utf8               ([BII)J\n-  #124 = Utf8               (Ljava/lang/Throwable;)V\n-  #125 = Utf8               append\n-  #126 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #127 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #81 = Utf8               toString\n+   #82 = Utf8               ()Ljava/lang/String;\n+   #83 = Utf8               <clinit>\n+   #84 = Utf8               ()V\n+   #85 = Utf8               SourceFile\n+   #86 = Utf8               ZipLong.java\n+   #87 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+   #88 = NameAndType        #57:#84       // \"<init>\":()V\n+   #89 = NameAndType        #49:#45       // value:J\n+   #90 = NameAndType        #57:#63       // \"<init>\":([BI)V\n+   #91 = NameAndType        #66:#73       // getValue:([BI)J\n+   #92 = NameAndType        #64:#70       // getBytes:(J)[B\n+   #93 = NameAndType        #71:#72       // putLong:(J[BI)V\n+   #94 = Class              #118          // org/apache/commons/compress/utils/ByteUtils\n+   #95 = NameAndType        #119:#120     // toLittleEndian:([BJII)V\n+   #96 = NameAndType        #121:#122     // fromLittleEndian:([BII)J\n+   #97 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #98 = NameAndType        #66:#67       // getValue:()J\n+   #99 = NameAndType        #79:#80       // clone:()Ljava/lang/Object;\n+  #100 = Utf8               java/lang/CloneNotSupportedException\n+  #101 = Utf8               java/lang/RuntimeException\n+  #102 = NameAndType        #57:#123      // \"<init>\":(Ljava/lang/Throwable;)V\n+  #103 = Utf8               java/lang/StringBuilder\n+  #104 = Utf8               ZipLong value:\n+  #105 = NameAndType        #124:#125     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #106 = NameAndType        #124:#126     // append:(J)Ljava/lang/StringBuilder;\n+  #107 = NameAndType        #81:#82       // toString:()Ljava/lang/String;\n+  #108 = NameAndType        #57:#58       // \"<init>\":(J)V\n+  #109 = NameAndType        #50:#51       // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #110 = NameAndType        #52:#51       // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #111 = NameAndType        #53:#51       // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #112 = NameAndType        #54:#51       // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #113 = NameAndType        #55:#51       // SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #114 = NameAndType        #56:#51       // AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #115 = Utf8               java/lang/Object\n+  #116 = Utf8               java/lang/Cloneable\n+  #117 = Utf8               java/io/Serializable\n+  #118 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #119 = Utf8               toLittleEndian\n+  #120 = Utf8               ([BJII)V\n+  #121 = Utf8               fromLittleEndian\n+  #122 = Utf8               ([BII)J\n+  #123 = Utf8               (Ljava/lang/Throwable;)V\n+  #124 = Utf8               append\n+  #125 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #126 = Utf8               (J)Ljava/lang/StringBuilder;\n {\n   private static final long serialVersionUID = 1l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 1l\n \n   private final long value;\n"}]}
