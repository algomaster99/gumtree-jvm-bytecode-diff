{"diffoscope-json-version": 1, "source1": "first/DefaultConversionHandler.class", "source2": "second/DefaultConversionHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,29 +13,35 @@\n     public static final DefaultConversionHandler INSTANCE;\n     public static final String DEFAULT_DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n     private static final ConfigurationInterpolator NULL_INTERPOLATOR;\n     static final ListDelimiterHandler LIST_DELIMITER_HANDLER;\n     private volatile String dateFormat;\n     private volatile ListDelimiterHandler listDelimiterHandler;\n     \n+    static {\n+        INSTANCE = new DefaultConversionHandler();\n+        NULL_INTERPOLATOR = (ConfigurationInterpolator)new DefaultConversionHandler.DefaultConversionHandler$1();\n+        LIST_DELIMITER_HANDLER = DisabledListDelimiterHandler.INSTANCE;\n+    }\n+    \n     public DefaultConversionHandler() {\n         this.listDelimiterHandler = DisabledListDelimiterHandler.INSTANCE;\n     }\n     \n     private static ConfigurationInterpolator fetchInterpolator(final ConfigurationInterpolator ci) {\n         return (ci != null) ? ci : DefaultConversionHandler.NULL_INTERPOLATOR;\n     }\n     \n     protected <T> T convert(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {\n         final Object conversionSrc = this.isComplexObject(src) ? this.extractConversionValue(src, targetCls, ci) : src;\n         return (T)this.convertValue(ci.interpolate(conversionSrc), (Class<Object>)targetCls, ci);\n     }\n     \n     private <T> void convertToCollection(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci, final Collection<T> dest) {\n-        this.extractValues(ci.interpolate(src)).forEach(o -> dest.add(this.convert(o, (Class<Object>)elemClass, ci)));\n+        this.extractValues(ci.interpolate(src)).forEach(o -> collection.add(this.convert(o, (Class<Object>)targetCls, ci2)));\n     }\n     \n     protected <T> T convertValue(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {\n         if (src == null) {\n             return null;\n         }\n         final T result = (T)PropertyConverter.to((Class)targetCls, src, this);\n@@ -104,15 +110,15 @@\n             this.convertToCollection(src, (Class<Object>)elemClass, fetchInterpolator(ci), (Collection<Object>)dest);\n         }\n     }\n     \n     private <T> T[] toObjectArray(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci) {\n         final Collection<T> convertedCol = new LinkedList<T>();\n         this.convertToCollection(src, elemClass, ci, convertedCol);\n-        final T[] result = (T[])Array.newInstance(elemClass, convertedCol.size());\n+        final Object[] result = (Object[])Array.newInstance(elemClass, convertedCol.size());\n         return convertedCol.toArray(result);\n     }\n     \n     private Object toPrimitiveArray(final Object src, final Class<?> elemClass, final ConfigurationInterpolator ci) {\n         if (src.getClass().isArray()) {\n             if (src.getClass().getComponentType().equals(elemClass)) {\n                 return src;\n@@ -131,14 +137,8 @@\n         final Object array2 = Array.newInstance(elemClass, values.size());\n         int idx = 0;\n         for (final Object value : values) {\n             Array.set(array2, idx++, this.convertValue(ci.interpolate(value), (Class<Object>)targetClass, ci));\n         }\n         return array2;\n     }\n-    \n-    static {\n-        INSTANCE = new DefaultConversionHandler();\n-        NULL_INTERPOLATOR = (ConfigurationInterpolator)new DefaultConversionHandler.DefaultConversionHandler$1();\n-        LIST_DELIMITER_HANDLER = DisabledListDelimiterHandler.INSTANCE;\n-    }\n }\n"}]}
