{"diffoscope-json-version": 1, "source1": "first/FileBands.class", "source2": "second/FileBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -98,31 +98,31 @@\n         }\n     }\n     \n     public void pack(final OutputStream out) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing file bands...\");\n         byte[] encodedBand = this.encodeBandInt(\"file_name\", this.file_name, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_name[\" + this.file_name.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_name[\" + this.file_name.length + \"]\");\n         encodedBand = this.encodeFlags(\"file_size\", this.file_size, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_file_size_hi());\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_size[\" + this.file_size.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_size[\" + this.file_size.length + \"]\");\n         if (this.segmentHeader.have_file_modtime()) {\n             encodedBand = this.encodeBandInt(\"file_modtime\", this.file_modtime, Codec.DELTA5);\n             out.write(encodedBand);\n-            PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_modtime[\" + this.file_modtime.length);\n+            PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_modtime[\" + this.file_modtime.length + \"]\");\n         }\n         if (this.segmentHeader.have_file_options()) {\n             encodedBand = this.encodeBandInt(\"file_options\", this.file_options, Codec.UNSIGNED5);\n             out.write(encodedBand);\n-            PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_options[\" + this.file_options.length);\n+            PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_options[\" + this.file_options.length + \"]\");\n         }\n         encodedBand = this.encodeBandInt(\"file_bits\", this.flatten(this.file_bits), Codec.BYTE1);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_bits[\" + this.file_bits.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_bits[\" + this.file_bits.length + \"]\");\n     }\n     \n     private int[] flatten(final byte[][] bytes) {\n         int total = 0;\n         for (int i = 0; i < bytes.length; ++i) {\n             total += bytes[i].length;\n         }\n"}]}
