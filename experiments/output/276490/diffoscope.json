{"diffoscope-json-version": 1, "source1": "first/RegexpOnFilenameCheck.class", "source2": "second/RegexpOnFilenameCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -44,68 +44,59 @@\n         if (this.fileNamePattern == null && this.folderPattern == null) {\n             this.fileNamePattern = CommonUtil.createPattern(\"\\\\s\");\n         }\n     }\n     \n     protected void processFiltered(final File file, final FileText fileText) throws CheckstyleException {\n         final String fileName = this.getFileName(file);\n-        final String folderPath = getFolderPath(file);\n-        if (this.isMatchFolder(folderPath) && this.isMatchFile(fileName)) {\n+        if (this.isMatchFolder(getFolderPath(file)) && this.isMatchFile(fileName)) {\n             this.log();\n         }\n     }\n     \n     private String getFileName(final File file) {\n-        String fileName = file.getName();\n+        String s = file.getName();\n         if (this.ignoreFileNameExtensions) {\n-            fileName = CommonUtil.getFileNameWithoutExtension(fileName);\n+            s = CommonUtil.getFileNameWithoutExtension(s);\n         }\n-        return fileName;\n+        return s;\n     }\n     \n     private static String getFolderPath(final File file) throws CheckstyleException {\n         try {\n             return file.getCanonicalFile().getParent();\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\"unable to create canonical path names for \" + file.getAbsolutePath(), (Throwable)ex);\n         }\n     }\n     \n-    private boolean isMatchFolder(final String folderPath) {\n-        boolean result;\n-        if (this.folderPattern == null) {\n-            result = true;\n-        }\n-        else {\n-            final boolean useMatch = this.fileNamePattern != null || this.match;\n-            result = (this.folderPattern.matcher(folderPath).find() == useMatch);\n-        }\n-        return result;\n+    private boolean isMatchFolder(final String input) {\n+        return this.folderPattern == null || this.folderPattern.matcher(input).find() == (this.fileNamePattern != null || this.match);\n     }\n     \n-    private boolean isMatchFile(final String fileName) {\n-        return this.fileNamePattern == null || this.fileNamePattern.matcher(fileName).find() == this.match;\n+    private boolean isMatchFile(final String input) {\n+        return this.fileNamePattern == null || this.fileNamePattern.matcher(input).find() == this.match;\n     }\n     \n     private void log() {\n-        final String folder = getStringOrDefault(this.folderPattern, \"\");\n-        final String fileName = getStringOrDefault(this.fileNamePattern, \"\");\n+        final String stringOrDefault = getStringOrDefault(this.folderPattern, \"\");\n+        final String stringOrDefault2 = getStringOrDefault(this.fileNamePattern, \"\");\n         if (this.match) {\n-            this.log(1, \"regexp.filename.match\", new Object[] { folder, fileName });\n+            this.log(1, \"regexp.filename.match\", new Object[] { stringOrDefault, stringOrDefault2 });\n         }\n         else {\n-            this.log(1, \"regexp.filename.mismatch\", new Object[] { folder, fileName });\n+            this.log(1, \"regexp.filename.mismatch\", new Object[] { stringOrDefault, stringOrDefault2 });\n         }\n     }\n     \n-    private static String getStringOrDefault(final Pattern pattern, final String defaultString) {\n-        String result;\n+    private static String getStringOrDefault(final Pattern pattern, final String s) {\n+        String string;\n         if (pattern == null) {\n-            result = defaultString;\n+            string = s;\n         }\n         else {\n-            result = pattern.toString();\n+            string = pattern.toString();\n         }\n-        return result;\n+        return string;\n     }\n }\n"}]}
