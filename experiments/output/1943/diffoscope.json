{"diffoscope-json-version": 1, "source1": "first/ZipUtil.class", "source2": "second/ZipUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -54,20 +54,20 @@\n         return array;\n     }\n     \n     static long bigToLong(final BigInteger big) {\n         if (big.bitLength() <= 63) {\n             return big.longValue();\n         }\n-        throw new NumberFormatException(\"The BigInteger cannot fit inside a 64 bit java long: [\" + big + \"]\");\n+        throw new NumberFormatException(\"The BigInteger cannot fit inside a 64 bit java long: [\" + big);\n     }\n     \n     static BigInteger longToBig(long l) {\n         if (l < -2147483648L) {\n-            throw new IllegalArgumentException(\"Negative longs < -2^31 not permitted: [\" + l + \"]\");\n+            throw new IllegalArgumentException(\"Negative longs < -2^31 not permitted: [\" + l);\n         }\n         if (l < 0L && l >= -2147483648L) {\n             l = adjustToLong((int)l);\n         }\n         return BigInteger.valueOf(l);\n     }\n     \n@@ -76,15 +76,15 @@\n             return b;\n         }\n         return 256 + b;\n     }\n     \n     public static byte unsignedIntToSignedByte(final int i) {\n         if (i > 255 || i < 0) {\n-            throw new IllegalArgumentException(\"Can only convert non-negative integers between [0,255] to byte: [\" + i + \"]\");\n+            throw new IllegalArgumentException(\"Can only convert non-negative integers between [0,255] to byte: [\" + i);\n         }\n         if (i < 128) {\n             return (byte)i;\n         }\n         return (byte)(i - 256);\n     }\n     \n"}]}
