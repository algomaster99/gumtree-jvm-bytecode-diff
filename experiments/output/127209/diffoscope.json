{"diffoscope-json-version": 1, "source1": "first/ConfigurationUtils.class", "source2": "second/ConfigurationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.commons.configuration2;\n \n-import org.apache.commons.logging.LogFactory;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Proxy;\n import org.apache.commons.configuration2.event.ConfigurationErrorEvent;\n import org.apache.commons.configuration2.sync.NoOpSynchronizer;\n import org.apache.commons.configuration2.sync.Synchronizer;\n import java.lang.reflect.Method;\n import java.lang.reflect.InvocationTargetException;\n@@ -13,25 +12,33 @@\n import org.apache.commons.configuration2.tree.ExpressionEngine;\n import java.io.Writer;\n import java.io.StringWriter;\n import java.util.Iterator;\n import java.io.OutputStream;\n import java.io.PrintWriter;\n import java.io.PrintStream;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.commons.logging.Log;\n import org.apache.commons.configuration2.event.EventSource;\n \n public final class ConfigurationUtils\n {\n     private static final String METHOD_CLONE = \"clone\";\n     private static final Class<?>[] IMMUTABLE_CONFIG_IFCS;\n     private static final Class<?>[] IMMUTABLE_HIERARCHICAL_CONFIG_IFCS;\n     private static final EventSource DUMMY_EVENT_SOURCE;\n     private static final Log LOG;\n     \n+    static {\n+        IMMUTABLE_CONFIG_IFCS = new Class[] { ImmutableConfiguration.class };\n+        IMMUTABLE_HIERARCHICAL_CONFIG_IFCS = new Class[] { ImmutableHierarchicalConfiguration.class };\n+        DUMMY_EVENT_SOURCE = (EventSource)new ConfigurationUtils.ConfigurationUtils$1();\n+        LOG = LogFactory.getLog((Class)ConfigurationUtils.class);\n+    }\n+    \n     private ConfigurationUtils() {\n     }\n     \n     public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {\n         dump(configuration, new PrintWriter((OutputStream)out));\n     }\n     \n@@ -145,26 +152,26 @@\n             catch (final NoSuchMethodException nmex) {\n                 throw new CloneNotSupportedException(\"No clone() method found for class\" + obj.getClass().getName());\n             }\n             catch (final IllegalAccessException | InvocationTargetException itex) {\n                 throw new ConfigurationRuntimeException((Throwable)itex);\n             }\n         }\n-        throw new CloneNotSupportedException(obj.getClass().getName() + \" does not implement Cloneable\");\n+        throw new CloneNotSupportedException(String.valueOf(obj.getClass().getName()) + \" does not implement Cloneable\");\n     }\n     \n     public static Synchronizer cloneSynchronizer(final Synchronizer sync) {\n         if (sync == null) {\n             throw new IllegalArgumentException(\"Synchronizer must not be null!\");\n         }\n         if (NoOpSynchronizer.INSTANCE == sync) {\n             return sync;\n         }\n         try {\n-            return sync.getClass().newInstance();\n+            return (Synchronizer)sync.getClass().newInstance();\n         }\n         catch (final Exception ex) {\n             ConfigurationUtils.LOG.info((Object)(\"Cannot create new instance of \" + sync.getClass()));\n             try {\n                 return (Synchronizer)clone(sync);\n             }\n             catch (final CloneNotSupportedException cnex) {\n@@ -224,15 +231,8 @@\n             return (EventSource)obj;\n         }\n         if (!mockIfUnsupported) {\n             throw new ConfigurationRuntimeException(\"Cannot cast to EventSource: \" + obj);\n         }\n         return ConfigurationUtils.DUMMY_EVENT_SOURCE;\n     }\n-    \n-    static {\n-        IMMUTABLE_CONFIG_IFCS = new Class[] { ImmutableConfiguration.class };\n-        IMMUTABLE_HIERARCHICAL_CONFIG_IFCS = new Class[] { ImmutableHierarchicalConfiguration.class };\n-        DUMMY_EVENT_SOURCE = (EventSource)new ConfigurationUtils.ConfigurationUtils$1();\n-        LOG = LogFactory.getLog((Class)ConfigurationUtils.class);\n-    }\n }\n"}]}
