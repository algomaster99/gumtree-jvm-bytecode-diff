{"diffoscope-json-version": 1, "source1": "first/TarArchiveEntry.class", "source2": "second/TarArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -51,146 +51,146 @@\n         this.linkName = \"\";\n         this.magic = \"ustar\\u0000\";\n         this.version = \"00\";\n         this.groupName = \"\";\n         this.devMajor = 0;\n         this.devMinor = 0;\n         this.extraPaxHeaders = new HashMap<String, String>();\n-        String user = System.getProperty(\"user.name\", \"\");\n-        if (user.length() > 31) {\n-            user = user.substring(0, 31);\n+        String userName = System.getProperty(\"user.name\", \"\");\n+        if (userName.length() > 31) {\n+            userName = userName.substring(0, 31);\n         }\n-        this.userName = user;\n+        this.userName = userName;\n         this.file = null;\n         this.preserveAbsolutePath = preserveAbsolutePath;\n     }\n     \n-    public TarArchiveEntry(final String name) {\n-        this(name, false);\n+    public TarArchiveEntry(final String s) {\n+        this(s, false);\n     }\n     \n-    public TarArchiveEntry(String name, final boolean preserveAbsolutePath) {\n-        this(preserveAbsolutePath);\n-        name = normalizeFileName(name, preserveAbsolutePath);\n-        final boolean isDir = name.endsWith(\"/\");\n-        this.name = name;\n-        this.mode = (isDir ? 16877 : 33188);\n-        this.linkFlag = (byte)(isDir ? 53 : 48);\n+    public TarArchiveEntry(String normalizeFileName, final boolean b) {\n+        this(b);\n+        normalizeFileName = normalizeFileName(normalizeFileName, b);\n+        final boolean endsWith = normalizeFileName.endsWith(\"/\");\n+        this.name = normalizeFileName;\n+        this.mode = (endsWith ? 16877 : 33188);\n+        this.linkFlag = (byte)(endsWith ? 53 : 48);\n         this.modTime = new Date().getTime() / 1000L;\n         this.userName = \"\";\n     }\n     \n-    public TarArchiveEntry(final String name, final byte linkFlag) {\n-        this(name, linkFlag, false);\n+    public TarArchiveEntry(final String s, final byte b) {\n+        this(s, b, false);\n     }\n     \n-    public TarArchiveEntry(final String name, final byte linkFlag, final boolean preserveAbsolutePath) {\n-        this(name, preserveAbsolutePath);\n+    public TarArchiveEntry(final String s, final byte linkFlag, final boolean b) {\n+        this(s, b);\n         this.linkFlag = linkFlag;\n         if (linkFlag == 76) {\n             this.magic = \"ustar \";\n             this.version = \" \\u0000\";\n         }\n     }\n     \n     public TarArchiveEntry(final File file) {\n         this(file, file.getPath());\n     }\n     \n-    public TarArchiveEntry(final File file, final String fileName) {\n+    public TarArchiveEntry(final File file, final String s) {\n         this.name = \"\";\n         this.userId = 0L;\n         this.groupId = 0L;\n         this.size = 0L;\n         this.linkName = \"\";\n         this.magic = \"ustar\\u0000\";\n         this.version = \"00\";\n         this.groupName = \"\";\n         this.devMajor = 0;\n         this.devMinor = 0;\n         this.extraPaxHeaders = new HashMap<String, String>();\n-        final String normalizedName = normalizeFileName(fileName, false);\n+        final String normalizeFileName = normalizeFileName(s, false);\n         this.file = file;\n         if (file.isDirectory()) {\n             this.mode = 16877;\n             this.linkFlag = 53;\n-            final int nameLength = normalizedName.length();\n-            if (nameLength == 0 || normalizedName.charAt(nameLength - 1) != '/') {\n-                this.name = normalizedName + \"/\";\n+            final int length = normalizeFileName.length();\n+            if (length == 0 || normalizeFileName.charAt(length - 1) != '/') {\n+                this.name = normalizeFileName + \"/\";\n             }\n             else {\n-                this.name = normalizedName;\n+                this.name = normalizeFileName;\n             }\n         }\n         else {\n             this.mode = 33188;\n             this.linkFlag = 48;\n             this.size = file.length();\n-            this.name = normalizedName;\n+            this.name = normalizeFileName;\n         }\n         this.modTime = file.lastModified() / 1000L;\n         this.userName = \"\";\n         this.preserveAbsolutePath = false;\n     }\n     \n-    public TarArchiveEntry(final byte[] headerBuf) {\n+    public TarArchiveEntry(final byte[] array) {\n         this(false);\n-        this.parseTarHeader(headerBuf);\n+        this.parseTarHeader(array);\n     }\n     \n-    public TarArchiveEntry(final byte[] headerBuf, final ZipEncoding encoding) throws IOException {\n+    public TarArchiveEntry(final byte[] array, final ZipEncoding zipEncoding) throws IOException {\n         this(false);\n-        this.parseTarHeader(headerBuf, encoding);\n+        this.parseTarHeader(array, zipEncoding);\n     }\n     \n-    public boolean equals(final TarArchiveEntry it) {\n-        return it != null && this.getName().equals(it.getName());\n+    public boolean equals(final TarArchiveEntry tarArchiveEntry) {\n+        return tarArchiveEntry != null && this.getName().equals(tarArchiveEntry.getName());\n     }\n     \n     @Override\n-    public boolean equals(final Object it) {\n-        return it != null && this.getClass() == it.getClass() && this.equals((TarArchiveEntry)it);\n+    public boolean equals(final Object o) {\n+        return o != null && this.getClass() == o.getClass() && this.equals((TarArchiveEntry)o);\n     }\n     \n     @Override\n     public int hashCode() {\n         return this.getName().hashCode();\n     }\n     \n-    public boolean isDescendent(final TarArchiveEntry desc) {\n-        return desc.getName().startsWith(this.getName());\n+    public boolean isDescendent(final TarArchiveEntry tarArchiveEntry) {\n+        return tarArchiveEntry.getName().startsWith(this.getName());\n     }\n     \n     public String getName() {\n         return this.name;\n     }\n     \n-    public void setName(final String name) {\n-        this.name = normalizeFileName(name, this.preserveAbsolutePath);\n+    public void setName(final String s) {\n+        this.name = normalizeFileName(s, this.preserveAbsolutePath);\n     }\n     \n     public void setMode(final int mode) {\n         this.mode = mode;\n     }\n     \n     public String getLinkName() {\n         return this.linkName;\n     }\n     \n-    public void setLinkName(final String link) {\n-        this.linkName = link;\n+    public void setLinkName(final String linkName) {\n+        this.linkName = linkName;\n     }\n     \n     @Deprecated\n     public int getUserId() {\n         return (int)(this.userId & -1L);\n     }\n     \n-    public void setUserId(final int userId) {\n-        this.setUserId((long)userId);\n+    public void setUserId(final int n) {\n+        this.setUserId((long)n);\n     }\n     \n     public long getLongUserId() {\n         return this.userId;\n     }\n     \n     public void setUserId(final long userId) {\n@@ -198,16 +198,16 @@\n     }\n     \n     @Deprecated\n     public int getGroupId() {\n         return (int)(this.groupId & -1L);\n     }\n     \n-    public void setGroupId(final int groupId) {\n-        this.setGroupId((long)groupId);\n+    public void setGroupId(final int n) {\n+        this.setGroupId((long)n);\n     }\n     \n     public long getLongGroupId() {\n         return this.groupId;\n     }\n     \n     public void setGroupId(final long groupId) {\n@@ -236,20 +236,20 @@\n     }\n     \n     public void setNames(final String userName, final String groupName) {\n         this.setUserName(userName);\n         this.setGroupName(groupName);\n     }\n     \n-    public void setModTime(final long time) {\n-        this.modTime = time / 1000L;\n+    public void setModTime(final long n) {\n+        this.modTime = n / 1000L;\n     }\n     \n-    public void setModTime(final Date time) {\n-        this.modTime = time.getTime() / 1000L;\n+    public void setModTime(final Date date) {\n+        this.modTime = date.getTime() / 1000L;\n     }\n     \n     public Date getModTime() {\n         return new Date(this.modTime * 1000L);\n     }\n     \n     public Date getLastModifiedDate() {\n@@ -268,41 +268,41 @@\n         return this.mode;\n     }\n     \n     public long getSize() {\n         return this.size;\n     }\n     \n-    public void setSize(final long size) {\n-        if (size < 0L) {\n-            throw new IllegalArgumentException(\"Size is out of range: \" + size);\n+    public void setSize(final long n) {\n+        if (n < 0L) {\n+            throw new IllegalArgumentException(\"Size is out of range: \" + n);\n         }\n-        this.size = size;\n+        this.size = n;\n     }\n     \n     public int getDevMajor() {\n         return this.devMajor;\n     }\n     \n-    public void setDevMajor(final int devNo) {\n-        if (devNo < 0) {\n-            throw new IllegalArgumentException(\"Major device number is out of range: \" + devNo);\n+    public void setDevMajor(final int n) {\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"Major device number is out of range: \" + n);\n         }\n-        this.devMajor = devNo;\n+        this.devMajor = n;\n     }\n     \n     public int getDevMinor() {\n         return this.devMinor;\n     }\n     \n-    public void setDevMinor(final int devNo) {\n-        if (devNo < 0) {\n-            throw new IllegalArgumentException(\"Minor device number is out of range: \" + devNo);\n+    public void setDevMinor(final int n) {\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"Minor device number is out of range: \" + n);\n         }\n-        this.devMinor = devNo;\n+        this.devMinor = n;\n     }\n     \n     public boolean isExtended() {\n         return this.isExtended;\n     }\n     \n     public long getRealSize() {\n@@ -383,393 +383,382 @@\n         return Collections.unmodifiableMap((Map<? extends String, ? extends String>)this.extraPaxHeaders);\n     }\n     \n     public void clearExtraPaxHeaders() {\n         this.extraPaxHeaders.clear();\n     }\n     \n-    public void addPaxHeader(final String name, final String value) {\n-        this.processPaxHeader(name, value);\n+    public void addPaxHeader(final String s, final String s2) {\n+        this.processPaxHeader(s, s2);\n     }\n     \n-    public String getExtraPaxHeader(final String name) {\n-        return this.extraPaxHeaders.get(name);\n+    public String getExtraPaxHeader(final String s) {\n+        return this.extraPaxHeaders.get(s);\n     }\n     \n-    void updateEntryFromPaxHeaders(final Map<String, String> headers) {\n-        for (final Map.Entry<String, String> ent : headers.entrySet()) {\n-            final String key = (String)ent.getKey();\n-            final String val = (String)ent.getValue();\n-            this.processPaxHeader(key, val, headers);\n+    void updateEntryFromPaxHeaders(final Map<String, String> map) {\n+        for (final Map.Entry entry : map.entrySet()) {\n+            this.processPaxHeader((String)entry.getKey(), (String)entry.getValue(), map);\n         }\n     }\n     \n-    private void processPaxHeader(final String key, final String val) {\n-        this.processPaxHeader(key, val, this.extraPaxHeaders);\n+    private void processPaxHeader(final String s, final String s2) {\n+        this.processPaxHeader(s, s2, this.extraPaxHeaders);\n     }\n     \n-    private void processPaxHeader(final String key, final String val, final Map<String, String> headers) {\n+    private void processPaxHeader(final String s, final String anObject, final Map<String, String> map) {\n         int n = -1;\n-        switch (key.hashCode()) {\n+        switch (s.hashCode()) {\n             case 3433509: {\n-                if (key.equals(\"path\")) {\n+                if (s.equals(\"path\")) {\n                     n = 0;\n                     break;\n                 }\n                 break;\n             }\n             case 1195018015: {\n-                if (key.equals(\"linkpath\")) {\n+                if (s.equals(\"linkpath\")) {\n                     n = 1;\n                     break;\n                 }\n                 break;\n             }\n             case 102338: {\n-                if (key.equals(\"gid\")) {\n+                if (s.equals(\"gid\")) {\n                     n = 2;\n                     break;\n                 }\n                 break;\n             }\n             case 98496370: {\n-                if (key.equals(\"gname\")) {\n+                if (s.equals(\"gname\")) {\n                     n = 3;\n                     break;\n                 }\n                 break;\n             }\n             case 115792: {\n-                if (key.equals(\"uid\")) {\n+                if (s.equals(\"uid\")) {\n                     n = 4;\n                     break;\n                 }\n                 break;\n             }\n             case 111425664: {\n-                if (key.equals(\"uname\")) {\n+                if (s.equals(\"uname\")) {\n                     n = 5;\n                     break;\n                 }\n                 break;\n             }\n             case 3530753: {\n-                if (key.equals(\"size\")) {\n+                if (s.equals(\"size\")) {\n                     n = 6;\n                     break;\n                 }\n                 break;\n             }\n             case 104223930: {\n-                if (key.equals(\"mtime\")) {\n+                if (s.equals(\"mtime\")) {\n                     n = 7;\n                     break;\n                 }\n                 break;\n             }\n             case -1916619760: {\n-                if (key.equals(\"SCHILY.devminor\")) {\n+                if (s.equals(\"SCHILY.devminor\")) {\n                     n = 8;\n                     break;\n                 }\n                 break;\n             }\n             case -1916861932: {\n-                if (key.equals(\"SCHILY.devmajor\")) {\n+                if (s.equals(\"SCHILY.devmajor\")) {\n                     n = 9;\n                     break;\n                 }\n                 break;\n             }\n             case -160380561: {\n-                if (key.equals(\"GNU.sparse.size\")) {\n+                if (s.equals(\"GNU.sparse.size\")) {\n                     n = 10;\n                     break;\n                 }\n                 break;\n             }\n             case -277496563: {\n-                if (key.equals(\"GNU.sparse.realsize\")) {\n+                if (s.equals(\"GNU.sparse.realsize\")) {\n                     n = 11;\n                     break;\n                 }\n                 break;\n             }\n             case 530706950: {\n-                if (key.equals(\"SCHILY.filetype\")) {\n+                if (s.equals(\"SCHILY.filetype\")) {\n                     n = 12;\n                     break;\n                 }\n                 break;\n             }\n         }\n         switch (n) {\n             case 0: {\n-                this.setName(val);\n+                this.setName(anObject);\n                 break;\n             }\n             case 1: {\n-                this.setLinkName(val);\n+                this.setLinkName(anObject);\n                 break;\n             }\n             case 2: {\n-                this.setGroupId(Long.parseLong(val));\n+                this.setGroupId(Long.parseLong(anObject));\n                 break;\n             }\n             case 3: {\n-                this.setGroupName(val);\n+                this.setGroupName(anObject);\n                 break;\n             }\n             case 4: {\n-                this.setUserId(Long.parseLong(val));\n+                this.setUserId(Long.parseLong(anObject));\n                 break;\n             }\n             case 5: {\n-                this.setUserName(val);\n+                this.setUserName(anObject);\n                 break;\n             }\n             case 6: {\n-                this.setSize(Long.parseLong(val));\n+                this.setSize(Long.parseLong(anObject));\n                 break;\n             }\n             case 7: {\n-                this.setModTime((long)(Double.parseDouble(val) * 1000.0));\n+                this.setModTime((long)(Double.parseDouble(anObject) * 1000.0));\n                 break;\n             }\n             case 8: {\n-                this.setDevMinor(Integer.parseInt(val));\n+                this.setDevMinor(Integer.parseInt(anObject));\n                 break;\n             }\n             case 9: {\n-                this.setDevMajor(Integer.parseInt(val));\n+                this.setDevMajor(Integer.parseInt(anObject));\n                 break;\n             }\n             case 10: {\n-                this.fillGNUSparse0xData(headers);\n+                this.fillGNUSparse0xData(map);\n                 break;\n             }\n             case 11: {\n-                this.fillGNUSparse1xData(headers);\n+                this.fillGNUSparse1xData(map);\n                 break;\n             }\n             case 12: {\n-                if (\"sparse\".equals(val)) {\n-                    this.fillStarSparseData(headers);\n+                if (\"sparse\".equals(anObject)) {\n+                    this.fillStarSparseData(map);\n                     break;\n                 }\n                 break;\n             }\n             default: {\n-                this.extraPaxHeaders.put(key, val);\n+                this.extraPaxHeaders.put(s, anObject);\n                 break;\n             }\n         }\n     }\n     \n     public TarArchiveEntry[] getDirectoryEntries() {\n         if (this.file == null || !this.file.isDirectory()) {\n             return TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES;\n         }\n         final String[] list = this.file.list();\n         if (list == null) {\n             return TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES;\n         }\n-        final TarArchiveEntry[] result = new TarArchiveEntry[list.length];\n-        for (int i = 0; i < result.length; ++i) {\n-            result[i] = new TarArchiveEntry(new File(this.file, list[i]));\n+        final TarArchiveEntry[] array = new TarArchiveEntry[list.length];\n+        for (int i = 0; i < array.length; ++i) {\n+            array[i] = new TarArchiveEntry(new File(this.file, list[i]));\n         }\n-        return result;\n+        return array;\n     }\n     \n-    public void writeEntryHeader(final byte[] outbuf) {\n+    public void writeEntryHeader(final byte[] array) {\n         try {\n-            this.writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);\n+            this.writeEntryHeader(array, TarUtils.DEFAULT_ENCODING, false);\n         }\n         catch (final IOException ex) {\n             try {\n-                this.writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);\n+                this.writeEntryHeader(array, TarUtils.FALLBACK_ENCODING, false);\n             }\n-            catch (final IOException ex2) {\n-                throw new RuntimeException(ex2);\n+            catch (final IOException cause) {\n+                throw new RuntimeException(cause);\n             }\n         }\n     }\n     \n-    public void writeEntryHeader(final byte[] outbuf, final ZipEncoding encoding, final boolean starMode) throws IOException {\n-        int offset = 0;\n-        offset = TarUtils.formatNameBytes(this.name, outbuf, offset, 100, encoding);\n-        offset = this.writeEntryHeaderField(this.mode, outbuf, offset, 8, starMode);\n-        offset = this.writeEntryHeaderField(this.userId, outbuf, offset, 8, starMode);\n-        offset = this.writeEntryHeaderField(this.groupId, outbuf, offset, 8, starMode);\n-        offset = this.writeEntryHeaderField(this.size, outbuf, offset, 12, starMode);\n-        final int csOffset;\n-        offset = (csOffset = this.writeEntryHeaderField(this.modTime, outbuf, offset, 12, starMode));\n-        for (int c = 0; c < 8; ++c) {\n-            outbuf[offset++] = 32;\n+    public void writeEntryHeader(final byte[] array, final ZipEncoding zipEncoding, final boolean b) throws IOException {\n+        final int writeEntryHeaderField;\n+        int n = writeEntryHeaderField = this.writeEntryHeaderField(this.modTime, array, this.writeEntryHeaderField(this.size, array, this.writeEntryHeaderField(this.groupId, array, this.writeEntryHeaderField(this.userId, array, this.writeEntryHeaderField((long)this.mode, array, TarUtils.formatNameBytes(this.name, array, 0, 100, zipEncoding), 8, b), 8, b), 8, b), 12, b), 12, b);\n+        for (int i = 0; i < 8; ++i) {\n+            array[n++] = 32;\n         }\n-        outbuf[offset++] = this.linkFlag;\n-        for (offset = TarUtils.formatNameBytes(this.linkName, outbuf, offset, 100, encoding), offset = TarUtils.formatNameBytes(this.magic, outbuf, offset, 6), offset = TarUtils.formatNameBytes(this.version, outbuf, offset, 2), offset = TarUtils.formatNameBytes(this.userName, outbuf, offset, 32, encoding), offset = TarUtils.formatNameBytes(this.groupName, outbuf, offset, 32, encoding), offset = this.writeEntryHeaderField(this.devMajor, outbuf, offset, 8, starMode), offset = this.writeEntryHeaderField(this.devMinor, outbuf, offset, 8, starMode); offset < outbuf.length; outbuf[offset++] = 0) {}\n-        final long chk = TarUtils.computeCheckSum(outbuf);\n-        TarUtils.formatCheckSumOctalBytes(chk, outbuf, csOffset, 8);\n+        array[n++] = this.linkFlag;\n+        for (int j = this.writeEntryHeaderField(this.devMinor, array, this.writeEntryHeaderField((long)this.devMajor, array, TarUtils.formatNameBytes(this.groupName, array, TarUtils.formatNameBytes(this.userName, array, TarUtils.formatNameBytes(this.version, array, TarUtils.formatNameBytes(this.magic, array, TarUtils.formatNameBytes(this.linkName, array, n, 100, zipEncoding), 6), 2), 32, zipEncoding), 32, zipEncoding), 8, b), 8, b); j < array.length; array[j++] = 0) {}\n+        TarUtils.formatCheckSumOctalBytes(TarUtils.computeCheckSum(array), array, writeEntryHeaderField, 8);\n     }\n     \n-    private int writeEntryHeaderField(final long value, final byte[] outbuf, final int offset, final int length, final boolean starMode) {\n-        if (!starMode && (value < 0L || value >= 1L << 3 * (length - 1))) {\n-            return TarUtils.formatLongOctalBytes(0L, outbuf, offset, length);\n+    private int writeEntryHeaderField(final long n, final byte[] array, final int n2, final int n3, final boolean b) {\n+        if (!b && (n < 0L || n >= 1L << 3 * (n3 - 1))) {\n+            return TarUtils.formatLongOctalBytes(0L, array, n2, n3);\n         }\n-        return TarUtils.formatLongOctalOrBinaryBytes(value, outbuf, offset, length);\n+        return TarUtils.formatLongOctalOrBinaryBytes(n, array, n2, n3);\n     }\n     \n-    public void parseTarHeader(final byte[] header) {\n+    public void parseTarHeader(final byte[] array) {\n         try {\n-            this.parseTarHeader(header, TarUtils.DEFAULT_ENCODING);\n+            this.parseTarHeader(array, TarUtils.DEFAULT_ENCODING);\n         }\n         catch (final IOException ex) {\n             try {\n-                this.parseTarHeader(header, TarUtils.DEFAULT_ENCODING, true);\n+                this.parseTarHeader(array, TarUtils.DEFAULT_ENCODING, true);\n             }\n-            catch (final IOException ex2) {\n-                throw new RuntimeException(ex2);\n+            catch (final IOException cause) {\n+                throw new RuntimeException(cause);\n             }\n         }\n     }\n     \n-    public void parseTarHeader(final byte[] header, final ZipEncoding encoding) throws IOException {\n-        this.parseTarHeader(header, encoding, false);\n-    }\n-    \n-    private void parseTarHeader(final byte[] header, final ZipEncoding encoding, final boolean oldStyle) throws IOException {\n-        int offset = 0;\n-        this.name = (oldStyle ? TarUtils.parseName(header, offset, 100) : TarUtils.parseName(header, offset, 100, encoding));\n-        offset += 100;\n-        this.mode = (int)TarUtils.parseOctalOrBinary(header, offset, 8);\n-        offset += 8;\n-        this.userId = (int)TarUtils.parseOctalOrBinary(header, offset, 8);\n-        offset += 8;\n-        this.groupId = (int)TarUtils.parseOctalOrBinary(header, offset, 8);\n-        offset += 8;\n-        this.size = TarUtils.parseOctalOrBinary(header, offset, 12);\n-        offset += 12;\n-        this.modTime = TarUtils.parseOctalOrBinary(header, offset, 12);\n-        offset += 12;\n-        this.checkSumOK = TarUtils.verifyCheckSum(header);\n-        offset += 8;\n-        this.linkFlag = header[offset++];\n-        this.linkName = (oldStyle ? TarUtils.parseName(header, offset, 100) : TarUtils.parseName(header, offset, 100, encoding));\n-        offset += 100;\n-        this.magic = TarUtils.parseName(header, offset, 6);\n-        offset += 6;\n-        this.version = TarUtils.parseName(header, offset, 2);\n-        offset += 2;\n-        this.userName = (oldStyle ? TarUtils.parseName(header, offset, 32) : TarUtils.parseName(header, offset, 32, encoding));\n-        offset += 32;\n-        this.groupName = (oldStyle ? TarUtils.parseName(header, offset, 32) : TarUtils.parseName(header, offset, 32, encoding));\n-        offset += 32;\n+    public void parseTarHeader(final byte[] array, final ZipEncoding zipEncoding) throws IOException {\n+        this.parseTarHeader(array, zipEncoding, false);\n+    }\n+    \n+    private void parseTarHeader(final byte[] array, final ZipEncoding zipEncoding, final boolean b) throws IOException {\n+        int n = 0;\n+        this.name = (b ? TarUtils.parseName(array, n, 100) : TarUtils.parseName(array, n, 100, zipEncoding));\n+        n += 100;\n+        this.mode = (int)TarUtils.parseOctalOrBinary(array, n, 8);\n+        n += 8;\n+        this.userId = (int)TarUtils.parseOctalOrBinary(array, n, 8);\n+        n += 8;\n+        this.groupId = (int)TarUtils.parseOctalOrBinary(array, n, 8);\n+        n += 8;\n+        this.size = TarUtils.parseOctalOrBinary(array, n, 12);\n+        n += 12;\n+        this.modTime = TarUtils.parseOctalOrBinary(array, n, 12);\n+        n += 12;\n+        this.checkSumOK = TarUtils.verifyCheckSum(array);\n+        n += 8;\n+        this.linkFlag = array[n++];\n+        this.linkName = (b ? TarUtils.parseName(array, n, 100) : TarUtils.parseName(array, n, 100, zipEncoding));\n+        n += 100;\n+        this.magic = TarUtils.parseName(array, n, 6);\n+        n += 6;\n+        this.version = TarUtils.parseName(array, n, 2);\n+        n += 2;\n+        this.userName = (b ? TarUtils.parseName(array, n, 32) : TarUtils.parseName(array, n, 32, zipEncoding));\n+        n += 32;\n+        this.groupName = (b ? TarUtils.parseName(array, n, 32) : TarUtils.parseName(array, n, 32, zipEncoding));\n+        n += 32;\n         if (this.linkFlag == 51 || this.linkFlag == 52) {\n-            this.devMajor = (int)TarUtils.parseOctalOrBinary(header, offset, 8);\n-            offset += 8;\n-            this.devMinor = (int)TarUtils.parseOctalOrBinary(header, offset, 8);\n-            offset += 8;\n+            this.devMajor = (int)TarUtils.parseOctalOrBinary(array, n, 8);\n+            n += 8;\n+            this.devMinor = (int)TarUtils.parseOctalOrBinary(array, n, 8);\n+            n += 8;\n         }\n         else {\n-            offset += 16;\n+            n += 16;\n         }\n-        final int type = this.evaluateType(header);\n-        switch (type) {\n+        switch (this.evaluateType(array)) {\n             case 2: {\n-                offset += 12;\n-                offset += 12;\n-                offset += 12;\n-                offset += 4;\n-                ++offset;\n-                offset += 96;\n-                this.isExtended = TarUtils.parseBoolean(header, offset);\n-                ++offset;\n-                this.realSize = TarUtils.parseOctal(header, offset, 12);\n-                offset += 12;\n+                n += 12;\n+                n += 12;\n+                n += 12;\n+                n += 4;\n+                ++n;\n+                n += 96;\n+                this.isExtended = TarUtils.parseBoolean(array, n);\n+                ++n;\n+                this.realSize = TarUtils.parseOctal(array, n, 12);\n+                n += 12;\n                 break;\n             }\n             case 4: {\n-                final String xstarPrefix = oldStyle ? TarUtils.parseName(header, offset, 131) : TarUtils.parseName(header, offset, 131, encoding);\n-                if (xstarPrefix.length() > 0) {\n-                    this.name = xstarPrefix + \"/\" + this.name;\n+                final String str = b ? TarUtils.parseName(array, n, 131) : TarUtils.parseName(array, n, 131, zipEncoding);\n+                if (str.length() > 0) {\n+                    this.name = str + \"/\" + this.name;\n                     break;\n                 }\n                 break;\n             }\n             default: {\n-                final String prefix = oldStyle ? TarUtils.parseName(header, offset, 155) : TarUtils.parseName(header, offset, 155, encoding);\n+                final String str2 = b ? TarUtils.parseName(array, n, 155) : TarUtils.parseName(array, n, 155, zipEncoding);\n                 if (this.isDirectory() && !this.name.endsWith(\"/\")) {\n                     this.name += \"/\";\n                 }\n-                if (prefix.length() > 0) {\n-                    this.name = prefix + \"/\" + this.name;\n+                if (str2.length() > 0) {\n+                    this.name = str2 + \"/\" + this.name;\n                     break;\n                 }\n                 break;\n             }\n         }\n     }\n     \n-    private static String normalizeFileName(String fileName, final boolean preserveAbsolutePath) {\n-        if (!preserveAbsolutePath) {\n-            final String osname = System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);\n-            if (osname != null) {\n-                if (osname.startsWith(\"windows\")) {\n-                    if (fileName.length() > 2) {\n-                        final char ch1 = fileName.charAt(0);\n-                        final char ch2 = fileName.charAt(1);\n-                        if (ch2 == ':' && ((ch1 >= 'a' && ch1 <= 'z') || (ch1 >= 'A' && ch1 <= 'Z'))) {\n-                            fileName = fileName.substring(2);\n+    private static String normalizeFileName(String s, final boolean b) {\n+        if (!b) {\n+            final String lowerCase = System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);\n+            if (lowerCase != null) {\n+                if (lowerCase.startsWith(\"windows\")) {\n+                    if (s.length() > 2) {\n+                        final char char1 = s.charAt(0);\n+                        if (s.charAt(1) == ':' && ((char1 >= 'a' && char1 <= 'z') || (char1 >= 'A' && char1 <= 'Z'))) {\n+                            s = s.substring(2);\n                         }\n                     }\n                 }\n-                else if (osname.contains(\"netware\")) {\n-                    final int colon = fileName.indexOf(58);\n-                    if (colon != -1) {\n-                        fileName = fileName.substring(colon + 1);\n+                else if (lowerCase.contains(\"netware\")) {\n+                    final int index = s.indexOf(58);\n+                    if (index != -1) {\n+                        s = s.substring(index + 1);\n                     }\n                 }\n             }\n         }\n-        for (fileName = fileName.replace(File.separatorChar, '/'); !preserveAbsolutePath && fileName.startsWith(\"/\"); fileName = fileName.substring(1)) {}\n-        return fileName;\n+        for (s = s.replace(File.separatorChar, '/'); !b && s.startsWith(\"/\"); s = s.substring(1)) {}\n+        return s;\n     }\n     \n-    private int evaluateType(final byte[] header) {\n-        if (ArchiveUtils.matchAsciiBuffer(\"ustar \", header, 257, 6)) {\n+    private int evaluateType(final byte[] array) {\n+        if (ArchiveUtils.matchAsciiBuffer(\"ustar \", array, 257, 6)) {\n             return 2;\n         }\n-        if (!ArchiveUtils.matchAsciiBuffer(\"ustar\\u0000\", header, 257, 6)) {\n+        if (!ArchiveUtils.matchAsciiBuffer(\"ustar\\u0000\", array, 257, 6)) {\n             return 0;\n         }\n-        if (ArchiveUtils.matchAsciiBuffer(\"tar\\u0000\", header, 508, 4)) {\n+        if (ArchiveUtils.matchAsciiBuffer(\"tar\\u0000\", array, 508, 4)) {\n             return 4;\n         }\n         return 3;\n     }\n     \n-    void fillGNUSparse0xData(final Map<String, String> headers) {\n+    void fillGNUSparse0xData(final Map<String, String> map) {\n         this.paxGNUSparse = true;\n-        this.realSize = Integer.parseInt(headers.get(\"GNU.sparse.size\"));\n-        if (headers.containsKey(\"GNU.sparse.name\")) {\n-            this.name = headers.get(\"GNU.sparse.name\");\n+        this.realSize = Integer.parseInt((String)map.get(\"GNU.sparse.size\"));\n+        if (map.containsKey(\"GNU.sparse.name\")) {\n+            this.name = map.get(\"GNU.sparse.name\");\n         }\n     }\n     \n-    void fillGNUSparse1xData(final Map<String, String> headers) {\n+    void fillGNUSparse1xData(final Map<String, String> map) {\n         this.paxGNUSparse = true;\n-        this.realSize = Integer.parseInt(headers.get(\"GNU.sparse.realsize\"));\n-        this.name = headers.get(\"GNU.sparse.name\");\n+        this.realSize = Integer.parseInt(map.get(\"GNU.sparse.realsize\"));\n+        this.name = map.get(\"GNU.sparse.name\");\n     }\n     \n-    void fillStarSparseData(final Map<String, String> headers) {\n+    void fillStarSparseData(final Map<String, String> map) {\n         this.starSparse = true;\n-        if (headers.containsKey(\"SCHILY.realsize\")) {\n-            this.realSize = Long.parseLong(headers.get(\"SCHILY.realsize\"));\n+        if (map.containsKey(\"SCHILY.realsize\")) {\n+            this.realSize = Long.parseLong(map.get(\"SCHILY.realsize\"));\n         }\n     }\n     \n     static {\n         EMPTY_TAR_ARCHIVE_ENTRIES = new TarArchiveEntry[0];\n     }\n }\n"}]}
