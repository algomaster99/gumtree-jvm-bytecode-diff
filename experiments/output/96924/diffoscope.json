{"diffoscope-json-version": 1, "source1": "first/CheckstyleAntTask.class", "source2": "second/CheckstyleAntTask.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -138,34 +138,40 @@\n             }\n             this.realExecute(version);\n         }\n         finally {\n             final long endTime = System.currentTimeMillis();\n             this.log(\"Total execution took \" + (endTime - startTime) + \" ms.\", 3);\n         }\n+        final long endTime = System.currentTimeMillis();\n+        this.log(\"Total execution took \" + (endTime - startTime) + \" ms.\", 3);\n     }\n     \n     private void realExecute(final String checkstyleVersion) {\n         RootModule rootModule = null;\n         try {\n             rootModule = this.createRootModule();\n-            final AuditListener[] listeners2;\n-            final AuditListener[] listeners = listeners2 = this.getListeners();\n-            for (final AuditListener element : listeners2) {\n+            final AuditListener[] listeners = this.getListeners();\n+            AuditListener[] array;\n+            for (int length = (array = listeners).length, i = 0; i < length; ++i) {\n+                final AuditListener element = array[i];\n                 rootModule.addListener(element);\n             }\n             final SeverityLevelCounter warningCounter = new SeverityLevelCounter(SeverityLevel.WARNING);\n             rootModule.addListener((AuditListener)warningCounter);\n             this.processFiles(rootModule, warningCounter, checkstyleVersion);\n         }\n         finally {\n             if (rootModule != null) {\n                 rootModule.destroy();\n             }\n         }\n+        if (rootModule != null) {\n+            rootModule.destroy();\n+        }\n     }\n     \n     private void processFiles(final RootModule rootModule, final SeverityLevelCounter warningCounter, final String checkstyleVersion) {\n         final long startTime = System.currentTimeMillis();\n         final List<File> files = this.getFilesToCheck();\n         final long endTime = System.currentTimeMillis();\n         this.log(\"To locate the files took \" + (endTime - startTime) + \" ms.\", 3);\n@@ -204,33 +210,56 @@\n                 ignoredModulesOptions = ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n             }\n             else {\n                 ignoredModulesOptions = ConfigurationLoader.IgnoredModulesOptions.OMIT;\n             }\n             final Configuration configuration = ConfigurationLoader.loadConfiguration(this.config, (PropertyResolver)new PropertiesExpander(props), ignoredModulesOptions, threadModeSettings);\n             final ClassLoader moduleClassLoader = Checker.class.getClassLoader();\n-            final ModuleFactory factory = (ModuleFactory)new PackageObjectFactory(Checker.class.getPackage().getName(), moduleClassLoader);\n+            final ModuleFactory factory = (ModuleFactory)new PackageObjectFactory(String.valueOf(Checker.class.getPackage().getName()) + \".\", moduleClassLoader);\n             rootModule = (RootModule)factory.createModule(configuration.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(configuration);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: config {%s}.\", this.config), (Throwable)ex);\n         }\n         return rootModule;\n     }\n     \n     private Properties createOverridingProperties() {\n         final Properties returnValue = new Properties();\n         if (this.properties != null) {\n-            try (final InputStream inStream = Files.newInputStream(this.properties.toPath(), new OpenOption[0])) {\n-                returnValue.load(inStream);\n+            try {\n+                Throwable t = null;\n+                try {\n+                    final InputStream inStream = Files.newInputStream(this.properties.toPath(), new OpenOption[0]);\n+                    try {\n+                        returnValue.load(inStream);\n+                    }\n+                    finally {\n+                        if (inStream != null) {\n+                            inStream.close();\n+                        }\n+                    }\n+                }\n+                finally {\n+                    if (t == null) {\n+                        final Throwable exception;\n+                        t = exception;\n+                    }\n+                    else {\n+                        final Throwable exception;\n+                        if (t != exception) {\n+                            t.addSuppressed(exception);\n+                        }\n+                    }\n+                }\n             }\n             catch (final IOException ex) {\n-                throw new BuildException(\"Error loading Properties file '\" + this.properties, (Throwable)ex, this.getLocation());\n+                throw new BuildException(\"Error loading Properties file '\" + this.properties + \"'\", (Throwable)ex, this.getLocation());\n             }\n         }\n         final Map<String, Object> antProps = this.getProject().getProperties();\n         for (final Map.Entry<String, Object> entry : antProps.entrySet()) {\n             final String value = String.valueOf(entry.getValue());\n             returnValue.setProperty(entry.getKey(), value);\n         }\n@@ -283,18 +312,20 @@\n             allFiles.addAll(pathFiles);\n         }\n         return allFiles;\n     }\n     \n     private List<File> scanPath(final Path path, final int pathIndex) {\n         final String[] resources = path.list();\n-        this.log(pathIndex + \") Scanning path \" + path, 3);\n+        this.log(String.valueOf(pathIndex) + \") Scanning path \" + path, 3);\n         final List<File> allFiles = new ArrayList<File>();\n         int concreteFilesCount = 0;\n-        for (final String resource : resources) {\n+        String[] array;\n+        for (int length = (array = resources).length, i = 0; i < length; ++i) {\n+            final String resource = array[i];\n             final File file = new File(resource);\n             if (file.isFile()) {\n                 ++concreteFilesCount;\n                 allFiles.add(file);\n             }\n             else {\n                 final DirectoryScanner scanner = new DirectoryScanner();\n@@ -320,10 +351,10 @@\n         }\n         return allFiles;\n     }\n     \n     private List<File> retrieveAllScannedFiles(final DirectoryScanner scanner, final int logIndex) {\n         final String[] fileNames = scanner.getIncludedFiles();\n         this.log(String.format(Locale.ROOT, \"%d) Adding %d files from directory %s\", Integer.valueOf(logIndex), Integer.valueOf(fileNames.length), scanner.getBasedir()), 3);\n-        return Arrays.stream(fileNames).map(name -> scanner.getBasedir() + File.separator + name).map((Function<? super Object, ?>)File::new).collect((Collector<? super Object, ?, List<File>>)Collectors.toList());\n+        return Arrays.stream(fileNames).map(name -> directoryScanner.getBasedir() + File.separator + name).map((Function<? super Object, ?>)File::new).collect((Collector<? super Object, ?, List<File>>)Collectors.toList());\n     }\n }\n"}]}
