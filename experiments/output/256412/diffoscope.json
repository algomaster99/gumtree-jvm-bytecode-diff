{"diffoscope-json-version": 1, "source1": "first/ZipArchiveEntry.class", "source2": "second/ZipArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,17 +4,17 @@\n import java.util.Date;\n import org.apache.commons.compress.utils.ByteUtils;\n import java.util.NoSuchElementException;\n import java.util.stream.Stream;\n import java.util.function.Predicate;\n import java.util.Objects;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Collection;\n import java.util.Arrays;\n-import java.util.List;\n import java.util.ArrayList;\n import java.nio.file.attribute.FileTime;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.LinkOption;\n import java.nio.file.Path;\n import java.io.File;\n@@ -48,123 +48,123 @@\n     private long dataOffset;\n     private boolean isStreamContiguous;\n     private ZipArchiveEntry.NameSource nameSource;\n     private ZipArchiveEntry.CommentSource commentSource;\n     private long diskNumberStart;\n     static final ZipArchiveEntry[] EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY;\n     \n-    public ZipArchiveEntry(final String name) {\n-        super(name);\n+    public ZipArchiveEntry(final String s) {\n+        super(s);\n         this.method = -1;\n         this.size = -1L;\n         this.platform = 0;\n         this.gpb = new GeneralPurposeBit();\n         this.localHeaderOffset = -1L;\n         this.dataOffset = -1L;\n         this.nameSource = ZipArchiveEntry.NameSource.NAME;\n         this.commentSource = ZipArchiveEntry.CommentSource.COMMENT;\n-        this.setName(name);\n+        this.setName(s);\n     }\n     \n-    public ZipArchiveEntry(final ZipEntry entry) throws ZipException {\n-        super(entry);\n+    public ZipArchiveEntry(final ZipEntry e) throws ZipException {\n+        super(e);\n         this.method = -1;\n         this.size = -1L;\n         this.platform = 0;\n         this.gpb = new GeneralPurposeBit();\n         this.localHeaderOffset = -1L;\n         this.dataOffset = -1L;\n         this.nameSource = ZipArchiveEntry.NameSource.NAME;\n         this.commentSource = ZipArchiveEntry.CommentSource.COMMENT;\n-        this.setName(entry.getName());\n-        final byte[] extra = entry.getExtra();\n+        this.setName(e.getName());\n+        final byte[] extra = e.getExtra();\n         if (extra != null) {\n             this.setExtraFields(ExtraFieldUtils.parse(extra, true, (ExtraFieldParsingBehavior)ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT));\n         }\n         else {\n             this.setExtra();\n         }\n-        this.setMethod(entry.getMethod());\n-        this.size = entry.getSize();\n+        this.setMethod(e.getMethod());\n+        this.size = e.getSize();\n     }\n     \n-    public ZipArchiveEntry(final ZipArchiveEntry entry) throws ZipException {\n-        this((ZipEntry)entry);\n-        this.setInternalAttributes(entry.getInternalAttributes());\n-        this.setExternalAttributes(entry.getExternalAttributes());\n+    public ZipArchiveEntry(final ZipArchiveEntry zipArchiveEntry) throws ZipException {\n+        this((ZipEntry)zipArchiveEntry);\n+        this.setInternalAttributes(zipArchiveEntry.getInternalAttributes());\n+        this.setExternalAttributes(zipArchiveEntry.getExternalAttributes());\n         this.setExtraFields(this.getAllExtraFieldsNoCopy());\n-        this.setPlatform(entry.getPlatform());\n-        final GeneralPurposeBit other = entry.getGeneralPurposeBit();\n-        this.setGeneralPurposeBit((other == null) ? null : ((GeneralPurposeBit)other.clone()));\n+        this.setPlatform(zipArchiveEntry.getPlatform());\n+        final GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();\n+        this.setGeneralPurposeBit((generalPurposeBit == null) ? null : ((GeneralPurposeBit)generalPurposeBit.clone()));\n     }\n     \n     protected ZipArchiveEntry() {\n         this(\"\");\n     }\n     \n-    public ZipArchiveEntry(final File inputFile, final String entryName) {\n-        this((inputFile.isDirectory() && !entryName.endsWith(\"/\")) ? (entryName + \"/\") : entryName);\n-        if (inputFile.isFile()) {\n-            this.setSize(inputFile.length());\n+    public ZipArchiveEntry(final File file, final String str) {\n+        this((file.isDirectory() && !str.endsWith(\"/\")) ? (str + \"/\") : str);\n+        if (file.isFile()) {\n+            this.setSize(file.length());\n         }\n-        this.setTime(inputFile.lastModified());\n+        this.setTime(file.lastModified());\n     }\n     \n-    public ZipArchiveEntry(final Path inputPath, final String entryName, final LinkOption... options) throws IOException {\n-        this((Files.isDirectory(inputPath, options) && !entryName.endsWith(\"/\")) ? (entryName + \"/\") : entryName);\n-        if (Files.isRegularFile(inputPath, options)) {\n-            this.setSize(Files.size(inputPath));\n+    public ZipArchiveEntry(final Path path, final String str, final LinkOption... options) throws IOException {\n+        this((Files.isDirectory(path, options) && !str.endsWith(\"/\")) ? (str + \"/\") : str);\n+        if (Files.isRegularFile(path, options)) {\n+            this.setSize(Files.size(path));\n         }\n-        this.setTime(Files.getLastModifiedTime(inputPath, options));\n+        this.setTime(Files.getLastModifiedTime(path, options));\n     }\n     \n     public void setTime(final FileTime fileTime) {\n         this.setTime(fileTime.toMillis());\n     }\n     \n     @Override\n     public Object clone() {\n-        final ZipArchiveEntry e = (ZipArchiveEntry)super.clone();\n-        e.setInternalAttributes(this.getInternalAttributes());\n-        e.setExternalAttributes(this.getExternalAttributes());\n-        e.setExtraFields(this.getAllExtraFieldsNoCopy());\n-        return e;\n+        final ZipArchiveEntry zipArchiveEntry = (ZipArchiveEntry)super.clone();\n+        zipArchiveEntry.setInternalAttributes(this.getInternalAttributes());\n+        zipArchiveEntry.setExternalAttributes(this.getExternalAttributes());\n+        zipArchiveEntry.setExtraFields(this.getAllExtraFieldsNoCopy());\n+        return zipArchiveEntry;\n     }\n     \n     @Override\n     public int getMethod() {\n         return this.method;\n     }\n     \n     @Override\n-    public void setMethod(final int method) {\n-        if (method < 0) {\n-            throw new IllegalArgumentException(\"ZIP compression method can not be negative: \" + method);\n+    public void setMethod(final int n) {\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"ZIP compression method can not be negative: \" + n);\n         }\n-        this.method = method;\n+        this.method = n;\n     }\n     \n     public int getInternalAttributes() {\n         return this.internalAttributes;\n     }\n     \n-    public void setInternalAttributes(final int value) {\n-        this.internalAttributes = value;\n+    public void setInternalAttributes(final int internalAttributes) {\n+        this.internalAttributes = internalAttributes;\n     }\n     \n     public long getExternalAttributes() {\n         return this.externalAttributes;\n     }\n     \n-    public void setExternalAttributes(final long value) {\n-        this.externalAttributes = value;\n+    public void setExternalAttributes(final long externalAttributes) {\n+        this.externalAttributes = externalAttributes;\n     }\n     \n-    public void setUnixMode(final int mode) {\n-        this.setExternalAttributes(mode << 16 | (((mode & 0x80) == 0x0) ? 1 : 0) | (this.isDirectory() ? 16 : 0));\n+    public void setUnixMode(final int n) {\n+        this.setExternalAttributes(n << 16 | (((n & 0x80) == 0x0) ? 1 : 0) | (this.isDirectory() ? 16 : 0));\n         this.platform = 3;\n     }\n     \n     public int getUnixMode() {\n         return (this.platform != 3) ? 0 : ((int)(this.getExternalAttributes() >> 16 & 0xFFFFL));\n     }\n     \n@@ -180,220 +180,217 @@\n         this.platform = platform;\n     }\n     \n     protected int getAlignment() {\n         return this.alignment;\n     }\n     \n-    public void setAlignment(final int alignment) {\n-        if ((alignment & alignment - 1) != 0x0 || alignment > 65535) {\n-            throw new IllegalArgumentException(\"Invalid value for alignment, must be power of two and no bigger than 65535 but is \" + alignment);\n+    public void setAlignment(final int n) {\n+        if ((n & n - 1) != 0x0 || n > 65535) {\n+            throw new IllegalArgumentException(\"Invalid value for alignment, must be power of two and no bigger than 65535 but is \" + n);\n         }\n-        this.alignment = alignment;\n+        this.alignment = n;\n     }\n     \n-    public void setExtraFields(final ZipExtraField[] fields) {\n+    public void setExtraFields(final ZipExtraField[] array) {\n         this.unparseableExtra = null;\n-        final List<ZipExtraField> newFields = new ArrayList<ZipExtraField>();\n-        if (fields != null) {\n-            for (final ZipExtraField field : fields) {\n-                if (field instanceof UnparseableExtraFieldData) {\n-                    this.unparseableExtra = (UnparseableExtraFieldData)field;\n+        final ArrayList list = new ArrayList();\n+        if (array != null) {\n+            for (final ZipExtraField zipExtraField : array) {\n+                if (zipExtraField instanceof UnparseableExtraFieldData) {\n+                    this.unparseableExtra = (UnparseableExtraFieldData)zipExtraField;\n                 }\n                 else {\n-                    newFields.add(field);\n+                    list.add(zipExtraField);\n                 }\n             }\n         }\n-        this.extraFields = newFields.toArray(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY);\n+        this.extraFields = (ZipExtraField[])list.toArray(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY);\n         this.setExtra();\n     }\n     \n     public ZipExtraField[] getExtraFields() {\n         return this.getParseableExtraFields();\n     }\n     \n-    public ZipExtraField[] getExtraFields(final boolean includeUnparseable) {\n-        return includeUnparseable ? this.getAllExtraFields() : this.getParseableExtraFields();\n+    public ZipExtraField[] getExtraFields(final boolean b) {\n+        return b ? this.getAllExtraFields() : this.getParseableExtraFields();\n     }\n     \n-    public ZipExtraField[] getExtraFields(final ExtraFieldParsingBehavior parsingBehavior) throws ZipException {\n-        if (parsingBehavior == ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT) {\n+    public ZipExtraField[] getExtraFields(final ExtraFieldParsingBehavior extraFieldParsingBehavior) throws ZipException {\n+        if (extraFieldParsingBehavior == ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT) {\n             return this.getExtraFields(true);\n         }\n-        if (parsingBehavior == ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT) {\n+        if (extraFieldParsingBehavior == ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT) {\n             return this.getExtraFields(false);\n         }\n-        final byte[] local = this.getExtra();\n-        final List<ZipExtraField> localFields = new ArrayList<ZipExtraField>(Arrays.asList(ExtraFieldUtils.parse(local, true, parsingBehavior)));\n-        final byte[] central = this.getCentralDirectoryExtra();\n-        final List<ZipExtraField> centralFields = new ArrayList<ZipExtraField>(Arrays.asList(ExtraFieldUtils.parse(central, false, parsingBehavior)));\n-        final List<ZipExtraField> merged = new ArrayList<ZipExtraField>();\n-        for (final ZipExtraField l : localFields) {\n-            ZipExtraField c = null;\n-            if (l instanceof UnparseableExtraFieldData) {\n-                c = this.findUnparseable(centralFields);\n+        final ArrayList list = new ArrayList((Collection<? extends E>)Arrays.asList(ExtraFieldUtils.parse(this.getExtra(), true, extraFieldParsingBehavior)));\n+        final ArrayList list2 = new ArrayList((Collection<? extends E>)Arrays.asList(ExtraFieldUtils.parse(this.getCentralDirectoryExtra(), false, extraFieldParsingBehavior)));\n+        final ArrayList list3 = new ArrayList();\n+        for (final ZipExtraField zipExtraField : list) {\n+            ZipExtraField zipExtraField2;\n+            if (zipExtraField instanceof UnparseableExtraFieldData) {\n+                zipExtraField2 = this.findUnparseable(list2);\n             }\n             else {\n-                c = this.findMatching(l.getHeaderId(), centralFields);\n+                zipExtraField2 = this.findMatching(zipExtraField.getHeaderId(), list2);\n             }\n-            if (c != null) {\n-                final byte[] cd = c.getCentralDirectoryData();\n-                if (cd != null && cd.length > 0) {\n-                    l.parseFromCentralDirectoryData(cd, 0, cd.length);\n+            if (zipExtraField2 != null) {\n+                final byte[] centralDirectoryData = zipExtraField2.getCentralDirectoryData();\n+                if (centralDirectoryData != null && centralDirectoryData.length > 0) {\n+                    zipExtraField.parseFromCentralDirectoryData(centralDirectoryData, 0, centralDirectoryData.length);\n                 }\n-                centralFields.remove(c);\n+                list2.remove(zipExtraField2);\n             }\n-            merged.add(l);\n+            list3.add(zipExtraField);\n         }\n-        merged.addAll(centralFields);\n-        return merged.toArray(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY);\n+        list3.addAll(list2);\n+        return (ZipExtraField[])list3.toArray(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY);\n     }\n     \n     private ZipExtraField[] getParseableExtraFieldsNoCopy() {\n         if (this.extraFields == null) {\n             return ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY;\n         }\n         return this.extraFields;\n     }\n     \n     private ZipExtraField[] getParseableExtraFields() {\n-        final ZipExtraField[] parseableExtraFields = this.getParseableExtraFieldsNoCopy();\n-        return (parseableExtraFields == this.extraFields) ? this.copyOf(parseableExtraFields, parseableExtraFields.length) : parseableExtraFields;\n+        final ZipExtraField[] parseableExtraFieldsNoCopy = this.getParseableExtraFieldsNoCopy();\n+        return (parseableExtraFieldsNoCopy == this.extraFields) ? this.copyOf(parseableExtraFieldsNoCopy, parseableExtraFieldsNoCopy.length) : parseableExtraFieldsNoCopy;\n     }\n     \n     private ZipExtraField[] getAllExtraFieldsNoCopy() {\n         if (this.extraFields == null) {\n             return this.getUnparseableOnly();\n         }\n         return (this.unparseableExtra != null) ? this.getMergedFields() : this.extraFields;\n     }\n     \n     private ZipExtraField[] getMergedFields() {\n-        final ZipExtraField[] zipExtraFields = this.copyOf(this.extraFields, this.extraFields.length + 1);\n-        zipExtraFields[this.extraFields.length] = (ZipExtraField)this.unparseableExtra;\n-        return zipExtraFields;\n+        final ZipExtraField[] copy = this.copyOf(this.extraFields, this.extraFields.length + 1);\n+        copy[this.extraFields.length] = (ZipExtraField)this.unparseableExtra;\n+        return copy;\n     }\n     \n     private ZipExtraField[] getUnparseableOnly() {\n         return (this.unparseableExtra == null) ? ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY : new ZipExtraField[] { (ZipExtraField)this.unparseableExtra };\n     }\n     \n     private ZipExtraField[] getAllExtraFields() {\n         final ZipExtraField[] allExtraFieldsNoCopy = this.getAllExtraFieldsNoCopy();\n         return (allExtraFieldsNoCopy == this.extraFields) ? this.copyOf(allExtraFieldsNoCopy, allExtraFieldsNoCopy.length) : allExtraFieldsNoCopy;\n     }\n     \n-    private ZipExtraField findUnparseable(final List<ZipExtraField> fs) {\n-        final Stream<Object> stream = fs.stream();\n+    private ZipExtraField findUnparseable(final List<ZipExtraField> list) {\n+        final Stream<Object> stream = list.stream();\n         final Class<UnparseableExtraFieldData> obj = UnparseableExtraFieldData.class;\n         Objects.requireNonNull(obj);\n         return stream.filter((Predicate<? super ZipExtraField>)obj::isInstance).findFirst().orElse(null);\n     }\n     \n-    private ZipExtraField findMatching(final ZipShort headerId, final List<ZipExtraField> fs) {\n-        return fs.stream().filter(f -> headerId.equals((Object)f.getHeaderId())).findFirst().orElse(null);\n+    private ZipExtraField findMatching(final ZipShort zipShort, final List<ZipExtraField> list) {\n+        return list.stream().filter(zipExtraField -> zipShort2.equals((Object)zipExtraField.getHeaderId())).findFirst().orElse(null);\n     }\n     \n-    public void addExtraField(final ZipExtraField ze) {\n-        if (ze instanceof UnparseableExtraFieldData) {\n-            this.unparseableExtra = (UnparseableExtraFieldData)ze;\n+    public void addExtraField(final ZipExtraField zipExtraField) {\n+        if (zipExtraField instanceof UnparseableExtraFieldData) {\n+            this.unparseableExtra = (UnparseableExtraFieldData)zipExtraField;\n         }\n         else if (this.extraFields == null) {\n-            this.extraFields = new ZipExtraField[] { ze };\n+            this.extraFields = new ZipExtraField[] { zipExtraField };\n         }\n         else {\n-            if (this.getExtraField(ze.getHeaderId()) != null) {\n-                this.removeExtraField(ze.getHeaderId());\n+            if (this.getExtraField(zipExtraField.getHeaderId()) != null) {\n+                this.removeExtraField(zipExtraField.getHeaderId());\n             }\n-            final ZipExtraField[] zipExtraFields = this.copyOf(this.extraFields, this.extraFields.length + 1);\n-            zipExtraFields[zipExtraFields.length - 1] = ze;\n-            this.extraFields = zipExtraFields;\n+            final ZipExtraField[] copy = this.copyOf(this.extraFields, this.extraFields.length + 1);\n+            copy[copy.length - 1] = zipExtraField;\n+            this.extraFields = copy;\n         }\n         this.setExtra();\n     }\n     \n-    public void addAsFirstExtraField(final ZipExtraField ze) {\n-        if (ze instanceof UnparseableExtraFieldData) {\n-            this.unparseableExtra = (UnparseableExtraFieldData)ze;\n+    public void addAsFirstExtraField(final ZipExtraField zipExtraField) {\n+        if (zipExtraField instanceof UnparseableExtraFieldData) {\n+            this.unparseableExtra = (UnparseableExtraFieldData)zipExtraField;\n         }\n         else {\n-            if (this.getExtraField(ze.getHeaderId()) != null) {\n-                this.removeExtraField(ze.getHeaderId());\n+            if (this.getExtraField(zipExtraField.getHeaderId()) != null) {\n+                this.removeExtraField(zipExtraField.getHeaderId());\n             }\n-            final ZipExtraField[] copy = this.extraFields;\n-            final int newLen = (this.extraFields != null) ? (this.extraFields.length + 1) : 1;\n-            (this.extraFields = new ZipExtraField[newLen])[0] = ze;\n-            if (copy != null) {\n-                System.arraycopy(copy, 0, this.extraFields, 1, this.extraFields.length - 1);\n+            final ZipExtraField[] extraFields = this.extraFields;\n+            (this.extraFields = new ZipExtraField[(this.extraFields != null) ? (this.extraFields.length + 1) : 1])[0] = zipExtraField;\n+            if (extraFields != null) {\n+                System.arraycopy(extraFields, 0, this.extraFields, 1, this.extraFields.length - 1);\n             }\n         }\n         this.setExtra();\n     }\n     \n-    public void removeExtraField(final ZipShort type) {\n+    public void removeExtraField(final ZipShort zipShort) {\n         if (this.extraFields == null) {\n             throw new NoSuchElementException();\n         }\n-        final List<ZipExtraField> newResult = new ArrayList<ZipExtraField>();\n-        for (final ZipExtraField extraField : this.extraFields) {\n-            if (!type.equals((Object)extraField.getHeaderId())) {\n-                newResult.add(extraField);\n+        final ArrayList list = new ArrayList();\n+        for (final ZipExtraField zipExtraField : this.extraFields) {\n+            if (!zipShort.equals((Object)zipExtraField.getHeaderId())) {\n+                list.add(zipExtraField);\n             }\n         }\n-        if (this.extraFields.length == newResult.size()) {\n+        if (this.extraFields.length == list.size()) {\n             throw new NoSuchElementException();\n         }\n-        this.extraFields = newResult.toArray(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY);\n+        this.extraFields = (ZipExtraField[])list.toArray(ExtraFieldUtils.EMPTY_ZIP_EXTRA_FIELD_ARRAY);\n         this.setExtra();\n     }\n     \n     public void removeUnparseableExtraFieldData() {\n         if (this.unparseableExtra == null) {\n             throw new NoSuchElementException();\n         }\n         this.unparseableExtra = null;\n         this.setExtra();\n     }\n     \n-    public ZipExtraField getExtraField(final ZipShort type) {\n+    public ZipExtraField getExtraField(final ZipShort zipShort) {\n         if (this.extraFields != null) {\n-            for (final ZipExtraField extraField : this.extraFields) {\n-                if (type.equals((Object)extraField.getHeaderId())) {\n-                    return extraField;\n+            for (final ZipExtraField zipExtraField : this.extraFields) {\n+                if (zipShort.equals((Object)zipExtraField.getHeaderId())) {\n+                    return zipExtraField;\n                 }\n             }\n         }\n         return null;\n     }\n     \n     public UnparseableExtraFieldData getUnparseableExtraFieldData() {\n         return this.unparseableExtra;\n     }\n     \n     @Override\n-    public void setExtra(final byte[] extra) throws RuntimeException {\n+    public void setExtra(final byte[] array) throws RuntimeException {\n         try {\n-            this.mergeExtraFields(ExtraFieldUtils.parse(extra, true, (ExtraFieldParsingBehavior)ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT), true);\n+            this.mergeExtraFields(ExtraFieldUtils.parse(array, true, (ExtraFieldParsingBehavior)ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT), true);\n         }\n-        catch (final ZipException e) {\n-            throw new IllegalArgumentException(\"Error parsing extra fields for entry: \" + this.getName() + \" - \" + e.getMessage(), e);\n+        catch (final ZipException cause) {\n+            throw new IllegalArgumentException(\"Error parsing extra fields for entry: \" + this.getName() + \" - \" + cause.getMessage(), cause);\n         }\n     }\n     \n     protected void setExtra() {\n         super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(this.getAllExtraFieldsNoCopy()));\n     }\n     \n-    public void setCentralDirectoryExtra(final byte[] b) {\n+    public void setCentralDirectoryExtra(final byte[] array) {\n         try {\n-            this.mergeExtraFields(ExtraFieldUtils.parse(b, false, (ExtraFieldParsingBehavior)ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT), false);\n+            this.mergeExtraFields(ExtraFieldUtils.parse(array, false, (ExtraFieldParsingBehavior)ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT), false);\n         }\n-        catch (final ZipException e) {\n-            throw new IllegalArgumentException(e.getMessage(), e);\n+        catch (final ZipException cause) {\n+            throw new IllegalArgumentException(cause.getMessage(), cause);\n         }\n     }\n     \n     public byte[] getLocalFileDataExtra() {\n         final byte[] extra = this.getExtra();\n         return (extra != null) ? extra : ByteUtils.EMPTY_BYTE_ARRAY;\n     }\n@@ -408,19 +405,19 @@\n     }\n     \n     @Override\n     public boolean isDirectory() {\n         return this.getName().endsWith(\"/\");\n     }\n     \n-    protected void setName(String name) {\n-        if (name != null && this.getPlatform() == 0 && !name.contains(\"/\")) {\n-            name = name.replace('\\\\', '/');\n+    protected void setName(String replace) {\n+        if (replace != null && this.getPlatform() == 0 && !replace.contains(\"/\")) {\n+            replace = replace.replace('\\\\', '/');\n         }\n-        this.name = name;\n+        this.name = replace;\n     }\n     \n     @Override\n     public long getSize() {\n         return this.size;\n     }\n     \n@@ -473,90 +470,88 @@\n         return this.getName().hashCode();\n     }\n     \n     public GeneralPurposeBit getGeneralPurposeBit() {\n         return this.gpb;\n     }\n     \n-    public void setGeneralPurposeBit(final GeneralPurposeBit b) {\n-        this.gpb = b;\n+    public void setGeneralPurposeBit(final GeneralPurposeBit gpb) {\n+        this.gpb = gpb;\n     }\n     \n-    private void mergeExtraFields(final ZipExtraField[] f, final boolean local) {\n+    private void mergeExtraFields(final ZipExtraField[] extraFields, final boolean b) {\n         if (this.extraFields == null) {\n-            this.setExtraFields(f);\n+            this.setExtraFields(extraFields);\n         }\n         else {\n-            for (final ZipExtraField element : f) {\n-                ZipExtraField existing;\n-                if (element instanceof UnparseableExtraFieldData) {\n-                    existing = (ZipExtraField)this.unparseableExtra;\n+            for (final ZipExtraField zipExtraField : extraFields) {\n+                Object o;\n+                if (zipExtraField instanceof UnparseableExtraFieldData) {\n+                    o = this.unparseableExtra;\n                 }\n                 else {\n-                    existing = this.getExtraField(element.getHeaderId());\n+                    o = this.getExtraField(zipExtraField.getHeaderId());\n                 }\n-                if (existing == null) {\n-                    this.addExtraField(element);\n+                if (o == null) {\n+                    this.addExtraField(zipExtraField);\n                 }\n                 else {\n-                    final byte[] b = local ? element.getLocalFileDataData() : element.getCentralDirectoryData();\n+                    final byte[] array = b ? zipExtraField.getLocalFileDataData() : zipExtraField.getCentralDirectoryData();\n                     try {\n-                        if (local) {\n-                            existing.parseFromLocalFileData(b, 0, b.length);\n+                        if (b) {\n+                            ((ZipExtraField)o).parseFromLocalFileData(array, 0, array.length);\n                         }\n                         else {\n-                            existing.parseFromCentralDirectoryData(b, 0, b.length);\n+                            ((ZipExtraField)o).parseFromCentralDirectoryData(array, 0, array.length);\n                         }\n                     }\n                     catch (final ZipException ex) {\n-                        final UnrecognizedExtraField u = new UnrecognizedExtraField();\n-                        u.setHeaderId(existing.getHeaderId());\n-                        if (local) {\n-                            u.setLocalFileDataData(b);\n-                            u.setCentralDirectoryData(existing.getCentralDirectoryData());\n+                        final UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();\n+                        unrecognizedExtraField.setHeaderId(((ZipExtraField)o).getHeaderId());\n+                        if (b) {\n+                            unrecognizedExtraField.setLocalFileDataData(array);\n+                            unrecognizedExtraField.setCentralDirectoryData(((ZipExtraField)o).getCentralDirectoryData());\n                         }\n                         else {\n-                            u.setLocalFileDataData(existing.getLocalFileDataData());\n-                            u.setCentralDirectoryData(b);\n+                            unrecognizedExtraField.setLocalFileDataData(((ZipExtraField)o).getLocalFileDataData());\n+                            unrecognizedExtraField.setCentralDirectoryData(array);\n                         }\n-                        this.removeExtraField(existing.getHeaderId());\n-                        this.addExtraField((ZipExtraField)u);\n+                        this.removeExtraField(((ZipExtraField)o).getHeaderId());\n+                        this.addExtraField((ZipExtraField)unrecognizedExtraField);\n                     }\n                 }\n             }\n             this.setExtra();\n         }\n     }\n     \n     public Date getLastModifiedDate() {\n         return new Date(this.getTime());\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null || this.getClass() != obj.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final ZipArchiveEntry other = (ZipArchiveEntry)obj;\n-        final String myName = this.getName();\n-        final String otherName = other.getName();\n-        if (!Objects.equals(myName, otherName)) {\n+        final ZipArchiveEntry zipArchiveEntry = (ZipArchiveEntry)o;\n+        if (!Objects.equals(this.getName(), zipArchiveEntry.getName())) {\n             return false;\n         }\n-        String myComment = this.getComment();\n-        String otherComment = other.getComment();\n-        if (myComment == null) {\n-            myComment = \"\";\n+        String comment = this.getComment();\n+        String comment2 = zipArchiveEntry.getComment();\n+        if (comment == null) {\n+            comment = \"\";\n         }\n-        if (otherComment == null) {\n-            otherComment = \"\";\n+        if (comment2 == null) {\n+            comment2 = \"\";\n         }\n-        return this.getTime() == other.getTime() && myComment.equals(otherComment) && this.getInternalAttributes() == other.getInternalAttributes() && this.getPlatform() == other.getPlatform() && this.getExternalAttributes() == other.getExternalAttributes() && this.getMethod() == other.getMethod() && this.getSize() == other.getSize() && this.getCrc() == other.getCrc() && this.getCompressedSize() == other.getCompressedSize() && Arrays.equals(this.getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(this.getLocalFileDataExtra(), other.getLocalFileDataExtra()) && this.localHeaderOffset == other.localHeaderOffset && this.dataOffset == other.dataOffset && this.gpb.equals((Object)other.gpb);\n+        return this.getTime() == zipArchiveEntry.getTime() && comment.equals(comment2) && this.getInternalAttributes() == zipArchiveEntry.getInternalAttributes() && this.getPlatform() == zipArchiveEntry.getPlatform() && this.getExternalAttributes() == zipArchiveEntry.getExternalAttributes() && this.getMethod() == zipArchiveEntry.getMethod() && this.getSize() == zipArchiveEntry.getSize() && this.getCrc() == zipArchiveEntry.getCrc() && this.getCompressedSize() == zipArchiveEntry.getCompressedSize() && Arrays.equals(this.getCentralDirectoryExtra(), zipArchiveEntry.getCentralDirectoryExtra()) && Arrays.equals(this.getLocalFileDataExtra(), zipArchiveEntry.getLocalFileDataExtra()) && this.localHeaderOffset == zipArchiveEntry.localHeaderOffset && this.dataOffset == zipArchiveEntry.dataOffset && this.gpb.equals((Object)zipArchiveEntry.gpb);\n     }\n     \n     public void setVersionMadeBy(final int versionMadeBy) {\n         this.versionMadeBy = versionMadeBy;\n     }\n     \n     public void setVersionRequired(final int versionRequired) {\n@@ -599,17 +594,17 @@\n         return this.diskNumberStart;\n     }\n     \n     public void setDiskNumberStart(final long diskNumberStart) {\n         this.diskNumberStart = diskNumberStart;\n     }\n     \n-    private ZipExtraField[] copyOf(final ZipExtraField[] src, final int length) {\n-        final ZipExtraField[] cpy = new ZipExtraField[length];\n-        System.arraycopy(src, 0, cpy, 0, Math.min(src.length, length));\n-        return cpy;\n+    private ZipExtraField[] copyOf(final ZipExtraField[] array, final int b) {\n+        final ZipExtraField[] array2 = new ZipExtraField[b];\n+        System.arraycopy(array, 0, array2, 0, Math.min(array.length, b));\n+        return array2;\n     }\n     \n     static {\n         EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY = new ZipArchiveEntry[0];\n     }\n }\n"}]}
