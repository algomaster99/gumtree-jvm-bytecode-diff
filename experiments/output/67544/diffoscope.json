{"diffoscope-json-version": 1, "source1": "first/DefaultConfigurationKey$KeyIterator.class", "source2": "second/DefaultConfigurationKey$KeyIterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,15 +33,15 @@\n         this.hasIndex = this.checkIndex(key);\n         this.attribute = this.checkAttribute(this.current);\n         return this.currentKey(decorated);\n     }\n     \n     @Override\n     public boolean hasNext() {\n-        return this.endIndex < DefaultConfigurationKey.access$100(this.this$0).length();\n+        return this.endIndex < DefaultConfigurationKey.access$0(this.this$0).length();\n     }\n     \n     @Override\n     public Object next() {\n         return this.nextKey();\n     }\n     \n@@ -81,43 +81,43 @@\n         catch (final CloneNotSupportedException cex) {\n             return null;\n         }\n     }\n     \n     private String findNextIndices() {\n         this.startIndex = this.endIndex;\n-        while (this.startIndex < this.this$0.length() && DefaultConfigurationKey.access$200(this.this$0, DefaultConfigurationKey.access$100(this.this$0).substring())) {\n-            this.startIndex += DefaultConfigurationKey.access$300(this.this$0).getPropertyDelimiter().length();\n+        while (this.startIndex < this.this$0.length() && DefaultConfigurationKey.access$1(this.this$0, DefaultConfigurationKey.access$0(this.this$0).substring())) {\n+            this.startIndex += DefaultConfigurationKey.access$2(this.this$0).getPropertyDelimiter().length();\n         }\n         if (this.startIndex >= this.this$0.length()) {\n             this.endIndex = this.this$0.length();\n             this.startIndex = this.endIndex - 1;\n-            return DefaultConfigurationKey.access$100(this.this$0).substring();\n+            return DefaultConfigurationKey.access$0(this.this$0).substring();\n         }\n         return this.nextKeyPart();\n     }\n     \n     private String nextKeyPart() {\n-        int attrIdx = DefaultConfigurationKey.access$100(this.this$0).toString().indexOf(DefaultConfigurationKey.access$300(this.this$0).getAttributeStart(), this.startIndex);\n+        int attrIdx = DefaultConfigurationKey.access$0(this.this$0).toString().indexOf(DefaultConfigurationKey.access$2(this.this$0).getAttributeStart(), this.startIndex);\n         if (attrIdx < 0 || attrIdx == this.startIndex) {\n             attrIdx = this.this$0.length();\n         }\n-        int delIdx = this.nextDelimiterPos(DefaultConfigurationKey.access$100(this.this$0).toString(), this.startIndex, attrIdx);\n+        int delIdx = this.nextDelimiterPos(DefaultConfigurationKey.access$0(this.this$0).toString(), this.startIndex, attrIdx);\n         if (delIdx < 0) {\n             delIdx = attrIdx;\n         }\n         this.endIndex = Math.min(attrIdx, delIdx);\n-        return DefaultConfigurationKey.access$400(this.this$0, DefaultConfigurationKey.access$100(this.this$0).substring());\n+        return DefaultConfigurationKey.access$3(this.this$0, DefaultConfigurationKey.access$0(this.this$0).substring());\n     }\n     \n     private int nextDelimiterPos(final String key, final int pos, final int endPos) {\n         int delimiterPos = pos;\n         boolean found = false;\n         do {\n-            delimiterPos = key.indexOf(DefaultConfigurationKey.access$300(this.this$0).getPropertyDelimiter(), delimiterPos);\n+            delimiterPos = key.indexOf(DefaultConfigurationKey.access$2(this.this$0).getPropertyDelimiter(), delimiterPos);\n             if (delimiterPos < 0 || delimiterPos >= endPos) {\n                 return -1;\n             }\n             final int escapePos = this.escapedPosition(key, delimiterPos);\n             if (escapePos < 0) {\n                 found = true;\n             }\n@@ -125,56 +125,56 @@\n                 delimiterPos = escapePos;\n             }\n         } while (!found);\n         return delimiterPos;\n     }\n     \n     private int escapedPosition(final String key, final int pos) {\n-        if (DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter() == null) {\n+        if (DefaultConfigurationKey.access$2(this.this$0).getEscapedDelimiter() == null) {\n             return -1;\n         }\n         final int escapeOffset = this.escapeOffset();\n         if (escapeOffset < 0 || escapeOffset > pos) {\n             return -1;\n         }\n-        final int escapePos = key.indexOf(DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter(), pos - escapeOffset);\n+        final int escapePos = key.indexOf(DefaultConfigurationKey.access$2(this.this$0).getEscapedDelimiter(), pos - escapeOffset);\n         if (escapePos <= pos && escapePos >= 0) {\n-            return escapePos + DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter().length();\n+            return escapePos + DefaultConfigurationKey.access$2(this.this$0).getEscapedDelimiter().length();\n         }\n         return -1;\n     }\n     \n     private int escapeOffset() {\n-        return DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter().indexOf(DefaultConfigurationKey.access$300(this.this$0).getPropertyDelimiter());\n+        return DefaultConfigurationKey.access$2(this.this$0).getEscapedDelimiter().indexOf(DefaultConfigurationKey.access$2(this.this$0).getPropertyDelimiter());\n     }\n     \n     private boolean checkAttribute(final String key) {\n         if (this.this$0.isAttributeKey(key)) {\n-            this.current = DefaultConfigurationKey.access$500(this.this$0, key);\n+            this.current = DefaultConfigurationKey.access$4(this.this$0, key);\n             return true;\n         }\n         return false;\n     }\n     \n     private boolean checkIndex(final String key) {\n         boolean result = false;\n         try {\n-            final int idx = key.lastIndexOf(DefaultConfigurationKey.access$300(this.this$0).getIndexStart());\n+            final int idx = key.lastIndexOf(DefaultConfigurationKey.access$2(this.this$0).getIndexStart());\n             if (idx > 0) {\n-                final int endidx = key.indexOf(DefaultConfigurationKey.access$300(this.this$0).getIndexEnd(), idx);\n+                final int endidx = key.indexOf(DefaultConfigurationKey.access$2(this.this$0).getIndexEnd(), idx);\n                 if (endidx > idx + 1) {\n                     this.indexValue = Integer.parseInt(key.substring(idx + 1, endidx));\n                     this.current = key.substring(0, idx);\n                     result = true;\n                 }\n             }\n         }\n         catch (final NumberFormatException nfe) {\n             result = false;\n         }\n         return result;\n     }\n     \n     private boolean isAttributeEmulatingMode() {\n-        return DefaultConfigurationKey.access$300(this.this$0).getAttributeEnd() == null && StringUtils.equals((CharSequence)DefaultConfigurationKey.access$300(this.this$0).getPropertyDelimiter(), (CharSequence)DefaultConfigurationKey.access$300(this.this$0).getAttributeStart());\n+        return DefaultConfigurationKey.access$2(this.this$0).getAttributeEnd() == null && StringUtils.equals((CharSequence)DefaultConfigurationKey.access$2(this.this$0).getPropertyDelimiter(), (CharSequence)DefaultConfigurationKey.access$2(this.this$0).getAttributeStart());\n     }\n }\n"}]}
