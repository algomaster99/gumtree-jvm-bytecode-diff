{"diffoscope-json-version": 1, "source1": "first/AnnotationsAttribute$ElementValue.class", "source2": "second/AnnotationsAttribute$ElementValue.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,17 +25,18 @@\n             entries.add(((CPNameAndType)this.value).name);\n             entries.add(((CPNameAndType)this.value).descriptor);\n         }\n         else if (this.value instanceof ClassFileEntry) {\n             entries.add(this.value);\n         }\n         else if (this.value instanceof ElementValue[]) {\n-            final ElementValue[] array;\n-            final ElementValue[] values = array = (ElementValue[])this.value;\n-            for (final ElementValue value2 : array) {\n+            final ElementValue[] values = (ElementValue[])this.value;\n+            ElementValue[] array;\n+            for (int length = (array = values).length, i = 0; i < length; ++i) {\n+                final ElementValue value2 = array[i];\n                 entries.addAll(value2.getClassFileEntries());\n             }\n         }\n         else if (this.value instanceof AnnotationsAttribute.Annotation) {\n             entries.addAll(((AnnotationsAttribute.Annotation)this.value).getClassFileEntries());\n         }\n         return entries;\n@@ -57,17 +58,18 @@\n         else if (this.value instanceof CPNameAndType) {\n             ((CPNameAndType)this.value).resolve(pool);\n         }\n         else if (this.value instanceof AnnotationsAttribute.Annotation) {\n             ((AnnotationsAttribute.Annotation)this.value).resolve(pool);\n         }\n         else if (this.value instanceof ElementValue[]) {\n-            final ElementValue[] array;\n-            final ElementValue[] nestedValues = array = (ElementValue[])this.value;\n-            for (final ElementValue nestedValue : array) {\n+            final ElementValue[] nestedValues = (ElementValue[])this.value;\n+            ElementValue[] array;\n+            for (int length = (array = nestedValues).length, i = 0; i < length; ++i) {\n+                final ElementValue nestedValue = array[i];\n                 nestedValue.resolve(pool);\n             }\n         }\n     }\n     \n     public void writeBody(final DataOutputStream dos) throws IOException {\n         dos.writeByte(this.tag);\n@@ -82,15 +84,17 @@\n         }\n         else {\n             if (!(this.value instanceof ElementValue[])) {\n                 throw new Error(\"\");\n             }\n             final ElementValue[] nestedValues = (ElementValue[])this.value;\n             dos.writeShort(nestedValues.length);\n-            for (final ElementValue nestedValue : nestedValues) {\n+            ElementValue[] array;\n+            for (int length = (array = nestedValues).length, i = 0; i < length; ++i) {\n+                final ElementValue nestedValue = array[i];\n                 nestedValue.writeBody(dos);\n             }\n         }\n     }\n     \n     public int getLength() {\n         switch (this.tag) {\n@@ -107,17 +111,18 @@\n                 return 3;\n             }\n             case 101: {\n                 return 5;\n             }\n             case 91: {\n                 int length = 3;\n-                final ElementValue[] array;\n-                final ElementValue[] nestedValues = array = (ElementValue[])this.value;\n-                for (final ElementValue nestedValue : array) {\n+                final ElementValue[] nestedValues = (ElementValue[])this.value;\n+                ElementValue[] array;\n+                for (int length2 = (array = nestedValues).length, i = 0; i < length2; ++i) {\n+                    final ElementValue nestedValue = array[i];\n                     length += nestedValue.getLength();\n                 }\n                 return length;\n             }\n             case 64: {\n                 return 1 + ((AnnotationsAttribute.Annotation)this.value).getLength();\n             }\n"}]}
