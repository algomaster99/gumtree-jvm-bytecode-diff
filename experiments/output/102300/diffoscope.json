{"diffoscope-json-version": 1, "source1": "first/Nysiis.class", "source2": "second/Nysiis.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,14 +23,33 @@\n     private static final Pattern PAT_SCH;\n     private static final Pattern PAT_EE_IE;\n     private static final Pattern PAT_DT_ETC;\n     private static final char SPACE = ' ';\n     private static final int TRUE_LENGTH = 6;\n     private final boolean strict;\n     \n+    static {\n+        CHARS_A = new char[] { 'A' };\n+        CHARS_AF = new char[] { 'A', 'F' };\n+        CHARS_C = new char[] { 'C' };\n+        CHARS_FF = new char[] { 'F', 'F' };\n+        CHARS_G = new char[] { 'G' };\n+        CHARS_N = new char[] { 'N' };\n+        CHARS_NN = new char[] { 'N', 'N' };\n+        CHARS_S = new char[] { 'S' };\n+        CHARS_SSS = new char[] { 'S', 'S', 'S' };\n+        PAT_MAC = Pattern.compile(\"^MAC\");\n+        PAT_KN = Pattern.compile(\"^KN\");\n+        PAT_K = Pattern.compile(\"^K\");\n+        PAT_PH_PF = Pattern.compile(\"^(PH|PF)\");\n+        PAT_SCH = Pattern.compile(\"^SCH\");\n+        PAT_EE_IE = Pattern.compile(\"(EE|IE)$\");\n+        PAT_DT_ETC = Pattern.compile(\"(DT|RT|RD|NT|ND)$\");\n+    }\n+    \n     private static boolean isVowel(final char c) {\n         return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n     }\n     \n     private static char[] transcodeRemaining(final char prev, final char curr, final char next, final char aNext) {\n         if (curr == 'E' && next == 'V') {\n             return Nysiis.CHARS_AF;\n@@ -137,27 +156,8 @@\n             if (lastChar == 'A') {\n                 key.deleteCharAt(key.length() - 1);\n             }\n         }\n         final String string = key.toString();\n         return this.isStrict() ? string.substring(0, Math.min(6, string.length())) : string;\n     }\n-    \n-    static {\n-        CHARS_A = new char[] { 'A' };\n-        CHARS_AF = new char[] { 'A', 'F' };\n-        CHARS_C = new char[] { 'C' };\n-        CHARS_FF = new char[] { 'F', 'F' };\n-        CHARS_G = new char[] { 'G' };\n-        CHARS_N = new char[] { 'N' };\n-        CHARS_NN = new char[] { 'N', 'N' };\n-        CHARS_S = new char[] { 'S' };\n-        CHARS_SSS = new char[] { 'S', 'S', 'S' };\n-        PAT_MAC = Pattern.compile(\"^MAC\");\n-        PAT_KN = Pattern.compile(\"^KN\");\n-        PAT_K = Pattern.compile(\"^K\");\n-        PAT_PH_PF = Pattern.compile(\"^(PH|PF)\");\n-        PAT_SCH = Pattern.compile(\"^SCH\");\n-        PAT_EE_IE = Pattern.compile(\"(EE|IE)$\");\n-        PAT_DT_ETC = Pattern.compile(\"(DT|RT|RD|NT|ND)$\");\n-    }\n }\n"}]}
