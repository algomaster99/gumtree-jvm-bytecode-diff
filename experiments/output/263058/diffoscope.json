{"diffoscope-json-version": 1, "source1": "first/FastDatePrinter$Iso8601_Rule.class", "source2": "second/FastDatePrinter$Iso8601_Rule.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,16 +7,16 @@\n private static class Iso8601_Rule implements FastDatePrinter.Rule\n {\n     static final Iso8601_Rule ISO8601_HOURS;\n     static final Iso8601_Rule ISO8601_HOURS_MINUTES;\n     static final Iso8601_Rule ISO8601_HOURS_COLON_MINUTES;\n     final int length;\n     \n-    static Iso8601_Rule getRule(final int tokenLen) {\n-        switch (tokenLen) {\n+    static Iso8601_Rule getRule(final int n) {\n+        switch (n) {\n             case 1: {\n                 return Iso8601_Rule.ISO8601_HOURS;\n             }\n             case 2: {\n                 return Iso8601_Rule.ISO8601_HOURS_MINUTES;\n             }\n             case 3: {\n@@ -32,37 +32,36 @@\n         this.length = length;\n     }\n     \n     public int estimateLength() {\n         return this.length;\n     }\n     \n-    public void appendTo(final Appendable buffer, final Calendar calendar) throws IOException {\n-        int offset = calendar.get(15) + calendar.get(16);\n-        if (offset == 0) {\n-            buffer.append(\"Z\");\n+    public void appendTo(final Appendable appendable, final Calendar calendar) throws IOException {\n+        int n = calendar.get(15) + calendar.get(16);\n+        if (n == 0) {\n+            appendable.append(\"Z\");\n             return;\n         }\n-        if (offset < 0) {\n-            buffer.append('-');\n-            offset = -offset;\n+        if (n < 0) {\n+            appendable.append('-');\n+            n = -n;\n         }\n         else {\n-            buffer.append('+');\n+            appendable.append('+');\n         }\n-        final int hours = offset / 3600000;\n-        FastDatePrinter.access$000(buffer, hours);\n+        final int n2 = n / 3600000;\n+        FastDatePrinter.access$000(appendable, n2);\n         if (this.length < 5) {\n             return;\n         }\n         if (this.length == 6) {\n-            buffer.append(':');\n+            appendable.append(':');\n         }\n-        final int minutes = offset / 60000 - 60 * hours;\n-        FastDatePrinter.access$000(buffer, minutes);\n+        FastDatePrinter.access$000(appendable, n / 60000 - 60 * n2);\n     }\n     \n     static {\n         Iso8601_Rule.ISO8601_HOURS = new Iso8601_Rule(3);\n         Iso8601_Rule.ISO8601_HOURS_MINUTES = new Iso8601_Rule(5);\n         Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES = new Iso8601_Rule(6);\n     }\n"}]}
