{"diffoscope-json-version": 1, "source1": "first/GzipCompressorInputStream.class", "source2": "second/GzipCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,318 +1,313 @@\n-  SHA-256 checksum d87d11a4d2d4a8b2fb832c5ba85d25e92a41f5bc9584d89bd85465722a75f4ad\n+  SHA-256 checksum fc5e6665748bee92813ca4b792c06e1d648acd3aacc26749248e991f686c7ddf\n   Compiled from \"GzipCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #40                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  super_class: #90                        // org/apache/commons/compress/compressors/CompressorInputStream\n-  interfaces: 0, fields: 15, methods: 10, attributes: 1\n+  this_class: #34                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  super_class: #84                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  interfaces: 0, fields: 15, methods: 10, attributes: 3\n Constant pool:\n-    #1 = Methodref          #40.#176      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-    #2 = Methodref          #90.#177      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #3 = Fieldref           #40.#178      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n-    #4 = Class              #179          // java/util/zip/Inflater\n-    #5 = Methodref          #4.#180       // java/util/zip/Inflater.\"<init>\":(Z)V\n-    #6 = Fieldref           #40.#181      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n-    #7 = Class              #182          // java/util/zip/CRC32\n-    #8 = Methodref          #7.#177       // java/util/zip/CRC32.\"<init>\":()V\n-    #9 = Fieldref           #40.#183      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n-   #10 = Fieldref           #40.#184      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n-   #11 = Fieldref           #40.#185      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n-   #12 = Class              #186          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #13 = Methodref          #12.#177      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-   #14 = Fieldref           #40.#187      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-   #15 = Methodref          #188.#189     // java/io/InputStream.markSupported:()Z\n-   #16 = Fieldref           #40.#190      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n-   #17 = Class              #191          // java/io/BufferedInputStream\n-   #18 = Methodref          #17.#192      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #19 = Fieldref           #40.#193      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n-   #20 = Methodref          #40.#194      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n-   #21 = Fieldref           #40.#195      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n-   #22 = Class              #196          // java/lang/AssertionError\n-   #23 = Methodref          #22.#177      // java/lang/AssertionError.\"<init>\":()V\n-   #24 = Methodref          #188.#197     // java/io/InputStream.read:()I\n-   #25 = Class              #198          // java/io/IOException\n-   #26 = String             #199          // Input is not in the .gz format\n-   #27 = String             #200          // Garbage after a valid .gz stream\n-   #28 = Methodref          #25.#201      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #29 = Class              #202          // java/io/DataInputStream\n-   #30 = Methodref          #29.#192      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #31 = InterfaceMethodref #203.#204     // java/io/DataInput.readUnsignedByte:()I\n-   #32 = Class              #205          // java/util/zip/Deflater\n-   #33 = Class              #206          // java/lang/StringBuilder\n-   #34 = Methodref          #33.#177      // java/lang/StringBuilder.\"<init>\":()V\n-   #35 = String             #207          // Unsupported compression method\n-   #36 = Methodref          #33.#208      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #33.#209      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #38 = String             #210          //  in the .gz header\n-   #39 = Methodref          #33.#211      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #40 = Class              #212          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-   #41 = String             #213          // Reserved flags are set in the .gz header\n-   #42 = Methodref          #214.#215     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-   #43 = Long               1000l\n-   #45 = Methodref          #12.#216      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-   #46 = Methodref          #12.#217      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-   #47 = Methodref          #12.#218      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-   #48 = Class              #219          // java/lang/String\n-   #49 = Methodref          #40.#220      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n-   #50 = Class              #221          // org/apache/commons/compress/utils/CharsetNames\n-   #51 = String             #222          // ISO-8859-1\n-   #52 = Methodref          #48.#223      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-   #53 = Methodref          #12.#224      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-   #54 = Methodref          #12.#225      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-   #55 = InterfaceMethodref #203.#226     // java/io/DataInput.readShort:()S\n-   #56 = Methodref          #4.#227       // java/util/zip/Inflater.reset:()V\n-   #57 = Methodref          #7.#227       // java/util/zip/CRC32.reset:()V\n-   #58 = Class              #228          // java/io/ByteArrayOutputStream\n-   #59 = Methodref          #58.#177      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #60 = Methodref          #58.#229      // java/io/ByteArrayOutputStream.write:(I)V\n-   #61 = Methodref          #58.#230      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #62 = Methodref          #40.#231      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n-   #63 = Methodref          #4.#232       // java/util/zip/Inflater.needsInput:()Z\n-   #64 = Methodref          #188.#233     // java/io/InputStream.mark:(I)V\n-   #65 = Methodref          #188.#234     // java/io/InputStream.read:([B)I\n-   #66 = Fieldref           #40.#235      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n-   #67 = Class              #236          // java/io/EOFException\n-   #68 = Methodref          #67.#177      // java/io/EOFException.\"<init>\":()V\n-   #69 = Methodref          #4.#237       // java/util/zip/Inflater.setInput:([BII)V\n-   #70 = Methodref          #4.#238       // java/util/zip/Inflater.inflate:([BII)I\n-   #71 = Class              #239          // java/util/zip/DataFormatException\n-   #72 = String             #240          // Gzip-compressed data is corrupt\n-   #73 = Methodref          #7.#241       // java/util/zip/CRC32.update:([BII)V\n-   #74 = Methodref          #40.#242      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n-   #75 = Methodref          #4.#243       // java/util/zip/Inflater.finished:()Z\n-   #76 = Methodref          #188.#227     // java/io/InputStream.reset:()V\n-   #77 = Methodref          #4.#244       // java/util/zip/Inflater.getRemaining:()I\n-   #78 = Methodref          #188.#245     // java/io/InputStream.skip:(J)J\n-   #79 = Methodref          #25.#177      // java/io/IOException.\"<init>\":()V\n-   #80 = Methodref          #7.#246       // java/util/zip/CRC32.getValue:()J\n-   #81 = String             #247          // Gzip-compressed data is corrupt (CRC32 error)\n-   #82 = Methodref          #4.#248       // java/util/zip/Inflater.getBytesWritten:()J\n-   #83 = Long               4294967295l\n-   #85 = String             #249          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n-   #86 = Methodref          #4.#250       // java/util/zip/Inflater.end:()V\n-   #87 = Fieldref           #251.#190     // java/lang/System.in:Ljava/io/InputStream;\n-   #88 = Methodref          #188.#252     // java/io/InputStream.close:()V\n-   #89 = Methodref          #253.#254     // java/lang/Class.desiredAssertionStatus:()Z\n-   #90 = Class              #255          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #91 = Utf8               FHCRC\n-   #92 = Utf8               I\n-   #93 = Utf8               ConstantValue\n-   #94 = Integer            2\n-   #95 = Utf8               FEXTRA\n-   #96 = Integer            4\n-   #97 = Utf8               FNAME\n-   #98 = Integer            8\n-   #99 = Utf8               FCOMMENT\n-  #100 = Integer            16\n-  #101 = Utf8               FRESERVED\n-  #102 = Integer            224\n-  #103 = Utf8               in\n-  #104 = Utf8               Ljava/io/InputStream;\n-  #105 = Utf8               decompressConcatenated\n-  #106 = Utf8               Z\n-  #107 = Utf8               buf\n-  #108 = Utf8               [B\n-  #109 = Utf8               bufUsed\n-  #110 = Utf8               inf\n-  #111 = Utf8               Ljava/util/zip/Inflater;\n-  #112 = Utf8               crc\n-  #113 = Utf8               Ljava/util/zip/CRC32;\n-  #114 = Utf8               endReached\n-  #115 = Utf8               oneByte\n-  #116 = Utf8               parameters\n-  #117 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #118 = Utf8               $assertionsDisabled\n-  #119 = Utf8               <init>\n-  #120 = Utf8               (Ljava/io/InputStream;)V\n-  #121 = Utf8               Code\n-  #122 = Utf8               LineNumberTable\n-  #123 = Utf8               LocalVariableTable\n-  #124 = Utf8               this\n-  #125 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n-  #126 = Utf8               inputStream\n-  #127 = Utf8               Exceptions\n-  #128 = Utf8               (Ljava/io/InputStream;Z)V\n-  #129 = Utf8               StackMapTable\n-  #130 = Class              #212          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #131 = Class              #256          // java/io/InputStream\n-  #132 = Utf8               getMetaData\n-  #133 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #134 = Utf8               init\n-  #135 = Utf8               (Z)Z\n-  #136 = Utf8               xlen\n-  #137 = Utf8               isFirstMember\n-  #138 = Utf8               magic0\n-  #139 = Utf8               magic1\n-  #140 = Utf8               inData\n-  #141 = Utf8               Ljava/io/DataInput;\n-  #142 = Utf8               method\n-  #143 = Utf8               flg\n-  #144 = Class              #219          // java/lang/String\n-  #145 = Class              #257          // java/io/DataInput\n-  #146 = Utf8               readToNull\n-  #147 = Utf8               (Ljava/io/DataInput;)[B\n-  #148 = Utf8               bos\n-  #149 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #150 = Utf8               b\n-  #151 = Class              #228          // java/io/ByteArrayOutputStream\n-  #152 = Utf8               read\n-  #153 = Utf8               ()I\n-  #154 = Utf8               ([BII)I\n-  #155 = Utf8               ret\n-  #156 = Utf8               e\n-  #157 = Utf8               Ljava/util/zip/DataFormatException;\n-  #158 = Utf8               skipAmount\n-  #159 = Utf8               crcStored\n-  #160 = Utf8               J\n-  #161 = Utf8               isize\n-  #162 = Utf8               off\n-  #163 = Utf8               len\n-  #164 = Utf8               size\n-  #165 = Class              #239          // java/util/zip/DataFormatException\n-  #166 = Class              #108          // \"[B\"\n-  #167 = Utf8               matches\n-  #168 = Utf8               ([BI)Z\n-  #169 = Utf8               signature\n-  #170 = Utf8               length\n-  #171 = Utf8               close\n-  #172 = Utf8               ()V\n-  #173 = Utf8               <clinit>\n-  #174 = Utf8               SourceFile\n-  #175 = Utf8               GzipCompressorInputStream.java\n-  #176 = NameAndType        #119:#128     // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #177 = NameAndType        #119:#172     // \"<init>\":()V\n-  #178 = NameAndType        #107:#108     // buf:[B\n-  #179 = Utf8               java/util/zip/Inflater\n-  #180 = NameAndType        #119:#258     // \"<init>\":(Z)V\n-  #181 = NameAndType        #110:#111     // inf:Ljava/util/zip/Inflater;\n-  #182 = Utf8               java/util/zip/CRC32\n-  #183 = NameAndType        #112:#113     // crc:Ljava/util/zip/CRC32;\n-  #184 = NameAndType        #114:#106     // endReached:Z\n-  #185 = NameAndType        #115:#108     // oneByte:[B\n-  #186 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #187 = NameAndType        #116:#117     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #188 = Class              #256          // java/io/InputStream\n-  #189 = NameAndType        #259:#260     // markSupported:()Z\n-  #190 = NameAndType        #103:#104     // in:Ljava/io/InputStream;\n-  #191 = Utf8               java/io/BufferedInputStream\n-  #192 = NameAndType        #119:#120     // \"<init>\":(Ljava/io/InputStream;)V\n-  #193 = NameAndType        #105:#106     // decompressConcatenated:Z\n-  #194 = NameAndType        #134:#135     // init:(Z)Z\n-  #195 = NameAndType        #118:#106     // $assertionsDisabled:Z\n-  #196 = Utf8               java/lang/AssertionError\n-  #197 = NameAndType        #152:#153     // read:()I\n-  #198 = Utf8               java/io/IOException\n-  #199 = Utf8               Input is not in the .gz format\n-  #200 = Utf8               Garbage after a valid .gz stream\n-  #201 = NameAndType        #119:#261     // \"<init>\":(Ljava/lang/String;)V\n-  #202 = Utf8               java/io/DataInputStream\n-  #203 = Class              #257          // java/io/DataInput\n-  #204 = NameAndType        #262:#153     // readUnsignedByte:()I\n-  #205 = Utf8               java/util/zip/Deflater\n-  #206 = Utf8               java/lang/StringBuilder\n-  #207 = Utf8               Unsupported compression method\n-  #208 = NameAndType        #263:#264     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #209 = NameAndType        #263:#265     // append:(I)Ljava/lang/StringBuilder;\n-  #210 = Utf8                in the .gz header\n-  #211 = NameAndType        #266:#267     // toString:()Ljava/lang/String;\n-  #212 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #213 = Utf8               Reserved flags are set in the .gz header\n-  #214 = Class              #268          // org/apache/commons/compress/utils/ByteUtils\n-  #215 = NameAndType        #269:#270     // fromLittleEndian:(Ljava/io/DataInput;I)J\n-  #216 = NameAndType        #271:#272     // setModificationTime:(J)V\n-  #217 = NameAndType        #273:#274     // setCompressionLevel:(I)V\n-  #218 = NameAndType        #275:#274     // setOperatingSystem:(I)V\n-  #219 = Utf8               java/lang/String\n-  #220 = NameAndType        #146:#147     // readToNull:(Ljava/io/DataInput;)[B\n-  #221 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #222 = Utf8               ISO-8859-1\n-  #223 = NameAndType        #119:#276     // \"<init>\":([BLjava/lang/String;)V\n-  #224 = NameAndType        #277:#261     // setFilename:(Ljava/lang/String;)V\n-  #225 = NameAndType        #278:#261     // setComment:(Ljava/lang/String;)V\n-  #226 = NameAndType        #279:#280     // readShort:()S\n-  #227 = NameAndType        #281:#172     // reset:()V\n-  #228 = Utf8               java/io/ByteArrayOutputStream\n-  #229 = NameAndType        #282:#274     // write:(I)V\n-  #230 = NameAndType        #283:#284     // toByteArray:()[B\n-  #231 = NameAndType        #152:#154     // read:([BII)I\n-  #232 = NameAndType        #285:#260     // needsInput:()Z\n-  #233 = NameAndType        #286:#274     // mark:(I)V\n-  #234 = NameAndType        #152:#287     // read:([B)I\n-  #235 = NameAndType        #109:#92      // bufUsed:I\n-  #236 = Utf8               java/io/EOFException\n-  #237 = NameAndType        #288:#289     // setInput:([BII)V\n-  #238 = NameAndType        #290:#154     // inflate:([BII)I\n-  #239 = Utf8               java/util/zip/DataFormatException\n-  #240 = Utf8               Gzip-compressed data is corrupt\n-  #241 = NameAndType        #291:#289     // update:([BII)V\n-  #242 = NameAndType        #292:#274     // count:(I)V\n-  #243 = NameAndType        #293:#260     // finished:()Z\n-  #244 = NameAndType        #294:#153     // getRemaining:()I\n-  #245 = NameAndType        #295:#296     // skip:(J)J\n-  #246 = NameAndType        #297:#298     // getValue:()J\n-  #247 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n-  #248 = NameAndType        #299:#298     // getBytesWritten:()J\n-  #249 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n-  #250 = NameAndType        #300:#172     // end:()V\n-  #251 = Class              #301          // java/lang/System\n-  #252 = NameAndType        #171:#172     // close:()V\n-  #253 = Class              #302          // java/lang/Class\n-  #254 = NameAndType        #303:#260     // desiredAssertionStatus:()Z\n-  #255 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #256 = Utf8               java/io/InputStream\n-  #257 = Utf8               java/io/DataInput\n-  #258 = Utf8               (Z)V\n-  #259 = Utf8               markSupported\n-  #260 = Utf8               ()Z\n-  #261 = Utf8               (Ljava/lang/String;)V\n-  #262 = Utf8               readUnsignedByte\n-  #263 = Utf8               append\n-  #264 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #265 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #266 = Utf8               toString\n-  #267 = Utf8               ()Ljava/lang/String;\n-  #268 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #269 = Utf8               fromLittleEndian\n-  #270 = Utf8               (Ljava/io/DataInput;I)J\n-  #271 = Utf8               setModificationTime\n-  #272 = Utf8               (J)V\n-  #273 = Utf8               setCompressionLevel\n-  #274 = Utf8               (I)V\n-  #275 = Utf8               setOperatingSystem\n-  #276 = Utf8               ([BLjava/lang/String;)V\n-  #277 = Utf8               setFilename\n-  #278 = Utf8               setComment\n-  #279 = Utf8               readShort\n-  #280 = Utf8               ()S\n-  #281 = Utf8               reset\n-  #282 = Utf8               write\n-  #283 = Utf8               toByteArray\n-  #284 = Utf8               ()[B\n-  #285 = Utf8               needsInput\n-  #286 = Utf8               mark\n-  #287 = Utf8               ([B)I\n-  #288 = Utf8               setInput\n-  #289 = Utf8               ([BII)V\n-  #290 = Utf8               inflate\n-  #291 = Utf8               update\n-  #292 = Utf8               count\n-  #293 = Utf8               finished\n-  #294 = Utf8               getRemaining\n-  #295 = Utf8               skip\n-  #296 = Utf8               (J)J\n-  #297 = Utf8               getValue\n-  #298 = Utf8               ()J\n-  #299 = Utf8               getBytesWritten\n-  #300 = Utf8               end\n-  #301 = Utf8               java/lang/System\n-  #302 = Utf8               java/lang/Class\n-  #303 = Utf8               desiredAssertionStatus\n+    #1 = Methodref          #34.#166      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+    #2 = Methodref          #84.#167      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+    #3 = Fieldref           #34.#168      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n+    #4 = Class              #169          // java/util/zip/Inflater\n+    #5 = Methodref          #4.#170       // java/util/zip/Inflater.\"<init>\":(Z)V\n+    #6 = Fieldref           #34.#171      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n+    #7 = Class              #172          // java/util/zip/CRC32\n+    #8 = Methodref          #7.#167       // java/util/zip/CRC32.\"<init>\":()V\n+    #9 = Fieldref           #34.#173      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n+   #10 = Fieldref           #34.#174      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n+   #11 = Fieldref           #34.#175      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n+   #12 = Class              #176          // org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #13 = Methodref          #12.#167      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+   #14 = Fieldref           #34.#177      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #15 = Methodref          #124.#178     // java/io/InputStream.markSupported:()Z\n+   #16 = Fieldref           #34.#179      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n+   #17 = Class              #180          // java/io/BufferedInputStream\n+   #18 = Methodref          #17.#181      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #19 = Fieldref           #34.#182      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n+   #20 = Methodref          #34.#183      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n+   #21 = Fieldref           #34.#184      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n+   #22 = Class              #185          // java/lang/AssertionError\n+   #23 = Methodref          #22.#167      // java/lang/AssertionError.\"<init>\":()V\n+   #24 = Methodref          #124.#186     // java/io/InputStream.read:()I\n+   #25 = Class              #187          // java/io/IOException\n+   #26 = String             #188          // Input is not in the .gz format\n+   #27 = String             #189          // Garbage after a valid .gz stream\n+   #28 = Methodref          #25.#190      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #29 = Class              #191          // java/io/DataInputStream\n+   #30 = Methodref          #29.#181      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #31 = InterfaceMethodref #137.#192     // java/io/DataInput.readUnsignedByte:()I\n+   #32 = Class              #193          // java/util/zip/Deflater\n+   #33 = InvokeDynamic      #0:#197       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #34 = Class              #198          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+   #35 = String             #199          // Reserved flags are set in the .gz header\n+   #36 = Methodref          #200.#201     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+   #37 = Long               1000l\n+   #39 = Methodref          #12.#202      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+   #40 = Methodref          #12.#203      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+   #41 = Methodref          #12.#204      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+   #42 = Class              #205          // java/lang/String\n+   #43 = Methodref          #34.#206      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n+   #44 = Class              #207          // org/apache/commons/compress/utils/CharsetNames\n+   #45 = String             #208          // ISO-8859-1\n+   #46 = Methodref          #42.#209      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+   #47 = Methodref          #12.#210      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+   #48 = Methodref          #12.#211      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+   #49 = InterfaceMethodref #137.#212     // java/io/DataInput.readShort:()S\n+   #50 = Methodref          #4.#213       // java/util/zip/Inflater.reset:()V\n+   #51 = Methodref          #7.#213       // java/util/zip/CRC32.reset:()V\n+   #52 = Class              #214          // java/io/ByteArrayOutputStream\n+   #53 = Methodref          #52.#167      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+   #54 = Methodref          #52.#215      // java/io/ByteArrayOutputStream.write:(I)V\n+   #55 = Methodref          #52.#216      // java/io/ByteArrayOutputStream.toByteArray:()[B\n+   #56 = Methodref          #34.#217      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n+   #57 = Methodref          #4.#218       // java/util/zip/Inflater.needsInput:()Z\n+   #58 = Methodref          #124.#219     // java/io/InputStream.mark:(I)V\n+   #59 = Methodref          #124.#220     // java/io/InputStream.read:([B)I\n+   #60 = Fieldref           #34.#221      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n+   #61 = Class              #222          // java/io/EOFException\n+   #62 = Methodref          #61.#167      // java/io/EOFException.\"<init>\":()V\n+   #63 = Methodref          #4.#223       // java/util/zip/Inflater.setInput:([BII)V\n+   #64 = Methodref          #4.#224       // java/util/zip/Inflater.inflate:([BII)I\n+   #65 = Class              #225          // java/util/zip/DataFormatException\n+   #66 = String             #226          // Gzip-compressed data is corrupt\n+   #67 = Methodref          #7.#227       // java/util/zip/CRC32.update:([BII)V\n+   #68 = Methodref          #34.#228      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n+   #69 = Methodref          #4.#229       // java/util/zip/Inflater.finished:()Z\n+   #70 = Methodref          #124.#213     // java/io/InputStream.reset:()V\n+   #71 = Methodref          #4.#230       // java/util/zip/Inflater.getRemaining:()I\n+   #72 = Methodref          #124.#231     // java/io/InputStream.skip:(J)J\n+   #73 = Methodref          #25.#167      // java/io/IOException.\"<init>\":()V\n+   #74 = Methodref          #7.#232       // java/util/zip/CRC32.getValue:()J\n+   #75 = String             #233          // Gzip-compressed data is corrupt (CRC32 error)\n+   #76 = Methodref          #4.#234       // java/util/zip/Inflater.getBytesWritten:()J\n+   #77 = Long               4294967295l\n+   #79 = String             #235          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n+   #80 = Methodref          #4.#236       // java/util/zip/Inflater.end:()V\n+   #81 = Fieldref           #237.#179     // java/lang/System.in:Ljava/io/InputStream;\n+   #82 = Methodref          #124.#238     // java/io/InputStream.close:()V\n+   #83 = Methodref          #239.#240     // java/lang/Class.desiredAssertionStatus:()Z\n+   #84 = Class              #241          // org/apache/commons/compress/compressors/CompressorInputStream\n+   #85 = Utf8               FHCRC\n+   #86 = Utf8               I\n+   #87 = Utf8               ConstantValue\n+   #88 = Integer            2\n+   #89 = Utf8               FEXTRA\n+   #90 = Integer            4\n+   #91 = Utf8               FNAME\n+   #92 = Integer            8\n+   #93 = Utf8               FCOMMENT\n+   #94 = Integer            16\n+   #95 = Utf8               FRESERVED\n+   #96 = Integer            224\n+   #97 = Utf8               in\n+   #98 = Utf8               Ljava/io/InputStream;\n+   #99 = Utf8               decompressConcatenated\n+  #100 = Utf8               Z\n+  #101 = Utf8               buf\n+  #102 = Utf8               [B\n+  #103 = Utf8               bufUsed\n+  #104 = Utf8               inf\n+  #105 = Utf8               Ljava/util/zip/Inflater;\n+  #106 = Utf8               crc\n+  #107 = Utf8               Ljava/util/zip/CRC32;\n+  #108 = Utf8               endReached\n+  #109 = Utf8               oneByte\n+  #110 = Utf8               parameters\n+  #111 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #112 = Utf8               $assertionsDisabled\n+  #113 = Utf8               <init>\n+  #114 = Utf8               (Ljava/io/InputStream;)V\n+  #115 = Utf8               Code\n+  #116 = Utf8               LineNumberTable\n+  #117 = Utf8               LocalVariableTable\n+  #118 = Utf8               this\n+  #119 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n+  #120 = Utf8               inputStream\n+  #121 = Utf8               Exceptions\n+  #122 = Utf8               (Ljava/io/InputStream;Z)V\n+  #123 = Utf8               StackMapTable\n+  #124 = Class              #242          // java/io/InputStream\n+  #125 = Utf8               getMetaData\n+  #126 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #127 = Utf8               init\n+  #128 = Utf8               (Z)Z\n+  #129 = Utf8               xlen\n+  #130 = Utf8               isFirstMember\n+  #131 = Utf8               magic0\n+  #132 = Utf8               magic1\n+  #133 = Utf8               inData\n+  #134 = Utf8               Ljava/io/DataInput;\n+  #135 = Utf8               method\n+  #136 = Utf8               flg\n+  #137 = Class              #243          // java/io/DataInput\n+  #138 = Utf8               readToNull\n+  #139 = Utf8               (Ljava/io/DataInput;)[B\n+  #140 = Utf8               bos\n+  #141 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #142 = Utf8               b\n+  #143 = Utf8               read\n+  #144 = Utf8               ()I\n+  #145 = Utf8               ([BII)I\n+  #146 = Utf8               ret\n+  #147 = Utf8               e\n+  #148 = Utf8               Ljava/util/zip/DataFormatException;\n+  #149 = Utf8               skipAmount\n+  #150 = Utf8               crcStored\n+  #151 = Utf8               J\n+  #152 = Utf8               isize\n+  #153 = Utf8               off\n+  #154 = Utf8               len\n+  #155 = Utf8               size\n+  #156 = Class              #102          // \"[B\"\n+  #157 = Utf8               matches\n+  #158 = Utf8               ([BI)Z\n+  #159 = Utf8               signature\n+  #160 = Utf8               length\n+  #161 = Utf8               close\n+  #162 = Utf8               ()V\n+  #163 = Utf8               <clinit>\n+  #164 = Utf8               SourceFile\n+  #165 = Utf8               GzipCompressorInputStream.java\n+  #166 = NameAndType        #113:#122     // \"<init>\":(Ljava/io/InputStream;Z)V\n+  #167 = NameAndType        #113:#162     // \"<init>\":()V\n+  #168 = NameAndType        #101:#102     // buf:[B\n+  #169 = Utf8               java/util/zip/Inflater\n+  #170 = NameAndType        #113:#244     // \"<init>\":(Z)V\n+  #171 = NameAndType        #104:#105     // inf:Ljava/util/zip/Inflater;\n+  #172 = Utf8               java/util/zip/CRC32\n+  #173 = NameAndType        #106:#107     // crc:Ljava/util/zip/CRC32;\n+  #174 = NameAndType        #108:#100     // endReached:Z\n+  #175 = NameAndType        #109:#102     // oneByte:[B\n+  #176 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+  #177 = NameAndType        #110:#111     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #178 = NameAndType        #245:#246     // markSupported:()Z\n+  #179 = NameAndType        #97:#98       // in:Ljava/io/InputStream;\n+  #180 = Utf8               java/io/BufferedInputStream\n+  #181 = NameAndType        #113:#114     // \"<init>\":(Ljava/io/InputStream;)V\n+  #182 = NameAndType        #99:#100      // decompressConcatenated:Z\n+  #183 = NameAndType        #127:#128     // init:(Z)Z\n+  #184 = NameAndType        #112:#100     // $assertionsDisabled:Z\n+  #185 = Utf8               java/lang/AssertionError\n+  #186 = NameAndType        #143:#144     // read:()I\n+  #187 = Utf8               java/io/IOException\n+  #188 = Utf8               Input is not in the .gz format\n+  #189 = Utf8               Garbage after a valid .gz stream\n+  #190 = NameAndType        #113:#247     // \"<init>\":(Ljava/lang/String;)V\n+  #191 = Utf8               java/io/DataInputStream\n+  #192 = NameAndType        #248:#144     // readUnsignedByte:()I\n+  #193 = Utf8               java/util/zip/Deflater\n+  #194 = Utf8               BootstrapMethods\n+  #195 = MethodHandle       6:#249        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #196 = String             #250          // Unsupported compression method \\u0001 in the .gz header\n+  #197 = NameAndType        #251:#252     // makeConcatWithConstants:(I)Ljava/lang/String;\n+  #198 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  #199 = Utf8               Reserved flags are set in the .gz header\n+  #200 = Class              #253          // org/apache/commons/compress/utils/ByteUtils\n+  #201 = NameAndType        #254:#255     // fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #202 = NameAndType        #256:#257     // setModificationTime:(J)V\n+  #203 = NameAndType        #258:#259     // setCompressionLevel:(I)V\n+  #204 = NameAndType        #260:#259     // setOperatingSystem:(I)V\n+  #205 = Utf8               java/lang/String\n+  #206 = NameAndType        #138:#139     // readToNull:(Ljava/io/DataInput;)[B\n+  #207 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #208 = Utf8               ISO-8859-1\n+  #209 = NameAndType        #113:#261     // \"<init>\":([BLjava/lang/String;)V\n+  #210 = NameAndType        #262:#247     // setFilename:(Ljava/lang/String;)V\n+  #211 = NameAndType        #263:#247     // setComment:(Ljava/lang/String;)V\n+  #212 = NameAndType        #264:#265     // readShort:()S\n+  #213 = NameAndType        #266:#162     // reset:()V\n+  #214 = Utf8               java/io/ByteArrayOutputStream\n+  #215 = NameAndType        #267:#259     // write:(I)V\n+  #216 = NameAndType        #268:#269     // toByteArray:()[B\n+  #217 = NameAndType        #143:#145     // read:([BII)I\n+  #218 = NameAndType        #270:#246     // needsInput:()Z\n+  #219 = NameAndType        #271:#259     // mark:(I)V\n+  #220 = NameAndType        #143:#272     // read:([B)I\n+  #221 = NameAndType        #103:#86      // bufUsed:I\n+  #222 = Utf8               java/io/EOFException\n+  #223 = NameAndType        #273:#274     // setInput:([BII)V\n+  #224 = NameAndType        #275:#145     // inflate:([BII)I\n+  #225 = Utf8               java/util/zip/DataFormatException\n+  #226 = Utf8               Gzip-compressed data is corrupt\n+  #227 = NameAndType        #276:#274     // update:([BII)V\n+  #228 = NameAndType        #277:#259     // count:(I)V\n+  #229 = NameAndType        #278:#246     // finished:()Z\n+  #230 = NameAndType        #279:#144     // getRemaining:()I\n+  #231 = NameAndType        #280:#281     // skip:(J)J\n+  #232 = NameAndType        #282:#283     // getValue:()J\n+  #233 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n+  #234 = NameAndType        #284:#283     // getBytesWritten:()J\n+  #235 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #236 = NameAndType        #285:#162     // end:()V\n+  #237 = Class              #286          // java/lang/System\n+  #238 = NameAndType        #161:#162     // close:()V\n+  #239 = Class              #287          // java/lang/Class\n+  #240 = NameAndType        #288:#246     // desiredAssertionStatus:()Z\n+  #241 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+  #242 = Utf8               java/io/InputStream\n+  #243 = Utf8               java/io/DataInput\n+  #244 = Utf8               (Z)V\n+  #245 = Utf8               markSupported\n+  #246 = Utf8               ()Z\n+  #247 = Utf8               (Ljava/lang/String;)V\n+  #248 = Utf8               readUnsignedByte\n+  #249 = Methodref          #289.#290     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #250 = Utf8               Unsupported compression method \\u0001 in the .gz header\n+  #251 = Utf8               makeConcatWithConstants\n+  #252 = Utf8               (I)Ljava/lang/String;\n+  #253 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #254 = Utf8               fromLittleEndian\n+  #255 = Utf8               (Ljava/io/DataInput;I)J\n+  #256 = Utf8               setModificationTime\n+  #257 = Utf8               (J)V\n+  #258 = Utf8               setCompressionLevel\n+  #259 = Utf8               (I)V\n+  #260 = Utf8               setOperatingSystem\n+  #261 = Utf8               ([BLjava/lang/String;)V\n+  #262 = Utf8               setFilename\n+  #263 = Utf8               setComment\n+  #264 = Utf8               readShort\n+  #265 = Utf8               ()S\n+  #266 = Utf8               reset\n+  #267 = Utf8               write\n+  #268 = Utf8               toByteArray\n+  #269 = Utf8               ()[B\n+  #270 = Utf8               needsInput\n+  #271 = Utf8               mark\n+  #272 = Utf8               ([B)I\n+  #273 = Utf8               setInput\n+  #274 = Utf8               ([BII)V\n+  #275 = Utf8               inflate\n+  #276 = Utf8               update\n+  #277 = Utf8               count\n+  #278 = Utf8               finished\n+  #279 = Utf8               getRemaining\n+  #280 = Utf8               skip\n+  #281 = Utf8               (J)J\n+  #282 = Utf8               getValue\n+  #283 = Utf8               ()J\n+  #284 = Utf8               getBytesWritten\n+  #285 = Utf8               end\n+  #286 = Utf8               java/lang/System\n+  #287 = Utf8               java/lang/Class\n+  #288 = Utf8               desiredAssertionStatus\n+  #289 = Class              #291          // java/lang/invoke/StringConcatFactory\n+  #290 = NameAndType        #251:#295     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #291 = Utf8               java/lang/invoke/StringConcatFactory\n+  #292 = Class              #297          // java/lang/invoke/MethodHandles$Lookup\n+  #293 = Utf8               Lookup\n+  #294 = Utf8               InnerClasses\n+  #295 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #296 = Class              #298          // java/lang/invoke/MethodHandles\n+  #297 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #298 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int FHCRC = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int FEXTRA = 4;\n@@ -545,179 +540,173 @@\n         92: invokespecial #30                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         95: astore        4\n         97: aload         4\n         99: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        104: istore        5\n        106: iload         5\n        108: bipush        8\n-       110: if_icmpeq     146\n+       110: if_icmpeq     128\n        113: new           #25                 // class java/io/IOException\n        116: dup\n-       117: new           #33                 // class java/lang/StringBuilder\n-       120: dup\n-       121: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       124: ldc           #35                 // String Unsupported compression method\n-       126: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       129: iload         5\n-       131: invokevirtual #37                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       134: ldc           #38                 // String  in the .gz header\n-       136: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       139: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       142: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       145: athrow\n-       146: aload         4\n-       148: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       153: istore        6\n-       155: iload         6\n-       157: sipush        224\n-       160: iand\n-       161: ifeq          174\n-       164: new           #25                 // class java/io/IOException\n-       167: dup\n-       168: ldc           #41                 // String Reserved flags are set in the .gz header\n-       170: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       173: athrow\n-       174: aload_0\n-       175: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       178: aload         4\n-       180: iconst_4\n-       181: invokestatic  #42                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-       184: ldc2_w        #43                 // long 1000l\n-       187: lmul\n-       188: invokevirtual #45                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-       191: aload         4\n-       193: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       198: lookupswitch  { // 2\n-                       2: 224\n-                       4: 236\n-                 default: 247\n+       117: iload         5\n+       119: invokedynamic #33,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+       124: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       127: athrow\n+       128: aload         4\n+       130: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       135: istore        6\n+       137: iload         6\n+       139: sipush        224\n+       142: iand\n+       143: ifeq          156\n+       146: new           #25                 // class java/io/IOException\n+       149: dup\n+       150: ldc           #35                 // String Reserved flags are set in the .gz header\n+       152: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       155: athrow\n+       156: aload_0\n+       157: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       160: aload         4\n+       162: iconst_4\n+       163: invokestatic  #36                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       166: ldc2_w        #37                 // long 1000l\n+       169: lmul\n+       170: invokevirtual #39                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+       173: aload         4\n+       175: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       180: lookupswitch  { // 2\n+                       2: 208\n+                       4: 220\n+                 default: 231\n             }\n-       224: aload_0\n-       225: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       228: bipush        9\n-       230: invokevirtual #46                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-       233: goto          247\n-       236: aload_0\n-       237: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       240: iconst_1\n-       241: invokevirtual #46                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-       244: goto          247\n-       247: aload_0\n-       248: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       251: aload         4\n-       253: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       258: invokevirtual #47                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-       261: iload         6\n-       263: iconst_4\n-       264: iand\n-       265: ifeq          311\n-       268: aload         4\n-       270: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       275: istore        7\n-       277: iload         7\n-       279: aload         4\n-       281: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       286: bipush        8\n-       288: ishl\n-       289: ior\n-       290: istore        7\n-       292: iload         7\n-       294: iinc          7, -1\n-       297: ifle          311\n-       300: aload         4\n-       302: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       307: pop\n-       308: goto          292\n-       311: iload         6\n-       313: bipush        8\n-       315: iand\n-       316: ifeq          340\n-       319: aload_0\n-       320: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       323: new           #48                 // class java/lang/String\n-       326: dup\n-       327: aload         4\n-       329: invokestatic  #49                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       332: ldc           #51                 // String ISO-8859-1\n-       334: invokespecial #52                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-       337: invokevirtual #53                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-       340: iload         6\n-       342: bipush        16\n-       344: iand\n-       345: ifeq          369\n-       348: aload_0\n-       349: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       352: new           #48                 // class java/lang/String\n-       355: dup\n-       356: aload         4\n-       358: invokestatic  #49                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       361: ldc           #51                 // String ISO-8859-1\n-       363: invokespecial #52                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-       366: invokevirtual #54                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-       369: iload         6\n-       371: iconst_2\n-       372: iand\n-       373: ifeq          384\n-       376: aload         4\n-       378: invokeinterface #55,  1           // InterfaceMethod java/io/DataInput.readShort:()S\n-       383: pop\n-       384: aload_0\n-       385: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       388: invokevirtual #56                 // Method java/util/zip/Inflater.reset:()V\n-       391: aload_0\n-       392: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n-       395: invokevirtual #57                 // Method java/util/zip/CRC32.reset:()V\n-       398: iconst_1\n-       399: ireturn\n+       208: aload_0\n+       209: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       212: bipush        9\n+       214: invokevirtual #40                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       217: goto          231\n+       220: aload_0\n+       221: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       224: iconst_1\n+       225: invokevirtual #40                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       228: goto          231\n+       231: aload_0\n+       232: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       235: aload         4\n+       237: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       242: invokevirtual #41                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+       245: iload         6\n+       247: iconst_4\n+       248: iand\n+       249: ifeq          295\n+       252: aload         4\n+       254: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       259: istore        7\n+       261: iload         7\n+       263: aload         4\n+       265: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       270: bipush        8\n+       272: ishl\n+       273: ior\n+       274: istore        7\n+       276: iload         7\n+       278: iinc          7, -1\n+       281: ifle          295\n+       284: aload         4\n+       286: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       291: pop\n+       292: goto          276\n+       295: iload         6\n+       297: bipush        8\n+       299: iand\n+       300: ifeq          324\n+       303: aload_0\n+       304: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       307: new           #42                 // class java/lang/String\n+       310: dup\n+       311: aload         4\n+       313: invokestatic  #43                 // Method readToNull:(Ljava/io/DataInput;)[B\n+       316: ldc           #45                 // String ISO-8859-1\n+       318: invokespecial #46                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+       321: invokevirtual #47                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+       324: iload         6\n+       326: bipush        16\n+       328: iand\n+       329: ifeq          353\n+       332: aload_0\n+       333: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       336: new           #42                 // class java/lang/String\n+       339: dup\n+       340: aload         4\n+       342: invokestatic  #43                 // Method readToNull:(Ljava/io/DataInput;)[B\n+       345: ldc           #45                 // String ISO-8859-1\n+       347: invokespecial #46                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+       350: invokevirtual #48                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+       353: iload         6\n+       355: iconst_2\n+       356: iand\n+       357: ifeq          368\n+       360: aload         4\n+       362: invokeinterface #49,  1           // InterfaceMethod java/io/DataInput.readShort:()S\n+       367: pop\n+       368: aload_0\n+       369: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+       372: invokevirtual #50                 // Method java/util/zip/Inflater.reset:()V\n+       375: aload_0\n+       376: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n+       379: invokevirtual #51                 // Method java/util/zip/CRC32.reset:()V\n+       382: iconst_1\n+       383: ireturn\n       LineNumberTable:\n         line 172: 0\n         line 175: 25\n         line 176: 33\n         line 180: 41\n         line 181: 50\n         line 184: 52\n         line 185: 65\n+        line 186: 73\n+        line 187: 78\n         line 191: 84\n         line 192: 97\n         line 193: 106\n         line 194: 113\n-        line 198: 146\n-        line 199: 155\n-        line 200: 164\n-        line 204: 174\n-        line 205: 191\n-        line 207: 224\n-        line 208: 233\n-        line 210: 236\n-        line 211: 244\n-        line 216: 247\n-        line 219: 261\n-        line 220: 268\n-        line 221: 277\n-        line 226: 292\n-        line 227: 300\n-        line 232: 311\n-        line 233: 319\n-        line 238: 340\n-        line 239: 348\n-        line 248: 369\n-        line 249: 376\n-        line 253: 384\n-        line 254: 391\n-        line 256: 398\n+        line 198: 128\n+        line 199: 137\n+        line 200: 146\n+        line 204: 156\n+        line 205: 173\n+        line 207: 208\n+        line 208: 217\n+        line 210: 220\n+        line 211: 228\n+        line 216: 231\n+        line 219: 245\n+        line 220: 252\n+        line 221: 261\n+        line 226: 276\n+        line 227: 284\n+        line 232: 295\n+        line 233: 303\n+        line 238: 324\n+        line 239: 332\n+        line 248: 353\n+        line 249: 360\n+        line 253: 368\n+        line 254: 375\n+        line 256: 382\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-          277      34     7  xlen   I\n-            0     400     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n-            0     400     1 isFirstMember   Z\n-           33     367     2 magic0   I\n-           41     359     3 magic1   I\n-           97     303     4 inData   Ljava/io/DataInput;\n-          106     294     5 method   I\n-          155     245     6   flg   I\n+          261      34     7  xlen   I\n+            0     384     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n+            0     384     1 isFirstMember   Z\n+           33     351     2 magic0   I\n+           41     343     3 magic1   I\n+           97     287     4 inData   Ljava/io/DataInput;\n+          106     278     5 method   I\n+          137     247     6   flg   I\n       StackMapTable: number_of_entries = 16\n         frame_type = 25 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 26\n           locals = [ int, int ]\n         frame_type = 12 /* same */\n         frame_type = 255 /* full_frame */\n@@ -726,20 +715,20 @@\n           stack = [ uninitialized 65, uninitialized 65 ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 1\n           locals = [ class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream, int, int, int ]\n           stack = [ uninitialized 65, uninitialized 65, class java/lang/String ]\n         frame_type = 3 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 61\n+          offset_delta = 43\n           locals = [ class java/io/DataInput, int ]\n         frame_type = 252 /* append */\n           offset_delta = 27\n           locals = [ int ]\n-        frame_type = 49 /* same */\n+        frame_type = 51 /* same */\n         frame_type = 11 /* same */\n         frame_type = 10 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 44\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 18\n@@ -750,31 +739,31 @@\n       throws java.io.IOException\n \n   private static byte[] readToNull(java.io.DataInput) throws java.io.IOException;\n     descriptor: (Ljava/io/DataInput;)[B\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=3, args_size=1\n-         0: new           #58                 // class java/io/ByteArrayOutputStream\n+         0: new           #52                 // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #59                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #53                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: iconst_0\n          9: istore_2\n         10: aload_0\n         11: invokeinterface #31,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n         16: dup\n         17: istore_2\n         18: ifeq          29\n         21: aload_1\n         22: iload_2\n-        23: invokevirtual #60                 // Method java/io/ByteArrayOutputStream.write:(I)V\n+        23: invokevirtual #54                 // Method java/io/ByteArrayOutputStream.write:(I)V\n         26: goto          10\n         29: aload_1\n-        30: invokevirtual #61                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        30: invokevirtual #55                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         33: areturn\n       LineNumberTable:\n         line 260: 0\n         line 261: 8\n         line 262: 10\n         line 263: 21\n         line 265: 29\n@@ -797,15 +786,15 @@\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: aload_0\n          2: getfield      #11                 // Field oneByte:[B\n          5: iconst_0\n          6: iconst_1\n-         7: invokevirtual #62                 // Method read:([BII)I\n+         7: invokevirtual #56                 // Method read:([BII)I\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          28\n         18: aload_0\n         19: getfield      #11                 // Field oneByte:[B\n         22: iconst_0\n@@ -837,158 +826,158 @@\n          8: ireturn\n          9: iconst_0\n         10: istore        4\n         12: iload_3\n         13: ifle          333\n         16: aload_0\n         17: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-        20: invokevirtual #63                 // Method java/util/zip/Inflater.needsInput:()Z\n+        20: invokevirtual #57                 // Method java/util/zip/Inflater.needsInput:()Z\n         23: ifeq          85\n         26: aload_0\n         27: getfield      #16                 // Field in:Ljava/io/InputStream;\n         30: aload_0\n         31: getfield      #3                  // Field buf:[B\n         34: arraylength\n-        35: invokevirtual #64                 // Method java/io/InputStream.mark:(I)V\n+        35: invokevirtual #58                 // Method java/io/InputStream.mark:(I)V\n         38: aload_0\n         39: aload_0\n         40: getfield      #16                 // Field in:Ljava/io/InputStream;\n         43: aload_0\n         44: getfield      #3                  // Field buf:[B\n-        47: invokevirtual #65                 // Method java/io/InputStream.read:([B)I\n-        50: putfield      #66                 // Field bufUsed:I\n+        47: invokevirtual #59                 // Method java/io/InputStream.read:([B)I\n+        50: putfield      #60                 // Field bufUsed:I\n         53: aload_0\n-        54: getfield      #66                 // Field bufUsed:I\n+        54: getfield      #60                 // Field bufUsed:I\n         57: iconst_m1\n         58: if_icmpne     69\n-        61: new           #67                 // class java/io/EOFException\n+        61: new           #61                 // class java/io/EOFException\n         64: dup\n-        65: invokespecial #68                 // Method java/io/EOFException.\"<init>\":()V\n+        65: invokespecial #62                 // Method java/io/EOFException.\"<init>\":()V\n         68: athrow\n         69: aload_0\n         70: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n         73: aload_0\n         74: getfield      #3                  // Field buf:[B\n         77: iconst_0\n         78: aload_0\n-        79: getfield      #66                 // Field bufUsed:I\n-        82: invokevirtual #69                 // Method java/util/zip/Inflater.setInput:([BII)V\n+        79: getfield      #60                 // Field bufUsed:I\n+        82: invokevirtual #63                 // Method java/util/zip/Inflater.setInput:([BII)V\n         85: aload_0\n         86: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n         89: aload_1\n         90: iload_2\n         91: iload_3\n-        92: invokevirtual #70                 // Method java/util/zip/Inflater.inflate:([BII)I\n+        92: invokevirtual #64                 // Method java/util/zip/Inflater.inflate:([BII)I\n         95: istore        5\n         97: goto          112\n        100: astore        6\n        102: new           #25                 // class java/io/IOException\n        105: dup\n-       106: ldc           #72                 // String Gzip-compressed data is corrupt\n+       106: ldc           #66                 // String Gzip-compressed data is corrupt\n        108: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        111: athrow\n        112: aload_0\n        113: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n        116: aload_1\n        117: iload_2\n        118: iload         5\n-       120: invokevirtual #73                 // Method java/util/zip/CRC32.update:([BII)V\n+       120: invokevirtual #67                 // Method java/util/zip/CRC32.update:([BII)V\n        123: iload_2\n        124: iload         5\n        126: iadd\n        127: istore_2\n        128: iload_3\n        129: iload         5\n        131: isub\n        132: istore_3\n        133: iload         4\n        135: iload         5\n        137: iadd\n        138: istore        4\n        140: aload_0\n        141: iload         5\n-       143: invokevirtual #74                 // Method count:(I)V\n+       143: invokevirtual #68                 // Method count:(I)V\n        146: aload_0\n        147: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       150: invokevirtual #75                 // Method java/util/zip/Inflater.finished:()Z\n+       150: invokevirtual #69                 // Method java/util/zip/Inflater.finished:()Z\n        153: ifeq          330\n        156: aload_0\n        157: getfield      #16                 // Field in:Ljava/io/InputStream;\n-       160: invokevirtual #76                 // Method java/io/InputStream.reset:()V\n+       160: invokevirtual #70                 // Method java/io/InputStream.reset:()V\n        163: aload_0\n-       164: getfield      #66                 // Field bufUsed:I\n+       164: getfield      #60                 // Field bufUsed:I\n        167: aload_0\n        168: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       171: invokevirtual #77                 // Method java/util/zip/Inflater.getRemaining:()I\n+       171: invokevirtual #71                 // Method java/util/zip/Inflater.getRemaining:()I\n        174: isub\n        175: istore        6\n        177: aload_0\n        178: getfield      #16                 // Field in:Ljava/io/InputStream;\n        181: iload         6\n        183: i2l\n-       184: invokevirtual #78                 // Method java/io/InputStream.skip:(J)J\n+       184: invokevirtual #72                 // Method java/io/InputStream.skip:(J)J\n        187: iload         6\n        189: i2l\n        190: lcmp\n        191: ifeq          202\n        194: new           #25                 // class java/io/IOException\n        197: dup\n-       198: invokespecial #79                 // Method java/io/IOException.\"<init>\":()V\n+       198: invokespecial #73                 // Method java/io/IOException.\"<init>\":()V\n        201: athrow\n        202: aload_0\n        203: iconst_0\n-       204: putfield      #66                 // Field bufUsed:I\n+       204: putfield      #60                 // Field bufUsed:I\n        207: new           #29                 // class java/io/DataInputStream\n        210: dup\n        211: aload_0\n        212: getfield      #16                 // Field in:Ljava/io/InputStream;\n        215: invokespecial #30                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n        218: astore        7\n        220: aload         7\n        222: iconst_4\n-       223: invokestatic  #42                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       223: invokestatic  #36                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        226: lstore        8\n        228: lload         8\n        230: aload_0\n        231: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n-       234: invokevirtual #80                 // Method java/util/zip/CRC32.getValue:()J\n+       234: invokevirtual #74                 // Method java/util/zip/CRC32.getValue:()J\n        237: lcmp\n        238: ifeq          251\n        241: new           #25                 // class java/io/IOException\n        244: dup\n-       245: ldc           #81                 // String Gzip-compressed data is corrupt (CRC32 error)\n+       245: ldc           #75                 // String Gzip-compressed data is corrupt (CRC32 error)\n        247: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        250: athrow\n        251: aload         7\n        253: iconst_4\n-       254: invokestatic  #42                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       254: invokestatic  #36                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        257: lstore        10\n        259: lload         10\n        261: aload_0\n        262: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       265: invokevirtual #82                 // Method java/util/zip/Inflater.getBytesWritten:()J\n-       268: ldc2_w        #83                 // long 4294967295l\n+       265: invokevirtual #76                 // Method java/util/zip/Inflater.getBytesWritten:()J\n+       268: ldc2_w        #77                 // long 4294967295l\n        271: land\n        272: lcmp\n        273: ifeq          286\n        276: new           #25                 // class java/io/IOException\n        279: dup\n-       280: ldc           #85                 // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n+       280: ldc           #79                 // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n        282: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        285: athrow\n        286: aload_0\n        287: getfield      #19                 // Field decompressConcatenated:Z\n        290: ifeq          301\n        293: aload_0\n        294: iconst_0\n        295: invokespecial #20                 // Method init:(Z)Z\n        298: ifne          330\n        301: aload_0\n        302: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       305: invokevirtual #86                 // Method java/util/zip/Inflater.end:()V\n+       305: invokevirtual #80                 // Method java/util/zip/Inflater.end:()V\n        308: aload_0\n        309: aconst_null\n        310: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n        313: aload_0\n        314: iconst_1\n        315: putfield      #10                 // Field endReached:Z\n        318: iload         4\n@@ -1129,25 +1118,25 @@\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n          4: ifnull        19\n          7: aload_0\n          8: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-        11: invokevirtual #86                 // Method java/util/zip/Inflater.end:()V\n+        11: invokevirtual #80                 // Method java/util/zip/Inflater.end:()V\n         14: aload_0\n         15: aconst_null\n         16: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n         19: aload_0\n         20: getfield      #16                 // Field in:Ljava/io/InputStream;\n-        23: getstatic     #87                 // Field java/lang/System.in:Ljava/io/InputStream;\n+        23: getstatic     #81                 // Field java/lang/System.in:Ljava/io/InputStream;\n         26: if_acmpeq     36\n         29: aload_0\n         30: getfield      #16                 // Field in:Ljava/io/InputStream;\n-        33: invokevirtual #88                 // Method java/io/InputStream.close:()V\n+        33: invokevirtual #82                 // Method java/io/InputStream.close:()V\n         36: return\n       LineNumberTable:\n         line 379: 0\n         line 380: 7\n         line 381: 14\n         line 384: 19\n         line 385: 29\n@@ -1162,23 +1151,29 @@\n       throws java.io.IOException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: ldc           #40                 // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-         2: invokevirtual #89                 // Method java/lang/Class.desiredAssertionStatus:()Z\n+         0: ldc           #34                 // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+         2: invokevirtual #83                 // Method java/lang/Class.desiredAssertionStatus:()Z\n          5: ifne          12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n         13: putstatic     #21                 // Field $assertionsDisabled:Z\n         16: return\n       LineNumberTable:\n         line 73: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 12 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n }\n SourceFile: \"GzipCompressorInputStream.java\"\n+InnerClasses:\n+  public static final #293= #292 of #296; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #195 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #196 Unsupported compression method \\u0001 in the .gz header\n"}]}
