{"diffoscope-json-version": 1, "source1": "first/TableSwitchForm.class", "source2": "second/TableSwitchForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,51 +3,47 @@\n \n import java.util.Arrays;\n import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;\n \n public class TableSwitchForm extends SwitchForm\n {\n-    public TableSwitchForm(final int opcode, final String name) {\n-        super(opcode, name);\n+    public TableSwitchForm(final int n, final String s) {\n+        super(n, s);\n     }\n     \n-    public void setByteCodeOperands(final ByteCode byteCode, final OperandManager operandManager, final int codeLength) {\n-        final int caseCount = operandManager.nextCaseCount();\n-        final int defaultPc = operandManager.nextLabel();\n-        int caseValue = -1;\n-        caseValue = operandManager.nextCaseValues();\n-        final int[] casePcs = new int[caseCount];\n-        Arrays.setAll(casePcs, i -> operandManager.nextLabel());\n-        final int[] labelsArray = new int[caseCount + 1];\n-        labelsArray[0] = defaultPc;\n-        System.arraycopy(casePcs, 0, labelsArray, 1, caseCount + 1 - 1);\n-        byteCode.setByteCodeTargets(labelsArray);\n-        final int lowValue = caseValue;\n-        final int highValue = lowValue + caseCount - 1;\n-        final int padLength = 3 - codeLength % 4;\n-        final int rewriteSize = 1 + padLength + 4 + 4 + 4 + 4 * casePcs.length;\n-        final int[] newRewrite = new int[rewriteSize];\n-        int rewriteIndex = 0;\n-        newRewrite[rewriteIndex++] = byteCode.getOpcode();\n-        for (int index = 0; index < padLength; ++index) {\n-            newRewrite[rewriteIndex++] = 0;\n+    public void setByteCodeOperands(final ByteCode byteCode, final OperandManager operandManager, final int n) {\n+        final int nextCaseCount = operandManager.nextCaseCount();\n+        final int nextLabel = operandManager.nextLabel();\n+        final int nextCaseValues = operandManager.nextCaseValues();\n+        final int[] array = new int[nextCaseCount];\n+        Arrays.setAll(array, p1 -> operandManager2.nextLabel());\n+        final int[] byteCodeTargets = new int[nextCaseCount + 1];\n+        byteCodeTargets[0] = nextLabel;\n+        System.arraycopy(array, 0, byteCodeTargets, 1, nextCaseCount + 1 - 1);\n+        byteCode.setByteCodeTargets(byteCodeTargets);\n+        final int n2 = nextCaseValues;\n+        final int n3 = n2 + nextCaseCount - 1;\n+        final int n4 = 3 - n % 4;\n+        final int[] rewrite = new int[1 + n4 + 4 + 4 + 4 + 4 * array.length];\n+        int n5 = 0;\n+        rewrite[n5++] = byteCode.getOpcode();\n+        for (int i = 0; i < n4; ++i) {\n+            rewrite[n5++] = 0;\n         }\n-        newRewrite[rewriteIndex++] = -1;\n-        newRewrite[rewriteIndex++] = -1;\n-        newRewrite[rewriteIndex++] = -1;\n-        newRewrite[rewriteIndex++] = -1;\n-        final int lowbyteIndex = rewriteIndex;\n-        this.setRewrite4Bytes(lowValue, lowbyteIndex, newRewrite);\n-        rewriteIndex += 4;\n-        final int highbyteIndex = rewriteIndex;\n-        this.setRewrite4Bytes(highValue, highbyteIndex, newRewrite);\n-        rewriteIndex += 4;\n-        for (int index2 = 0; index2 < caseCount; ++index2) {\n-            newRewrite[rewriteIndex++] = -1;\n-            newRewrite[rewriteIndex++] = -1;\n-            newRewrite[rewriteIndex++] = -1;\n-            newRewrite[rewriteIndex++] = -1;\n+        rewrite[n5++] = -1;\n+        rewrite[n5++] = -1;\n+        rewrite[n5++] = -1;\n+        rewrite[n5++] = -1;\n+        this.setRewrite4Bytes(n2, n5, rewrite);\n+        n5 += 4;\n+        this.setRewrite4Bytes(n3, n5, rewrite);\n+        n5 += 4;\n+        for (int j = 0; j < nextCaseCount; ++j) {\n+            rewrite[n5++] = -1;\n+            rewrite[n5++] = -1;\n+            rewrite[n5++] = -1;\n+            rewrite[n5++] = -1;\n         }\n-        byteCode.setRewrite(newRewrite);\n+        byteCode.setRewrite(rewrite);\n     }\n }\n"}]}
