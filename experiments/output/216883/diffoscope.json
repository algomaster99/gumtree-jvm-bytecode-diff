{"diffoscope-json-version": 1, "source1": "first/Attribute.class", "source2": "second/Attribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -36,116 +36,116 @@\n     protected static void println(final String msg) {\n         if (Attribute.debug) {\n             System.err.println(msg);\n         }\n     }\n     \n     public static Attribute readAttribute(final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n-        byte tag = -1;\n-        final int nameIndex = dataInput.readUnsignedShort();\n-        final String name = constantPool.getConstantUtf8(nameIndex).getBytes();\n-        final int length = dataInput.readInt();\n-        for (byte i = 0; i < 27; ++i) {\n-            if (name.equals(Const.getAttributeName((int)i))) {\n-                tag = i;\n+        int i = -1;\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        final String bytes = constantPool.getConstantUtf8(unsignedShort).getBytes();\n+        final int int1 = dataInput.readInt();\n+        for (int j = 0; j < 27; j = (byte)(j + 1)) {\n+            if (bytes.equals(Const.getAttributeName(j))) {\n+                i = j;\n                 break;\n             }\n         }\n-        switch (tag) {\n+        switch (i) {\n             case -1: {\n-                final Object r = Attribute.READERS.get(name);\n-                if (r instanceof UnknownAttributeReader) {\n-                    return ((UnknownAttributeReader)r).createAttribute(nameIndex, length, dataInput, constantPool);\n+                final Object value = Attribute.READERS.get(bytes);\n+                if (value instanceof UnknownAttributeReader) {\n+                    return ((UnknownAttributeReader)value).createAttribute(unsignedShort, int1, dataInput, constantPool);\n                 }\n-                return (Attribute)new Unknown(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new Unknown(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 1: {\n-                return (Attribute)new ConstantValue(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new ConstantValue(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 0: {\n-                return (Attribute)new SourceFile(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new SourceFile(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 2: {\n-                return (Attribute)new Code(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new Code(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 3: {\n-                return (Attribute)new ExceptionTable(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new ExceptionTable(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 4: {\n-                return (Attribute)new LineNumberTable(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new LineNumberTable(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 5: {\n-                return (Attribute)new LocalVariableTable(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new LocalVariableTable(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 6: {\n-                return (Attribute)new InnerClasses(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new InnerClasses(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 7: {\n-                return (Attribute)new Synthetic(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new Synthetic(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 8: {\n-                return (Attribute)new org.apache.bcel.classfile.Deprecated(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new org.apache.bcel.classfile.Deprecated(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 9: {\n-                return (Attribute)new PMGClass(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new PMGClass(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 10: {\n-                return (Attribute)new Signature(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new Signature(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 11: {\n                 println(\"Warning: Obsolete StackMap attribute ignored.\");\n-                return (Attribute)new Unknown(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new Unknown(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 12: {\n-                return (Attribute)new RuntimeVisibleAnnotations(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new RuntimeVisibleAnnotations(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 13: {\n-                return (Attribute)new RuntimeInvisibleAnnotations(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new RuntimeInvisibleAnnotations(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 14: {\n-                return (Attribute)new RuntimeVisibleParameterAnnotations(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new RuntimeVisibleParameterAnnotations(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 15: {\n-                return (Attribute)new RuntimeInvisibleParameterAnnotations(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new RuntimeInvisibleParameterAnnotations(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 16: {\n-                return (Attribute)new AnnotationDefault(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new AnnotationDefault(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 17: {\n-                return (Attribute)new LocalVariableTypeTable(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new LocalVariableTypeTable(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 18: {\n-                return (Attribute)new EnclosingMethod(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new EnclosingMethod(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 19: {\n-                return (Attribute)new StackMap(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new StackMap(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 20: {\n-                return (Attribute)new BootstrapMethods(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new BootstrapMethods(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 21: {\n-                return (Attribute)new MethodParameters(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new MethodParameters(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 22: {\n-                return (Attribute)new Module(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new Module(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 23: {\n-                return (Attribute)new ModulePackages(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new ModulePackages(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 24: {\n-                return (Attribute)new ModuleMainClass(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new ModuleMainClass(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 25: {\n-                return (Attribute)new NestHost(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new NestHost(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 26: {\n-                return (Attribute)new NestMembers(nameIndex, length, dataInput, constantPool);\n+                return (Attribute)new NestMembers(unsignedShort, int1, dataInput, constantPool);\n             }\n             default: {\n-                throw new IllegalStateException(\"Unrecognized attribute type tag parsed: \" + tag);\n+                throw new IllegalStateException(\"Unrecognized attribute type tag parsed: \" + i);\n             }\n         }\n     }\n     \n     public static Attribute readAttribute(final DataInputStream dataInputStream, final ConstantPool constantPool) throws IOException {\n         return readAttribute((DataInput)dataInputStream, constantPool);\n     }\n@@ -160,22 +160,22 @@\n         this.length = Args.requireU4(length, this.getClass().getSimpleName() + \" attribute length\");\n         this.constant_pool = constantPool;\n     }\n     \n     public abstract void accept(final Visitor v);\n     \n     public Object clone() {\n-        Attribute attr = null;\n+        Attribute attribute;\n         try {\n-            attr = (Attribute)super.clone();\n+            attribute = (Attribute)super.clone();\n         }\n-        catch (final CloneNotSupportedException e) {\n+        catch (final CloneNotSupportedException ex) {\n             throw new Error(\"Clone Not Supported\");\n         }\n-        return attr;\n+        return attribute;\n     }\n     \n     public abstract Attribute copy(final ConstantPool constantPool);\n     \n     public void dump(final DataOutputStream file) throws IOException {\n         file.writeShort(this.name_index);\n         file.writeInt(this.length);\n"}]}
