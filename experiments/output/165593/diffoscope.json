{"diffoscope-json-version": 1, "source1": "first/FixedLengthBlockOutputStream.class", "source2": "second/FixedLengthBlockOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,67 +1,67 @@\n-  SHA-256 checksum 4738a2e50cd49dbf60707df0ae8d216423ed7ada8cadf2944b69133671e672cb\n+  SHA-256 checksum 434bc50aa080c8fe3e110998d3b9bb832e322a6e07ca7c355d98fa044077b47d\n   Compiled from \"FixedLengthBlockOutputStream.java\"\n public class org.apache.commons.compress.utils.FixedLengthBlockOutputStream extends java.io.OutputStream implements java.nio.channels.WritableByteChannel\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #47                         // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n   super_class: #48                        // java/io/OutputStream\n   interfaces: 1, fields: 4, methods: 11, attributes: 2\n Constant pool:\n-    #1 = Methodref          #48.#111      // java/io/OutputStream.\"<init>\":()V\n-    #2 = Class              #112          // java/util/concurrent/atomic/AtomicBoolean\n-    #3 = Methodref          #2.#113       // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-    #4 = Fieldref           #47.#114      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-    #5 = Class              #115          // java/io/FileOutputStream\n-    #6 = Methodref          #5.#116       // java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;\n-    #7 = Fieldref           #47.#117      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.out:Ljava/nio/channels/WritableByteChannel;\n-    #8 = Methodref          #118.#119     // java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n-    #9 = Fieldref           #47.#120      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.buffer:Ljava/nio/ByteBuffer;\n-   #10 = Class              #121          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-   #11 = Methodref          #10.#122      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-   #12 = Methodref          #118.#123     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #13 = Fieldref           #47.#124      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.blockSize:I\n-   #14 = Methodref          #2.#125       // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n-   #15 = Methodref          #47.#126      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n-   #16 = InterfaceMethodref #49.#127      // java/nio/channels/WritableByteChannel.close:()V\n-   #17 = Methodref          #118.#128     // java/nio/ByteBuffer.position:()I\n-   #18 = Methodref          #47.#129      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.padBlock:()V\n-   #19 = Methodref          #47.#130      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.writeBlock:()V\n-   #20 = InterfaceMethodref #49.#131      // java/nio/channels/WritableByteChannel.isOpen:()Z\n-   #21 = Methodref          #2.#132       // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n-   #22 = Methodref          #2.#133       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-   #23 = Methodref          #118.#134     // java/nio/ByteBuffer.hasRemaining:()Z\n-   #24 = Methodref          #135.#136     // java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;\n-   #25 = Methodref          #118.#137     // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-   #26 = Methodref          #118.#138     // java/nio/ByteBuffer.remaining:()I\n-   #27 = Methodref          #118.#139     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-   #28 = Methodref          #118.#140     // java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;\n-   #29 = Methodref          #47.#131      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.isOpen:()Z\n-   #30 = Class              #141          // java/nio/channels/ClosedChannelException\n-   #31 = Methodref          #30.#111      // java/nio/channels/ClosedChannelException.\"<init>\":()V\n-   #32 = Methodref          #142.#143     // java/lang/Math.min:(II)I\n-   #33 = Methodref          #118.#144     // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #34 = Methodref          #47.#145      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.maybeFlush:()V\n-   #35 = Methodref          #118.#146     // java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-   #36 = Methodref          #118.#147     // java/nio/ByteBuffer.limit:()I\n-   #37 = Methodref          #118.#148     // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n-   #38 = InterfaceMethodref #49.#149      // java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n-   #39 = Methodref          #118.#150     // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #40 = String             #151          // Failed to write %,d bytes atomically. Only wrote  %,d\n-   #41 = Class              #152          // java/lang/Object\n-   #42 = Methodref          #153.#154     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #43 = Methodref          #155.#156     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #44 = Class              #157          // java/io/IOException\n-   #45 = Methodref          #44.#158      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #46 = Methodref          #118.#159     // java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;\n-   #47 = Class              #160          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-   #48 = Class              #161          // java/io/OutputStream\n-   #49 = Class              #162          // java/nio/channels/WritableByteChannel\n-   #50 = Class              #163          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n+    #1 = Methodref          #48.#109      // java/io/OutputStream.\"<init>\":()V\n+    #2 = Class              #110          // java/util/concurrent/atomic/AtomicBoolean\n+    #3 = Methodref          #2.#111       // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+    #4 = Fieldref           #47.#112      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+    #5 = Class              #113          // java/io/FileOutputStream\n+    #6 = Methodref          #5.#114       // java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;\n+    #7 = Fieldref           #47.#115      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.out:Ljava/nio/channels/WritableByteChannel;\n+    #8 = Methodref          #116.#117     // java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n+    #9 = Fieldref           #47.#118      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.buffer:Ljava/nio/ByteBuffer;\n+   #10 = Class              #119          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+   #11 = Methodref          #10.#120      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+   #12 = Methodref          #116.#121     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #13 = Fieldref           #47.#122      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.blockSize:I\n+   #14 = Methodref          #2.#123       // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n+   #15 = Methodref          #47.#124      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n+   #16 = InterfaceMethodref #49.#125      // java/nio/channels/WritableByteChannel.close:()V\n+   #17 = Methodref          #116.#126     // java/nio/ByteBuffer.position:()I\n+   #18 = Methodref          #47.#127      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.padBlock:()V\n+   #19 = Methodref          #47.#128      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.writeBlock:()V\n+   #20 = InterfaceMethodref #49.#129      // java/nio/channels/WritableByteChannel.isOpen:()Z\n+   #21 = Methodref          #2.#130       // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+   #22 = Methodref          #2.#131       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+   #23 = Methodref          #116.#132     // java/nio/ByteBuffer.hasRemaining:()Z\n+   #24 = Methodref          #133.#134     // java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;\n+   #25 = Methodref          #116.#135     // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+   #26 = Methodref          #116.#136     // java/nio/ByteBuffer.remaining:()I\n+   #27 = Methodref          #116.#137     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+   #28 = Methodref          #116.#138     // java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;\n+   #29 = Methodref          #47.#129      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.isOpen:()Z\n+   #30 = Class              #139          // java/nio/channels/ClosedChannelException\n+   #31 = Methodref          #30.#109      // java/nio/channels/ClosedChannelException.\"<init>\":()V\n+   #32 = Methodref          #140.#141     // java/lang/Math.min:(II)I\n+   #33 = Methodref          #116.#142     // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+   #34 = Methodref          #47.#143      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.maybeFlush:()V\n+   #35 = Methodref          #116.#144     // java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+   #36 = Methodref          #116.#145     // java/nio/ByteBuffer.limit:()I\n+   #37 = Methodref          #116.#146     // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+   #38 = InterfaceMethodref #49.#147      // java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+   #39 = Methodref          #116.#148     // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+   #40 = String             #149          // Failed to write %,d bytes atomically. Only wrote  %,d\n+   #41 = Class              #150          // java/lang/Object\n+   #42 = Methodref          #151.#152     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #43 = Methodref          #153.#154     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #44 = Class              #155          // java/io/IOException\n+   #45 = Methodref          #44.#156      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #46 = Methodref          #116.#157     // java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;\n+   #47 = Class              #158          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+   #48 = Class              #159          // java/io/OutputStream\n+   #49 = Class              #160          // java/nio/channels/WritableByteChannel\n+   #50 = Class              #161          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n    #51 = Utf8               InnerClasses\n    #52 = Utf8               BufferAtATimeOutputChannel\n    #53 = Utf8               out\n    #54 = Utf8               Ljava/nio/channels/WritableByteChannel;\n    #55 = Utf8               blockSize\n    #56 = Utf8               I\n    #57 = Utf8               buffer\n@@ -76,146 +76,144 @@\n    #66 = Utf8               fileOutputStream\n    #67 = Utf8               Ljava/io/FileOutputStream;\n    #68 = Utf8               this\n    #69 = Utf8               Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n    #70 = Utf8               os\n    #71 = Utf8               Ljava/io/OutputStream;\n    #72 = Utf8               StackMapTable\n-   #73 = Class              #160          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-   #74 = Class              #161          // java/io/OutputStream\n-   #75 = Utf8               (Ljava/nio/channels/WritableByteChannel;I)V\n-   #76 = Utf8               close\n-   #77 = Utf8               ()V\n-   #78 = Class              #164          // java/lang/Throwable\n-   #79 = Utf8               Exceptions\n-   #80 = Utf8               flushBlock\n-   #81 = Utf8               isOpen\n-   #82 = Utf8               ()Z\n-   #83 = Utf8               maybeFlush\n-   #84 = Utf8               padBlock\n-   #85 = Utf8               i\n-   #86 = Utf8               limit\n-   #87 = Utf8               align\n-   #88 = Utf8               bytesToWrite\n-   #89 = Utf8               write\n-   #90 = Utf8               ([BII)V\n-   #91 = Utf8               n\n-   #92 = Utf8               b\n-   #93 = Utf8               [B\n-   #94 = Utf8               offset\n-   #95 = Utf8               length\n-   #96 = Utf8               off\n-   #97 = Utf8               len\n-   #98 = Utf8               (Ljava/nio/ByteBuffer;)I\n-   #99 = Utf8               srcLeft\n-  #100 = Utf8               savedLimit\n-  #101 = Utf8               src\n-  #102 = Utf8               srcRemaining\n-  #103 = Utf8               (I)V\n-  #104 = Utf8               writeBlock\n-  #105 = Utf8               msg\n-  #106 = Utf8               Ljava/lang/String;\n-  #107 = Utf8               hasRemaining\n-  #108 = Utf8               Z\n-  #109 = Utf8               SourceFile\n-  #110 = Utf8               FixedLengthBlockOutputStream.java\n-  #111 = NameAndType        #61:#77       // \"<init>\":()V\n-  #112 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n-  #113 = NameAndType        #61:#165      // \"<init>\":(Z)V\n-  #114 = NameAndType        #59:#60       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-  #115 = Utf8               java/io/FileOutputStream\n-  #116 = NameAndType        #166:#167     // getChannel:()Ljava/nio/channels/FileChannel;\n-  #117 = NameAndType        #53:#54       // out:Ljava/nio/channels/WritableByteChannel;\n-  #118 = Class              #168          // java/nio/ByteBuffer\n-  #119 = NameAndType        #169:#170     // allocateDirect:(I)Ljava/nio/ByteBuffer;\n-  #120 = NameAndType        #57:#58       // buffer:Ljava/nio/ByteBuffer;\n-  #121 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-  #122 = NameAndType        #61:#171      // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-  #123 = NameAndType        #172:#170     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #124 = NameAndType        #55:#56       // blockSize:I\n-  #125 = NameAndType        #173:#174     // compareAndSet:(ZZ)Z\n-  #126 = NameAndType        #80:#77       // flushBlock:()V\n-  #127 = NameAndType        #76:#77       // close:()V\n-  #128 = NameAndType        #175:#176     // position:()I\n-  #129 = NameAndType        #84:#77       // padBlock:()V\n-  #130 = NameAndType        #104:#77      // writeBlock:()V\n-  #131 = NameAndType        #81:#82       // isOpen:()Z\n-  #132 = NameAndType        #177:#165     // set:(Z)V\n-  #133 = NameAndType        #178:#82      // get:()Z\n-  #134 = NameAndType        #107:#82      // hasRemaining:()Z\n-  #135 = Class              #179          // java/nio/ByteOrder\n-  #136 = NameAndType        #180:#181     // nativeOrder:()Ljava/nio/ByteOrder;\n-  #137 = NameAndType        #182:#183     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #138 = NameAndType        #184:#176     // remaining:()I\n-  #139 = NameAndType        #185:#186     // put:(B)Ljava/nio/ByteBuffer;\n-  #140 = NameAndType        #187:#188     // putLong:(J)Ljava/nio/ByteBuffer;\n-  #141 = Utf8               java/nio/channels/ClosedChannelException\n-  #142 = Class              #189          // java/lang/Math\n-  #143 = NameAndType        #190:#191     // min:(II)I\n-  #144 = NameAndType        #185:#192     // put:([BII)Ljava/nio/ByteBuffer;\n-  #145 = NameAndType        #83:#77       // maybeFlush:()V\n-  #146 = NameAndType        #185:#193     // put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #147 = NameAndType        #86:#176      // limit:()I\n-  #148 = NameAndType        #86:#194      // limit:(I)Ljava/nio/Buffer;\n-  #149 = NameAndType        #89:#98       // write:(Ljava/nio/ByteBuffer;)I\n-  #150 = NameAndType        #195:#196     // flip:()Ljava/nio/Buffer;\n-  #151 = Utf8               Failed to write %,d bytes atomically. Only wrote  %,d\n-  #152 = Utf8               java/lang/Object\n-  #153 = Class              #197          // java/lang/Integer\n-  #154 = NameAndType        #198:#199     // valueOf:(I)Ljava/lang/Integer;\n-  #155 = Class              #200          // java/lang/String\n-  #156 = NameAndType        #201:#202     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #157 = Utf8               java/io/IOException\n-  #158 = NameAndType        #61:#203      // \"<init>\":(Ljava/lang/String;)V\n-  #159 = NameAndType        #204:#196     // clear:()Ljava/nio/Buffer;\n-  #160 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  #161 = Utf8               java/io/OutputStream\n-  #162 = Utf8               java/nio/channels/WritableByteChannel\n-  #163 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n-  #164 = Utf8               java/lang/Throwable\n-  #165 = Utf8               (Z)V\n-  #166 = Utf8               getChannel\n-  #167 = Utf8               ()Ljava/nio/channels/FileChannel;\n-  #168 = Utf8               java/nio/ByteBuffer\n-  #169 = Utf8               allocateDirect\n-  #170 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #171 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-  #172 = Utf8               allocate\n-  #173 = Utf8               compareAndSet\n-  #174 = Utf8               (ZZ)Z\n-  #175 = Utf8               position\n-  #176 = Utf8               ()I\n-  #177 = Utf8               set\n-  #178 = Utf8               get\n-  #179 = Utf8               java/nio/ByteOrder\n-  #180 = Utf8               nativeOrder\n-  #181 = Utf8               ()Ljava/nio/ByteOrder;\n-  #182 = Utf8               order\n-  #183 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #184 = Utf8               remaining\n-  #185 = Utf8               put\n-  #186 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #187 = Utf8               putLong\n-  #188 = Utf8               (J)Ljava/nio/ByteBuffer;\n-  #189 = Utf8               java/lang/Math\n-  #190 = Utf8               min\n-  #191 = Utf8               (II)I\n-  #192 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #193 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #194 = Utf8               (I)Ljava/nio/Buffer;\n-  #195 = Utf8               flip\n-  #196 = Utf8               ()Ljava/nio/Buffer;\n-  #197 = Utf8               java/lang/Integer\n-  #198 = Utf8               valueOf\n-  #199 = Utf8               (I)Ljava/lang/Integer;\n-  #200 = Utf8               java/lang/String\n-  #201 = Utf8               format\n-  #202 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #203 = Utf8               (Ljava/lang/String;)V\n-  #204 = Utf8               clear\n+   #73 = Utf8               (Ljava/nio/channels/WritableByteChannel;I)V\n+   #74 = Utf8               close\n+   #75 = Utf8               ()V\n+   #76 = Class              #162          // java/lang/Throwable\n+   #77 = Utf8               Exceptions\n+   #78 = Utf8               flushBlock\n+   #79 = Utf8               isOpen\n+   #80 = Utf8               ()Z\n+   #81 = Utf8               maybeFlush\n+   #82 = Utf8               padBlock\n+   #83 = Utf8               i\n+   #84 = Utf8               limit\n+   #85 = Utf8               align\n+   #86 = Utf8               bytesToWrite\n+   #87 = Utf8               write\n+   #88 = Utf8               ([BII)V\n+   #89 = Utf8               n\n+   #90 = Utf8               b\n+   #91 = Utf8               [B\n+   #92 = Utf8               offset\n+   #93 = Utf8               length\n+   #94 = Utf8               off\n+   #95 = Utf8               len\n+   #96 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #97 = Utf8               srcLeft\n+   #98 = Utf8               savedLimit\n+   #99 = Utf8               src\n+  #100 = Utf8               srcRemaining\n+  #101 = Utf8               (I)V\n+  #102 = Utf8               writeBlock\n+  #103 = Utf8               msg\n+  #104 = Utf8               Ljava/lang/String;\n+  #105 = Utf8               hasRemaining\n+  #106 = Utf8               Z\n+  #107 = Utf8               SourceFile\n+  #108 = Utf8               FixedLengthBlockOutputStream.java\n+  #109 = NameAndType        #61:#75       // \"<init>\":()V\n+  #110 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n+  #111 = NameAndType        #61:#163      // \"<init>\":(Z)V\n+  #112 = NameAndType        #59:#60       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+  #113 = Utf8               java/io/FileOutputStream\n+  #114 = NameAndType        #164:#165     // getChannel:()Ljava/nio/channels/FileChannel;\n+  #115 = NameAndType        #53:#54       // out:Ljava/nio/channels/WritableByteChannel;\n+  #116 = Class              #166          // java/nio/ByteBuffer\n+  #117 = NameAndType        #167:#168     // allocateDirect:(I)Ljava/nio/ByteBuffer;\n+  #118 = NameAndType        #57:#58       // buffer:Ljava/nio/ByteBuffer;\n+  #119 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+  #120 = NameAndType        #61:#169      // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+  #121 = NameAndType        #170:#168     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #122 = NameAndType        #55:#56       // blockSize:I\n+  #123 = NameAndType        #171:#172     // compareAndSet:(ZZ)Z\n+  #124 = NameAndType        #78:#75       // flushBlock:()V\n+  #125 = NameAndType        #74:#75       // close:()V\n+  #126 = NameAndType        #173:#174     // position:()I\n+  #127 = NameAndType        #82:#75       // padBlock:()V\n+  #128 = NameAndType        #102:#75      // writeBlock:()V\n+  #129 = NameAndType        #79:#80       // isOpen:()Z\n+  #130 = NameAndType        #175:#163     // set:(Z)V\n+  #131 = NameAndType        #176:#80      // get:()Z\n+  #132 = NameAndType        #105:#80      // hasRemaining:()Z\n+  #133 = Class              #177          // java/nio/ByteOrder\n+  #134 = NameAndType        #178:#179     // nativeOrder:()Ljava/nio/ByteOrder;\n+  #135 = NameAndType        #180:#181     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #136 = NameAndType        #182:#174     // remaining:()I\n+  #137 = NameAndType        #183:#184     // put:(B)Ljava/nio/ByteBuffer;\n+  #138 = NameAndType        #185:#186     // putLong:(J)Ljava/nio/ByteBuffer;\n+  #139 = Utf8               java/nio/channels/ClosedChannelException\n+  #140 = Class              #187          // java/lang/Math\n+  #141 = NameAndType        #188:#189     // min:(II)I\n+  #142 = NameAndType        #183:#190     // put:([BII)Ljava/nio/ByteBuffer;\n+  #143 = NameAndType        #81:#75       // maybeFlush:()V\n+  #144 = NameAndType        #183:#191     // put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #145 = NameAndType        #84:#174      // limit:()I\n+  #146 = NameAndType        #84:#192      // limit:(I)Ljava/nio/Buffer;\n+  #147 = NameAndType        #87:#96       // write:(Ljava/nio/ByteBuffer;)I\n+  #148 = NameAndType        #193:#194     // flip:()Ljava/nio/Buffer;\n+  #149 = Utf8               Failed to write %,d bytes atomically. Only wrote  %,d\n+  #150 = Utf8               java/lang/Object\n+  #151 = Class              #195          // java/lang/Integer\n+  #152 = NameAndType        #196:#197     // valueOf:(I)Ljava/lang/Integer;\n+  #153 = Class              #198          // java/lang/String\n+  #154 = NameAndType        #199:#200     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #155 = Utf8               java/io/IOException\n+  #156 = NameAndType        #61:#201      // \"<init>\":(Ljava/lang/String;)V\n+  #157 = NameAndType        #202:#194     // clear:()Ljava/nio/Buffer;\n+  #158 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+  #159 = Utf8               java/io/OutputStream\n+  #160 = Utf8               java/nio/channels/WritableByteChannel\n+  #161 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n+  #162 = Utf8               java/lang/Throwable\n+  #163 = Utf8               (Z)V\n+  #164 = Utf8               getChannel\n+  #165 = Utf8               ()Ljava/nio/channels/FileChannel;\n+  #166 = Utf8               java/nio/ByteBuffer\n+  #167 = Utf8               allocateDirect\n+  #168 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #169 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+  #170 = Utf8               allocate\n+  #171 = Utf8               compareAndSet\n+  #172 = Utf8               (ZZ)Z\n+  #173 = Utf8               position\n+  #174 = Utf8               ()I\n+  #175 = Utf8               set\n+  #176 = Utf8               get\n+  #177 = Utf8               java/nio/ByteOrder\n+  #178 = Utf8               nativeOrder\n+  #179 = Utf8               ()Ljava/nio/ByteOrder;\n+  #180 = Utf8               order\n+  #181 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #182 = Utf8               remaining\n+  #183 = Utf8               put\n+  #184 = Utf8               (B)Ljava/nio/ByteBuffer;\n+  #185 = Utf8               putLong\n+  #186 = Utf8               (J)Ljava/nio/ByteBuffer;\n+  #187 = Utf8               java/lang/Math\n+  #188 = Utf8               min\n+  #189 = Utf8               (II)I\n+  #190 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #191 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #192 = Utf8               (I)Ljava/nio/Buffer;\n+  #193 = Utf8               flip\n+  #194 = Utf8               ()Ljava/nio/Buffer;\n+  #195 = Utf8               java/lang/Integer\n+  #196 = Utf8               valueOf\n+  #197 = Utf8               (I)Ljava/lang/Integer;\n+  #198 = Utf8               java/lang/String\n+  #199 = Utf8               format\n+  #200 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #201 = Utf8               (Ljava/lang/String;)V\n+  #202 = Utf8               clear\n {\n   private final java.nio.channels.WritableByteChannel out;\n     descriptor: Ljava/nio/channels/WritableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final int blockSize;\n     descriptor: I\n"}]}
