{"diffoscope-json-version": 1, "source1": "first/Segment$SegmentMethodVisitor.class", "source2": "second/Segment$SegmentMethodVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,135 +19,135 @@\n     \n     public AnnotationVisitor visitAnnotationDefault() {\n         return (AnnotationVisitor)new Segment.SegmentAnnotationVisitor(this.this$0, 2);\n     }\n     \n     public void visitAttribute(final Attribute attribute) {\n         if (attribute.isUnknown()) {\n-            final String action = Segment.access$600(this.this$0).getUnknownAttributeAction();\n+            final String action = Segment.access$2(this.this$0).getUnknownAttributeAction();\n             if (action.equals(\"pass\")) {\n-                Segment.access$700(this.this$0);\n+                Segment.access$3(this.this$0);\n             }\n             else if (action.equals(\"error\")) {\n                 throw new Error(\"Unknown attribute encountered\");\n             }\n         }\n         else {\n             if (!(attribute instanceof NewAttribute)) {\n                 throw new IllegalArgumentException(\"Unexpected attribute encountered: \" + attribute.type);\n             }\n             final NewAttribute newAttribute = (NewAttribute)attribute;\n             if (attribute.isCodeAttribute()) {\n                 if (newAttribute.isUnknown(3)) {\n-                    final String action2 = Segment.access$600(this.this$0).getUnknownCodeAttributeAction(newAttribute.type);\n+                    final String action2 = Segment.access$2(this.this$0).getUnknownCodeAttributeAction(newAttribute.type);\n                     if (action2.equals(\"pass\")) {\n-                        Segment.access$700(this.this$0);\n+                        Segment.access$3(this.this$0);\n                     }\n                     else if (action2.equals(\"error\")) {\n                         throw new Error(\"Unknown attribute encountered\");\n                     }\n                 }\n-                Segment.access$500(this.this$0).addCodeAttribute(newAttribute);\n+                Segment.access$1(this.this$0).addCodeAttribute(newAttribute);\n             }\n             else {\n                 if (newAttribute.isUnknown(2)) {\n-                    final String action2 = Segment.access$600(this.this$0).getUnknownMethodAttributeAction(newAttribute.type);\n+                    final String action2 = Segment.access$2(this.this$0).getUnknownMethodAttributeAction(newAttribute.type);\n                     if (action2.equals(\"pass\")) {\n-                        Segment.access$700(this.this$0);\n+                        Segment.access$3(this.this$0);\n                     }\n                     else if (action2.equals(\"error\")) {\n                         throw new Error(\"Unknown attribute encountered\");\n                     }\n                 }\n-                Segment.access$500(this.this$0).addMethodAttribute(newAttribute);\n+                Segment.access$1(this.this$0).addMethodAttribute(newAttribute);\n             }\n         }\n     }\n     \n     public void visitCode() {\n-        Segment.access$500(this.this$0).addCode();\n+        Segment.access$1(this.this$0).addCode();\n     }\n     \n     public void visitEnd() {\n-        Segment.access$500(this.this$0).endOfMethod();\n-        Segment.access$800(this.this$0).visitEnd();\n+        Segment.access$1(this.this$0).endOfMethod();\n+        Segment.access$4(this.this$0).visitEnd();\n     }\n     \n     public void visitFieldInsn(final int opcode, final String owner, final String name, final String desc) {\n-        Segment.access$800(this.this$0).visitFieldInsn(opcode, owner, name, desc);\n+        Segment.access$4(this.this$0).visitFieldInsn(opcode, owner, name, desc);\n     }\n     \n     public void visitFrame(final int arg0, final int arg1, final Object[] arg2, final int arg3, final Object[] arg4) {\n     }\n     \n     public void visitIincInsn(final int var, final int increment) {\n-        Segment.access$800(this.this$0).visitIincInsn(var, increment);\n+        Segment.access$4(this.this$0).visitIincInsn(var, increment);\n     }\n     \n     public void visitInsn(final int opcode) {\n-        Segment.access$800(this.this$0).visitInsn(opcode);\n+        Segment.access$4(this.this$0).visitInsn(opcode);\n     }\n     \n     public void visitIntInsn(final int opcode, final int operand) {\n-        Segment.access$800(this.this$0).visitIntInsn(opcode, operand);\n+        Segment.access$4(this.this$0).visitIntInsn(opcode, operand);\n     }\n     \n     public void visitJumpInsn(final int opcode, final Label label) {\n-        Segment.access$800(this.this$0).visitJumpInsn(opcode, label);\n+        Segment.access$4(this.this$0).visitJumpInsn(opcode, label);\n     }\n     \n     public void visitLabel(final Label label) {\n-        Segment.access$800(this.this$0).visitLabel(label);\n+        Segment.access$4(this.this$0).visitLabel(label);\n     }\n     \n     public void visitLdcInsn(final Object cst) {\n-        Segment.access$800(this.this$0).visitLdcInsn(cst);\n+        Segment.access$4(this.this$0).visitLdcInsn(cst);\n     }\n     \n     public void visitLineNumber(final int line, final Label start) {\n-        if (!Segment.access$900(this.this$0)) {\n-            Segment.access$500(this.this$0).addLineNumber(line, start);\n+        if (!Segment.access$5(this.this$0)) {\n+            Segment.access$1(this.this$0).addLineNumber(line, start);\n         }\n     }\n     \n     public void visitLocalVariable(final String name, final String desc, final String signature, final Label start, final Label end, final int index) {\n-        if (!Segment.access$900(this.this$0)) {\n-            Segment.access$500(this.this$0).addLocalVariable(name, desc, signature, start, end, index);\n+        if (!Segment.access$5(this.this$0)) {\n+            Segment.access$1(this.this$0).addLocalVariable(name, desc, signature, start, end, index);\n         }\n     }\n     \n     public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) {\n-        Segment.access$800(this.this$0).visitLookupSwitchInsn(dflt, keys, labels);\n+        Segment.access$4(this.this$0).visitLookupSwitchInsn(dflt, keys, labels);\n     }\n     \n     public void visitMaxs(final int maxStack, final int maxLocals) {\n-        Segment.access$500(this.this$0).addMaxStack(maxStack, maxLocals);\n+        Segment.access$1(this.this$0).addMaxStack(maxStack, maxLocals);\n     }\n     \n     public void visitMethodInsn(final int opcode, final String owner, final String name, final String desc) {\n-        Segment.access$800(this.this$0).visitMethodInsn(opcode, owner, name, desc);\n+        Segment.access$4(this.this$0).visitMethodInsn(opcode, owner, name, desc);\n     }\n     \n     public void visitMultiANewArrayInsn(final String desc, final int dimensions) {\n-        Segment.access$800(this.this$0).visitMultiANewArrayInsn(desc, dimensions);\n+        Segment.access$4(this.this$0).visitMultiANewArrayInsn(desc, dimensions);\n     }\n     \n     public AnnotationVisitor visitParameterAnnotation(final int parameter, final String desc, final boolean visible) {\n         return (AnnotationVisitor)new Segment.SegmentAnnotationVisitor(this.this$0, 2, parameter, desc, visible);\n     }\n     \n     public void visitTableSwitchInsn(final int min, final int max, final Label dflt, final Label... labels) {\n-        Segment.access$800(this.this$0).visitTableSwitchInsn(min, max, dflt, labels);\n+        Segment.access$4(this.this$0).visitTableSwitchInsn(min, max, dflt, labels);\n     }\n     \n     public void visitTryCatchBlock(final Label start, final Label end, final Label handler, final String type) {\n-        Segment.access$500(this.this$0).addHandler(start, end, handler, type);\n+        Segment.access$1(this.this$0).addHandler(start, end, handler, type);\n     }\n     \n     public void visitTypeInsn(final int opcode, final String type) {\n-        Segment.access$800(this.this$0).visitTypeInsn(opcode, type);\n+        Segment.access$4(this.this$0).visitTypeInsn(opcode, type);\n     }\n     \n     public void visitVarInsn(final int opcode, final int var) {\n-        Segment.access$800(this.this$0).visitVarInsn(opcode, var);\n+        Segment.access$4(this.this$0).visitVarInsn(opcode, var);\n     }\n }\n"}]}
