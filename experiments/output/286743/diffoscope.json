{"diffoscope-json-version": 1, "source1": "first/GzipCompressorInputStream.class", "source2": "second/GzipCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,314 +1,308 @@\n-  SHA-256 checksum 65b7855cdf44f0f046068b8d1b342e04431a37392106ee0f7b437f0a1c6f36e1\n+  SHA-256 checksum b1247131d931c912d40266d935598068498920df960a8928ec27ae68b02c3a63\n   Compiled from \"GzipCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #43                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  super_class: #97                        // org/apache/commons/compress/compressors/CompressorInputStream\n-  interfaces: 1, fields: 16, methods: 11, attributes: 1\n+  this_class: #37                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  super_class: #91                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  interfaces: 1, fields: 16, methods: 11, attributes: 3\n Constant pool:\n-    #1 = Methodref          #43.#162      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-    #2 = Methodref          #97.#163      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #3 = Fieldref           #43.#164      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n-    #4 = Class              #165          // java/util/zip/Inflater\n-    #5 = Methodref          #4.#166       // java/util/zip/Inflater.\"<init>\":(Z)V\n-    #6 = Fieldref           #43.#167      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n-    #7 = Class              #168          // java/util/zip/CRC32\n-    #8 = Methodref          #7.#163       // java/util/zip/CRC32.\"<init>\":()V\n-    #9 = Fieldref           #43.#169      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n-   #10 = Fieldref           #43.#170      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n-   #11 = Fieldref           #43.#171      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n-   #12 = Class              #172          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #13 = Methodref          #12.#163      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-   #14 = Fieldref           #43.#173      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-   #15 = Class              #174          // org/apache/commons/compress/utils/CountingInputStream\n-   #16 = Methodref          #15.#175      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #17 = Fieldref           #43.#176      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #18 = Methodref          #15.#177      // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n-   #19 = Fieldref           #43.#178      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n-   #20 = Class              #179          // java/io/BufferedInputStream\n-   #21 = Methodref          #20.#175      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #22 = Fieldref           #43.#180      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n-   #23 = Methodref          #43.#181      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n-   #24 = Fieldref           #43.#182      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n-   #25 = Class              #183          // java/lang/AssertionError\n-   #26 = Methodref          #25.#163      // java/lang/AssertionError.\"<init>\":()V\n-   #27 = Methodref          #184.#185     // java/io/InputStream.read:()I\n-   #28 = Class              #186          // java/io/IOException\n-   #29 = String             #187          // Input is not in the .gz format\n-   #30 = String             #188          // Garbage after a valid .gz stream\n-   #31 = Methodref          #28.#189      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #32 = Class              #190          // java/io/DataInputStream\n-   #33 = Methodref          #32.#175      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #34 = InterfaceMethodref #191.#192     // java/io/DataInput.readUnsignedByte:()I\n-   #35 = Class              #193          // java/util/zip/Deflater\n-   #36 = Class              #194          // java/lang/StringBuilder\n-   #37 = Methodref          #36.#163      // java/lang/StringBuilder.\"<init>\":()V\n-   #38 = String             #195          // Unsupported compression method\n-   #39 = Methodref          #36.#196      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #40 = Methodref          #36.#197      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #41 = String             #198          //  in the .gz header\n-   #42 = Methodref          #36.#199      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #43 = Class              #200          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-   #44 = String             #201          // Reserved flags are set in the .gz header\n-   #45 = Methodref          #202.#203     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-   #46 = Long               1000l\n-   #48 = Methodref          #12.#204      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-   #49 = Methodref          #12.#205      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-   #50 = Methodref          #12.#206      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-   #51 = Class              #207          // java/lang/String\n-   #52 = Methodref          #43.#208      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n-   #53 = Class              #209          // org/apache/commons/compress/utils/CharsetNames\n-   #54 = String             #210          // ISO-8859-1\n-   #55 = Methodref          #51.#211      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-   #56 = Methodref          #12.#212      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-   #57 = Methodref          #12.#213      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-   #58 = InterfaceMethodref #191.#214     // java/io/DataInput.readShort:()S\n-   #59 = Methodref          #4.#215       // java/util/zip/Inflater.reset:()V\n-   #60 = Methodref          #7.#215       // java/util/zip/CRC32.reset:()V\n-   #61 = Class              #216          // java/io/ByteArrayOutputStream\n-   #62 = Methodref          #61.#163      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #63 = Methodref          #61.#217      // java/io/ByteArrayOutputStream.write:(I)V\n-   #64 = Methodref          #61.#218      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #65 = Methodref          #61.#219      // java/io/ByteArrayOutputStream.close:()V\n-   #66 = Class              #220          // java/lang/Throwable\n-   #67 = Methodref          #66.#221      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #68 = Methodref          #43.#222      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n-   #69 = Methodref          #4.#223       // java/util/zip/Inflater.needsInput:()Z\n-   #70 = Methodref          #184.#224     // java/io/InputStream.mark:(I)V\n-   #71 = Methodref          #184.#225     // java/io/InputStream.read:([B)I\n-   #72 = Fieldref           #43.#226      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n-   #73 = Class              #227          // java/io/EOFException\n-   #74 = Methodref          #73.#163      // java/io/EOFException.\"<init>\":()V\n-   #75 = Methodref          #4.#228       // java/util/zip/Inflater.setInput:([BII)V\n-   #76 = Methodref          #4.#229       // java/util/zip/Inflater.inflate:([BII)I\n-   #77 = Class              #230          // java/util/zip/DataFormatException\n-   #78 = String             #231          // Gzip-compressed data is corrupt\n-   #79 = Methodref          #7.#232       // java/util/zip/CRC32.update:([BII)V\n-   #80 = Methodref          #43.#233      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n-   #81 = Methodref          #4.#234       // java/util/zip/Inflater.finished:()Z\n-   #82 = Methodref          #184.#215     // java/io/InputStream.reset:()V\n-   #83 = Methodref          #4.#235       // java/util/zip/Inflater.getRemaining:()I\n-   #84 = Methodref          #236.#237     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #85 = Methodref          #28.#163      // java/io/IOException.\"<init>\":()V\n-   #86 = Methodref          #7.#238       // java/util/zip/CRC32.getValue:()J\n-   #87 = String             #239          // Gzip-compressed data is corrupt (CRC32 error)\n-   #88 = Methodref          #4.#240       // java/util/zip/Inflater.getBytesWritten:()J\n-   #89 = Long               4294967295l\n-   #91 = String             #241          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n-   #92 = Methodref          #4.#242       // java/util/zip/Inflater.end:()V\n-   #93 = Fieldref           #243.#178     // java/lang/System.in:Ljava/io/InputStream;\n-   #94 = Methodref          #184.#219     // java/io/InputStream.close:()V\n-   #95 = Methodref          #15.#244      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #96 = Methodref          #245.#246     // java/lang/Class.desiredAssertionStatus:()Z\n-   #97 = Class              #247          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #98 = Class              #248          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #99 = Utf8               FHCRC\n-  #100 = Utf8               I\n-  #101 = Utf8               ConstantValue\n-  #102 = Integer            2\n-  #103 = Utf8               FEXTRA\n-  #104 = Integer            4\n-  #105 = Utf8               FNAME\n-  #106 = Integer            8\n-  #107 = Utf8               FCOMMENT\n-  #108 = Integer            16\n-  #109 = Utf8               FRESERVED\n-  #110 = Integer            224\n-  #111 = Utf8               countingStream\n-  #112 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #113 = Utf8               in\n-  #114 = Utf8               Ljava/io/InputStream;\n-  #115 = Utf8               decompressConcatenated\n-  #116 = Utf8               Z\n-  #117 = Utf8               buf\n-  #118 = Utf8               [B\n-  #119 = Utf8               bufUsed\n-  #120 = Utf8               inf\n-  #121 = Utf8               Ljava/util/zip/Inflater;\n-  #122 = Utf8               crc\n-  #123 = Utf8               Ljava/util/zip/CRC32;\n-  #124 = Utf8               endReached\n-  #125 = Utf8               oneByte\n-  #126 = Utf8               parameters\n-  #127 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #128 = Utf8               $assertionsDisabled\n-  #129 = Utf8               <init>\n-  #130 = Utf8               (Ljava/io/InputStream;)V\n-  #131 = Utf8               Code\n-  #132 = Utf8               LineNumberTable\n-  #133 = Utf8               Exceptions\n-  #134 = Utf8               (Ljava/io/InputStream;Z)V\n-  #135 = Utf8               StackMapTable\n-  #136 = Class              #200          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #137 = Class              #249          // java/io/InputStream\n-  #138 = Utf8               getMetaData\n-  #139 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #140 = Utf8               init\n-  #141 = Utf8               (Z)Z\n-  #142 = Class              #207          // java/lang/String\n-  #143 = Class              #250          // java/io/DataInput\n-  #144 = Utf8               readToNull\n-  #145 = Utf8               (Ljava/io/DataInput;)[B\n-  #146 = Class              #216          // java/io/ByteArrayOutputStream\n-  #147 = Class              #220          // java/lang/Throwable\n-  #148 = Class              #118          // \"[B\"\n-  #149 = Utf8               read\n-  #150 = Utf8               ()I\n-  #151 = Utf8               ([BII)I\n-  #152 = Class              #230          // java/util/zip/DataFormatException\n-  #153 = Utf8               matches\n-  #154 = Utf8               ([BI)Z\n-  #155 = Utf8               close\n-  #156 = Utf8               ()V\n-  #157 = Utf8               getCompressedCount\n-  #158 = Utf8               ()J\n-  #159 = Utf8               <clinit>\n-  #160 = Utf8               SourceFile\n-  #161 = Utf8               GzipCompressorInputStream.java\n-  #162 = NameAndType        #129:#134     // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #163 = NameAndType        #129:#156     // \"<init>\":()V\n-  #164 = NameAndType        #117:#118     // buf:[B\n-  #165 = Utf8               java/util/zip/Inflater\n-  #166 = NameAndType        #129:#251     // \"<init>\":(Z)V\n-  #167 = NameAndType        #120:#121     // inf:Ljava/util/zip/Inflater;\n-  #168 = Utf8               java/util/zip/CRC32\n-  #169 = NameAndType        #122:#123     // crc:Ljava/util/zip/CRC32;\n-  #170 = NameAndType        #124:#116     // endReached:Z\n-  #171 = NameAndType        #125:#118     // oneByte:[B\n-  #172 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #173 = NameAndType        #126:#127     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #174 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #175 = NameAndType        #129:#130     // \"<init>\":(Ljava/io/InputStream;)V\n-  #176 = NameAndType        #111:#112     // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #177 = NameAndType        #252:#253     // markSupported:()Z\n-  #178 = NameAndType        #113:#114     // in:Ljava/io/InputStream;\n-  #179 = Utf8               java/io/BufferedInputStream\n-  #180 = NameAndType        #115:#116     // decompressConcatenated:Z\n-  #181 = NameAndType        #140:#141     // init:(Z)Z\n-  #182 = NameAndType        #128:#116     // $assertionsDisabled:Z\n-  #183 = Utf8               java/lang/AssertionError\n-  #184 = Class              #249          // java/io/InputStream\n-  #185 = NameAndType        #149:#150     // read:()I\n-  #186 = Utf8               java/io/IOException\n-  #187 = Utf8               Input is not in the .gz format\n-  #188 = Utf8               Garbage after a valid .gz stream\n-  #189 = NameAndType        #129:#254     // \"<init>\":(Ljava/lang/String;)V\n-  #190 = Utf8               java/io/DataInputStream\n-  #191 = Class              #250          // java/io/DataInput\n-  #192 = NameAndType        #255:#150     // readUnsignedByte:()I\n-  #193 = Utf8               java/util/zip/Deflater\n-  #194 = Utf8               java/lang/StringBuilder\n-  #195 = Utf8               Unsupported compression method\n-  #196 = NameAndType        #256:#257     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #197 = NameAndType        #256:#258     // append:(I)Ljava/lang/StringBuilder;\n-  #198 = Utf8                in the .gz header\n-  #199 = NameAndType        #259:#260     // toString:()Ljava/lang/String;\n-  #200 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #201 = Utf8               Reserved flags are set in the .gz header\n-  #202 = Class              #261          // org/apache/commons/compress/utils/ByteUtils\n-  #203 = NameAndType        #262:#263     // fromLittleEndian:(Ljava/io/DataInput;I)J\n-  #204 = NameAndType        #264:#265     // setModificationTime:(J)V\n-  #205 = NameAndType        #266:#267     // setCompressionLevel:(I)V\n-  #206 = NameAndType        #268:#267     // setOperatingSystem:(I)V\n-  #207 = Utf8               java/lang/String\n-  #208 = NameAndType        #144:#145     // readToNull:(Ljava/io/DataInput;)[B\n-  #209 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #210 = Utf8               ISO-8859-1\n-  #211 = NameAndType        #129:#269     // \"<init>\":([BLjava/lang/String;)V\n-  #212 = NameAndType        #270:#254     // setFilename:(Ljava/lang/String;)V\n-  #213 = NameAndType        #271:#254     // setComment:(Ljava/lang/String;)V\n-  #214 = NameAndType        #272:#273     // readShort:()S\n-  #215 = NameAndType        #274:#156     // reset:()V\n-  #216 = Utf8               java/io/ByteArrayOutputStream\n-  #217 = NameAndType        #275:#267     // write:(I)V\n-  #218 = NameAndType        #276:#277     // toByteArray:()[B\n-  #219 = NameAndType        #155:#156     // close:()V\n-  #220 = Utf8               java/lang/Throwable\n-  #221 = NameAndType        #278:#279     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #222 = NameAndType        #149:#151     // read:([BII)I\n-  #223 = NameAndType        #280:#253     // needsInput:()Z\n-  #224 = NameAndType        #281:#267     // mark:(I)V\n-  #225 = NameAndType        #149:#282     // read:([B)I\n-  #226 = NameAndType        #119:#100     // bufUsed:I\n-  #227 = Utf8               java/io/EOFException\n-  #228 = NameAndType        #283:#284     // setInput:([BII)V\n-  #229 = NameAndType        #285:#151     // inflate:([BII)I\n-  #230 = Utf8               java/util/zip/DataFormatException\n-  #231 = Utf8               Gzip-compressed data is corrupt\n-  #232 = NameAndType        #286:#284     // update:([BII)V\n-  #233 = NameAndType        #287:#267     // count:(I)V\n-  #234 = NameAndType        #288:#253     // finished:()Z\n-  #235 = NameAndType        #289:#150     // getRemaining:()I\n-  #236 = Class              #290          // org/apache/commons/compress/utils/IOUtils\n-  #237 = NameAndType        #291:#292     // skip:(Ljava/io/InputStream;J)J\n-  #238 = NameAndType        #293:#158     // getValue:()J\n-  #239 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n-  #240 = NameAndType        #294:#158     // getBytesWritten:()J\n-  #241 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n-  #242 = NameAndType        #295:#156     // end:()V\n-  #243 = Class              #296          // java/lang/System\n-  #244 = NameAndType        #297:#158     // getBytesRead:()J\n-  #245 = Class              #298          // java/lang/Class\n-  #246 = NameAndType        #299:#253     // desiredAssertionStatus:()Z\n-  #247 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #248 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #249 = Utf8               java/io/InputStream\n-  #250 = Utf8               java/io/DataInput\n-  #251 = Utf8               (Z)V\n-  #252 = Utf8               markSupported\n-  #253 = Utf8               ()Z\n-  #254 = Utf8               (Ljava/lang/String;)V\n-  #255 = Utf8               readUnsignedByte\n-  #256 = Utf8               append\n-  #257 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #258 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #259 = Utf8               toString\n-  #260 = Utf8               ()Ljava/lang/String;\n-  #261 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #262 = Utf8               fromLittleEndian\n-  #263 = Utf8               (Ljava/io/DataInput;I)J\n-  #264 = Utf8               setModificationTime\n-  #265 = Utf8               (J)V\n-  #266 = Utf8               setCompressionLevel\n-  #267 = Utf8               (I)V\n-  #268 = Utf8               setOperatingSystem\n-  #269 = Utf8               ([BLjava/lang/String;)V\n-  #270 = Utf8               setFilename\n-  #271 = Utf8               setComment\n-  #272 = Utf8               readShort\n-  #273 = Utf8               ()S\n-  #274 = Utf8               reset\n-  #275 = Utf8               write\n-  #276 = Utf8               toByteArray\n-  #277 = Utf8               ()[B\n-  #278 = Utf8               addSuppressed\n-  #279 = Utf8               (Ljava/lang/Throwable;)V\n-  #280 = Utf8               needsInput\n-  #281 = Utf8               mark\n-  #282 = Utf8               ([B)I\n-  #283 = Utf8               setInput\n-  #284 = Utf8               ([BII)V\n-  #285 = Utf8               inflate\n-  #286 = Utf8               update\n-  #287 = Utf8               count\n-  #288 = Utf8               finished\n-  #289 = Utf8               getRemaining\n-  #290 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #291 = Utf8               skip\n-  #292 = Utf8               (Ljava/io/InputStream;J)J\n-  #293 = Utf8               getValue\n-  #294 = Utf8               getBytesWritten\n-  #295 = Utf8               end\n-  #296 = Utf8               java/lang/System\n-  #297 = Utf8               getBytesRead\n-  #298 = Utf8               java/lang/Class\n-  #299 = Utf8               desiredAssertionStatus\n+    #1 = Methodref          #37.#151      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+    #2 = Methodref          #91.#152      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+    #3 = Fieldref           #37.#153      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n+    #4 = Class              #154          // java/util/zip/Inflater\n+    #5 = Methodref          #4.#155       // java/util/zip/Inflater.\"<init>\":(Z)V\n+    #6 = Fieldref           #37.#156      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n+    #7 = Class              #157          // java/util/zip/CRC32\n+    #8 = Methodref          #7.#152       // java/util/zip/CRC32.\"<init>\":()V\n+    #9 = Fieldref           #37.#158      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n+   #10 = Fieldref           #37.#159      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n+   #11 = Fieldref           #37.#160      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n+   #12 = Class              #161          // org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #13 = Methodref          #12.#152      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+   #14 = Fieldref           #37.#162      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #15 = Class              #163          // org/apache/commons/compress/utils/CountingInputStream\n+   #16 = Methodref          #15.#164      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #17 = Fieldref           #37.#165      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #18 = Methodref          #15.#166      // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n+   #19 = Fieldref           #37.#167      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n+   #20 = Class              #168          // java/io/BufferedInputStream\n+   #21 = Methodref          #20.#164      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #22 = Fieldref           #37.#169      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n+   #23 = Methodref          #37.#170      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n+   #24 = Fieldref           #37.#171      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n+   #25 = Class              #172          // java/lang/AssertionError\n+   #26 = Methodref          #25.#152      // java/lang/AssertionError.\"<init>\":()V\n+   #27 = Methodref          #130.#173     // java/io/InputStream.read:()I\n+   #28 = Class              #174          // java/io/IOException\n+   #29 = String             #175          // Input is not in the .gz format\n+   #30 = String             #176          // Garbage after a valid .gz stream\n+   #31 = Methodref          #28.#177      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #32 = Class              #178          // java/io/DataInputStream\n+   #33 = Methodref          #32.#164      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #34 = InterfaceMethodref #135.#179     // java/io/DataInput.readUnsignedByte:()I\n+   #35 = Class              #180          // java/util/zip/Deflater\n+   #36 = InvokeDynamic      #0:#184       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #37 = Class              #185          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+   #38 = String             #186          // Reserved flags are set in the .gz header\n+   #39 = Methodref          #187.#188     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+   #40 = Long               1000l\n+   #42 = Methodref          #12.#189      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+   #43 = Methodref          #12.#190      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+   #44 = Methodref          #12.#191      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+   #45 = Class              #192          // java/lang/String\n+   #46 = Methodref          #37.#193      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n+   #47 = Class              #194          // org/apache/commons/compress/utils/CharsetNames\n+   #48 = String             #195          // ISO-8859-1\n+   #49 = Methodref          #45.#196      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+   #50 = Methodref          #12.#197      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+   #51 = Methodref          #12.#198      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+   #52 = InterfaceMethodref #135.#199     // java/io/DataInput.readShort:()S\n+   #53 = Methodref          #4.#200       // java/util/zip/Inflater.reset:()V\n+   #54 = Methodref          #7.#200       // java/util/zip/CRC32.reset:()V\n+   #55 = Class              #201          // java/io/ByteArrayOutputStream\n+   #56 = Methodref          #55.#152      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+   #57 = Methodref          #55.#202      // java/io/ByteArrayOutputStream.write:(I)V\n+   #58 = Methodref          #55.#203      // java/io/ByteArrayOutputStream.toByteArray:()[B\n+   #59 = Methodref          #55.#204      // java/io/ByteArrayOutputStream.close:()V\n+   #60 = Class              #205          // java/lang/Throwable\n+   #61 = Methodref          #60.#206      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #62 = Methodref          #37.#207      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n+   #63 = Methodref          #4.#208       // java/util/zip/Inflater.needsInput:()Z\n+   #64 = Methodref          #130.#209     // java/io/InputStream.mark:(I)V\n+   #65 = Methodref          #130.#210     // java/io/InputStream.read:([B)I\n+   #66 = Fieldref           #37.#211      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n+   #67 = Class              #212          // java/io/EOFException\n+   #68 = Methodref          #67.#152      // java/io/EOFException.\"<init>\":()V\n+   #69 = Methodref          #4.#213       // java/util/zip/Inflater.setInput:([BII)V\n+   #70 = Methodref          #4.#214       // java/util/zip/Inflater.inflate:([BII)I\n+   #71 = Class              #215          // java/util/zip/DataFormatException\n+   #72 = String             #216          // Gzip-compressed data is corrupt\n+   #73 = Methodref          #7.#217       // java/util/zip/CRC32.update:([BII)V\n+   #74 = Methodref          #37.#218      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n+   #75 = Methodref          #4.#219       // java/util/zip/Inflater.finished:()Z\n+   #76 = Methodref          #130.#200     // java/io/InputStream.reset:()V\n+   #77 = Methodref          #4.#220       // java/util/zip/Inflater.getRemaining:()I\n+   #78 = Methodref          #221.#222     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+   #79 = Methodref          #28.#152      // java/io/IOException.\"<init>\":()V\n+   #80 = Methodref          #7.#223       // java/util/zip/CRC32.getValue:()J\n+   #81 = String             #224          // Gzip-compressed data is corrupt (CRC32 error)\n+   #82 = Methodref          #4.#225       // java/util/zip/Inflater.getBytesWritten:()J\n+   #83 = Long               4294967295l\n+   #85 = String             #226          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n+   #86 = Methodref          #4.#227       // java/util/zip/Inflater.end:()V\n+   #87 = Fieldref           #228.#167     // java/lang/System.in:Ljava/io/InputStream;\n+   #88 = Methodref          #130.#204     // java/io/InputStream.close:()V\n+   #89 = Methodref          #15.#229      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #90 = Methodref          #230.#231     // java/lang/Class.desiredAssertionStatus:()Z\n+   #91 = Class              #232          // org/apache/commons/compress/compressors/CompressorInputStream\n+   #92 = Class              #233          // org/apache/commons/compress/utils/InputStreamStatistics\n+   #93 = Utf8               FHCRC\n+   #94 = Utf8               I\n+   #95 = Utf8               ConstantValue\n+   #96 = Integer            2\n+   #97 = Utf8               FEXTRA\n+   #98 = Integer            4\n+   #99 = Utf8               FNAME\n+  #100 = Integer            8\n+  #101 = Utf8               FCOMMENT\n+  #102 = Integer            16\n+  #103 = Utf8               FRESERVED\n+  #104 = Integer            224\n+  #105 = Utf8               countingStream\n+  #106 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+  #107 = Utf8               in\n+  #108 = Utf8               Ljava/io/InputStream;\n+  #109 = Utf8               decompressConcatenated\n+  #110 = Utf8               Z\n+  #111 = Utf8               buf\n+  #112 = Utf8               [B\n+  #113 = Utf8               bufUsed\n+  #114 = Utf8               inf\n+  #115 = Utf8               Ljava/util/zip/Inflater;\n+  #116 = Utf8               crc\n+  #117 = Utf8               Ljava/util/zip/CRC32;\n+  #118 = Utf8               endReached\n+  #119 = Utf8               oneByte\n+  #120 = Utf8               parameters\n+  #121 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #122 = Utf8               $assertionsDisabled\n+  #123 = Utf8               <init>\n+  #124 = Utf8               (Ljava/io/InputStream;)V\n+  #125 = Utf8               Code\n+  #126 = Utf8               LineNumberTable\n+  #127 = Utf8               Exceptions\n+  #128 = Utf8               (Ljava/io/InputStream;Z)V\n+  #129 = Utf8               StackMapTable\n+  #130 = Class              #234          // java/io/InputStream\n+  #131 = Utf8               getMetaData\n+  #132 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #133 = Utf8               init\n+  #134 = Utf8               (Z)Z\n+  #135 = Class              #235          // java/io/DataInput\n+  #136 = Utf8               readToNull\n+  #137 = Utf8               (Ljava/io/DataInput;)[B\n+  #138 = Utf8               read\n+  #139 = Utf8               ()I\n+  #140 = Utf8               ([BII)I\n+  #141 = Class              #112          // \"[B\"\n+  #142 = Utf8               matches\n+  #143 = Utf8               ([BI)Z\n+  #144 = Utf8               close\n+  #145 = Utf8               ()V\n+  #146 = Utf8               getCompressedCount\n+  #147 = Utf8               ()J\n+  #148 = Utf8               <clinit>\n+  #149 = Utf8               SourceFile\n+  #150 = Utf8               GzipCompressorInputStream.java\n+  #151 = NameAndType        #123:#128     // \"<init>\":(Ljava/io/InputStream;Z)V\n+  #152 = NameAndType        #123:#145     // \"<init>\":()V\n+  #153 = NameAndType        #111:#112     // buf:[B\n+  #154 = Utf8               java/util/zip/Inflater\n+  #155 = NameAndType        #123:#236     // \"<init>\":(Z)V\n+  #156 = NameAndType        #114:#115     // inf:Ljava/util/zip/Inflater;\n+  #157 = Utf8               java/util/zip/CRC32\n+  #158 = NameAndType        #116:#117     // crc:Ljava/util/zip/CRC32;\n+  #159 = NameAndType        #118:#110     // endReached:Z\n+  #160 = NameAndType        #119:#112     // oneByte:[B\n+  #161 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+  #162 = NameAndType        #120:#121     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #163 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+  #164 = NameAndType        #123:#124     // \"<init>\":(Ljava/io/InputStream;)V\n+  #165 = NameAndType        #105:#106     // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+  #166 = NameAndType        #237:#238     // markSupported:()Z\n+  #167 = NameAndType        #107:#108     // in:Ljava/io/InputStream;\n+  #168 = Utf8               java/io/BufferedInputStream\n+  #169 = NameAndType        #109:#110     // decompressConcatenated:Z\n+  #170 = NameAndType        #133:#134     // init:(Z)Z\n+  #171 = NameAndType        #122:#110     // $assertionsDisabled:Z\n+  #172 = Utf8               java/lang/AssertionError\n+  #173 = NameAndType        #138:#139     // read:()I\n+  #174 = Utf8               java/io/IOException\n+  #175 = Utf8               Input is not in the .gz format\n+  #176 = Utf8               Garbage after a valid .gz stream\n+  #177 = NameAndType        #123:#239     // \"<init>\":(Ljava/lang/String;)V\n+  #178 = Utf8               java/io/DataInputStream\n+  #179 = NameAndType        #240:#139     // readUnsignedByte:()I\n+  #180 = Utf8               java/util/zip/Deflater\n+  #181 = Utf8               BootstrapMethods\n+  #182 = MethodHandle       6:#241        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #183 = String             #242          // Unsupported compression method \\u0001 in the .gz header\n+  #184 = NameAndType        #243:#244     // makeConcatWithConstants:(I)Ljava/lang/String;\n+  #185 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  #186 = Utf8               Reserved flags are set in the .gz header\n+  #187 = Class              #245          // org/apache/commons/compress/utils/ByteUtils\n+  #188 = NameAndType        #246:#247     // fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #189 = NameAndType        #248:#249     // setModificationTime:(J)V\n+  #190 = NameAndType        #250:#251     // setCompressionLevel:(I)V\n+  #191 = NameAndType        #252:#251     // setOperatingSystem:(I)V\n+  #192 = Utf8               java/lang/String\n+  #193 = NameAndType        #136:#137     // readToNull:(Ljava/io/DataInput;)[B\n+  #194 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #195 = Utf8               ISO-8859-1\n+  #196 = NameAndType        #123:#253     // \"<init>\":([BLjava/lang/String;)V\n+  #197 = NameAndType        #254:#239     // setFilename:(Ljava/lang/String;)V\n+  #198 = NameAndType        #255:#239     // setComment:(Ljava/lang/String;)V\n+  #199 = NameAndType        #256:#257     // readShort:()S\n+  #200 = NameAndType        #258:#145     // reset:()V\n+  #201 = Utf8               java/io/ByteArrayOutputStream\n+  #202 = NameAndType        #259:#251     // write:(I)V\n+  #203 = NameAndType        #260:#261     // toByteArray:()[B\n+  #204 = NameAndType        #144:#145     // close:()V\n+  #205 = Utf8               java/lang/Throwable\n+  #206 = NameAndType        #262:#263     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #207 = NameAndType        #138:#140     // read:([BII)I\n+  #208 = NameAndType        #264:#238     // needsInput:()Z\n+  #209 = NameAndType        #265:#251     // mark:(I)V\n+  #210 = NameAndType        #138:#266     // read:([B)I\n+  #211 = NameAndType        #113:#94      // bufUsed:I\n+  #212 = Utf8               java/io/EOFException\n+  #213 = NameAndType        #267:#268     // setInput:([BII)V\n+  #214 = NameAndType        #269:#140     // inflate:([BII)I\n+  #215 = Utf8               java/util/zip/DataFormatException\n+  #216 = Utf8               Gzip-compressed data is corrupt\n+  #217 = NameAndType        #270:#268     // update:([BII)V\n+  #218 = NameAndType        #271:#251     // count:(I)V\n+  #219 = NameAndType        #272:#238     // finished:()Z\n+  #220 = NameAndType        #273:#139     // getRemaining:()I\n+  #221 = Class              #274          // org/apache/commons/compress/utils/IOUtils\n+  #222 = NameAndType        #275:#276     // skip:(Ljava/io/InputStream;J)J\n+  #223 = NameAndType        #277:#147     // getValue:()J\n+  #224 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n+  #225 = NameAndType        #278:#147     // getBytesWritten:()J\n+  #226 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #227 = NameAndType        #279:#145     // end:()V\n+  #228 = Class              #280          // java/lang/System\n+  #229 = NameAndType        #281:#147     // getBytesRead:()J\n+  #230 = Class              #282          // java/lang/Class\n+  #231 = NameAndType        #283:#238     // desiredAssertionStatus:()Z\n+  #232 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+  #233 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #234 = Utf8               java/io/InputStream\n+  #235 = Utf8               java/io/DataInput\n+  #236 = Utf8               (Z)V\n+  #237 = Utf8               markSupported\n+  #238 = Utf8               ()Z\n+  #239 = Utf8               (Ljava/lang/String;)V\n+  #240 = Utf8               readUnsignedByte\n+  #241 = Methodref          #284.#285     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #242 = Utf8               Unsupported compression method \\u0001 in the .gz header\n+  #243 = Utf8               makeConcatWithConstants\n+  #244 = Utf8               (I)Ljava/lang/String;\n+  #245 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #246 = Utf8               fromLittleEndian\n+  #247 = Utf8               (Ljava/io/DataInput;I)J\n+  #248 = Utf8               setModificationTime\n+  #249 = Utf8               (J)V\n+  #250 = Utf8               setCompressionLevel\n+  #251 = Utf8               (I)V\n+  #252 = Utf8               setOperatingSystem\n+  #253 = Utf8               ([BLjava/lang/String;)V\n+  #254 = Utf8               setFilename\n+  #255 = Utf8               setComment\n+  #256 = Utf8               readShort\n+  #257 = Utf8               ()S\n+  #258 = Utf8               reset\n+  #259 = Utf8               write\n+  #260 = Utf8               toByteArray\n+  #261 = Utf8               ()[B\n+  #262 = Utf8               addSuppressed\n+  #263 = Utf8               (Ljava/lang/Throwable;)V\n+  #264 = Utf8               needsInput\n+  #265 = Utf8               mark\n+  #266 = Utf8               ([B)I\n+  #267 = Utf8               setInput\n+  #268 = Utf8               ([BII)V\n+  #269 = Utf8               inflate\n+  #270 = Utf8               update\n+  #271 = Utf8               count\n+  #272 = Utf8               finished\n+  #273 = Utf8               getRemaining\n+  #274 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #275 = Utf8               skip\n+  #276 = Utf8               (Ljava/io/InputStream;J)J\n+  #277 = Utf8               getValue\n+  #278 = Utf8               getBytesWritten\n+  #279 = Utf8               end\n+  #280 = Utf8               java/lang/System\n+  #281 = Utf8               getBytesRead\n+  #282 = Utf8               java/lang/Class\n+  #283 = Utf8               desiredAssertionStatus\n+  #284 = Class              #286          // java/lang/invoke/StringConcatFactory\n+  #285 = NameAndType        #243:#290     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #286 = Utf8               java/lang/invoke/StringConcatFactory\n+  #287 = Class              #292          // java/lang/invoke/MethodHandles$Lookup\n+  #288 = Utf8               Lookup\n+  #289 = Utf8               InnerClasses\n+  #290 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #291 = Class              #293          // java/lang/invoke/MethodHandles\n+  #292 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #293 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int FHCRC = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int FEXTRA = 4;\n@@ -541,168 +535,162 @@\n         90: invokespecial #33                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         93: astore_3\n         94: aload_3\n         95: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        100: istore        4\n        102: iload         4\n        104: bipush        8\n-       106: if_icmpeq     142\n+       106: if_icmpeq     124\n        109: new           #28                 // class java/io/IOException\n        112: dup\n-       113: new           #36                 // class java/lang/StringBuilder\n-       116: dup\n-       117: invokespecial #37                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       120: ldc           #38                 // String Unsupported compression method\n-       122: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       125: iload         4\n-       127: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       130: ldc           #41                 // String  in the .gz header\n-       132: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       135: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       138: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       141: athrow\n-       142: aload_3\n-       143: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       148: istore        5\n-       150: iload         5\n-       152: sipush        224\n-       155: iand\n-       156: ifeq          169\n-       159: new           #28                 // class java/io/IOException\n-       162: dup\n-       163: ldc           #44                 // String Reserved flags are set in the .gz header\n-       165: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       168: athrow\n-       169: aload_0\n-       170: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       173: aload_3\n-       174: iconst_4\n-       175: invokestatic  #45                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-       178: ldc2_w        #46                 // long 1000l\n-       181: lmul\n-       182: invokevirtual #48                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-       185: aload_3\n-       186: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       191: lookupswitch  { // 2\n-                       2: 216\n-                       4: 228\n-                 default: 239\n+       113: iload         4\n+       115: invokedynamic #36,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+       120: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       123: athrow\n+       124: aload_3\n+       125: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       130: istore        5\n+       132: iload         5\n+       134: sipush        224\n+       137: iand\n+       138: ifeq          151\n+       141: new           #28                 // class java/io/IOException\n+       144: dup\n+       145: ldc           #38                 // String Reserved flags are set in the .gz header\n+       147: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       150: athrow\n+       151: aload_0\n+       152: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       155: aload_3\n+       156: iconst_4\n+       157: invokestatic  #39                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       160: ldc2_w        #40                 // long 1000l\n+       163: lmul\n+       164: invokevirtual #42                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+       167: aload_3\n+       168: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       173: lookupswitch  { // 2\n+                       2: 200\n+                       4: 212\n+                 default: 223\n             }\n-       216: aload_0\n-       217: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       220: bipush        9\n-       222: invokevirtual #49                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-       225: goto          239\n-       228: aload_0\n-       229: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       232: iconst_1\n-       233: invokevirtual #49                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-       236: goto          239\n-       239: aload_0\n-       240: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       200: aload_0\n+       201: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       204: bipush        9\n+       206: invokevirtual #43                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       209: goto          223\n+       212: aload_0\n+       213: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       216: iconst_1\n+       217: invokevirtual #43                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       220: goto          223\n+       223: aload_0\n+       224: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       227: aload_3\n+       228: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       233: invokevirtual #44                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+       236: iload         5\n+       238: iconst_4\n+       239: iand\n+       240: ifeq          283\n        243: aload_3\n        244: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       249: invokevirtual #50                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-       252: iload         5\n-       254: iconst_4\n-       255: iand\n-       256: ifeq          299\n-       259: aload_3\n-       260: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       265: istore        6\n-       267: iload         6\n-       269: aload_3\n-       270: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       275: bipush        8\n-       277: ishl\n-       278: ior\n-       279: istore        6\n-       281: iload         6\n-       283: iinc          6, -1\n-       286: ifle          299\n-       289: aload_3\n-       290: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       295: pop\n-       296: goto          281\n-       299: iload         5\n-       301: bipush        8\n-       303: iand\n-       304: ifeq          327\n-       307: aload_0\n-       308: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       311: new           #51                 // class java/lang/String\n-       314: dup\n-       315: aload_3\n-       316: invokestatic  #52                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       319: ldc           #54                 // String ISO-8859-1\n-       321: invokespecial #55                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-       324: invokevirtual #56                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-       327: iload         5\n-       329: bipush        16\n-       331: iand\n-       332: ifeq          355\n-       335: aload_0\n-       336: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       339: new           #51                 // class java/lang/String\n-       342: dup\n-       343: aload_3\n-       344: invokestatic  #52                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       347: ldc           #54                 // String ISO-8859-1\n-       349: invokespecial #55                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-       352: invokevirtual #57                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-       355: iload         5\n-       357: iconst_2\n-       358: iand\n-       359: ifeq          369\n-       362: aload_3\n-       363: invokeinterface #58,  1           // InterfaceMethod java/io/DataInput.readShort:()S\n-       368: pop\n-       369: aload_0\n-       370: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       373: invokevirtual #59                 // Method java/util/zip/Inflater.reset:()V\n-       376: aload_0\n-       377: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n-       380: invokevirtual #60                 // Method java/util/zip/CRC32.reset:()V\n-       383: iconst_1\n-       384: ireturn\n+       249: istore        6\n+       251: iload         6\n+       253: aload_3\n+       254: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       259: bipush        8\n+       261: ishl\n+       262: ior\n+       263: istore        6\n+       265: iload         6\n+       267: iinc          6, -1\n+       270: ifle          283\n+       273: aload_3\n+       274: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       279: pop\n+       280: goto          265\n+       283: iload         5\n+       285: bipush        8\n+       287: iand\n+       288: ifeq          311\n+       291: aload_0\n+       292: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       295: new           #45                 // class java/lang/String\n+       298: dup\n+       299: aload_3\n+       300: invokestatic  #46                 // Method readToNull:(Ljava/io/DataInput;)[B\n+       303: ldc           #48                 // String ISO-8859-1\n+       305: invokespecial #49                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+       308: invokevirtual #50                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+       311: iload         5\n+       313: bipush        16\n+       315: iand\n+       316: ifeq          339\n+       319: aload_0\n+       320: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       323: new           #45                 // class java/lang/String\n+       326: dup\n+       327: aload_3\n+       328: invokestatic  #46                 // Method readToNull:(Ljava/io/DataInput;)[B\n+       331: ldc           #48                 // String ISO-8859-1\n+       333: invokespecial #49                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+       336: invokevirtual #51                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+       339: iload         5\n+       341: iconst_2\n+       342: iand\n+       343: ifeq          353\n+       346: aload_3\n+       347: invokeinterface #52,  1           // InterfaceMethod java/io/DataInput.readShort:()S\n+       352: pop\n+       353: aload_0\n+       354: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+       357: invokevirtual #53                 // Method java/util/zip/Inflater.reset:()V\n+       360: aload_0\n+       361: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n+       364: invokevirtual #54                 // Method java/util/zip/CRC32.reset:()V\n+       367: iconst_1\n+       368: ireturn\n       LineNumberTable:\n         line 181: 0\n         line 184: 25\n         line 188: 33\n         line 189: 42\n         line 192: 44\n         line 193: 63\n+        line 194: 71\n+        line 195: 76\n         line 199: 82\n         line 200: 94\n         line 201: 102\n         line 202: 109\n-        line 206: 142\n-        line 207: 150\n-        line 208: 159\n-        line 212: 169\n-        line 213: 185\n-        line 215: 216\n-        line 216: 225\n-        line 218: 228\n-        line 219: 236\n-        line 224: 239\n-        line 227: 252\n-        line 228: 259\n-        line 229: 267\n-        line 234: 281\n-        line 235: 289\n-        line 240: 299\n-        line 241: 307\n-        line 246: 327\n-        line 247: 335\n-        line 256: 355\n-        line 257: 362\n-        line 261: 369\n-        line 262: 376\n-        line 264: 383\n+        line 206: 124\n+        line 207: 132\n+        line 208: 141\n+        line 212: 151\n+        line 213: 167\n+        line 215: 200\n+        line 216: 209\n+        line 218: 212\n+        line 219: 220\n+        line 224: 223\n+        line 227: 236\n+        line 228: 243\n+        line 229: 251\n+        line 234: 265\n+        line 235: 273\n+        line 240: 283\n+        line 241: 291\n+        line 246: 311\n+        line 247: 319\n+        line 256: 339\n+        line 257: 346\n+        line 261: 353\n+        line 262: 360\n+        line 264: 367\n       StackMapTable: number_of_entries = 16\n         frame_type = 25 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 18\n           locals = [ int ]\n         frame_type = 18 /* same */\n         frame_type = 255 /* full_frame */\n@@ -711,20 +699,20 @@\n           stack = [ uninitialized 63, uninitialized 63 ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 1\n           locals = [ class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream, int, int ]\n           stack = [ uninitialized 63, uninitialized 63, class java/lang/String ]\n         frame_type = 3 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 59\n+          offset_delta = 41\n           locals = [ class java/io/DataInput, int ]\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ int ]\n-        frame_type = 46 /* same */\n+        frame_type = 48 /* same */\n         frame_type = 11 /* same */\n         frame_type = 10 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 41\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 17\n@@ -734,127 +722,88 @@\n     Exceptions:\n       throws java.io.IOException\n \n   private static byte[] readToNull(java.io.DataInput) throws java.io.IOException;\n     descriptor: (Ljava/io/DataInput;)[B\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n-      stack=2, locals=8, args_size=1\n-         0: new           #61                 // class java/io/ByteArrayOutputStream\n+      stack=2, locals=4, args_size=1\n+         0: new           #55                 // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #62                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #56                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n-         8: aconst_null\n-         9: astore_2\n-        10: iconst_0\n-        11: istore_3\n-        12: aload_0\n-        13: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-        18: dup\n-        19: istore_3\n-        20: ifeq          31\n-        23: aload_1\n-        24: iload_3\n-        25: invokevirtual #63                 // Method java/io/ByteArrayOutputStream.write:(I)V\n-        28: goto          12\n-        31: aload_1\n-        32: invokevirtual #64                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n-        35: astore        4\n-        37: aload_1\n-        38: ifnull        67\n-        41: aload_2\n-        42: ifnull        63\n-        45: aload_1\n-        46: invokevirtual #65                 // Method java/io/ByteArrayOutputStream.close:()V\n-        49: goto          67\n-        52: astore        5\n+         8: iconst_0\n+         9: istore_2\n+        10: aload_0\n+        11: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+        16: dup\n+        17: istore_2\n+        18: ifeq          29\n+        21: aload_1\n+        22: iload_2\n+        23: invokevirtual #57                 // Method java/io/ByteArrayOutputStream.write:(I)V\n+        26: goto          10\n+        29: aload_1\n+        30: invokevirtual #58                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        33: astore_3\n+        34: aload_1\n+        35: invokevirtual #59                 // Method java/io/ByteArrayOutputStream.close:()V\n+        38: aload_3\n+        39: areturn\n+        40: astore_2\n+        41: aload_1\n+        42: invokevirtual #59                 // Method java/io/ByteArrayOutputStream.close:()V\n+        45: goto          54\n+        48: astore_3\n+        49: aload_2\n+        50: aload_3\n+        51: invokevirtual #61                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         54: aload_2\n-        55: aload         5\n-        57: invokevirtual #67                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        60: goto          67\n-        63: aload_1\n-        64: invokevirtual #65                 // Method java/io/ByteArrayOutputStream.close:()V\n-        67: aload         4\n-        69: areturn\n-        70: astore_3\n-        71: aload_3\n-        72: astore_2\n-        73: aload_3\n-        74: athrow\n-        75: astore        6\n-        77: aload_1\n-        78: ifnull        107\n-        81: aload_2\n-        82: ifnull        103\n-        85: aload_1\n-        86: invokevirtual #65                 // Method java/io/ByteArrayOutputStream.close:()V\n-        89: goto          107\n-        92: astore        7\n-        94: aload_2\n-        95: aload         7\n-        97: invokevirtual #67                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       100: goto          107\n-       103: aload_1\n-       104: invokevirtual #65                 // Method java/io/ByteArrayOutputStream.close:()V\n-       107: aload         6\n-       109: athrow\n+        55: athrow\n       Exception table:\n          from    to  target type\n-            45    49    52   Class java/lang/Throwable\n-            10    37    70   Class java/lang/Throwable\n-            10    37    75   any\n-            85    89    92   Class java/lang/Throwable\n-            70    77    75   any\n+             8    34    40   Class java/lang/Throwable\n+            41    45    48   Class java/lang/Throwable\n       LineNumberTable:\n         line 268: 0\n-        line 269: 10\n-        line 270: 12\n-        line 271: 23\n-        line 273: 31\n-        line 274: 37\n-        line 273: 67\n-        line 268: 70\n-        line 274: 75\n-      StackMapTable: number_of_entries = 10\n-        frame_type = 254 /* append */\n-          offset_delta = 12\n-          locals = [ class java/io/ByteArrayOutputStream, class java/lang/Throwable, int ]\n+        line 269: 8\n+        line 270: 10\n+        line 271: 21\n+        line 273: 29\n+        line 274: 34\n+        line 273: 38\n+        line 268: 40\n+      StackMapTable: number_of_entries = 5\n+        frame_type = 253 /* append */\n+          offset_delta = 10\n+          locals = [ class java/io/ByteArrayOutputStream, int ]\n         frame_type = 18 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 20\n-          locals = [ class java/io/DataInput, class java/io/ByteArrayOutputStream, class java/lang/Throwable, int, class \"[B\" ]\n+          offset_delta = 10\n+          locals = [ class java/io/DataInput, class java/io/ByteArrayOutputStream ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 2\n+          offset_delta = 7\n           locals = [ class java/io/DataInput, class java/io/ByteArrayOutputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 68 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 16\n-          locals = [ class java/io/DataInput, class java/io/ByteArrayOutputStream, class java/lang/Throwable, top, top, top, class java/lang/Throwable ]\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n+        frame_type = 5 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: aload_0\n          2: getfield      #11                 // Field oneByte:[B\n          5: iconst_0\n          6: iconst_1\n-         7: invokevirtual #68                 // Method read:([BII)I\n+         7: invokevirtual #62                 // Method read:([BII)I\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          28\n         18: aload_0\n         19: getfield      #11                 // Field oneByte:[B\n         22: iconst_0\n@@ -887,158 +836,158 @@\n         14: ireturn\n         15: iconst_0\n         16: istore        4\n         18: iload_3\n         19: ifle          339\n         22: aload_0\n         23: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-        26: invokevirtual #69                 // Method java/util/zip/Inflater.needsInput:()Z\n+        26: invokevirtual #63                 // Method java/util/zip/Inflater.needsInput:()Z\n         29: ifeq          91\n         32: aload_0\n         33: getfield      #19                 // Field in:Ljava/io/InputStream;\n         36: aload_0\n         37: getfield      #3                  // Field buf:[B\n         40: arraylength\n-        41: invokevirtual #70                 // Method java/io/InputStream.mark:(I)V\n+        41: invokevirtual #64                 // Method java/io/InputStream.mark:(I)V\n         44: aload_0\n         45: aload_0\n         46: getfield      #19                 // Field in:Ljava/io/InputStream;\n         49: aload_0\n         50: getfield      #3                  // Field buf:[B\n-        53: invokevirtual #71                 // Method java/io/InputStream.read:([B)I\n-        56: putfield      #72                 // Field bufUsed:I\n+        53: invokevirtual #65                 // Method java/io/InputStream.read:([B)I\n+        56: putfield      #66                 // Field bufUsed:I\n         59: aload_0\n-        60: getfield      #72                 // Field bufUsed:I\n+        60: getfield      #66                 // Field bufUsed:I\n         63: iconst_m1\n         64: if_icmpne     75\n-        67: new           #73                 // class java/io/EOFException\n+        67: new           #67                 // class java/io/EOFException\n         70: dup\n-        71: invokespecial #74                 // Method java/io/EOFException.\"<init>\":()V\n+        71: invokespecial #68                 // Method java/io/EOFException.\"<init>\":()V\n         74: athrow\n         75: aload_0\n         76: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n         79: aload_0\n         80: getfield      #3                  // Field buf:[B\n         83: iconst_0\n         84: aload_0\n-        85: getfield      #72                 // Field bufUsed:I\n-        88: invokevirtual #75                 // Method java/util/zip/Inflater.setInput:([BII)V\n+        85: getfield      #66                 // Field bufUsed:I\n+        88: invokevirtual #69                 // Method java/util/zip/Inflater.setInput:([BII)V\n         91: aload_0\n         92: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n         95: aload_1\n         96: iload_2\n         97: iload_3\n-        98: invokevirtual #76                 // Method java/util/zip/Inflater.inflate:([BII)I\n+        98: invokevirtual #70                 // Method java/util/zip/Inflater.inflate:([BII)I\n        101: istore        5\n        103: goto          118\n        106: astore        6\n        108: new           #28                 // class java/io/IOException\n        111: dup\n-       112: ldc           #78                 // String Gzip-compressed data is corrupt\n+       112: ldc           #72                 // String Gzip-compressed data is corrupt\n        114: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        117: athrow\n        118: aload_0\n        119: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n        122: aload_1\n        123: iload_2\n        124: iload         5\n-       126: invokevirtual #79                 // Method java/util/zip/CRC32.update:([BII)V\n+       126: invokevirtual #73                 // Method java/util/zip/CRC32.update:([BII)V\n        129: iload_2\n        130: iload         5\n        132: iadd\n        133: istore_2\n        134: iload_3\n        135: iload         5\n        137: isub\n        138: istore_3\n        139: iload         4\n        141: iload         5\n        143: iadd\n        144: istore        4\n        146: aload_0\n        147: iload         5\n-       149: invokevirtual #80                 // Method count:(I)V\n+       149: invokevirtual #74                 // Method count:(I)V\n        152: aload_0\n        153: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       156: invokevirtual #81                 // Method java/util/zip/Inflater.finished:()Z\n+       156: invokevirtual #75                 // Method java/util/zip/Inflater.finished:()Z\n        159: ifeq          336\n        162: aload_0\n        163: getfield      #19                 // Field in:Ljava/io/InputStream;\n-       166: invokevirtual #82                 // Method java/io/InputStream.reset:()V\n+       166: invokevirtual #76                 // Method java/io/InputStream.reset:()V\n        169: aload_0\n-       170: getfield      #72                 // Field bufUsed:I\n+       170: getfield      #66                 // Field bufUsed:I\n        173: aload_0\n        174: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       177: invokevirtual #83                 // Method java/util/zip/Inflater.getRemaining:()I\n+       177: invokevirtual #77                 // Method java/util/zip/Inflater.getRemaining:()I\n        180: isub\n        181: istore        6\n        183: aload_0\n        184: getfield      #19                 // Field in:Ljava/io/InputStream;\n        187: iload         6\n        189: i2l\n-       190: invokestatic  #84                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       190: invokestatic  #78                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n        193: iload         6\n        195: i2l\n        196: lcmp\n        197: ifeq          208\n        200: new           #28                 // class java/io/IOException\n        203: dup\n-       204: invokespecial #85                 // Method java/io/IOException.\"<init>\":()V\n+       204: invokespecial #79                 // Method java/io/IOException.\"<init>\":()V\n        207: athrow\n        208: aload_0\n        209: iconst_0\n-       210: putfield      #72                 // Field bufUsed:I\n+       210: putfield      #66                 // Field bufUsed:I\n        213: new           #32                 // class java/io/DataInputStream\n        216: dup\n        217: aload_0\n        218: getfield      #19                 // Field in:Ljava/io/InputStream;\n        221: invokespecial #33                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n        224: astore        7\n        226: aload         7\n        228: iconst_4\n-       229: invokestatic  #45                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       229: invokestatic  #39                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        232: lstore        8\n        234: lload         8\n        236: aload_0\n        237: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n-       240: invokevirtual #86                 // Method java/util/zip/CRC32.getValue:()J\n+       240: invokevirtual #80                 // Method java/util/zip/CRC32.getValue:()J\n        243: lcmp\n        244: ifeq          257\n        247: new           #28                 // class java/io/IOException\n        250: dup\n-       251: ldc           #87                 // String Gzip-compressed data is corrupt (CRC32 error)\n+       251: ldc           #81                 // String Gzip-compressed data is corrupt (CRC32 error)\n        253: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        256: athrow\n        257: aload         7\n        259: iconst_4\n-       260: invokestatic  #45                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       260: invokestatic  #39                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        263: lstore        10\n        265: lload         10\n        267: aload_0\n        268: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       271: invokevirtual #88                 // Method java/util/zip/Inflater.getBytesWritten:()J\n-       274: ldc2_w        #89                 // long 4294967295l\n+       271: invokevirtual #82                 // Method java/util/zip/Inflater.getBytesWritten:()J\n+       274: ldc2_w        #83                 // long 4294967295l\n        277: land\n        278: lcmp\n        279: ifeq          292\n        282: new           #28                 // class java/io/IOException\n        285: dup\n-       286: ldc           #91                 // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n+       286: ldc           #85                 // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n        288: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        291: athrow\n        292: aload_0\n        293: getfield      #22                 // Field decompressConcatenated:Z\n        296: ifeq          307\n        299: aload_0\n        300: iconst_0\n        301: invokespecial #23                 // Method init:(Z)Z\n        304: ifne          336\n        307: aload_0\n        308: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       311: invokevirtual #92                 // Method java/util/zip/Inflater.end:()V\n+       311: invokevirtual #86                 // Method java/util/zip/Inflater.end:()V\n        314: aload_0\n        315: aconst_null\n        316: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n        319: aload_0\n        320: iconst_1\n        321: putfield      #10                 // Field endReached:Z\n        324: iload         4\n@@ -1164,25 +1113,25 @@\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n          4: ifnull        19\n          7: aload_0\n          8: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-        11: invokevirtual #92                 // Method java/util/zip/Inflater.end:()V\n+        11: invokevirtual #86                 // Method java/util/zip/Inflater.end:()V\n         14: aload_0\n         15: aconst_null\n         16: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n         19: aload_0\n         20: getfield      #19                 // Field in:Ljava/io/InputStream;\n-        23: getstatic     #93                 // Field java/lang/System.in:Ljava/io/InputStream;\n+        23: getstatic     #87                 // Field java/lang/System.in:Ljava/io/InputStream;\n         26: if_acmpeq     36\n         29: aload_0\n         30: getfield      #19                 // Field in:Ljava/io/InputStream;\n-        33: invokevirtual #94                 // Method java/io/InputStream.close:()V\n+        33: invokevirtual #88                 // Method java/io/InputStream.close:()V\n         36: return\n       LineNumberTable:\n         line 388: 0\n         line 389: 7\n         line 390: 14\n         line 393: 19\n         line 394: 29\n@@ -1196,33 +1145,39 @@\n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #17                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #95                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         4: invokevirtual #89                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 403: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: ldc           #43                 // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-         2: invokevirtual #96                 // Method java/lang/Class.desiredAssertionStatus:()Z\n+         0: ldc           #37                 // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+         2: invokevirtual #90                 // Method java/lang/Class.desiredAssertionStatus:()Z\n          5: ifne          12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n         13: putstatic     #24                 // Field $assertionsDisabled:Z\n         16: return\n       LineNumberTable:\n         line 76: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 12 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n }\n SourceFile: \"GzipCompressorInputStream.java\"\n+InnerClasses:\n+  public static final #288= #287 of #291; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #182 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #183 Unsupported compression method \\u0001 in the .gz header\n"}]}
