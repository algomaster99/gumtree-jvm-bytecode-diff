{"diffoscope-json-version": 1, "source1": "first/Code.class", "source2": "second/Code.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,62 +9,63 @@\n {\n     private int max_stack;\n     private int max_locals;\n     private byte[] code;\n     private CodeException[] exception_table;\n     private Attribute[] attributes;\n     \n-    public Code(final Code c) {\n-        this(c.getNameIndex(), c.getLength(), c.getMaxStack(), c.getMaxLocals(), c.getCode(), c.getExceptionTable(), c.getAttributes(), c.getConstantPool());\n+    public Code(final Code code) {\n+        this(code.getNameIndex(), code.getLength(), code.getMaxStack(), code.getMaxLocals(), code.getCode(), code.getExceptionTable(), code.getAttributes(), code.getConstantPool());\n     }\n     \n-    Code(final int name_index, final int length, final DataInput file, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, file.readUnsignedShort(), file.readUnsignedShort(), null, null, null, constant_pool);\n-        final int code_length = file.readInt();\n-        file.readFully(this.code = new byte[code_length]);\n-        final int exception_table_length = file.readUnsignedShort();\n-        this.exception_table = new CodeException[exception_table_length];\n-        for (int i = 0; i < exception_table_length; ++i) {\n-            this.exception_table[i] = new CodeException(file);\n-        }\n-        final int attributes_count = file.readUnsignedShort();\n-        this.attributes = new Attribute[attributes_count];\n-        for (int j = 0; j < attributes_count; ++j) {\n-            this.attributes[j] = Attribute.readAttribute(file, constant_pool);\n+    Code(final int n, final int length, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, length, dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), null, null, null, constantPool);\n+        dataInput.readFully(this.code = new byte[dataInput.readInt()]);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.exception_table = new CodeException[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.exception_table[i] = new CodeException(dataInput);\n+        }\n+        final int unsignedShort2 = dataInput.readUnsignedShort();\n+        this.attributes = new Attribute[unsignedShort2];\n+        for (int j = 0; j < unsignedShort2; ++j) {\n+            this.attributes[j] = Attribute.readAttribute(dataInput, constantPool);\n         }\n         super.setLength(length);\n     }\n     \n-    public Code(final int name_index, final int length, final int max_stack, final int max_locals, final byte[] code, final CodeException[] exception_table, final Attribute[] attributes, final ConstantPool constant_pool) {\n-        super((byte)2, name_index, length, constant_pool);\n+    public Code(final int n, final int n2, final int max_stack, final int max_locals, final byte[] array, final CodeException[] array2, final Attribute[] array3, final ConstantPool constantPool) {\n+        super((byte)2, n, n2, constantPool);\n         this.max_stack = max_stack;\n         this.max_locals = max_locals;\n-        this.code = ((code != null) ? code : new byte[0]);\n-        this.exception_table = ((exception_table != null) ? exception_table : new CodeException[0]);\n-        this.attributes = ((attributes != null) ? attributes : new Attribute[0]);\n+        this.code = ((array != null) ? array : new byte[0]);\n+        this.exception_table = ((array2 != null) ? array2 : new CodeException[0]);\n+        this.attributes = ((array3 != null) ? array3 : new Attribute[0]);\n         super.setLength(this.calculateLength());\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitCode(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitCode(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.max_stack);\n-        file.writeShort(this.max_locals);\n-        file.writeInt(this.code.length);\n-        file.write(this.code, 0, this.code.length);\n-        file.writeShort(this.exception_table.length);\n-        for (final CodeException exception : this.exception_table) {\n-            exception.dump(file);\n-        }\n-        file.writeShort(this.attributes.length);\n-        for (final Attribute attribute : this.attributes) {\n-            attribute.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.max_stack);\n+        dataOutputStream.writeShort(this.max_locals);\n+        dataOutputStream.writeInt(this.code.length);\n+        dataOutputStream.write(this.code, 0, this.code.length);\n+        dataOutputStream.writeShort(this.exception_table.length);\n+        final CodeException[] exception_table = this.exception_table;\n+        for (int length = exception_table.length, i = 0; i < length; ++i) {\n+            exception_table[i].dump(dataOutputStream);\n+        }\n+        dataOutputStream.writeShort(this.attributes.length);\n+        final Attribute[] attributes = this.attributes;\n+        for (int length2 = attributes.length, j = 0; j < length2; ++j) {\n+            attributes[j].dump(dataOutputStream);\n         }\n     }\n     \n     public Attribute[] getAttributes() {\n         return this.attributes;\n     }\n     \n@@ -103,79 +104,82 @@\n     }\n     \n     private int getInternalLength() {\n         return 8 + this.code.length + 2 + 8 * ((this.exception_table == null) ? 0 : this.exception_table.length) + 2;\n     }\n     \n     private int calculateLength() {\n-        int len = 0;\n+        int n = 0;\n         if (this.attributes != null) {\n-            for (final Attribute attribute : this.attributes) {\n-                len += attribute.getLength() + 6;\n+            final Attribute[] attributes = this.attributes;\n+            for (int length = attributes.length, i = 0; i < length; ++i) {\n+                n += attributes[i].getLength() + 6;\n             }\n         }\n-        return len + this.getInternalLength();\n+        return n + this.getInternalLength();\n     }\n     \n-    public void setAttributes(final Attribute[] attributes) {\n-        this.attributes = ((attributes != null) ? attributes : new Attribute[0]);\n+    public void setAttributes(final Attribute[] array) {\n+        this.attributes = ((array != null) ? array : new Attribute[0]);\n         super.setLength(this.calculateLength());\n     }\n     \n-    public void setCode(final byte[] code) {\n-        this.code = ((code != null) ? code : new byte[0]);\n+    public void setCode(final byte[] array) {\n+        this.code = ((array != null) ? array : new byte[0]);\n         super.setLength(this.calculateLength());\n     }\n     \n-    public void setExceptionTable(final CodeException[] exception_table) {\n-        this.exception_table = ((exception_table != null) ? exception_table : new CodeException[0]);\n+    public void setExceptionTable(final CodeException[] array) {\n+        this.exception_table = ((array != null) ? array : new CodeException[0]);\n         super.setLength(this.calculateLength());\n     }\n     \n     public void setMaxLocals(final int max_locals) {\n         this.max_locals = max_locals;\n     }\n     \n     public void setMaxStack(final int max_stack) {\n         this.max_stack = max_stack;\n     }\n     \n-    public String toString(final boolean verbose) {\n-        final StringBuilder buf = new StringBuilder(100);\n-        buf.append(\"Code(max_stack = \").append(this.max_stack).append(\", max_locals = \").append(this.max_locals).append(\", code_length = \").append(this.code.length).append(\")\\n\").append(Utility.codeToString(this.code, super.getConstantPool(), 0, -1, verbose));\n+    public String toString(final boolean b) {\n+        final StringBuilder sb = new StringBuilder(100);\n+        sb.append(\"Code(max_stack = \").append(this.max_stack).append(\", max_locals = \").append(this.max_locals).append(\", code_length = \").append(this.code.length).append(\")\\n\").append(Utility.codeToString(this.code, super.getConstantPool(), 0, -1, b));\n         if (this.exception_table.length > 0) {\n-            buf.append(\"\\nException handler(s) = \\n\").append(\"From\\tTo\\tHandler\\tType\\n\");\n-            for (final CodeException exception : this.exception_table) {\n-                buf.append(exception.toString(super.getConstantPool(), verbose)).append(\"\\n\");\n+            sb.append(\"\\nException handler(s) = \\n\").append(\"From\\tTo\\tHandler\\tType\\n\");\n+            final CodeException[] exception_table = this.exception_table;\n+            for (int length = exception_table.length, i = 0; i < length; ++i) {\n+                sb.append(exception_table[i].toString(super.getConstantPool(), b)).append(\"\\n\");\n             }\n         }\n         if (this.attributes.length > 0) {\n-            buf.append(\"\\nAttribute(s) = \");\n-            for (final Attribute attribute : this.attributes) {\n-                buf.append(\"\\n\").append(attribute);\n+            sb.append(\"\\nAttribute(s) = \");\n+            final Attribute[] attributes = this.attributes;\n+            for (int length2 = attributes.length, j = 0; j < length2; ++j) {\n+                sb.append(\"\\n\").append(attributes[j]);\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n     public String toString() {\n         return this.toString(true);\n     }\n     \n-    public Attribute copy(final ConstantPool _constant_pool) {\n-        final Code c = (Code)this.clone();\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final Code code = (Code)this.clone();\n         if (this.code != null) {\n-            c.code = new byte[this.code.length];\n-            System.arraycopy(this.code, 0, c.code, 0, this.code.length);\n+            code.code = new byte[this.code.length];\n+            System.arraycopy(this.code, 0, code.code, 0, this.code.length);\n         }\n-        c.setConstantPool(_constant_pool);\n-        c.exception_table = new CodeException[this.exception_table.length];\n+        code.setConstantPool(constantPool);\n+        code.exception_table = new CodeException[this.exception_table.length];\n         for (int i = 0; i < this.exception_table.length; ++i) {\n-            c.exception_table[i] = this.exception_table[i].copy();\n+            code.exception_table[i] = this.exception_table[i].copy();\n         }\n-        c.attributes = new Attribute[this.attributes.length];\n-        for (int i = 0; i < this.attributes.length; ++i) {\n-            c.attributes[i] = this.attributes[i].copy(_constant_pool);\n+        code.attributes = new Attribute[this.attributes.length];\n+        for (int j = 0; j < this.attributes.length; ++j) {\n+            code.attributes[j] = this.attributes[j].copy(constantPool);\n         }\n-        return c;\n+        return code;\n     }\n }\n"}]}
