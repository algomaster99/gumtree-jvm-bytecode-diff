{"diffoscope-json-version": 1, "source1": "first/LocalVariableTypeTable.class", "source2": "second/LocalVariableTypeTable.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,17 +11,17 @@\n \n public class LocalVariableTypeTable extends Attribute implements Iterable<LocalVariable>\n {\n     private LocalVariable[] localVariableTypeTable;\n     \n     LocalVariableTypeTable(final int nameIdx, final int len, final DataInput input, final ConstantPool cpool) throws IOException {\n         this(nameIdx, len, (LocalVariable[])null, cpool);\n-        final int localVariableTypeTableLength = input.readUnsignedShort();\n-        this.localVariableTypeTable = new LocalVariable[localVariableTypeTableLength];\n-        for (int i = 0; i < localVariableTypeTableLength; ++i) {\n+        final int unsignedShort = input.readUnsignedShort();\n+        this.localVariableTypeTable = new LocalVariable[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n             this.localVariableTypeTable[i] = new LocalVariable(input, cpool);\n         }\n     }\n     \n     public LocalVariableTypeTable(final int nameIndex, final int length, final LocalVariable[] localVariableTypeTable, final ConstantPool constantPool) {\n         super((byte)17, nameIndex, length, constantPool);\n         this.localVariableTypeTable = ((localVariableTypeTable != null) ? localVariableTypeTable : LocalVariable.EMPTY_ARRAY);\n@@ -33,32 +33,33 @@\n     }\n     \n     public void accept(final Visitor v) {\n         v.visitLocalVariableTypeTable(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final LocalVariableTypeTable c = (LocalVariableTypeTable)this.clone();\n-        Arrays.setAll(c.localVariableTypeTable = new LocalVariable[this.localVariableTypeTable.length], i -> this.localVariableTypeTable[i].copy());\n-        c.setConstantPool(constantPool);\n-        return c;\n+        final LocalVariableTypeTable localVariableTypeTable = (LocalVariableTypeTable)this.clone();\n+        Arrays.setAll(localVariableTypeTable.localVariableTypeTable = new LocalVariable[this.localVariableTypeTable.length], n2 -> this.localVariableTypeTable[n2].copy());\n+        localVariableTypeTable.setConstantPool(constantPool);\n+        return localVariableTypeTable;\n     }\n     \n     public final void dump(final DataOutputStream file) throws IOException {\n         super.dump(file);\n         file.writeShort(this.localVariableTypeTable.length);\n-        for (final LocalVariable variable : this.localVariableTypeTable) {\n-            variable.dump(file);\n+        final LocalVariable[] localVariableTypeTable = this.localVariableTypeTable;\n+        for (int length = localVariableTypeTable.length, i = 0; i < length; ++i) {\n+            localVariableTypeTable[i].dump(file);\n         }\n     }\n     \n     public final LocalVariable getLocalVariable(final int index) {\n-        for (final LocalVariable variable : this.localVariableTypeTable) {\n-            if (variable.getIndex() == index) {\n-                return variable;\n+        for (final LocalVariable localVariable : this.localVariableTypeTable) {\n+            if (localVariable.getIndex() == index) {\n+                return localVariable;\n             }\n         }\n         return null;\n     }\n     \n     public final LocalVariable[] getLocalVariableTypeTable() {\n         return this.localVariableTypeTable;\n@@ -73,17 +74,17 @@\n     }\n     \n     public final void setLocalVariableTable(final LocalVariable[] localVariableTable) {\n         this.localVariableTypeTable = localVariableTable;\n     }\n     \n     public final String toString() {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < this.localVariableTypeTable.length; ++i) {\n-            buf.append(this.localVariableTypeTable[i].toStringShared(true));\n+            sb.append(this.localVariableTypeTable[i].toStringShared(true));\n             if (i < this.localVariableTypeTable.length - 1) {\n-                buf.append('\\n');\n+                sb.append('\\n');\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n }\n"}]}
