{"diffoscope-json-version": 1, "source1": "first/SegmentConstantPoolArrayCache.class", "source2": "second/SegmentConstantPoolArrayCache.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,35 +11,31 @@\n     protected String[] lastArray;\n     protected String lastKey;\n     \n     public SegmentConstantPoolArrayCache() {\n         this.knownArrays = new IdentityHashMap<String[], SegmentConstantPoolArrayCache.CachedArray>(1000);\n     }\n     \n-    public List<Integer> indexesForArrayKey(final String[] array, final String key) {\n+    public List<Integer> indexesForArrayKey(final String[] array, final String lastKey) {\n         if (!this.arrayIsCached(array)) {\n             this.cacheArray(array);\n         }\n-        if (this.lastArray == array && this.lastKey == key) {\n+        if (this.lastArray == array && this.lastKey == lastKey) {\n             return this.lastIndexes;\n         }\n         this.lastArray = array;\n-        this.lastKey = key;\n-        return this.lastIndexes = ((SegmentConstantPoolArrayCache.CachedArray)this.knownArrays.get(array)).indexesForKey(key);\n+        this.lastKey = lastKey;\n+        return this.lastIndexes = ((SegmentConstantPoolArrayCache.CachedArray)this.knownArrays.get(array)).indexesForKey(lastKey);\n     }\n     \n     protected boolean arrayIsCached(final String[] array) {\n-        if (!this.knownArrays.containsKey(array)) {\n-            return false;\n-        }\n-        final SegmentConstantPoolArrayCache.CachedArray cachedArray = (SegmentConstantPoolArrayCache.CachedArray)this.knownArrays.get(array);\n-        return cachedArray.lastKnownSize() == array.length;\n+        return this.knownArrays.containsKey(array) && ((SegmentConstantPoolArrayCache.CachedArray)this.knownArrays.get(array)).lastKnownSize() == array.length;\n     }\n     \n-    protected void cacheArray(final String[] array) {\n-        if (this.arrayIsCached(array)) {\n+    protected void cacheArray(final String[] key) {\n+        if (this.arrayIsCached(key)) {\n             throw new IllegalArgumentException(\"Trying to cache an array that already exists\");\n         }\n-        this.knownArrays.put(array, new SegmentConstantPoolArrayCache.CachedArray(this, array));\n+        this.knownArrays.put(key, new SegmentConstantPoolArrayCache.CachedArray(this, key));\n         this.lastArray = null;\n     }\n }\n"}]}
