{"diffoscope-json-version": 1, "source1": "first/AbstractUnicodeExtraField.class", "source2": "second/AbstractUnicodeExtraField.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,23 +10,23 @@\n     private long nameCRC32;\n     private byte[] unicodeName;\n     private byte[] data;\n     \n     protected AbstractUnicodeExtraField() {\n     }\n     \n-    protected AbstractUnicodeExtraField(final String text, final byte[] bytes, final int off, final int len) {\n+    protected AbstractUnicodeExtraField(final String s, final byte[] b, final int off, final int len) {\n         final CRC32 crc32 = new CRC32();\n-        crc32.update(bytes, off, len);\n+        crc32.update(b, off, len);\n         this.nameCRC32 = crc32.getValue();\n-        this.unicodeName = text.getBytes(StandardCharsets.UTF_8);\n+        this.unicodeName = s.getBytes(StandardCharsets.UTF_8);\n     }\n     \n-    protected AbstractUnicodeExtraField(final String text, final byte[] bytes) {\n-        this(text, bytes, 0, bytes.length);\n+    protected AbstractUnicodeExtraField(final String s, final byte[] array) {\n+        this(s, array, 0, array.length);\n     }\n     \n     private void assembleData() {\n         if (this.unicodeName == null) {\n             return;\n         }\n         (this.data = new byte[5 + this.unicodeName.length])[0] = 1;\n@@ -40,42 +40,42 @@\n     \n     public void setNameCRC32(final long nameCRC32) {\n         this.nameCRC32 = nameCRC32;\n         this.data = null;\n     }\n     \n     public byte[] getUnicodeName() {\n-        byte[] b = null;\n+        Object o = null;\n         if (this.unicodeName != null) {\n-            b = new byte[this.unicodeName.length];\n-            System.arraycopy(this.unicodeName, 0, b, 0, b.length);\n+            o = new byte[this.unicodeName.length];\n+            System.arraycopy(this.unicodeName, 0, o, 0, ((byte[])o).length);\n         }\n-        return b;\n+        return (byte[])o;\n     }\n     \n-    public void setUnicodeName(final byte[] unicodeName) {\n-        if (unicodeName != null) {\n-            System.arraycopy(unicodeName, 0, this.unicodeName = new byte[unicodeName.length], 0, unicodeName.length);\n+    public void setUnicodeName(final byte[] array) {\n+        if (array != null) {\n+            System.arraycopy(array, 0, this.unicodeName = new byte[array.length], 0, array.length);\n         }\n         else {\n             this.unicodeName = null;\n         }\n         this.data = null;\n     }\n     \n     public byte[] getCentralDirectoryData() {\n         if (this.data == null) {\n             this.assembleData();\n         }\n-        byte[] b = null;\n+        Object o = null;\n         if (this.data != null) {\n-            b = new byte[this.data.length];\n-            System.arraycopy(this.data, 0, b, 0, b.length);\n+            o = new byte[this.data.length];\n+            System.arraycopy(this.data, 0, o, 0, ((byte[])o).length);\n         }\n-        return b;\n+        return (byte[])o;\n     }\n     \n     public ZipShort getCentralDirectoryLength() {\n         if (this.data == null) {\n             this.assembleData();\n         }\n         return new ZipShort((this.data != null) ? this.data.length : 0);\n@@ -85,24 +85,24 @@\n         return this.getCentralDirectoryData();\n     }\n     \n     public ZipShort getLocalFileDataLength() {\n         return this.getCentralDirectoryLength();\n     }\n     \n-    public void parseFromLocalFileData(final byte[] buffer, final int offset, final int length) throws ZipException {\n-        if (length < 5) {\n+    public void parseFromLocalFileData(final byte[] array, final int n, final int n2) throws ZipException {\n+        if (n2 < 5) {\n             throw new ZipException(\"UniCode path extra data must have at least 5 bytes.\");\n         }\n-        final int version = buffer[offset];\n-        if (version != 1) {\n-            throw new ZipException(\"Unsupported version [\" + version + \"] for UniCode path extra data.\");\n+        final byte i = array[n];\n+        if (i != 1) {\n+            throw new ZipException(\"Unsupported version [\" + i + \"] for UniCode path extra data.\");\n         }\n-        this.nameCRC32 = ZipLong.getValue(buffer, offset + 1);\n-        System.arraycopy(buffer, offset + 5, this.unicodeName = new byte[length - 5], 0, length - 5);\n+        this.nameCRC32 = ZipLong.getValue(array, n + 1);\n+        System.arraycopy(array, n + 5, this.unicodeName = new byte[n2 - 5], 0, n2 - 5);\n         this.data = null;\n     }\n     \n-    public void parseFromCentralDirectoryData(final byte[] buffer, final int offset, final int length) throws ZipException {\n-        this.parseFromLocalFileData(buffer, offset, length);\n+    public void parseFromCentralDirectoryData(final byte[] array, final int n, final int n2) throws ZipException {\n+        this.parseFromLocalFileData(array, n, n2);\n     }\n }\n"}]}
