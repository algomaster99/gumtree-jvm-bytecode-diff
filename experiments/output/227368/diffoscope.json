{"diffoscope-json-version": 1, "source1": "first/RequireThisCheck$ClassFrame.class", "source2": "second/RequireThisCheck$ClassFrame.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,112 +9,108 @@\n private static class ClassFrame extends RequireThisCheck.AbstractFrame\n {\n     private final Set<DetailAST> instanceMembers;\n     private final Set<DetailAST> instanceMethods;\n     private final Set<DetailAST> staticMembers;\n     private final Set<DetailAST> staticMethods;\n     \n-    private ClassFrame(final RequireThisCheck.AbstractFrame parent, final DetailAST ident) {\n-        super(parent, ident);\n+    private ClassFrame(final RequireThisCheck.AbstractFrame abstractFrame, final DetailAST detailAST) {\n+        super(abstractFrame, detailAST);\n         this.instanceMembers = new HashSet();\n         this.instanceMethods = new HashSet();\n         this.staticMembers = new HashSet();\n         this.staticMethods = new HashSet();\n     }\n     \n     protected RequireThisCheck.FrameType getType() {\n         return RequireThisCheck.FrameType.CLASS_FRAME;\n     }\n     \n-    public void addStaticMember(final DetailAST ident) {\n-        this.staticMembers.add(ident);\n+    public void addStaticMember(final DetailAST detailAST) {\n+        this.staticMembers.add(detailAST);\n     }\n     \n-    public void addStaticMethod(final DetailAST ident) {\n-        this.staticMethods.add(ident);\n+    public void addStaticMethod(final DetailAST detailAST) {\n+        this.staticMethods.add(detailAST);\n     }\n     \n-    public void addInstanceMember(final DetailAST ident) {\n-        this.instanceMembers.add(ident);\n+    public void addInstanceMember(final DetailAST detailAST) {\n+        this.instanceMembers.add(detailAST);\n     }\n     \n-    public void addInstanceMethod(final DetailAST ident) {\n-        this.instanceMethods.add(ident);\n+    public void addInstanceMethod(final DetailAST detailAST) {\n+        this.instanceMethods.add(detailAST);\n     }\n     \n-    public boolean hasInstanceMember(final DetailAST ident) {\n-        return this.containsFieldOrVariableDef(this.instanceMembers, ident);\n+    public boolean hasInstanceMember(final DetailAST detailAST) {\n+        return this.containsFieldOrVariableDef(this.instanceMembers, detailAST);\n     }\n     \n-    public boolean hasInstanceMethod(final DetailAST ident) {\n-        return containsMethodDef(this.instanceMethods, ident);\n+    public boolean hasInstanceMethod(final DetailAST detailAST) {\n+        return containsMethodDef(this.instanceMethods, detailAST);\n     }\n     \n-    public boolean hasStaticMethod(final DetailAST ident) {\n-        return containsMethodDef(this.staticMethods, ident);\n+    public boolean hasStaticMethod(final DetailAST detailAST) {\n+        return containsMethodDef(this.staticMethods, detailAST);\n     }\n     \n-    public boolean hasFinalField(final DetailAST instanceMember) {\n-        boolean result = false;\n-        for (final DetailAST member : this.instanceMembers) {\n-            final DetailAST parent = member.getParent();\n+    public boolean hasFinalField(final DetailAST detailAST) {\n+        boolean b = false;\n+        for (final DetailAST detailAST2 : this.instanceMembers) {\n+            final DetailAST parent = detailAST2.getParent();\n             if (parent.getType() == 202) {\n-                result = true;\n+                b = true;\n             }\n             else {\n-                final DetailAST mods = parent.findFirstToken(5);\n-                final boolean finalMod = mods.findFirstToken(39) != null;\n-                if (!finalMod || !RequireThisCheck.isAstSimilar(member, instanceMember)) {\n+                if (parent.findFirstToken(5).findFirstToken(39) == null || !RequireThisCheck.isAstSimilar(detailAST2, detailAST)) {\n                     continue;\n                 }\n-                result = true;\n+                b = true;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    protected boolean containsFieldOrVariable(final DetailAST identToFind) {\n-        return this.containsFieldOrVariableDef(this.instanceMembers, identToFind) || this.containsFieldOrVariableDef(this.staticMembers, identToFind);\n+    protected boolean containsFieldOrVariable(final DetailAST detailAST) {\n+        return this.containsFieldOrVariableDef(this.instanceMembers, detailAST) || this.containsFieldOrVariableDef(this.staticMembers, detailAST);\n     }\n     \n-    protected boolean isProperDefinition(final DetailAST ident, final DetailAST ast) {\n-        final String identToFind = ident.getText();\n-        return identToFind.equals(ast.getText());\n+    protected boolean isProperDefinition(final DetailAST detailAST, final DetailAST detailAST2) {\n+        return detailAST.getText().equals(detailAST2.getText());\n     }\n     \n-    protected RequireThisCheck.AbstractFrame getIfContains(final DetailAST identToFind, final boolean lookForMethod) {\n-        RequireThisCheck.AbstractFrame frame = null;\n-        if (this.containsMethod(identToFind) || this.containsFieldOrVariable(identToFind)) {\n-            frame = this;\n+    protected RequireThisCheck.AbstractFrame getIfContains(final DetailAST detailAST, final boolean b) {\n+        RequireThisCheck.AbstractFrame ifContains = null;\n+        if (this.containsMethod(detailAST) || this.containsFieldOrVariable(detailAST)) {\n+            ifContains = this;\n         }\n         else if (this.getParent() != null) {\n-            frame = this.getParent().getIfContains(identToFind, lookForMethod);\n+            ifContains = this.getParent().getIfContains(detailAST, b);\n         }\n-        return frame;\n+        return ifContains;\n     }\n     \n-    private boolean containsMethod(final DetailAST methodToFind) {\n-        return containsMethodDef(this.instanceMethods, methodToFind) || containsMethodDef(this.staticMethods, methodToFind);\n+    private boolean containsMethod(final DetailAST detailAST) {\n+        return containsMethodDef(this.instanceMethods, detailAST) || containsMethodDef(this.staticMethods, detailAST);\n     }\n     \n-    private static boolean containsMethodDef(final Set<DetailAST> set, final DetailAST ident) {\n-        boolean result = false;\n-        for (final DetailAST ast : set) {\n-            if (isSimilarSignature(ident, ast)) {\n-                result = true;\n+    private static boolean containsMethodDef(final Set<DetailAST> set, final DetailAST detailAST) {\n+        boolean b = false;\n+        final Iterator<DetailAST> iterator = set.iterator();\n+        while (iterator.hasNext()) {\n+            if (isSimilarSignature(detailAST, (DetailAST)iterator.next())) {\n+                b = true;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isSimilarSignature(final DetailAST ident, final DetailAST ast) {\n-        boolean result = false;\n-        final DetailAST elistToken = ident.getParent().findFirstToken(34);\n-        if (elistToken != null && ident.getText().equals(ast.getText())) {\n-            final int paramsNumber = ast.getParent().findFirstToken(20).getChildCount();\n-            final int argsNumber = elistToken.getChildCount();\n-            result = (paramsNumber == argsNumber);\n+    private static boolean isSimilarSignature(final DetailAST detailAST, final DetailAST detailAST2) {\n+        boolean b = false;\n+        final DetailAST firstToken = detailAST.getParent().findFirstToken(34);\n+        if (firstToken != null && detailAST.getText().equals(detailAST2.getText())) {\n+            b = (detailAST2.getParent().findFirstToken(20).getChildCount() == firstToken.getChildCount());\n         }\n-        return result;\n+        return b;\n     }\n }\n"}]}
