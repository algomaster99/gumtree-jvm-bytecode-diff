{"diffoscope-json-version": 1, "source1": "first/DefaultFileSystem.class", "source2": "second/DefaultFileSystem.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,142 +15,137 @@\n \n public class DefaultFileSystem extends FileSystem\n {\n     public InputStream getInputStream(final URL url) throws ConfigurationException {\n         return this.getInputStream(url, null);\n     }\n     \n-    public InputStream getInputStream(final URL url, final URLConnectionOptions urlConnectionOptions) throws ConfigurationException {\n-        final File file = FileLocatorUtils.fileFromURL(url);\n-        if (file != null && file.isDirectory()) {\n+    public InputStream getInputStream(final URL obj, final URLConnectionOptions urlConnectionOptions) throws ConfigurationException {\n+        final File fileFromURL = FileLocatorUtils.fileFromURL(obj);\n+        if (fileFromURL != null && fileFromURL.isDirectory()) {\n             throw new ConfigurationException(\"Cannot load a configuration from a directory\");\n         }\n         try {\n-            return (urlConnectionOptions == null) ? url.openStream() : urlConnectionOptions.openConnection(url).getInputStream();\n+            return (urlConnectionOptions == null) ? obj.openStream() : urlConnectionOptions.openConnection(obj).getInputStream();\n         }\n-        catch (final Exception e) {\n-            throw new ConfigurationException(\"Unable to load the configuration from the URL \" + url, (Throwable)e);\n+        catch (final Exception ex) {\n+            throw new ConfigurationException(\"Unable to load the configuration from the URL \" + obj, (Throwable)ex);\n         }\n     }\n     \n-    public OutputStream getOutputStream(final URL url) throws ConfigurationException {\n-        final File file = FileLocatorUtils.fileFromURL(url);\n-        if (file != null) {\n-            return this.getOutputStream(file);\n+    public OutputStream getOutputStream(final URL obj) throws ConfigurationException {\n+        final File fileFromURL = FileLocatorUtils.fileFromURL(obj);\n+        if (fileFromURL != null) {\n+            return this.getOutputStream(fileFromURL);\n         }\n         try {\n-            final URLConnection connection = url.openConnection();\n-            connection.setDoOutput(true);\n-            if (connection instanceof HttpURLConnection) {\n-                final HttpURLConnection conn = (HttpURLConnection)connection;\n-                conn.setRequestMethod(\"PUT\");\n+            final URLConnection openConnection = obj.openConnection();\n+            openConnection.setDoOutput(true);\n+            if (openConnection instanceof HttpURLConnection) {\n+                ((HttpURLConnection)openConnection).setRequestMethod(\"PUT\");\n             }\n-            OutputStream out = connection.getOutputStream();\n-            if (connection instanceof HttpURLConnection) {\n-                out = (OutputStream)new DefaultFileSystem.HttpOutputStream(out, (HttpURLConnection)connection);\n+            Object outputStream = openConnection.getOutputStream();\n+            if (openConnection instanceof HttpURLConnection) {\n+                outputStream = new DefaultFileSystem.HttpOutputStream((OutputStream)outputStream, (HttpURLConnection)openConnection);\n             }\n-            return out;\n+            return (OutputStream)outputStream;\n         }\n-        catch (final IOException e) {\n-            throw new ConfigurationException(\"Could not save to URL \" + url, (Throwable)e);\n+        catch (final IOException ex) {\n+            throw new ConfigurationException(\"Could not save to URL \" + obj, (Throwable)ex);\n         }\n     }\n     \n     public OutputStream getOutputStream(final File file) throws ConfigurationException {\n         try {\n             this.createPath(file);\n             return new FileOutputStream(file);\n         }\n-        catch (final FileNotFoundException e) {\n-            throw new ConfigurationException(\"Unable to save to file \" + file, (Throwable)e);\n+        catch (final FileNotFoundException ex) {\n+            throw new ConfigurationException(\"Unable to save to file \" + file, (Throwable)ex);\n         }\n     }\n     \n-    public String getPath(final File file, final URL url, final String basePath, final String fileName) {\n-        String path = null;\n+    public String getPath(final File file, final URL url, final String s, final String s2) {\n+        String s3 = null;\n         if (file != null) {\n-            path = file.getAbsolutePath();\n+            s3 = file.getAbsolutePath();\n         }\n-        if (path == null) {\n+        if (s3 == null) {\n             if (url != null) {\n-                path = url.getPath();\n+                s3 = url.getPath();\n             }\n             else {\n                 try {\n-                    path = this.getURL(basePath, fileName).getPath();\n+                    s3 = this.getURL(s, s2).getPath();\n                 }\n-                catch (final Exception e) {\n+                catch (final Exception ex) {\n                     if (this.getLogger().isDebugEnabled()) {\n-                        this.getLogger().debug(String.format(\"Could not determine URL for basePath = %s, fileName = %s: %s\", basePath, fileName, e));\n+                        this.getLogger().debug(String.format(\"Could not determine URL for basePath = %s, fileName = %s: %s\", s, s2, ex));\n                     }\n                 }\n             }\n         }\n-        return path;\n+        return s3;\n     }\n     \n-    public String getBasePath(final String path) {\n+    public String getBasePath(final String s) {\n         try {\n-            final URL url = this.getURL(null, path);\n-            return FileLocatorUtils.getBasePath(url);\n+            return FileLocatorUtils.getBasePath(this.getURL((String)null, s));\n         }\n-        catch (final Exception e) {\n+        catch (final Exception ex) {\n             return null;\n         }\n     }\n     \n-    public String getFileName(final String path) {\n+    public String getFileName(final String s) {\n         try {\n-            final URL url = this.getURL(null, path);\n-            return FileLocatorUtils.getFileName(url);\n+            return FileLocatorUtils.getFileName(this.getURL((String)null, s));\n         }\n-        catch (final Exception e) {\n+        catch (final Exception ex) {\n             return null;\n         }\n     }\n     \n-    public URL getURL(final String basePath, final String file) throws MalformedURLException {\n-        final File f = new File(file);\n-        if (f.isAbsolute()) {\n-            return FileLocatorUtils.toURL(f);\n+    public URL getURL(final String spec, final String spec2) throws MalformedURLException {\n+        final File file = new File(spec2);\n+        if (file.isAbsolute()) {\n+            return FileLocatorUtils.toURL(file);\n         }\n         try {\n-            if (basePath == null) {\n-                return new URL(file);\n+            if (spec == null) {\n+                return new URL(spec2);\n             }\n-            final URL base = new URL(basePath);\n-            return new URL(base, file);\n+            return new URL(new URL(spec), spec2);\n         }\n-        catch (final MalformedURLException uex) {\n-            return FileLocatorUtils.toURL(FileLocatorUtils.constructFile(basePath, file));\n+        catch (final MalformedURLException ex) {\n+            return FileLocatorUtils.toURL(FileLocatorUtils.constructFile(spec, spec2));\n         }\n     }\n     \n-    public URL locateFromURL(final String basePath, final String fileName) {\n+    public URL locateFromURL(final String s, final String str) {\n         try {\n-            if (basePath == null) {\n-                return new URL(fileName);\n+            if (s == null) {\n+                return new URL(str);\n             }\n-            final URL baseURL = new URL(basePath);\n-            final URL url = new URL(baseURL, fileName);\n-            try (final InputStream in = url.openStream()) {\n-                in.available();\n+            final URL url = new URL(new URL(s), str);\n+            try (final InputStream openStream = url.openStream()) {\n+                openStream.available();\n             }\n             return url;\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             if (this.getLogger().isDebugEnabled()) {\n-                this.getLogger().debug(\"Could not locate file \" + fileName + \" at \" + basePath + \": \" + e.getMessage());\n+                this.getLogger().debug(\"Could not locate file \" + str + \" at \" + s + \": \" + ex.getMessage());\n             }\n             return null;\n         }\n     }\n     \n     private void createPath(final File file) throws ConfigurationException {\n         if (file != null && !file.exists()) {\n-            final File parent = file.getParentFile();\n-            if (parent != null && !parent.exists() && !parent.mkdirs()) {\n-                throw new ConfigurationException(\"Cannot create path: \" + parent);\n+            final File parentFile = file.getParentFile();\n+            if (parentFile != null && !parentFile.exists() && !parentFile.mkdirs()) {\n+                throw new ConfigurationException(\"Cannot create path: \" + parentFile);\n             }\n         }\n     }\n }\n"}]}
