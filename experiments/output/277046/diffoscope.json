{"diffoscope-json-version": 1, "source1": "first/Blake3$ChunkState.class", "source2": "second/Blake3$ChunkState.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,46 +8,42 @@\n     private int[] chainingValue;\n     private final long chunkCounter;\n     private final int flags;\n     private final byte[] block;\n     private int blockLength;\n     private int blocksCompressed;\n     \n-    private ChunkState(final int[] key, final long chunkCounter, final int flags) {\n+    private ChunkState(final int[] chainingValue, final long chunkCounter, final int flags) {\n         this.block = new byte[64];\n-        this.chainingValue = key;\n+        this.chainingValue = chainingValue;\n         this.chunkCounter = chunkCounter;\n         this.flags = flags;\n     }\n     \n     private int length() {\n         return 64 * this.blocksCompressed + this.blockLength;\n     }\n     \n     private int startFlag() {\n         return (this.blocksCompressed == 0) ? 1 : 0;\n     }\n     \n-    private void update(final byte[] input, int offset, int length) {\n-        while (length > 0) {\n+    private void update(final byte[] array, int n, int i) {\n+        while (i > 0) {\n             if (this.blockLength == 64) {\n-                final int[] blockWords = Blake3.access$800(this.block, 16);\n-                this.chainingValue = Arrays.copyOf(Blake3.access$600(this.chainingValue, blockWords, 64, this.chunkCounter, this.flags | this.startFlag()), 8);\n+                this.chainingValue = Arrays.copyOf(Blake3.access$600(this.chainingValue, Blake3.access$800(this.block, 16), 64, this.chunkCounter, this.flags | this.startFlag()), 8);\n                 ++this.blocksCompressed;\n                 this.blockLength = 0;\n                 Arrays.fill(this.block, (byte)0);\n             }\n-            final int want = 64 - this.blockLength;\n-            final int take = Math.min(want, length);\n-            System.arraycopy(input, offset, this.block, this.blockLength, take);\n-            this.blockLength += take;\n-            offset += take;\n-            length -= take;\n+            final int min = Math.min(64 - this.blockLength, i);\n+            System.arraycopy(array, n, this.block, this.blockLength, min);\n+            this.blockLength += min;\n+            n += min;\n+            i -= min;\n         }\n     }\n     \n     private Blake3.Output output() {\n-        final int[] blockWords = Blake3.access$800(this.block, 16);\n-        final int outputFlags = this.flags | this.startFlag() | 0x2;\n-        return new Blake3.Output(this.chainingValue, blockWords, this.chunkCounter, this.blockLength, outputFlags, (Blake3.Blake3$1)null);\n+        return new Blake3.Output(this.chainingValue, Blake3.access$800(this.block, 16), this.chunkCounter, this.blockLength, this.flags | this.startFlag() | 0x2, (Blake3.Blake3$1)null);\n     }\n }\n"}]}
