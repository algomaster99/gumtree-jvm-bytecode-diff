{"diffoscope-json-version": 1, "source1": "first/PropertyListConfiguration.class", "source2": "second/PropertyListConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -38,196 +38,194 @@\n     private static final int INDENT_SIZE = 4;\n     private static final int TIME_ZONE_LENGTH = 5;\n     private static final char PAD_CHAR = '0';\n     \n     public PropertyListConfiguration() {\n     }\n     \n-    public PropertyListConfiguration(final HierarchicalConfiguration<ImmutableNode> c) {\n-        super((HierarchicalConfiguration)c);\n+    public PropertyListConfiguration(final HierarchicalConfiguration<ImmutableNode> hierarchicalConfiguration) {\n+        super((HierarchicalConfiguration)hierarchicalConfiguration);\n     }\n     \n-    PropertyListConfiguration(final ImmutableNode root) {\n-        super((NodeModel)new InMemoryNodeModel(root));\n+    PropertyListConfiguration(final ImmutableNode immutableNode) {\n+        super((NodeModel)new InMemoryNodeModel(immutableNode));\n     }\n     \n-    protected void setPropertyInternal(final String key, final Object value) {\n-        if (value instanceof byte[]) {\n+    protected void setPropertyInternal(final String s, final Object o) {\n+        if (o instanceof byte[]) {\n             this.setDetailEvents(false);\n             try {\n-                this.clearProperty(key);\n-                this.addPropertyDirect(key, value);\n+                this.clearProperty(s);\n+                this.addPropertyDirect(s, o);\n             }\n             finally {\n                 this.setDetailEvents(true);\n             }\n         }\n         else {\n-            super.setPropertyInternal(key, value);\n+            super.setPropertyInternal(s, o);\n         }\n     }\n     \n-    protected void addPropertyInternal(final String key, final Object value) {\n-        if (value instanceof byte[]) {\n-            this.addPropertyDirect(key, value);\n+    protected void addPropertyInternal(final String s, final Object o) {\n+        if (o instanceof byte[]) {\n+            this.addPropertyDirect(s, o);\n         }\n         else {\n-            super.addPropertyInternal(key, value);\n+            super.addPropertyInternal(s, o);\n         }\n     }\n     \n-    public void read(final Reader in) throws ConfigurationException {\n-        final PropertyListParser parser = new PropertyListParser(in);\n+    public void read(final Reader reader) throws ConfigurationException {\n+        final PropertyListParser propertyListParser = new PropertyListParser(reader);\n         try {\n-            final PropertyListConfiguration config = parser.parse();\n-            this.getModel().setRootNode(config.getNodeModel().getNodeHandler().getRootNode());\n+            this.getModel().setRootNode(propertyListParser.parse().getNodeModel().getNodeHandler().getRootNode());\n         }\n-        catch (final ParseException e) {\n-            throw new ConfigurationException((Throwable)e);\n+        catch (final ParseException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n     }\n     \n     public void write(final Writer out) throws ConfigurationException {\n-        final PrintWriter writer = new PrintWriter(out);\n-        final NodeHandler<ImmutableNode> handler = (NodeHandler<ImmutableNode>)this.getModel().getNodeHandler();\n-        this.printNode(writer, 0, (ImmutableNode)handler.getRootNode(), handler);\n-        writer.flush();\n-    }\n-    \n-    private void printNode(final PrintWriter out, final int indentLevel, final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {\n-        final String padding = StringUtils.repeat(\" \", indentLevel * 4);\n-        if (node.getNodeName() != null) {\n-            out.print(padding + this.quoteString(node.getNodeName()) + \" = \");\n-        }\n-        final List<ImmutableNode> children = new ArrayList<ImmutableNode>(node.getChildren());\n-        if (!children.isEmpty()) {\n-            if (indentLevel > 0) {\n-                out.println();\n-            }\n-            out.println(padding + \"{\");\n-            final Iterator<ImmutableNode> it = children.iterator();\n-            while (it.hasNext()) {\n-                final ImmutableNode child = (ImmutableNode)it.next();\n-                this.printNode(out, indentLevel + 1, child, handler);\n-                final Object value = child.getValue();\n+        final PrintWriter printWriter = new PrintWriter(out);\n+        final NodeHandler nodeHandler = this.getModel().getNodeHandler();\n+        this.printNode(printWriter, 0, (ImmutableNode)nodeHandler.getRootNode(), (NodeHandler<ImmutableNode>)nodeHandler);\n+        printWriter.flush();\n+    }\n+    \n+    private void printNode(final PrintWriter printWriter, final int n, final ImmutableNode immutableNode, final NodeHandler<ImmutableNode> nodeHandler) {\n+        final String repeat = StringUtils.repeat(\" \", n * 4);\n+        if (immutableNode.getNodeName() != null) {\n+            printWriter.print(repeat + this.quoteString(immutableNode.getNodeName()) + \" = \");\n+        }\n+        final ArrayList list = new ArrayList(immutableNode.getChildren());\n+        if (!list.isEmpty()) {\n+            if (n > 0) {\n+                printWriter.println();\n+            }\n+            printWriter.println(repeat + \"{\");\n+            final Iterator iterator = list.iterator();\n+            while (iterator.hasNext()) {\n+                final ImmutableNode immutableNode2 = (ImmutableNode)iterator.next();\n+                this.printNode(printWriter, n + 1, immutableNode2, nodeHandler);\n+                final Object value = immutableNode2.getValue();\n                 if (value != null && !(value instanceof Map) && !(value instanceof Configuration)) {\n-                    out.println(\";\");\n+                    printWriter.println(\";\");\n                 }\n-                if (it.hasNext() && (value == null || value instanceof List)) {\n-                    out.println();\n+                if (iterator.hasNext() && (value == null || value instanceof List)) {\n+                    printWriter.println();\n                 }\n             }\n-            out.print(padding + \"}\");\n-            if (handler.getParent((Object)node) != null) {\n-                out.println();\n+            printWriter.print(repeat + \"}\");\n+            if (nodeHandler.getParent((Object)immutableNode) != null) {\n+                printWriter.println();\n             }\n         }\n-        else if (node.getValue() == null) {\n-            out.println();\n-            out.print(padding + \"{ };\");\n-            if (handler.getParent((Object)node) != null) {\n-                out.println();\n+        else if (immutableNode.getValue() == null) {\n+            printWriter.println();\n+            printWriter.print(repeat + \"{ };\");\n+            if (nodeHandler.getParent((Object)immutableNode) != null) {\n+                printWriter.println();\n             }\n         }\n         else {\n-            final Object value2 = node.getValue();\n-            this.printValue(out, indentLevel, value2);\n+            this.printValue(printWriter, n, immutableNode.getValue());\n         }\n     }\n     \n-    private void printValue(final PrintWriter out, final int indentLevel, final Object value) {\n-        final String padding = StringUtils.repeat(\" \", indentLevel * 4);\n-        if (value instanceof List) {\n-            out.print(\"( \");\n-            final Iterator<?> it = ((List)value).iterator();\n-            while (it.hasNext()) {\n-                this.printValue(out, indentLevel + 1, it.next());\n-                if (it.hasNext()) {\n-                    out.print(\", \");\n+    private void printValue(final PrintWriter printWriter, final int n, final Object obj) {\n+        final String repeat = StringUtils.repeat(\" \", n * 4);\n+        if (obj instanceof List) {\n+            printWriter.print(\"( \");\n+            final Iterator iterator = ((List)obj).iterator();\n+            while (iterator.hasNext()) {\n+                this.printValue(printWriter, n + 1, iterator.next());\n+                if (iterator.hasNext()) {\n+                    printWriter.print(\", \");\n                 }\n             }\n-            out.print(\" )\");\n+            printWriter.print(\" )\");\n         }\n-        else if (value instanceof PropertyListConfiguration) {\n-            final NodeHandler<ImmutableNode> handler = (NodeHandler<ImmutableNode>)((PropertyListConfiguration)value).getModel().getNodeHandler();\n-            this.printNode(out, indentLevel, (ImmutableNode)handler.getRootNode(), handler);\n+        else if (obj instanceof PropertyListConfiguration) {\n+            final NodeHandler nodeHandler = ((PropertyListConfiguration)obj).getModel().getNodeHandler();\n+            this.printNode(printWriter, n, (ImmutableNode)nodeHandler.getRootNode(), (NodeHandler<ImmutableNode>)nodeHandler);\n         }\n-        else if (value instanceof ImmutableConfiguration) {\n-            out.println();\n-            out.println(padding + \"{\");\n-            final ImmutableConfiguration config = (ImmutableConfiguration)value;\n-            final Iterator<String> it2 = config.getKeys();\n-            while (it2.hasNext()) {\n-                final String key = (String)it2.next();\n-                final ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();\n-                final InMemoryNodeModel tempModel = new InMemoryNodeModel(node);\n-                this.printNode(out, indentLevel + 1, node, (NodeHandler<ImmutableNode>)tempModel.getNodeHandler());\n-                out.println(\";\");\n+        else if (obj instanceof ImmutableConfiguration) {\n+            printWriter.println();\n+            printWriter.println(repeat + \"{\");\n+            final ImmutableConfiguration immutableConfiguration = (ImmutableConfiguration)obj;\n+            final Iterator keys = immutableConfiguration.getKeys();\n+            while (keys.hasNext()) {\n+                final String s = (String)keys.next();\n+                final ImmutableNode create = new ImmutableNode.Builder().name(s).value(immutableConfiguration.getProperty(s)).create();\n+                this.printNode(printWriter, n + 1, create, (NodeHandler<ImmutableNode>)new InMemoryNodeModel(create).getNodeHandler());\n+                printWriter.println(\";\");\n             }\n-            out.println(padding + \"}\");\n+            printWriter.println(repeat + \"}\");\n         }\n-        else if (value instanceof Map) {\n-            final Map<String, Object> map = transformMap((Map<?, ?>)value);\n-            this.printValue(out, indentLevel, new MapConfiguration((Map)map));\n+        else if (obj instanceof Map) {\n+            this.printValue(printWriter, n, new MapConfiguration((Map)transformMap((Map<?, ?>)obj)));\n         }\n-        else if (value instanceof byte[]) {\n-            out.print(\"<\" + new String(Hex.encodeHex((byte[])(byte[])value)) + \">\");\n+        else if (obj instanceof byte[]) {\n+            printWriter.print(\"<\" + new String(Hex.encodeHex((byte[])(byte[])obj)) + \">\");\n         }\n-        else if (value instanceof Date) {\n-            out.print(formatDate((Date)value));\n+        else if (obj instanceof Date) {\n+            printWriter.print(formatDate((Date)obj));\n         }\n-        else if (value != null) {\n-            out.print(this.quoteString(String.valueOf(value)));\n+        else if (obj != null) {\n+            printWriter.print(this.quoteString(String.valueOf(obj)));\n         }\n     }\n     \n-    String quoteString(String s) {\n-        if (s == null) {\n+    String quoteString(String str) {\n+        if (str == null) {\n             return null;\n         }\n-        if (s.indexOf(32) != -1 || s.indexOf(9) != -1 || s.indexOf(13) != -1 || s.indexOf(10) != -1 || s.indexOf(34) != -1 || s.indexOf(40) != -1 || s.indexOf(41) != -1 || s.indexOf(123) != -1 || s.indexOf(125) != -1 || s.indexOf(61) != -1 || s.indexOf(44) != -1 || s.indexOf(59) != -1) {\n-            s = s.replace(\"\\\"\", \"\\\\\\\"\");\n-            s = \"\\\"\" + s + \"\\\"\";\n+        if (str.indexOf(32) != -1 || str.indexOf(9) != -1 || str.indexOf(13) != -1 || str.indexOf(10) != -1 || str.indexOf(34) != -1 || str.indexOf(40) != -1 || str.indexOf(41) != -1 || str.indexOf(123) != -1 || str.indexOf(125) != -1 || str.indexOf(61) != -1 || str.indexOf(44) != -1 || str.indexOf(59) != -1) {\n+            str = str.replace(\"\\\"\", \"\\\\\\\"\");\n+            str = \"\\\"\" + str + \"\\\"\";\n         }\n-        return s;\n+        return str;\n     }\n     \n     static Date parseDate(final String s) throws ParseException {\n-        final Calendar cal = Calendar.getInstance();\n-        cal.clear();\n-        int index = 0;\n-        for (final PropertyListConfiguration.DateComponentParser parser : PropertyListConfiguration.DATE_PARSERS) {\n-            index += parser.parseComponent(s, index, cal);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.clear();\n+        int n = 0;\n+        final PropertyListConfiguration.DateComponentParser[] date_PARSERS = PropertyListConfiguration.DATE_PARSERS;\n+        for (int length = date_PARSERS.length, i = 0; i < length; ++i) {\n+            n += date_PARSERS[i].parseComponent(s, n, instance);\n         }\n-        return cal.getTime();\n+        return instance.getTime();\n     }\n     \n-    static String formatDate(final Calendar cal) {\n-        final StringBuilder buf = new StringBuilder();\n-        for (final PropertyListConfiguration.DateComponentParser element : PropertyListConfiguration.DATE_PARSERS) {\n-            element.formatComponent(buf, cal);\n+    static String formatDate(final Calendar calendar) {\n+        final StringBuilder sb = new StringBuilder();\n+        final PropertyListConfiguration.DateComponentParser[] date_PARSERS = PropertyListConfiguration.DATE_PARSERS;\n+        for (int length = date_PARSERS.length, i = 0; i < length; ++i) {\n+            date_PARSERS[i].formatComponent(sb, calendar);\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    static String formatDate(final Date date) {\n-        final Calendar cal = Calendar.getInstance();\n-        cal.setTime(date);\n-        return formatDate(cal);\n+    static String formatDate(final Date time) {\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        return formatDate(instance);\n     }\n     \n-    private static Map<String, Object> transformMap(final Map<?, ?> src) {\n-        final Map<String, Object> dest = new HashMap<String, Object>();\n-        src.forEach((k, v) -> {\n-            if (k instanceof String) {\n-                dest.put(k, v);\n+    private static Map<String, Object> transformMap(final Map<?, ?> map) {\n+        final HashMap hashMap = new HashMap();\n+        map.forEach((o, o2) -> {\n+            if (o instanceof String) {\n+                map2.put(o, o2);\n             }\n             return;\n         });\n-        return dest;\n+        return hashMap;\n     }\n     \n     static {\n         DATE_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\"-\");\n         TIME_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\":\");\n         BLANK_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\" \");\n         DATE_PARSERS = new PropertyListConfiguration.DateComponentParser[] { (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\"<*D\"), (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(1, 4), PropertyListConfiguration.DATE_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(2, 2, 1), PropertyListConfiguration.DATE_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(5, 2), PropertyListConfiguration.BLANK_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(11, 2), PropertyListConfiguration.TIME_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(12, 2), PropertyListConfiguration.TIME_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(13, 2), PropertyListConfiguration.BLANK_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateTimeZoneParser((PropertyListConfiguration.PropertyListConfiguration$1)null), (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\">\") };\n"}]}
