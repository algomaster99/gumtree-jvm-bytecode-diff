{"diffoscope-json-version": 1, "source1": "first/CpBands.class", "source2": "second/CpBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -35,16 +35,16 @@\n     private final Map stringsToCpSignature;\n     private final Map stringsToCpMethod;\n     private final Map stringsToCpField;\n     private final Map stringsToCpIMethod;\n     private final Map objectsToCPConstant;\n     private final Segment segment;\n     \n-    public CpBands(final Segment segment, final int effort) {\n-        super(effort, segment.getSegmentHeader());\n+    public CpBands(final Segment segment, final int n) {\n+        super(n, segment.getSegmentHeader());\n         this.defaultAttributeNames = new HashSet();\n         this.cp_Utf8 = new TreeSet();\n         this.cp_Int = new TreeSet();\n         this.cp_Float = new TreeSet();\n         this.cp_Long = new TreeSet();\n         this.cp_Double = new TreeSet();\n         this.cp_String = new TreeSet();\n@@ -77,247 +77,252 @@\n         this.defaultAttributeNames.add(\"EnclosingMethod\");\n         this.defaultAttributeNames.add(\"Exceptions\");\n         this.defaultAttributeNames.add(\"InnerClasses\");\n         this.defaultAttributeNames.add(\"Signature\");\n         this.defaultAttributeNames.add(\"SourceFile\");\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing constant pool bands...\");\n-        this.writeCpUtf8(out);\n-        this.writeCpInt(out);\n-        this.writeCpFloat(out);\n-        this.writeCpLong(out);\n-        this.writeCpDouble(out);\n-        this.writeCpString(out);\n-        this.writeCpClass(out);\n-        this.writeCpSignature(out);\n-        this.writeCpDescr(out);\n-        this.writeCpMethodOrField(this.cp_Field, out, \"cp_Field\");\n-        this.writeCpMethodOrField(this.cp_Method, out, \"cp_Method\");\n-        this.writeCpMethodOrField(this.cp_Imethod, out, \"cp_Imethod\");\n+        this.writeCpUtf8(outputStream);\n+        this.writeCpInt(outputStream);\n+        this.writeCpFloat(outputStream);\n+        this.writeCpLong(outputStream);\n+        this.writeCpDouble(outputStream);\n+        this.writeCpString(outputStream);\n+        this.writeCpClass(outputStream);\n+        this.writeCpSignature(outputStream);\n+        this.writeCpDescr(outputStream);\n+        this.writeCpMethodOrField(this.cp_Field, outputStream, \"cp_Field\");\n+        this.writeCpMethodOrField(this.cp_Method, outputStream, \"cp_Method\");\n+        this.writeCpMethodOrField(this.cp_Imethod, outputStream, \"cp_Imethod\");\n     }\n     \n-    private void writeCpUtf8(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpUtf8(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_Utf8.size() + \" UTF8 entries...\");\n-        final int[] cpUtf8Prefix = new int[this.cp_Utf8.size() - 2];\n-        final int[] cpUtf8Suffix = new int[this.cp_Utf8.size() - 1];\n-        final List chars = new ArrayList();\n-        final List bigSuffix = new ArrayList();\n-        final List bigChars = new ArrayList();\n-        final Object[] cpUtf8Array = this.cp_Utf8.toArray();\n-        final String first = ((CPUTF8)cpUtf8Array[1]).getUnderlyingString();\n-        cpUtf8Suffix[0] = first.length();\n-        this.addCharacters(chars, first.toCharArray());\n-        for (int i = 2; i < cpUtf8Array.length; ++i) {\n-            final char[] previous = ((CPUTF8)cpUtf8Array[i - 1]).getUnderlyingString().toCharArray();\n-            String currentStr = ((CPUTF8)cpUtf8Array[i]).getUnderlyingString();\n-            final char[] current = currentStr.toCharArray();\n-            int prefix = 0;\n-            for (int j = 0; j < previous.length && previous[j] == current[j]; ++j) {\n-                ++prefix;\n-            }\n-            cpUtf8Prefix[i - 2] = prefix;\n-            currentStr = currentStr.substring(prefix);\n-            final char[] suffix = currentStr.toCharArray();\n-            if (suffix.length > 1000) {\n-                cpUtf8Suffix[i - 1] = 0;\n-                bigSuffix.add(Integer.valueOf(suffix.length));\n-                this.addCharacters(bigChars, suffix);\n+        final int[] array = new int[this.cp_Utf8.size() - 2];\n+        final int[] array2 = new int[this.cp_Utf8.size() - 1];\n+        final ArrayList list = new ArrayList();\n+        final ArrayList list2 = new ArrayList();\n+        final ArrayList list3 = new ArrayList();\n+        final Object[] array3 = this.cp_Utf8.toArray();\n+        final String underlyingString = ((CPUTF8)array3[1]).getUnderlyingString();\n+        array2[0] = underlyingString.length();\n+        this.addCharacters(list, underlyingString.toCharArray());\n+        for (int i = 2; i < array3.length; ++i) {\n+            final char[] charArray = ((CPUTF8)array3[i - 1]).getUnderlyingString().toCharArray();\n+            final String underlyingString2 = ((CPUTF8)array3[i]).getUnderlyingString();\n+            final char[] charArray2 = underlyingString2.toCharArray();\n+            int beginIndex = 0;\n+            for (int n = 0; n < charArray.length && charArray[n] == charArray2[n]; ++n) {\n+                ++beginIndex;\n+            }\n+            array[i - 2] = beginIndex;\n+            final char[] charArray3 = underlyingString2.substring(beginIndex).toCharArray();\n+            if (charArray3.length > 1000) {\n+                array2[i - 1] = 0;\n+                list2.add(Integer.valueOf(charArray3.length));\n+                this.addCharacters(list3, charArray3);\n             }\n             else {\n-                cpUtf8Suffix[i - 1] = suffix.length;\n-                this.addCharacters(chars, suffix);\n+                array2[i - 1] = charArray3.length;\n+                this.addCharacters(list, charArray3);\n             }\n         }\n-        final int[] cpUtf8Chars = new int[chars.size()];\n-        final int[] cpUtf8BigSuffix = new int[bigSuffix.size()];\n-        final int[][] cpUtf8BigChars = new int[bigSuffix.size()][];\n-        for (int k = 0; k < cpUtf8Chars.length; ++k) {\n-            cpUtf8Chars[k] = Character.valueOf(chars.get(k));\n-        }\n-        for (int k = 0; k < cpUtf8BigSuffix.length; ++k) {\n-            final int numBigChars = (int)Integer.valueOf(bigSuffix.get(k));\n-            cpUtf8BigSuffix[k] = numBigChars;\n-            cpUtf8BigChars[k] = new int[numBigChars];\n-            for (int j = 0; j < numBigChars; ++j) {\n-                cpUtf8BigChars[k][j] = Character.valueOf(bigChars.remove(0));\n-            }\n-        }\n-        byte[] encodedBand = this.encodeBandInt(\"cpUtf8Prefix\", cpUtf8Prefix, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpUtf8Prefix[\" + cpUtf8Prefix.length);\n-        encodedBand = this.encodeBandInt(\"cpUtf8Suffix\", cpUtf8Suffix, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpUtf8Suffix[\" + cpUtf8Suffix.length);\n-        encodedBand = this.encodeBandInt(\"cpUtf8Chars\", cpUtf8Chars, Codec.CHAR3);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpUtf8Chars[\" + cpUtf8Chars.length);\n-        encodedBand = this.encodeBandInt(\"cpUtf8BigSuffix\", cpUtf8BigSuffix, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpUtf8BigSuffix[\" + cpUtf8BigSuffix.length);\n-        for (int l = 0; l < cpUtf8BigChars.length; ++l) {\n-            encodedBand = this.encodeBandInt(\"cpUtf8BigChars \" + l, cpUtf8BigChars[l], Codec.DELTA5);\n-            out.write(encodedBand);\n-            PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpUtf8BigChars\" + l + \"[\" + cpUtf8BigChars[l].length);\n+        final int[] array4 = new int[list.size()];\n+        final int[] array5 = new int[list2.size()];\n+        final int[][] array6 = new int[list2.size()][];\n+        for (int j = 0; j < array4.length; ++j) {\n+            array4[j] = (char)list.get(j);\n+        }\n+        for (int k = 0; k < array5.length; ++k) {\n+            final int intValue = (int)list2.get(k);\n+            array5[k] = intValue;\n+            array6[k] = new int[intValue];\n+            for (int l = 0; l < intValue; ++l) {\n+                array6[k][l] = (char)list3.remove(0);\n+            }\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cpUtf8Prefix\", array, Codec.DELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cpUtf8Prefix[\" + array.length);\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"cpUtf8Suffix\", array2, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from cpUtf8Suffix[\" + array2.length);\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"cpUtf8Chars\", array4, Codec.CHAR3);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from cpUtf8Chars[\" + array4.length);\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"cpUtf8BigSuffix\", array5, Codec.DELTA5);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from cpUtf8BigSuffix[\" + array5.length);\n+        for (int n2 = 0; n2 < array6.length; ++n2) {\n+            final byte[] encodeBandInt5 = this.encodeBandInt(\"cpUtf8BigChars \" + n2, array6[n2], Codec.DELTA5);\n+            outputStream.write(encodeBandInt5);\n+            PackingUtils.log(\"Wrote \" + encodeBandInt5.length + \" bytes from cpUtf8BigChars\" + n2 + \"[\" + array6[n2].length);\n         }\n     }\n     \n-    private void addCharacters(final List chars, final char[] charArray) {\n-        for (int i = 0; i < charArray.length; ++i) {\n-            chars.add(Character.valueOf(charArray[i]));\n+    private void addCharacters(final List list, final char[] array) {\n+        for (int i = 0; i < array.length; ++i) {\n+            list.add(Character.valueOf(array[i]));\n         }\n     }\n     \n-    private void writeCpInt(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpInt(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_Int.size() + \" Integer entries...\");\n-        final int[] cpInt = new int[this.cp_Int.size()];\n-        int i = 0;\n-        for (final CPInt integer : this.cp_Int) {\n-            cpInt[i] = integer.getInt();\n-            ++i;\n-        }\n-        final byte[] encodedBand = this.encodeBandInt(\"cp_Int\", cpInt, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cp_Int[\" + cpInt.length);\n+        final int[] array = new int[this.cp_Int.size()];\n+        int n = 0;\n+        final Iterator iterator = this.cp_Int.iterator();\n+        while (iterator.hasNext()) {\n+            array[n] = ((CPInt)iterator.next()).getInt();\n+            ++n;\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cp_Int\", array, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cp_Int[\" + array.length);\n     }\n     \n-    private void writeCpFloat(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpFloat(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_Float.size() + \" Float entries...\");\n-        final int[] cpFloat = new int[this.cp_Float.size()];\n-        int i = 0;\n-        for (final CPFloat fl : this.cp_Float) {\n-            cpFloat[i] = Float.floatToIntBits(fl.getFloat());\n-            ++i;\n-        }\n-        final byte[] encodedBand = this.encodeBandInt(\"cp_Float\", cpFloat, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cp_Float[\" + cpFloat.length);\n+        final int[] array = new int[this.cp_Float.size()];\n+        int n = 0;\n+        final Iterator iterator = this.cp_Float.iterator();\n+        while (iterator.hasNext()) {\n+            array[n] = Float.floatToIntBits(((CPFloat)iterator.next()).getFloat());\n+            ++n;\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cp_Float\", array, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cp_Float[\" + array.length);\n     }\n     \n-    private void writeCpLong(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpLong(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_Long.size() + \" Long entries...\");\n-        final int[] highBits = new int[this.cp_Long.size()];\n-        final int[] loBits = new int[this.cp_Long.size()];\n-        int i = 0;\n-        for (final CPLong lng : this.cp_Long) {\n-            final long l = lng.getLong();\n-            highBits[i] = (int)(l >> 32);\n-            loBits[i] = (int)l;\n-            ++i;\n-        }\n-        byte[] encodedBand = this.encodeBandInt(\"cp_Long_hi\", highBits, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cp_Long_hi[\" + highBits.length);\n-        encodedBand = this.encodeBandInt(\"cp_Long_lo\", loBits, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cp_Long_lo[\" + loBits.length);\n+        final int[] array = new int[this.cp_Long.size()];\n+        final int[] array2 = new int[this.cp_Long.size()];\n+        int n = 0;\n+        final Iterator iterator = this.cp_Long.iterator();\n+        while (iterator.hasNext()) {\n+            final long long1 = ((CPLong)iterator.next()).getLong();\n+            array[n] = (int)(long1 >> 32);\n+            array2[n] = (int)long1;\n+            ++n;\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cp_Long_hi\", array, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cp_Long_hi[\" + array.length);\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"cp_Long_lo\", array2, Codec.DELTA5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from cp_Long_lo[\" + array2.length);\n     }\n     \n-    private void writeCpDouble(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpDouble(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_Double.size() + \" Double entries...\");\n-        final int[] highBits = new int[this.cp_Double.size()];\n-        final int[] loBits = new int[this.cp_Double.size()];\n-        int i = 0;\n-        for (final CPDouble dbl : this.cp_Double) {\n-            final long l = Double.doubleToLongBits(dbl.getDouble());\n-            highBits[i] = (int)(l >> 32);\n-            loBits[i] = (int)l;\n-            ++i;\n-        }\n-        byte[] encodedBand = this.encodeBandInt(\"cp_Double_hi\", highBits, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cp_Double_hi[\" + highBits.length);\n-        encodedBand = this.encodeBandInt(\"cp_Double_lo\", loBits, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cp_Double_lo[\" + loBits.length);\n+        final int[] array = new int[this.cp_Double.size()];\n+        final int[] array2 = new int[this.cp_Double.size()];\n+        int n = 0;\n+        final Iterator iterator = this.cp_Double.iterator();\n+        while (iterator.hasNext()) {\n+            final long doubleToLongBits = Double.doubleToLongBits(((CPDouble)iterator.next()).getDouble());\n+            array[n] = (int)(doubleToLongBits >> 32);\n+            array2[n] = (int)doubleToLongBits;\n+            ++n;\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cp_Double_hi\", array, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cp_Double_hi[\" + array.length);\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"cp_Double_lo\", array2, Codec.DELTA5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from cp_Double_lo[\" + array2.length);\n     }\n     \n-    private void writeCpString(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpString(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_String.size() + \" String entries...\");\n-        final int[] cpString = new int[this.cp_String.size()];\n-        int i = 0;\n-        for (final CPString cpStr : this.cp_String) {\n-            cpString[i] = cpStr.getIndexInCpUtf8();\n-            ++i;\n-        }\n-        final byte[] encodedBand = this.encodeBandInt(\"cpString\", cpString, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpString[\" + cpString.length);\n+        final int[] array = new int[this.cp_String.size()];\n+        int n = 0;\n+        final Iterator iterator = this.cp_String.iterator();\n+        while (iterator.hasNext()) {\n+            array[n] = ((CPString)iterator.next()).getIndexInCpUtf8();\n+            ++n;\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cpString\", array, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cpString[\" + array.length);\n     }\n     \n-    private void writeCpClass(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpClass(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_Class.size() + \" Class entries...\");\n-        final int[] cpClass = new int[this.cp_Class.size()];\n-        int i = 0;\n-        for (final CPClass cpCl : this.cp_Class) {\n-            cpClass[i] = cpCl.getIndexInCpUtf8();\n-            ++i;\n-        }\n-        final byte[] encodedBand = this.encodeBandInt(\"cpClass\", cpClass, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpClass[\" + cpClass.length);\n+        final int[] array = new int[this.cp_Class.size()];\n+        int n = 0;\n+        final Iterator iterator = this.cp_Class.iterator();\n+        while (iterator.hasNext()) {\n+            array[n] = ((CPClass)iterator.next()).getIndexInCpUtf8();\n+            ++n;\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cpClass\", array, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cpClass[\" + array.length);\n     }\n     \n-    private void writeCpSignature(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpSignature(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_Signature.size() + \" Signature entries...\");\n-        final int[] cpSignatureForm = new int[this.cp_Signature.size()];\n-        final List classes = new ArrayList();\n-        int i = 0;\n-        for (final CPSignature cpS : this.cp_Signature) {\n-            classes.addAll(cpS.getClasses());\n-            cpSignatureForm[i] = cpS.getIndexInCpUtf8();\n-            ++i;\n-        }\n-        final int[] cpSignatureClasses = new int[classes.size()];\n-        for (int j = 0; j < cpSignatureClasses.length; ++j) {\n-            cpSignatureClasses[j] = ((CPClass)classes.get(j)).getIndex();\n-        }\n-        byte[] encodedBand = this.encodeBandInt(\"cpSignatureForm\", cpSignatureForm, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpSignatureForm[\" + cpSignatureForm.length);\n-        encodedBand = this.encodeBandInt(\"cpSignatureClasses\", cpSignatureClasses, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpSignatureClasses[\" + cpSignatureClasses.length);\n+        final int[] array = new int[this.cp_Signature.size()];\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final CPSignature cpSignature : this.cp_Signature) {\n+            list.addAll(cpSignature.getClasses());\n+            array[n] = cpSignature.getIndexInCpUtf8();\n+            ++n;\n+        }\n+        final int[] array2 = new int[list.size()];\n+        for (int i = 0; i < array2.length; ++i) {\n+            array2[i] = ((CPClass)list.get(i)).getIndex();\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cpSignatureForm\", array, Codec.DELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cpSignatureForm[\" + array.length);\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"cpSignatureClasses\", array2, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from cpSignatureClasses[\" + array2.length);\n     }\n     \n-    private void writeCpDescr(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeCpDescr(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing \" + this.cp_Descr.size() + \" Descriptor entries...\");\n-        final int[] cpDescrName = new int[this.cp_Descr.size()];\n-        final int[] cpDescrType = new int[this.cp_Descr.size()];\n-        int i = 0;\n-        for (final CPNameAndType nameAndType : this.cp_Descr) {\n-            cpDescrName[i] = nameAndType.getNameIndex();\n-            cpDescrType[i] = nameAndType.getTypeIndex();\n-            ++i;\n-        }\n-        byte[] encodedBand = this.encodeBandInt(\"cp_Descr_Name\", cpDescrName, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cp_Descr_Name[\" + cpDescrName.length);\n-        encodedBand = this.encodeBandInt(\"cp_Descr_Type\", cpDescrType, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cp_Descr_Type[\" + cpDescrType.length);\n-    }\n-    \n-    private void writeCpMethodOrField(final Set cp, final OutputStream out, final String name) throws IOException, Pack200Exception {\n-        PackingUtils.log(\"Writing \" + cp.size() + \" Method and Field entries...\");\n-        final int[] cp_methodOrField_class = new int[cp.size()];\n-        final int[] cp_methodOrField_desc = new int[cp.size()];\n-        int i = 0;\n-        for (final CPMethodOrField mOrF : cp) {\n-            cp_methodOrField_class[i] = mOrF.getClassIndex();\n-            cp_methodOrField_desc[i] = mOrF.getDescIndex();\n-            ++i;\n-        }\n-        byte[] encodedBand = this.encodeBandInt(name + \"_class\", cp_methodOrField_class, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + name + \"_class[\" + cp_methodOrField_class.length);\n-        encodedBand = this.encodeBandInt(name + \"_desc\", cp_methodOrField_desc, Codec.UDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + name + \"_desc[\" + cp_methodOrField_desc.length);\n+        final int[] array = new int[this.cp_Descr.size()];\n+        final int[] array2 = new int[this.cp_Descr.size()];\n+        int n = 0;\n+        for (final CPNameAndType cpNameAndType : this.cp_Descr) {\n+            array[n] = cpNameAndType.getNameIndex();\n+            array2[n] = cpNameAndType.getTypeIndex();\n+            ++n;\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"cp_Descr_Name\", array, Codec.DELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from cp_Descr_Name[\" + array.length);\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"cp_Descr_Type\", array2, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from cp_Descr_Type[\" + array2.length);\n+    }\n+    \n+    private void writeCpMethodOrField(final Set set, final OutputStream outputStream, final String s) throws IOException, Pack200Exception {\n+        PackingUtils.log(\"Writing \" + set.size() + \" Method and Field entries...\");\n+        final int[] array = new int[set.size()];\n+        final int[] array2 = new int[set.size()];\n+        int n = 0;\n+        for (final CPMethodOrField cpMethodOrField : set) {\n+            array[n] = cpMethodOrField.getClassIndex();\n+            array2[n] = cpMethodOrField.getDescIndex();\n+            ++n;\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(s + \"_class\", array, Codec.DELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from \" + s + \"_class[\" + array.length);\n+        final byte[] encodeBandInt2 = this.encodeBandInt(s + \"_desc\", array2, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from \" + s + \"_desc[\" + array2.length);\n     }\n     \n     public void finaliseBands() {\n         this.addCPUtf8(\"\");\n         this.removeSignaturesFromCpUTF8();\n         this.addIndices();\n         this.segmentHeader.setCp_Utf8_count(this.cp_Utf8.size());\n@@ -331,270 +336,264 @@\n         this.segmentHeader.setCp_Descr_count(this.cp_Descr.size());\n         this.segmentHeader.setCp_Field_count(this.cp_Field.size());\n         this.segmentHeader.setCp_Method_count(this.cp_Method.size());\n         this.segmentHeader.setCp_Imethod_count(this.cp_Imethod.size());\n     }\n     \n     private void removeSignaturesFromCpUTF8() {\n-        for (final CPSignature signature : this.cp_Signature) {\n-            final String sigStr = signature.getUnderlyingString();\n-            final CPUTF8 utf8 = signature.getSignatureForm();\n-            final String form = utf8.getUnderlyingString();\n-            if (!sigStr.equals(form)) {\n-                this.removeCpUtf8(sigStr);\n+        for (final CPSignature cpSignature : this.cp_Signature) {\n+            final String underlyingString = cpSignature.getUnderlyingString();\n+            if (!underlyingString.equals(cpSignature.getSignatureForm().getUnderlyingString())) {\n+                this.removeCpUtf8(underlyingString);\n             }\n         }\n     }\n     \n     private void addIndices() {\n-        final Set[] sets = { this.cp_Utf8, this.cp_Int, this.cp_Float, this.cp_Long, this.cp_Double, this.cp_String, this.cp_Class, this.cp_Signature, this.cp_Descr, this.cp_Field, this.cp_Method, this.cp_Imethod };\n-        for (int i = 0; i < sets.length; ++i) {\n-            int j = 0;\n-            for (final ConstantPoolEntry entry : sets[i]) {\n-                entry.setIndex(j);\n-                ++j;\n-            }\n-        }\n-        final Map classNameToIndex = new HashMap();\n-        for (final CPMethodOrField mOrF : this.cp_Field) {\n-            final CPClass className = mOrF.getClassName();\n-            final Integer index = Integer.valueOf(classNameToIndex.get((Object)className));\n-            if (index == null) {\n-                classNameToIndex.put(className, Integer.valueOf(1));\n-                mOrF.setIndexInClass(0);\n+        final Set[] array = { this.cp_Utf8, this.cp_Int, this.cp_Float, this.cp_Long, this.cp_Double, this.cp_String, this.cp_Class, this.cp_Signature, this.cp_Descr, this.cp_Field, this.cp_Method, this.cp_Imethod };\n+        for (int i = 0; i < array.length; ++i) {\n+            int index = 0;\n+            final Iterator iterator = array[i].iterator();\n+            while (iterator.hasNext()) {\n+                ((ConstantPoolEntry)iterator.next()).setIndex(index);\n+                ++index;\n+            }\n+        }\n+        final HashMap hashMap = new HashMap();\n+        for (final CPMethodOrField cpMethodOrField : this.cp_Field) {\n+            final CPClass className = cpMethodOrField.getClassName();\n+            final Integer n = (Integer)hashMap.get(className);\n+            if (n == null) {\n+                hashMap.put(className, Integer.valueOf(1));\n+                cpMethodOrField.setIndexInClass(0);\n             }\n             else {\n-                final int theIndex = (int)index;\n-                mOrF.setIndexInClass(theIndex);\n-                classNameToIndex.put(className, Integer.valueOf(theIndex + 1));\n+                final int intValue = (int)n;\n+                cpMethodOrField.setIndexInClass(intValue);\n+                hashMap.put(className, Integer.valueOf(intValue + 1));\n             }\n         }\n-        classNameToIndex.clear();\n-        final Map classNameToConstructorIndex = new HashMap();\n-        for (final CPMethodOrField mOrF2 : this.cp_Method) {\n-            final CPClass className2 = mOrF2.getClassName();\n-            final Integer index2 = Integer.valueOf(classNameToIndex.get((Object)className2));\n-            if (index2 == null) {\n-                classNameToIndex.put(className2, Integer.valueOf(1));\n-                mOrF2.setIndexInClass(0);\n+        hashMap.clear();\n+        final HashMap hashMap2 = new HashMap();\n+        for (final CPMethodOrField cpMethodOrField2 : this.cp_Method) {\n+            final CPClass className2 = cpMethodOrField2.getClassName();\n+            final Integer n2 = (Integer)hashMap.get(className2);\n+            if (n2 == null) {\n+                hashMap.put(className2, Integer.valueOf(1));\n+                cpMethodOrField2.setIndexInClass(0);\n             }\n             else {\n-                final int theIndex2 = (int)index2;\n-                mOrF2.setIndexInClass(theIndex2);\n-                classNameToIndex.put(className2, Integer.valueOf(theIndex2 + 1));\n-            }\n-            if (mOrF2.getDesc().getName().equals(\"<init>\")) {\n-                final Integer constructorIndex = Integer.valueOf(classNameToConstructorIndex.get((Object)className2));\n-                if (constructorIndex == null) {\n-                    classNameToConstructorIndex.put(className2, Integer.valueOf(1));\n-                    mOrF2.setIndexInClassForConstructor(0);\n+                final int intValue2 = (int)n2;\n+                cpMethodOrField2.setIndexInClass(intValue2);\n+                hashMap.put(className2, Integer.valueOf(intValue2 + 1));\n+            }\n+            if (cpMethodOrField2.getDesc().getName().equals(\"<init>\")) {\n+                final Integer n3 = (Integer)hashMap2.get(className2);\n+                if (n3 == null) {\n+                    hashMap2.put(className2, Integer.valueOf(1));\n+                    cpMethodOrField2.setIndexInClassForConstructor(0);\n                 }\n                 else {\n-                    final int theIndex3 = (int)constructorIndex;\n-                    mOrF2.setIndexInClassForConstructor(theIndex3);\n-                    classNameToConstructorIndex.put(className2, Integer.valueOf(theIndex3 + 1));\n+                    final int intValue3 = (int)n3;\n+                    cpMethodOrField2.setIndexInClassForConstructor(intValue3);\n+                    hashMap2.put(className2, Integer.valueOf(intValue3 + 1));\n                 }\n             }\n         }\n     }\n     \n-    private void removeCpUtf8(final String string) {\n-        final CPUTF8 utf8 = (CPUTF8)this.stringsToCpUtf8.get(string);\n-        if (utf8 != null && this.stringsToCpClass.get(string) == null) {\n-            this.stringsToCpUtf8.remove(string);\n-            this.cp_Utf8.remove(utf8);\n+    private void removeCpUtf8(final String s) {\n+        final CPUTF8 cputf8 = (CPUTF8)this.stringsToCpUtf8.get(s);\n+        if (cputf8 != null && this.stringsToCpClass.get(s) == null) {\n+            this.stringsToCpUtf8.remove(s);\n+            this.cp_Utf8.remove(cputf8);\n         }\n     }\n     \n-    void addCPUtf8(final String utf8) {\n-        this.getCPUtf8(utf8);\n+    void addCPUtf8(final String s) {\n+        this.getCPUtf8(s);\n     }\n     \n-    public CPUTF8 getCPUtf8(final String utf8) {\n-        if (utf8 == null) {\n+    public CPUTF8 getCPUtf8(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        CPUTF8 cpUtf8 = (CPUTF8)this.stringsToCpUtf8.get(utf8);\n-        if (cpUtf8 == null) {\n-            cpUtf8 = new CPUTF8(utf8);\n-            this.cp_Utf8.add(cpUtf8);\n-            this.stringsToCpUtf8.put(utf8, cpUtf8);\n+        CPUTF8 cputf8 = (CPUTF8)this.stringsToCpUtf8.get(s);\n+        if (cputf8 == null) {\n+            cputf8 = new CPUTF8(s);\n+            this.cp_Utf8.add(cputf8);\n+            this.stringsToCpUtf8.put(s, cputf8);\n         }\n-        return cpUtf8;\n+        return cputf8;\n     }\n     \n-    public CPSignature getCPSignature(final String signature) {\n-        if (signature == null) {\n+    public CPSignature getCPSignature(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        CPSignature cpS = (CPSignature)this.stringsToCpSignature.get(signature);\n-        if (cpS == null) {\n-            final List cpClasses = new ArrayList();\n-            CPUTF8 signatureUTF8;\n-            if (signature.length() > 1 && signature.indexOf(76) != -1) {\n-                final List classes = new ArrayList();\n-                final char[] chars = signature.toCharArray();\n-                final StringBuffer signatureString = new StringBuffer();\n-                for (int i = 0; i < chars.length; ++i) {\n-                    signatureString.append(chars[i]);\n-                    if (chars[i] == 'L') {\n-                        final StringBuffer className = new StringBuffer();\n-                        for (int j = i + 1; j < chars.length; ++j) {\n-                            final char c = chars[j];\n+        CPSignature cpSignature = (CPSignature)this.stringsToCpSignature.get(s);\n+        if (cpSignature == null) {\n+            final ArrayList list = new ArrayList();\n+            CPUTF8 cputf8;\n+            if (s.length() > 1 && s.indexOf(76) != -1) {\n+                final ArrayList list2 = new ArrayList();\n+                final char[] charArray = s.toCharArray();\n+                final StringBuffer sb = new StringBuffer();\n+                for (int i = 0; i < charArray.length; ++i) {\n+                    sb.append(charArray[i]);\n+                    if (charArray[i] == 'L') {\n+                        final StringBuffer sb2 = new StringBuffer();\n+                        for (int j = i + 1; j < charArray.length; ++j) {\n+                            final char c = charArray[j];\n                             if (!Character.isLetter(c) && !Character.isDigit(c) && c != '/' && c != '$' && c != '_') {\n-                                classes.add(className.toString());\n+                                list2.add(sb2.toString());\n                                 i = j - 1;\n                                 break;\n                             }\n-                            className.append(c);\n+                            sb2.append(c);\n                         }\n                     }\n                 }\n-                this.removeCpUtf8(signature);\n-                for (String className2 : classes) {\n+                this.removeCpUtf8(s);\n+                for (final String s2 : list2) {\n                     CPClass cpClass = null;\n-                    if (className2 != null) {\n-                        className2 = className2.replace('.', '/');\n-                        cpClass = this.stringsToCpClass.get(className2);\n+                    if (s2 != null) {\n+                        final String replace = s2.replace('.', '/');\n+                        cpClass = (CPClass)this.stringsToCpClass.get(replace);\n                         if (cpClass == null) {\n-                            final CPUTF8 cpUtf8 = this.getCPUtf8(className2);\n-                            cpClass = new CPClass(cpUtf8);\n+                            cpClass = new CPClass(this.getCPUtf8(replace));\n                             this.cp_Class.add(cpClass);\n-                            this.stringsToCpClass.put(className2, cpClass);\n+                            this.stringsToCpClass.put(replace, cpClass);\n                         }\n                     }\n-                    cpClasses.add(cpClass);\n+                    list.add(cpClass);\n                 }\n-                signatureUTF8 = this.getCPUtf8(signatureString.toString());\n+                cputf8 = this.getCPUtf8(sb.toString());\n             }\n             else {\n-                signatureUTF8 = this.getCPUtf8(signature);\n+                cputf8 = this.getCPUtf8(s);\n             }\n-            cpS = new CPSignature(signature, signatureUTF8, cpClasses);\n-            this.cp_Signature.add(cpS);\n-            this.stringsToCpSignature.put(signature, cpS);\n+            cpSignature = new CPSignature(s, cputf8, (List)list);\n+            this.cp_Signature.add(cpSignature);\n+            this.stringsToCpSignature.put(s, cpSignature);\n         }\n-        return cpS;\n+        return cpSignature;\n     }\n     \n-    public CPClass getCPClass(String className) {\n-        if (className == null) {\n+    public CPClass getCPClass(String replace) {\n+        if (replace == null) {\n             return null;\n         }\n-        className = className.replace('.', '/');\n-        CPClass cpClass = (CPClass)this.stringsToCpClass.get(className);\n+        replace = replace.replace('.', '/');\n+        CPClass cpClass = (CPClass)this.stringsToCpClass.get(replace);\n         if (cpClass == null) {\n-            final CPUTF8 cpUtf8 = this.getCPUtf8(className);\n-            cpClass = new CPClass(cpUtf8);\n+            cpClass = new CPClass(this.getCPUtf8(replace));\n             this.cp_Class.add(cpClass);\n-            this.stringsToCpClass.put(className, cpClass);\n+            this.stringsToCpClass.put(replace, cpClass);\n         }\n         if (cpClass.isInnerClass()) {\n             this.segment.getClassBands().currentClassReferencesInnerClass(cpClass);\n         }\n         return cpClass;\n     }\n     \n-    public void addCPClass(final String className) {\n-        this.getCPClass(className);\n+    public void addCPClass(final String s) {\n+        this.getCPClass(s);\n+    }\n+    \n+    public CPNameAndType getCPNameAndType(final String s, final String s2) {\n+        final String s3 = s + \":\" + s2;\n+        CPNameAndType cpNameAndType = (CPNameAndType)this.stringsToCpNameAndType.get(s3);\n+        if (cpNameAndType == null) {\n+            cpNameAndType = new CPNameAndType(this.getCPUtf8(s), this.getCPSignature(s2));\n+            this.stringsToCpNameAndType.put(s3, cpNameAndType);\n+            this.cp_Descr.add(cpNameAndType);\n+        }\n+        return cpNameAndType;\n     }\n     \n-    public CPNameAndType getCPNameAndType(final String name, final String signature) {\n-        final String descr = name + \":\" + signature;\n-        CPNameAndType nameAndType = (CPNameAndType)this.stringsToCpNameAndType.get(descr);\n-        if (nameAndType == null) {\n-            nameAndType = new CPNameAndType(this.getCPUtf8(name), this.getCPSignature(signature));\n-            this.stringsToCpNameAndType.put(descr, nameAndType);\n-            this.cp_Descr.add(nameAndType);\n-        }\n-        return nameAndType;\n-    }\n-    \n-    public CPMethodOrField getCPField(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n-        CPMethodOrField cpF = (CPMethodOrField)this.stringsToCpField.get(key);\n-        if (cpF == null) {\n-            final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n-            cpF = new CPMethodOrField(cpClass, nAndT);\n-            this.cp_Field.add(cpF);\n-            this.stringsToCpField.put(key, cpF);\n-        }\n-        return cpF;\n-    }\n-    \n-    public CPConstant getConstant(final Object value) {\n-        CPConstant constant = (CPConstant)this.objectsToCPConstant.get(value);\n-        if (constant == null) {\n-            if (value instanceof Integer) {\n-                constant = (CPConstant)new CPInt((int)value);\n-                this.cp_Int.add(constant);\n-            }\n-            else if (value instanceof Long) {\n-                constant = (CPConstant)new CPLong((long)value);\n-                this.cp_Long.add(constant);\n-            }\n-            else if (value instanceof Float) {\n-                constant = (CPConstant)new CPFloat((float)value);\n-                this.cp_Float.add(constant);\n-            }\n-            else if (value instanceof Double) {\n-                constant = (CPConstant)new CPDouble((double)value);\n-                this.cp_Double.add(constant);\n-            }\n-            else if (value instanceof String) {\n-                constant = (CPConstant)new CPString(this.getCPUtf8((String)value));\n-                this.cp_String.add(constant);\n+    public CPMethodOrField getCPField(final CPClass cpClass, final String s, final String s2) {\n+        final String s3 = cpClass.toString() + \":\" + s + \":\" + s2;\n+        CPMethodOrField cpMethodOrField = (CPMethodOrField)this.stringsToCpField.get(s3);\n+        if (cpMethodOrField == null) {\n+            cpMethodOrField = new CPMethodOrField(cpClass, this.getCPNameAndType(s, s2));\n+            this.cp_Field.add(cpMethodOrField);\n+            this.stringsToCpField.put(s3, cpMethodOrField);\n+        }\n+        return cpMethodOrField;\n+    }\n+    \n+    public CPConstant getConstant(final Object o) {\n+        Object cpClass = (CPConstant)this.objectsToCPConstant.get(o);\n+        if (cpClass == null) {\n+            if (o instanceof Integer) {\n+                cpClass = new CPInt((int)o);\n+                this.cp_Int.add(cpClass);\n+            }\n+            else if (o instanceof Long) {\n+                cpClass = new CPLong((long)o);\n+                this.cp_Long.add(cpClass);\n+            }\n+            else if (o instanceof Float) {\n+                cpClass = new CPFloat((float)o);\n+                this.cp_Float.add(cpClass);\n+            }\n+            else if (o instanceof Double) {\n+                cpClass = new CPDouble((double)o);\n+                this.cp_Double.add(cpClass);\n+            }\n+            else if (o instanceof String) {\n+                cpClass = new CPString(this.getCPUtf8((String)o));\n+                this.cp_String.add(cpClass);\n             }\n-            else if (value instanceof Type) {\n-                String className = ((Type)value).getClassName();\n+            else if (o instanceof Type) {\n+                String className = ((Type)o).getClassName();\n                 if (className.endsWith(\"[]\")) {\n-                    for (className = \"[L\" + className.substring(0, className.length() - 2); className.endsWith(\"[]\"); className = \"[\" + className.substring(0, className.length() - 2)) {}\n-                    className = className;\n+                    String s;\n+                    for (s = \"[L\" + className.substring(0, className.length() - 2); s.endsWith(\"[]\"); s = \"[\" + s.substring(0, s.length() - 2)) {}\n+                    className = s;\n                 }\n-                constant = (CPConstant)this.getCPClass(className);\n+                cpClass = this.getCPClass(className);\n             }\n-            this.objectsToCPConstant.put(value, constant);\n+            this.objectsToCPConstant.put(o, cpClass);\n         }\n-        return constant;\n+        return (CPConstant)cpClass;\n     }\n     \n-    public CPMethodOrField getCPMethod(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n-        CPMethodOrField cpM = (CPMethodOrField)this.stringsToCpMethod.get(key);\n-        if (cpM == null) {\n-            final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n-            cpM = new CPMethodOrField(cpClass, nAndT);\n-            this.cp_Method.add(cpM);\n-            this.stringsToCpMethod.put(key, cpM);\n+    public CPMethodOrField getCPMethod(final CPClass cpClass, final String s, final String s2) {\n+        final String s3 = cpClass.toString() + \":\" + s + \":\" + s2;\n+        CPMethodOrField cpMethodOrField = (CPMethodOrField)this.stringsToCpMethod.get(s3);\n+        if (cpMethodOrField == null) {\n+            cpMethodOrField = new CPMethodOrField(cpClass, this.getCPNameAndType(s, s2));\n+            this.cp_Method.add(cpMethodOrField);\n+            this.stringsToCpMethod.put(s3, cpMethodOrField);\n         }\n-        return cpM;\n+        return cpMethodOrField;\n     }\n     \n-    public CPMethodOrField getCPIMethod(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n-        CPMethodOrField cpIM = (CPMethodOrField)this.stringsToCpIMethod.get(key);\n-        if (cpIM == null) {\n-            final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n-            cpIM = new CPMethodOrField(cpClass, nAndT);\n-            this.cp_Imethod.add(cpIM);\n-            this.stringsToCpIMethod.put(key, cpIM);\n+    public CPMethodOrField getCPIMethod(final CPClass cpClass, final String s, final String s2) {\n+        final String s3 = cpClass.toString() + \":\" + s + \":\" + s2;\n+        CPMethodOrField cpMethodOrField = (CPMethodOrField)this.stringsToCpIMethod.get(s3);\n+        if (cpMethodOrField == null) {\n+            cpMethodOrField = new CPMethodOrField(cpClass, this.getCPNameAndType(s, s2));\n+            this.cp_Imethod.add(cpMethodOrField);\n+            this.stringsToCpIMethod.put(s3, cpMethodOrField);\n         }\n-        return cpIM;\n+        return cpMethodOrField;\n     }\n     \n-    public CPMethodOrField getCPField(final String owner, final String name, final String desc) {\n-        return this.getCPField(this.getCPClass(owner), name, desc);\n+    public CPMethodOrField getCPField(final String s, final String s2, final String s3) {\n+        return this.getCPField(this.getCPClass(s), s2, s3);\n     }\n     \n-    public CPMethodOrField getCPMethod(final String owner, final String name, final String desc) {\n-        return this.getCPMethod(this.getCPClass(owner), name, desc);\n+    public CPMethodOrField getCPMethod(final String s, final String s2, final String s3) {\n+        return this.getCPMethod(this.getCPClass(s), s2, s3);\n     }\n     \n-    public CPMethodOrField getCPIMethod(final String owner, final String name, final String desc) {\n-        return this.getCPIMethod(this.getCPClass(owner), name, desc);\n+    public CPMethodOrField getCPIMethod(final String s, final String s2, final String s3) {\n+        return this.getCPIMethod(this.getCPClass(s), s2, s3);\n     }\n     \n-    public boolean existsCpClass(final String className) {\n-        final CPClass cpClass = (CPClass)this.stringsToCpClass.get(className);\n-        return cpClass != null;\n+    public boolean existsCpClass(final String s) {\n+        return this.stringsToCpClass.get(s) != null;\n     }\n }\n"}]}
