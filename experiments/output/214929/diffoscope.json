{"diffoscope-json-version": 1, "source1": "first/InnerClass.class", "source2": "second/InnerClass.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,38 +8,38 @@\n public final class InnerClass implements Cloneable, Node\n {\n     private int inner_class_index;\n     private int outer_class_index;\n     private int inner_name_index;\n     private int inner_access_flags;\n     \n-    public InnerClass(final InnerClass c) {\n-        this(c.getInnerClassIndex(), c.getOuterClassIndex(), c.getInnerNameIndex(), c.getInnerAccessFlags());\n+    public InnerClass(final InnerClass innerClass) {\n+        this(innerClass.getInnerClassIndex(), innerClass.getOuterClassIndex(), innerClass.getInnerNameIndex(), innerClass.getInnerAccessFlags());\n     }\n     \n-    InnerClass(final DataInput file) throws IOException {\n-        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort());\n+    InnerClass(final DataInput dataInput) throws IOException {\n+        this(dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), dataInput.readUnsignedShort());\n     }\n     \n     public InnerClass(final int inner_class_index, final int outer_class_index, final int inner_name_index, final int inner_access_flags) {\n         this.inner_class_index = inner_class_index;\n         this.outer_class_index = outer_class_index;\n         this.inner_name_index = inner_name_index;\n         this.inner_access_flags = inner_access_flags;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitInnerClass(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitInnerClass(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(this.inner_class_index);\n-        file.writeShort(this.outer_class_index);\n-        file.writeShort(this.inner_name_index);\n-        file.writeShort(this.inner_access_flags);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.inner_class_index);\n+        dataOutputStream.writeShort(this.outer_class_index);\n+        dataOutputStream.writeShort(this.inner_name_index);\n+        dataOutputStream.writeShort(this.inner_access_flags);\n     }\n     \n     public int getInnerAccessFlags() {\n         return this.inner_access_flags;\n     }\n     \n     public int getInnerClassIndex() {\n@@ -71,35 +71,32 @@\n     }\n     \n     @Override\n     public String toString() {\n         return \"InnerClass(\" + this.inner_class_index + \", \" + this.outer_class_index + \", \" + this.inner_name_index + \", \" + this.inner_access_flags + \")\";\n     }\n     \n-    public String toString(final ConstantPool constant_pool) {\n-        String inner_class_name = constant_pool.getConstantString(this.inner_class_index, (byte)7);\n-        inner_class_name = Utility.compactClassName(inner_class_name, false);\n-        String outer_class_name;\n+    public String toString(final ConstantPool constantPool) {\n+        final String compactClassName = Utility.compactClassName(constantPool.getConstantString(this.inner_class_index, (byte)7), false);\n+        String string;\n         if (this.outer_class_index != 0) {\n-            outer_class_name = constant_pool.getConstantString(this.outer_class_index, (byte)7);\n-            outer_class_name = \" of class \" + Utility.compactClassName(outer_class_name, false);\n+            string = \" of class \" + Utility.compactClassName(constantPool.getConstantString(this.outer_class_index, (byte)7), false);\n         }\n         else {\n-            outer_class_name = \"\";\n+            string = \"\";\n         }\n-        String inner_name;\n+        String bytes;\n         if (this.inner_name_index != 0) {\n-            inner_name = ((ConstantUtf8)constant_pool.getConstant(this.inner_name_index, (byte)1)).getBytes();\n+            bytes = ((ConstantUtf8)constantPool.getConstant(this.inner_name_index, (byte)1)).getBytes();\n         }\n         else {\n-            inner_name = \"(anonymous)\";\n+            bytes = \"(anonymous)\";\n         }\n-        String access = Utility.accessToString(this.inner_access_flags, true);\n-        access = (access.isEmpty() ? \"\" : (access + \" \"));\n-        return \"  \" + access + inner_name + \"=class \" + inner_class_name + outer_class_name;\n+        final String accessToString = Utility.accessToString(this.inner_access_flags, true);\n+        return \"  \" + (accessToString.isEmpty() ? \"\" : (accessToString + \" \")) + bytes + \"=class \" + compactClassName + string;\n     }\n     \n     public InnerClass copy() {\n         try {\n             return (InnerClass)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {\n"}]}
