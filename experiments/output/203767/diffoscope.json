{"diffoscope-json-version": 1, "source1": "first/HuffmanDecoder$HuffmanCodes.class", "source2": "second/HuffmanDecoder$HuffmanCodes.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,79 +11,74 @@\n     private final HuffmanState state;\n     private final HuffmanDecoder.BinaryTreeNode lengthTree;\n     private final HuffmanDecoder.BinaryTreeNode distanceTree;\n     private int runBufferPos;\n     private byte[] runBuffer;\n     private int runBufferLength;\n     \n-    HuffmanCodes(final HuffmanDecoder this$0, final HuffmanState state, final int[] lengths, final int[] distance) {\n+    HuffmanCodes(final HuffmanDecoder this$0, final HuffmanState state, final int[] array, final int[] array2) {\n         this.this$0 = this$0;\n         super((HuffmanDecoder.HuffmanDecoder$1)null);\n         this.runBuffer = ByteUtils.EMPTY_BYTE_ARRAY;\n         this.state = state;\n-        this.lengthTree = HuffmanDecoder.access$800(lengths);\n-        this.distanceTree = HuffmanDecoder.access$800(distance);\n+        this.lengthTree = HuffmanDecoder.access$800(array);\n+        this.distanceTree = HuffmanDecoder.access$800(array2);\n     }\n     \n     HuffmanState state() {\n         return this.endOfBlock ? HuffmanState.INITIAL : this.state;\n     }\n     \n-    int read(final byte[] b, final int off, final int len) throws IOException {\n-        if (len == 0) {\n+    int read(final byte[] array, final int n, final int n2) throws IOException {\n+        if (n2 == 0) {\n             return 0;\n         }\n-        return this.decodeNext(b, off, len);\n+        return this.decodeNext(array, n, n2);\n     }\n     \n-    private int decodeNext(final byte[] b, final int off, final int len) throws IOException {\n+    private int decodeNext(final byte[] array, final int n, final int n2) throws IOException {\n         if (this.endOfBlock) {\n             return -1;\n         }\n-        int result = this.copyFromRunBuffer(b, off, len);\n-        while (result < len) {\n-            final int symbol = HuffmanDecoder.access$900(HuffmanDecoder.access$400(this.this$0), this.lengthTree);\n-            if (symbol < 256) {\n-                b[off + result++] = HuffmanDecoder.access$600(this.this$0).add((byte)symbol);\n+        int i = this.copyFromRunBuffer(array, n, n2);\n+        while (i < n2) {\n+            final int access$900 = HuffmanDecoder.access$900(HuffmanDecoder.access$400(this.this$0), this.lengthTree);\n+            if (access$900 < 256) {\n+                array[n + i++] = HuffmanDecoder.access$600(this.this$0).add((byte)access$900);\n             }\n             else {\n-                if (symbol <= 256) {\n+                if (access$900 <= 256) {\n                     this.endOfBlock = true;\n-                    return result;\n+                    return i;\n                 }\n-                final int runMask = HuffmanDecoder.access$1000()[symbol - 257];\n-                int run = runMask >>> 5;\n-                final int runXtra = runMask & 0x1F;\n-                run = ExactMath.add(run, HuffmanDecoder.access$500(this.this$0, runXtra));\n-                final int distSym = HuffmanDecoder.access$900(HuffmanDecoder.access$400(this.this$0), this.distanceTree);\n-                final int distMask = HuffmanDecoder.access$1100()[distSym];\n-                int dist = distMask >>> 4;\n-                final int distXtra = distMask & 0xF;\n-                dist = ExactMath.add(dist, HuffmanDecoder.access$500(this.this$0, distXtra));\n-                if (this.runBuffer.length < run) {\n-                    this.runBuffer = new byte[run];\n+                final short n3 = HuffmanDecoder.access$1000()[access$900 - 257];\n+                final int add = ExactMath.add(n3 >>> 5, HuffmanDecoder.access$500(this.this$0, n3 & 0x1F));\n+                final int n4 = HuffmanDecoder.access$1100()[HuffmanDecoder.access$900(HuffmanDecoder.access$400(this.this$0), this.distanceTree)];\n+                final int add2 = ExactMath.add(n4 >>> 4, HuffmanDecoder.access$500(this.this$0, n4 & 0xF));\n+                if (this.runBuffer.length < add) {\n+                    this.runBuffer = new byte[add];\n                 }\n-                this.runBufferLength = run;\n+                this.runBufferLength = add;\n                 this.runBufferPos = 0;\n-                HuffmanDecoder.access$600(this.this$0).recordToBuffer(dist, run, this.runBuffer);\n-                result += this.copyFromRunBuffer(b, off + result, len - result);\n+                HuffmanDecoder.access$600(this.this$0).recordToBuffer(add2, add, this.runBuffer);\n+                i += this.copyFromRunBuffer(array, n + i, n2 - i);\n             }\n         }\n-        return result;\n+        return i;\n     }\n     \n-    private int copyFromRunBuffer(final byte[] b, final int off, final int len) {\n-        final int bytesInBuffer = this.runBufferLength - this.runBufferPos;\n-        int copiedBytes = 0;\n-        if (bytesInBuffer > 0) {\n-            copiedBytes = Math.min(len, bytesInBuffer);\n-            System.arraycopy(this.runBuffer, this.runBufferPos, b, off, copiedBytes);\n-            this.runBufferPos += copiedBytes;\n+    private int copyFromRunBuffer(final byte[] array, final int n, final int a) {\n+        final int b = this.runBufferLength - this.runBufferPos;\n+        int min = 0;\n+        if (b > 0) {\n+            min = Math.min(a, b);\n+            System.arraycopy(this.runBuffer, this.runBufferPos, array, n, min);\n+            this.runBufferPos += min;\n         }\n-        return copiedBytes;\n+        return min;\n     }\n     \n     boolean hasData() {\n         return !this.endOfBlock;\n     }\n     \n     int available() {\n"}]}
