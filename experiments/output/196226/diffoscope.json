{"diffoscope-json-version": 1, "source1": "first/IMAPReply.class", "source2": "second/IMAPReply.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,156 +1,156 @@\n-  SHA-256 checksum e73935dc2348dc4629484e6b69634112464f58ca24cd743c6c220f454bf49abb\n+  SHA-256 checksum 8905ba39249a5ffe507e88105d145b97cf4981c46287fdce0a23a426f6c76132\n   Compiled from \"IMAPReply.java\"\n public final class org.apache.commons.net.imap.IMAPReply\n   minor version: 0\n   major version: 51\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #2                          // org/apache/commons/net/imap/IMAPReply\n-  super_class: #32                        // java/lang/Object\n+  this_class: #7                          // org/apache/commons/net/imap/IMAPReply\n+  super_class: #2                         // java/lang/Object\n   interfaces: 0, fields: 15, methods: 10, attributes: 1\n Constant pool:\n-    #1 = Methodref          #32.#87       // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #88           // org/apache/commons/net/imap/IMAPReply\n-    #3 = String             #89           // *\n-    #4 = Methodref          #80.#90       // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-    #5 = String             #91           // +\n-    #6 = Fieldref           #2.#92        // org/apache/commons/net/imap/IMAPReply.TAGGED_PATTERN:Ljava/util/regex/Pattern;\n-    #7 = Methodref          #2.#93        // org/apache/commons/net/imap/IMAPReply.getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n-    #8 = Fieldref           #2.#94        // org/apache/commons/net/imap/IMAPReply.LITERAL_PATTERN:Ljava/util/regex/Pattern;\n-    #9 = Methodref          #95.#96       // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #10 = Methodref          #75.#97       // java/util/regex/Matcher.find:()Z\n-   #11 = Methodref          #75.#98       // java/util/regex/Matcher.group:(I)Ljava/lang/String;\n-   #12 = Methodref          #99.#100      // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #13 = Fieldref           #2.#101       // org/apache/commons/net/imap/IMAPReply.UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n-   #14 = Methodref          #2.#102       // org/apache/commons/net/imap/IMAPReply.isContinuation:(Ljava/lang/String;)Z\n-   #15 = Methodref          #75.#103      // java/util/regex/Matcher.matches:()Z\n-   #16 = String             #33           // OK\n-   #17 = Methodref          #80.#104      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #18 = String             #39           // BAD\n-   #19 = String             #37           // NO\n-   #20 = Class              #105          // org/apache/commons/net/MalformedServerReplyException\n-   #21 = Class              #106          // java/lang/StringBuilder\n-   #22 = Methodref          #21.#87       // java/lang/StringBuilder.\"<init>\":()V\n-   #23 = String             #107          // Received unexpected IMAP protocol response from server: \\'\n-   #24 = Methodref          #21.#108      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #25 = String             #109          // \\'.\n-   #26 = Methodref          #21.#110      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #27 = Methodref          #20.#111      // org/apache/commons/net/MalformedServerReplyException.\"<init>\":(Ljava/lang/String;)V\n-   #28 = String             #112          // ^\\\\w+ (\\\\S+).*\n-   #29 = Methodref          #95.#113      // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #30 = String             #114          // ^\\\\* (\\\\S+).*\n-   #31 = String             #115          // \\\\{(\\\\d+)\\\\}$\n-   #32 = Class              #116          // java/lang/Object\n-   #33 = Utf8               OK\n-   #34 = Utf8               I\n-   #35 = Utf8               ConstantValue\n-   #36 = Integer            0\n-   #37 = Utf8               NO\n-   #38 = Integer            1\n-   #39 = Utf8               BAD\n-   #40 = Integer            2\n-   #41 = Utf8               CONT\n-   #42 = Integer            3\n-   #43 = Utf8               PARTIAL\n-   #44 = Utf8               IMAP_OK\n-   #45 = Utf8               Ljava/lang/String;\n-   #46 = Utf8               IMAP_NO\n-   #47 = Utf8               IMAP_BAD\n-   #48 = Utf8               IMAP_UNTAGGED_PREFIX\n-   #49 = Utf8               IMAP_CONTINUATION_PREFIX\n-   #50 = Utf8               TAGGED_RESPONSE\n-   #51 = Utf8               TAGGED_PATTERN\n-   #52 = Utf8               Ljava/util/regex/Pattern;\n-   #53 = Utf8               UNTAGGED_RESPONSE\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // org/apache/commons/net/imap/IMAPReply\n+    #8 = Utf8               org/apache/commons/net/imap/IMAPReply\n+    #9 = String             #10           // *\n+   #10 = Utf8               *\n+   #11 = Methodref          #12.#13       // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+   #12 = Class              #14           // java/lang/String\n+   #13 = NameAndType        #15:#16       // startsWith:(Ljava/lang/String;)Z\n+   #14 = Utf8               java/lang/String\n+   #15 = Utf8               startsWith\n+   #16 = Utf8               (Ljava/lang/String;)Z\n+   #17 = String             #18           // +\n+   #18 = Utf8               +\n+   #19 = Fieldref           #7.#20        // org/apache/commons/net/imap/IMAPReply.TAGGED_PATTERN:Ljava/util/regex/Pattern;\n+   #20 = NameAndType        #21:#22       // TAGGED_PATTERN:Ljava/util/regex/Pattern;\n+   #21 = Utf8               TAGGED_PATTERN\n+   #22 = Utf8               Ljava/util/regex/Pattern;\n+   #23 = Methodref          #7.#24        // org/apache/commons/net/imap/IMAPReply.getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n+   #24 = NameAndType        #25:#26       // getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n+   #25 = Utf8               getReplyCode\n+   #26 = Utf8               (Ljava/lang/String;Ljava/util/regex/Pattern;)I\n+   #27 = Fieldref           #7.#28        // org/apache/commons/net/imap/IMAPReply.LITERAL_PATTERN:Ljava/util/regex/Pattern;\n+   #28 = NameAndType        #29:#22       // LITERAL_PATTERN:Ljava/util/regex/Pattern;\n+   #29 = Utf8               LITERAL_PATTERN\n+   #30 = Methodref          #31.#32       // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #31 = Class              #33           // java/util/regex/Pattern\n+   #32 = NameAndType        #34:#35       // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #33 = Utf8               java/util/regex/Pattern\n+   #34 = Utf8               matcher\n+   #35 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #36 = Methodref          #37.#38       // java/util/regex/Matcher.find:()Z\n+   #37 = Class              #39           // java/util/regex/Matcher\n+   #38 = NameAndType        #40:#41       // find:()Z\n+   #39 = Utf8               java/util/regex/Matcher\n+   #40 = Utf8               find\n+   #41 = Utf8               ()Z\n+   #42 = Methodref          #37.#43       // java/util/regex/Matcher.group:(I)Ljava/lang/String;\n+   #43 = NameAndType        #44:#45       // group:(I)Ljava/lang/String;\n+   #44 = Utf8               group\n+   #45 = Utf8               (I)Ljava/lang/String;\n+   #46 = Methodref          #47.#48       // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #47 = Class              #49           // java/lang/Integer\n+   #48 = NameAndType        #50:#51       // parseInt:(Ljava/lang/String;)I\n+   #49 = Utf8               java/lang/Integer\n+   #50 = Utf8               parseInt\n+   #51 = Utf8               (Ljava/lang/String;)I\n+   #52 = Fieldref           #7.#53        // org/apache/commons/net/imap/IMAPReply.UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n+   #53 = NameAndType        #54:#22       // UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n    #54 = Utf8               UNTAGGED_PATTERN\n-   #55 = Utf8               LITERAL_PATTERN\n-   #56 = Utf8               <init>\n-   #57 = Utf8               ()V\n-   #58 = Utf8               Code\n-   #59 = Utf8               LineNumberTable\n-   #60 = Utf8               LocalVariableTable\n-   #61 = Utf8               this\n-   #62 = Utf8               Lorg/apache/commons/net/imap/IMAPReply;\n-   #63 = Utf8               isUntagged\n-   #64 = Utf8               (Ljava/lang/String;)Z\n-   #65 = Utf8               line\n-   #66 = Utf8               isContinuation\n-   #67 = Utf8               getReplyCode\n-   #68 = Utf8               (Ljava/lang/String;)I\n-   #69 = Utf8               Exceptions\n-   #70 = Class              #117          // java/io/IOException\n-   #71 = Utf8               literalCount\n-   #72 = Utf8               m\n-   #73 = Utf8               Ljava/util/regex/Matcher;\n-   #74 = Utf8               StackMapTable\n-   #75 = Class              #118          // java/util/regex/Matcher\n-   #76 = Utf8               getUntaggedReplyCode\n-   #77 = Utf8               (Ljava/lang/String;Ljava/util/regex/Pattern;)I\n-   #78 = Utf8               code\n-   #79 = Utf8               pattern\n-   #80 = Class              #119          // java/lang/String\n-   #81 = Utf8               isSuccess\n-   #82 = Utf8               (I)Z\n-   #83 = Utf8               replyCode\n-   #84 = Utf8               <clinit>\n-   #85 = Utf8               SourceFile\n-   #86 = Utf8               IMAPReply.java\n-   #87 = NameAndType        #56:#57       // \"<init>\":()V\n-   #88 = Utf8               org/apache/commons/net/imap/IMAPReply\n-   #89 = Utf8               *\n-   #90 = NameAndType        #120:#64      // startsWith:(Ljava/lang/String;)Z\n-   #91 = Utf8               +\n-   #92 = NameAndType        #51:#52       // TAGGED_PATTERN:Ljava/util/regex/Pattern;\n-   #93 = NameAndType        #67:#77       // getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n-   #94 = NameAndType        #55:#52       // LITERAL_PATTERN:Ljava/util/regex/Pattern;\n-   #95 = Class              #121          // java/util/regex/Pattern\n-   #96 = NameAndType        #122:#123     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #97 = NameAndType        #124:#125     // find:()Z\n-   #98 = NameAndType        #126:#127     // group:(I)Ljava/lang/String;\n-   #99 = Class              #128          // java/lang/Integer\n-  #100 = NameAndType        #129:#68      // parseInt:(Ljava/lang/String;)I\n-  #101 = NameAndType        #54:#52       // UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n-  #102 = NameAndType        #66:#64       // isContinuation:(Ljava/lang/String;)Z\n-  #103 = NameAndType        #130:#125     // matches:()Z\n-  #104 = NameAndType        #131:#132     // equals:(Ljava/lang/Object;)Z\n-  #105 = Utf8               org/apache/commons/net/MalformedServerReplyException\n-  #106 = Utf8               java/lang/StringBuilder\n-  #107 = Utf8               Received unexpected IMAP protocol response from server: \\'\n-  #108 = NameAndType        #133:#134     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #109 = Utf8               \\'.\n-  #110 = NameAndType        #135:#136     // toString:()Ljava/lang/String;\n-  #111 = NameAndType        #56:#137      // \"<init>\":(Ljava/lang/String;)V\n-  #112 = Utf8               ^\\\\w+ (\\\\S+).*\n-  #113 = NameAndType        #138:#139     // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #114 = Utf8               ^\\\\* (\\\\S+).*\n-  #115 = Utf8               \\\\{(\\\\d+)\\\\}$\n-  #116 = Utf8               java/lang/Object\n-  #117 = Utf8               java/io/IOException\n-  #118 = Utf8               java/util/regex/Matcher\n-  #119 = Utf8               java/lang/String\n-  #120 = Utf8               startsWith\n-  #121 = Utf8               java/util/regex/Pattern\n-  #122 = Utf8               matcher\n-  #123 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #124 = Utf8               find\n-  #125 = Utf8               ()Z\n-  #126 = Utf8               group\n-  #127 = Utf8               (I)Ljava/lang/String;\n-  #128 = Utf8               java/lang/Integer\n-  #129 = Utf8               parseInt\n-  #130 = Utf8               matches\n-  #131 = Utf8               equals\n-  #132 = Utf8               (Ljava/lang/Object;)Z\n-  #133 = Utf8               append\n-  #134 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #135 = Utf8               toString\n-  #136 = Utf8               ()Ljava/lang/String;\n-  #137 = Utf8               (Ljava/lang/String;)V\n-  #138 = Utf8               compile\n-  #139 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #55 = Methodref          #7.#56        // org/apache/commons/net/imap/IMAPReply.isContinuation:(Ljava/lang/String;)Z\n+   #56 = NameAndType        #57:#16       // isContinuation:(Ljava/lang/String;)Z\n+   #57 = Utf8               isContinuation\n+   #58 = Methodref          #37.#59       // java/util/regex/Matcher.matches:()Z\n+   #59 = NameAndType        #60:#41       // matches:()Z\n+   #60 = Utf8               matches\n+   #61 = String             #62           // OK\n+   #62 = Utf8               OK\n+   #63 = Methodref          #12.#64       // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #64 = NameAndType        #65:#66       // equals:(Ljava/lang/Object;)Z\n+   #65 = Utf8               equals\n+   #66 = Utf8               (Ljava/lang/Object;)Z\n+   #67 = String             #68           // BAD\n+   #68 = Utf8               BAD\n+   #69 = String             #70           // NO\n+   #70 = Utf8               NO\n+   #71 = Class              #72           // org/apache/commons/net/MalformedServerReplyException\n+   #72 = Utf8               org/apache/commons/net/MalformedServerReplyException\n+   #73 = Class              #74           // java/lang/StringBuilder\n+   #74 = Utf8               java/lang/StringBuilder\n+   #75 = Methodref          #73.#3        // java/lang/StringBuilder.\"<init>\":()V\n+   #76 = String             #77           // Received unexpected IMAP protocol response from server: \\'\n+   #77 = Utf8               Received unexpected IMAP protocol response from server: \\'\n+   #78 = Methodref          #73.#79       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #79 = NameAndType        #80:#81       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #80 = Utf8               append\n+   #81 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #82 = String             #83           // \\'.\n+   #83 = Utf8               \\'.\n+   #84 = Methodref          #73.#85       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #85 = NameAndType        #86:#87       // toString:()Ljava/lang/String;\n+   #86 = Utf8               toString\n+   #87 = Utf8               ()Ljava/lang/String;\n+   #88 = Methodref          #71.#89       // org/apache/commons/net/MalformedServerReplyException.\"<init>\":(Ljava/lang/String;)V\n+   #89 = NameAndType        #5:#90        // \"<init>\":(Ljava/lang/String;)V\n+   #90 = Utf8               (Ljava/lang/String;)V\n+   #91 = String             #92           // ^\\\\w+ (\\\\S+).*\n+   #92 = Utf8               ^\\\\w+ (\\\\S+).*\n+   #93 = Methodref          #31.#94       // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #94 = NameAndType        #95:#96       // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #95 = Utf8               compile\n+   #96 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #97 = String             #98           // ^\\\\* (\\\\S+).*\n+   #98 = Utf8               ^\\\\* (\\\\S+).*\n+   #99 = String             #100          // \\\\{(\\\\d+)\\\\}$\n+  #100 = Utf8               \\\\{(\\\\d+)\\\\}$\n+  #101 = Utf8               I\n+  #102 = Utf8               ConstantValue\n+  #103 = Integer            0\n+  #104 = Integer            1\n+  #105 = Integer            2\n+  #106 = Utf8               CONT\n+  #107 = Integer            3\n+  #108 = Utf8               PARTIAL\n+  #109 = Utf8               IMAP_OK\n+  #110 = Utf8               Ljava/lang/String;\n+  #111 = Utf8               IMAP_NO\n+  #112 = Utf8               IMAP_BAD\n+  #113 = Utf8               IMAP_UNTAGGED_PREFIX\n+  #114 = Utf8               IMAP_CONTINUATION_PREFIX\n+  #115 = Utf8               TAGGED_RESPONSE\n+  #116 = Utf8               UNTAGGED_RESPONSE\n+  #117 = Utf8               Code\n+  #118 = Utf8               LineNumberTable\n+  #119 = Utf8               LocalVariableTable\n+  #120 = Utf8               this\n+  #121 = Utf8               Lorg/apache/commons/net/imap/IMAPReply;\n+  #122 = Utf8               isUntagged\n+  #123 = Utf8               line\n+  #124 = Utf8               Exceptions\n+  #125 = Class              #126          // java/io/IOException\n+  #126 = Utf8               java/io/IOException\n+  #127 = Utf8               literalCount\n+  #128 = Utf8               m\n+  #129 = Utf8               Ljava/util/regex/Matcher;\n+  #130 = Utf8               StackMapTable\n+  #131 = Utf8               getUntaggedReplyCode\n+  #132 = Utf8               code\n+  #133 = Utf8               pattern\n+  #134 = Utf8               isSuccess\n+  #135 = Utf8               (I)Z\n+  #136 = Utf8               replyCode\n+  #137 = Utf8               <clinit>\n+  #138 = Utf8               SourceFile\n+  #139 = Utf8               IMAPReply.java\n {\n   public static final int OK = 0;\n     descriptor: I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 0\n \n   public static final int NO = 1;\n@@ -236,71 +236,71 @@\n \n   public static boolean isUntagged(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: ldc           #3                  // String *\n-         3: invokevirtual #4                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z\n+         1: ldc           #9                  // String *\n+         3: invokevirtual #11                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z\n          6: ireturn\n       LineNumberTable:\n         line 77: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  line   Ljava/lang/String;\n \n   public static boolean isContinuation(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: ldc           #5                  // String +\n-         3: invokevirtual #4                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z\n+         1: ldc           #17                 // String +\n+         3: invokevirtual #11                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z\n          6: ireturn\n       LineNumberTable:\n         line 86: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  line   Ljava/lang/String;\n \n   public static int getReplyCode(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getstatic     #6                  // Field TAGGED_PATTERN:Ljava/util/regex/Pattern;\n-         4: invokestatic  #7                  // Method getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n+         1: getstatic     #19                 // Field TAGGED_PATTERN:Ljava/util/regex/Pattern;\n+         4: invokestatic  #23                 // Method getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n          7: ireturn\n       LineNumberTable:\n         line 101: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  line   Ljava/lang/String;\n     Exceptions:\n       throws java.io.IOException\n \n   public static int literalCount(java.lang.String);\n     descriptor: (Ljava/lang/String;)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=1\n-         0: getstatic     #8                  // Field LITERAL_PATTERN:Ljava/util/regex/Pattern;\n+         0: getstatic     #27                 // Field LITERAL_PATTERN:Ljava/util/regex/Pattern;\n          3: aload_0\n-         4: invokevirtual #9                  // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+         4: invokevirtual #30                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n          7: astore_1\n          8: aload_1\n-         9: invokevirtual #10                 // Method java/util/regex/Matcher.find:()Z\n+         9: invokevirtual #36                 // Method java/util/regex/Matcher.find:()Z\n         12: ifeq          24\n         15: aload_1\n         16: iconst_1\n-        17: invokevirtual #11                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;\n-        20: invokestatic  #12                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+        17: invokevirtual #42                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;\n+        20: invokestatic  #46                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I\n         23: ireturn\n         24: iconst_m1\n         25: ireturn\n       LineNumberTable:\n         line 116: 0\n         line 117: 8\n         line 118: 15\n@@ -316,16 +316,16 @@\n \n   public static int getUntaggedReplyCode(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getstatic     #13                 // Field UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n-         4: invokestatic  #7                  // Method getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n+         1: getstatic     #52                 // Field UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n+         4: invokestatic  #23                 // Method getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n          7: ireturn\n       LineNumberTable:\n         line 131: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  line   Ljava/lang/String;\n     Exceptions:\n@@ -333,60 +333,60 @@\n \n   private static int getReplyCode(java.lang.String, java.util.regex.Pattern) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/util/regex/Pattern;)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n-         1: invokestatic  #14                 // Method isContinuation:(Ljava/lang/String;)Z\n+         1: invokestatic  #55                 // Method isContinuation:(Ljava/lang/String;)Z\n          4: ifeq          9\n          7: iconst_3\n          8: ireturn\n          9: aload_1\n         10: aload_0\n-        11: invokevirtual #9                  // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+        11: invokevirtual #30                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n         14: astore_2\n         15: aload_2\n-        16: invokevirtual #15                 // Method java/util/regex/Matcher.matches:()Z\n+        16: invokevirtual #58                 // Method java/util/regex/Matcher.matches:()Z\n         19: ifeq          61\n         22: aload_2\n         23: iconst_1\n-        24: invokevirtual #11                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;\n+        24: invokevirtual #42                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;\n         27: astore_3\n         28: aload_3\n-        29: ldc           #16                 // String OK\n-        31: invokevirtual #17                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+        29: ldc           #61                 // String OK\n+        31: invokevirtual #63                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n         34: ifeq          39\n         37: iconst_0\n         38: ireturn\n         39: aload_3\n-        40: ldc           #18                 // String BAD\n-        42: invokevirtual #17                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+        40: ldc           #67                 // String BAD\n+        42: invokevirtual #63                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n         45: ifeq          50\n         48: iconst_2\n         49: ireturn\n         50: aload_3\n-        51: ldc           #19                 // String NO\n-        53: invokevirtual #17                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+        51: ldc           #69                 // String NO\n+        53: invokevirtual #63                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n         56: ifeq          61\n         59: iconst_1\n         60: ireturn\n-        61: new           #20                 // class org/apache/commons/net/MalformedServerReplyException\n+        61: new           #71                 // class org/apache/commons/net/MalformedServerReplyException\n         64: dup\n-        65: new           #21                 // class java/lang/StringBuilder\n+        65: new           #73                 // class java/lang/StringBuilder\n         68: dup\n-        69: invokespecial #22                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        72: ldc           #23                 // String Received unexpected IMAP protocol response from server: \\'\n-        74: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        69: invokespecial #75                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        72: ldc           #76                 // String Received unexpected IMAP protocol response from server: \\'\n+        74: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         77: aload_0\n-        78: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        81: ldc           #25                 // String \\'.\n-        83: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        86: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        89: invokespecial #27                 // Method org/apache/commons/net/MalformedServerReplyException.\"<init>\":(Ljava/lang/String;)V\n+        78: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        81: ldc           #82                 // String \\'.\n+        83: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        86: invokevirtual #84                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        89: invokespecial #88                 // Method org/apache/commons/net/MalformedServerReplyException.\"<init>\":(Ljava/lang/String;)V\n         92: athrow\n       LineNumberTable:\n         line 136: 0\n         line 137: 7\n         line 139: 9\n         line 140: 15\n         line 141: 22\n@@ -458,23 +458,23 @@\n           stack = [ int ]\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: ldc           #28                 // String ^\\\\w+ (\\\\S+).*\n-         2: invokestatic  #29                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-         5: putstatic     #6                  // Field TAGGED_PATTERN:Ljava/util/regex/Pattern;\n-         8: ldc           #30                 // String ^\\\\* (\\\\S+).*\n-        10: invokestatic  #29                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-        13: putstatic     #13                 // Field UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n-        16: ldc           #31                 // String \\\\{(\\\\d+)\\\\}$\n-        18: invokestatic  #29                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-        21: putstatic     #8                  // Field LITERAL_PATTERN:Ljava/util/regex/Pattern;\n+         0: ldc           #91                 // String ^\\\\w+ (\\\\S+).*\n+         2: invokestatic  #93                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+         5: putstatic     #19                 // Field TAGGED_PATTERN:Ljava/util/regex/Pattern;\n+         8: ldc           #97                 // String ^\\\\* (\\\\S+).*\n+        10: invokestatic  #93                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+        13: putstatic     #52                 // Field UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n+        16: ldc           #99                 // String \\\\{(\\\\d+)\\\\}$\n+        18: invokestatic  #93                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+        21: putstatic     #27                 // Field LITERAL_PATTERN:Ljava/util/regex/Pattern;\n         24: return\n       LineNumberTable:\n         line 91: 0\n         line 105: 8\n         line 107: 16\n }\n SourceFile: \"IMAPReply.java\"\n"}]}
