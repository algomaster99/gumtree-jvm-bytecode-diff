{"diffoscope-json-version": 1, "source1": "first/CheckUtil.class", "source2": "second/CheckUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,14 +28,21 @@\n     private static final int GETTER_BODY_SIZE = 2;\n     private static final Pattern UNDERSCORE_PATTERN;\n     private static final Pattern SETTER_PATTERN;\n     private static final Pattern GETTER_PATTERN;\n     private static final Pattern ALL_NEW_LINES;\n     private static final char PACKAGE_SEPARATOR = '.';\n     \n+    static {\n+        UNDERSCORE_PATTERN = Pattern.compile(\"_\");\n+        SETTER_PATTERN = Pattern.compile(\"^set[A-Z].*\");\n+        GETTER_PATTERN = Pattern.compile(\"^(is|get)[A-Z].*\");\n+        ALL_NEW_LINES = Pattern.compile(\"\\\\R\");\n+    }\n+    \n     private CheckUtil() {\n     }\n     \n     public static boolean isEqualsMethod(final DetailAST ast) {\n         boolean equalsMethod = false;\n         if (ast.getType() == 9) {\n             final DetailAST modifiers = ast.findFirstToken(5);\n@@ -282,15 +289,15 @@\n     }\n     \n     public static String stripIndentAndInitialNewLineFromTextBlock(final String textBlockContent) {\n         final String contentWithInitialNewLineRemoved = CheckUtil.ALL_NEW_LINES.matcher(textBlockContent).replaceFirst(\"\");\n         final List<String> lines = Arrays.asList(CheckUtil.ALL_NEW_LINES.split((CharSequence)contentWithInitialNewLineRemoved));\n         final int indent = getSmallestIndent(lines);\n         final String suffix = \"\";\n-        return lines.stream().map(line -> stripIndentAndTrailingWhitespaceFromLine(line, indent)).collect((Collector<? super Object, ?, String>)Collectors.joining(System.lineSeparator(), \"\", \"\"));\n+        return lines.stream().map(line -> stripIndentAndTrailingWhitespaceFromLine(line, indent2)).collect((Collector<? super Object, ?, String>)Collectors.joining(System.lineSeparator(), \"\", \"\"));\n     }\n     \n     private static String stripIndentAndTrailingWhitespaceFromLine(final String line, final int indent) {\n         final int lastNonWhitespace = lastIndexOfNonWhitespace(line);\n         String returnString = \"\";\n         if (lastNonWhitespace > 0) {\n             returnString = line.substring(indent, lastNonWhitespace);\n@@ -322,19 +329,19 @@\n     public static String getQualifiedTypeDeclarationName(final String packageName, final String outerClassQualifiedName, final String className) {\n         String qualifiedClassName;\n         if (outerClassQualifiedName == null) {\n             if (packageName == null) {\n                 qualifiedClassName = className;\n             }\n             else {\n-                qualifiedClassName = packageName + \".\" + className;\n+                qualifiedClassName = String.valueOf(packageName) + '.' + className;\n             }\n         }\n         else {\n-            qualifiedClassName = outerClassQualifiedName + \".\" + className;\n+            qualifiedClassName = String.valueOf(outerClassQualifiedName) + '.' + className;\n         }\n         return qualifiedClassName;\n     }\n     \n     public static String extractQualifiedName(final DetailAST ast) {\n         return FullIdent.createFullIdent(ast).getText();\n     }\n@@ -345,15 +352,8 @@\n         final DetailAST firstChild = parentAst.getFirstChild();\n         return extractQualifiedName(firstChild);\n     }\n     \n     public static boolean isPackageInfo(final String filePath) {\n         return \"package-info.java\".equals(new File(filePath).getName());\n     }\n-    \n-    static {\n-        UNDERSCORE_PATTERN = Pattern.compile(\"_\");\n-        SETTER_PATTERN = Pattern.compile(\"^set[A-Z].*\");\n-        GETTER_PATTERN = Pattern.compile(\"^(is|get)[A-Z].*\");\n-        ALL_NEW_LINES = Pattern.compile(\"\\\\R\");\n-    }\n }\n"}]}
