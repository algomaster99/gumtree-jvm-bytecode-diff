{"diffoscope-json-version": 1, "source1": "first/Verifier.class", "source2": "second/Verifier.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,14 +20,18 @@\n     static final Verifier[] EMPTY_ARRAY;\n     private final String className;\n     private Pass1Verifier p1v;\n     private Pass2Verifier p2v;\n     private final Map<String, Pass3aVerifier> p3avs;\n     private final Map<String, Pass3bVerifier> p3bvs;\n     \n+    static {\n+        EMPTY_ARRAY = new Verifier[0];\n+    }\n+    \n     public static void main(final String[] args) {\n         System.out.println(\"JustIce by Enver Haase, (C) 2001-2002.\\n<http://bcel.sourceforge.net>\\n<https://commons.apache.org/bcel>\\n\");\n         for (int index = 0; index < args.length; ++index) {\n             try {\n                 if (args[index].endsWith(\".class\")) {\n                     final int dotclasspos = args[index].lastIndexOf(\".class\");\n                     if (dotclasspos != -1) {\n@@ -62,15 +66,17 @@\n             }\n         }\n         System.out.println(\"Warnings:\");\n         final String[] warnings = verifier.getMessages();\n         if (warnings.length == 0) {\n             System.out.println(\"<none>\");\n         }\n-        for (final String warning : warnings) {\n+        String[] array;\n+        for (int length = (array = warnings).length, j = 0; j < length; ++j) {\n+            final String warning = array[j];\n             System.out.println(warning);\n         }\n         System.out.println(\"\\n\");\n         verifier.flush();\n     }\n     \n     Verifier(final String fullyQualifiedClassName) {\n@@ -90,19 +96,19 @@\n         if (this.p2v == null) {\n             this.p2v = new Pass2Verifier(this);\n         }\n         return this.p2v.verify();\n     }\n     \n     public VerificationResult doPass3a(final int methodNo) {\n-        return ((Pass3aVerifier)this.p3avs.computeIfAbsent(Integer.toString(methodNo), k -> new Pass3aVerifier(this, methodNo))).verify();\n+        return ((Pass3aVerifier)this.p3avs.computeIfAbsent(Integer.toString(methodNo), k -> new Pass3aVerifier(this, n))).verify();\n     }\n     \n     public VerificationResult doPass3b(final int methodNo) {\n-        return ((Pass3bVerifier)this.p3bvs.computeIfAbsent(Integer.toString(methodNo), k -> new Pass3bVerifier(this, methodNo))).verify();\n+        return ((Pass3bVerifier)this.p3bvs.computeIfAbsent(Integer.toString(methodNo), k -> new Pass3bVerifier(this, n))).verify();\n     }\n     \n     public void flush() {\n         this.p1v = null;\n         this.p2v = null;\n         this.p3avs.clear();\n         this.p3bvs.clear();\n@@ -112,35 +118,31 @@\n         return this.className;\n     }\n     \n     public String[] getMessages() throws ClassNotFoundException {\n         final List<String> messages = new ArrayList<String>();\n         String element = null;\n         if (this.p1v != null) {\n-            this.p1v.getMessagesList().forEach(element -> messages.add(\"Pass 1: \" + element));\n+            this.p1v.getMessagesList().forEach(element -> list.add(\"Pass 1: \" + element));\n         }\n         if (this.p2v != null) {\n-            this.p2v.getMessagesList().forEach(element -> messages.add(\"Pass 2: \" + element));\n+            this.p2v.getMessagesList().forEach(element -> list2.add(\"Pass 2: \" + element));\n         }\n         for (final Pass3aVerifier pv : this.p3avs.values()) {\n             final int meth = pv.getMethodNo();\n-            final String[] messages2 = pv.getMessages();\n-            for (int length = messages2.length, i = 0; i < length; ++i) {\n+            String[] messages2;\n+            for (int length = (messages2 = pv.getMessages()).length, i = 0; i < length; ++i) {\n                 element = messages2[i];\n                 messages.add(\"Pass 3a, method \" + meth + \" ('\" + Repository.lookupClass(this.className).getMethods()[meth] + \"'): \" + element);\n             }\n         }\n         for (final Pass3bVerifier pv2 : this.p3bvs.values()) {\n             final int meth = pv2.getMethodNo();\n-            final String[] messages3 = pv2.getMessages();\n-            for (int length2 = messages3.length, j = 0; j < length2; ++j) {\n+            String[] messages3;\n+            for (int length2 = (messages3 = pv2.getMessages()).length, j = 0; j < length2; ++j) {\n                 element = messages3[j];\n                 messages.add(\"Pass 3b, method \" + meth + \" ('\" + Repository.lookupClass(this.className).getMethods()[meth] + \"'): \" + element);\n             }\n         }\n         return messages.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n     }\n-    \n-    static {\n-        EMPTY_ARRAY = new Verifier[0];\n-    }\n }\n"}]}
