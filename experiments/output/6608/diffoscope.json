{"diffoscope-json-version": 1, "source1": "first/AtomicInitializer.class", "source2": "second/AtomicInitializer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,27 +1,27 @@\n-  SHA-256 checksum 28fa7d25605fabd0b09eee79dbcd3122a936d2d9e7c97e96346f3d0ceddf113e\n+  SHA-256 checksum 045f130abfb7d5503ca3206fe2b1d21bd07e55274b32b3abc3e64785a53deb46\n   Compiled from \"AtomicInitializer.java\"\n public abstract class org.apache.commons.lang3.concurrent.AtomicInitializer<T extends java.lang.Object> extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T>\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n   this_class: #8                          // org/apache/commons/lang3/concurrent/AtomicInitializer\n   super_class: #9                         // java/lang/Object\n   interfaces: 1, fields: 1, methods: 3, attributes: 2\n Constant pool:\n-   #1 = Methodref          #9.#38         // java/lang/Object.\"<init>\":()V\n-   #2 = Class              #39            // java/util/concurrent/atomic/AtomicReference\n-   #3 = Methodref          #2.#38         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-   #4 = Fieldref           #8.#40         // org/apache/commons/lang3/concurrent/AtomicInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n-   #5 = Methodref          #2.#41         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-   #6 = Methodref          #8.#42         // org/apache/commons/lang3/concurrent/AtomicInitializer.initialize:()Ljava/lang/Object;\n-   #7 = Methodref          #2.#43         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #8 = Class              #44            // org/apache/commons/lang3/concurrent/AtomicInitializer\n-   #9 = Class              #45            // java/lang/Object\n-  #10 = Class              #46            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+   #1 = Methodref          #9.#37         // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #38            // java/util/concurrent/atomic/AtomicReference\n+   #3 = Methodref          #2.#37         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+   #4 = Fieldref           #8.#39         // org/apache/commons/lang3/concurrent/AtomicInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n+   #5 = Methodref          #2.#40         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+   #6 = Methodref          #8.#41         // org/apache/commons/lang3/concurrent/AtomicInitializer.initialize:()Ljava/lang/Object;\n+   #7 = Methodref          #2.#42         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #8 = Class              #43            // org/apache/commons/lang3/concurrent/AtomicInitializer\n+   #9 = Class              #44            // java/lang/Object\n+  #10 = Class              #45            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n   #11 = Utf8               reference\n   #12 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n   #13 = Utf8               Signature\n   #14 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n   #15 = Utf8               <init>\n   #16 = Utf8               ()V\n   #17 = Utf8               Code\n@@ -33,34 +33,33 @@\n   #23 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicInitializer<TT;>;\n   #24 = Utf8               get\n   #25 = Utf8               ()Ljava/lang/Object;\n   #26 = Utf8               result\n   #27 = Utf8               Ljava/lang/Object;\n   #28 = Utf8               TT;\n   #29 = Utf8               StackMapTable\n-  #30 = Class              #45            // java/lang/Object\n-  #31 = Utf8               Exceptions\n-  #32 = Class              #47            // org/apache/commons/lang3/concurrent/ConcurrentException\n-  #33 = Utf8               ()TT;\n-  #34 = Utf8               initialize\n-  #35 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n-  #36 = Utf8               SourceFile\n-  #37 = Utf8               AtomicInitializer.java\n-  #38 = NameAndType        #15:#16        // \"<init>\":()V\n-  #39 = Utf8               java/util/concurrent/atomic/AtomicReference\n-  #40 = NameAndType        #11:#12        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n-  #41 = NameAndType        #24:#25        // get:()Ljava/lang/Object;\n-  #42 = NameAndType        #34:#25        // initialize:()Ljava/lang/Object;\n-  #43 = NameAndType        #48:#49        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #44 = Utf8               org/apache/commons/lang3/concurrent/AtomicInitializer\n-  #45 = Utf8               java/lang/Object\n-  #46 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n-  #47 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n-  #48 = Utf8               compareAndSet\n-  #49 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #30 = Utf8               Exceptions\n+  #31 = Class              #46            // org/apache/commons/lang3/concurrent/ConcurrentException\n+  #32 = Utf8               ()TT;\n+  #33 = Utf8               initialize\n+  #34 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+  #35 = Utf8               SourceFile\n+  #36 = Utf8               AtomicInitializer.java\n+  #37 = NameAndType        #15:#16        // \"<init>\":()V\n+  #38 = Utf8               java/util/concurrent/atomic/AtomicReference\n+  #39 = NameAndType        #11:#12        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #40 = NameAndType        #24:#25        // get:()Ljava/lang/Object;\n+  #41 = NameAndType        #33:#25        // initialize:()Ljava/lang/Object;\n+  #42 = NameAndType        #47:#48        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #43 = Utf8               org/apache/commons/lang3/concurrent/AtomicInitializer\n+  #44 = Utf8               java/lang/Object\n+  #45 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+  #46 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n+  #47 = Utf8               compareAndSet\n+  #48 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n {\n   private final java.util.concurrent.atomic.AtomicReference<T> reference;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n     Signature: #14                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n \n   public org.apache.commons.lang3.concurrent.AtomicInitializer();\n@@ -129,18 +128,18 @@\n             8      31     1 result   TT;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/lang/Object ]\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #33                          // ()TT;\n+    Signature: #32                          // ()TT;\n \n   protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #33                          // ()TT;\n+    Signature: #32                          // ()TT;\n }\n-Signature: #35                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+Signature: #34                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n SourceFile: \"AtomicInitializer.java\"\n"}]}
