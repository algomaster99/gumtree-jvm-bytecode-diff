{"diffoscope-json-version": 1, "source1": "first/FileBands.class", "source2": "second/FileBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,13 @@\n \n package org.apache.commons.compress.harmony.pack200;\n \n import java.io.IOException;\n import java.io.OutputStream;\n import java.util.Iterator;\n-import java.util.Set;\n import java.util.TimeZone;\n import org.objectweb.asm.ClassReader;\n import java.util.HashSet;\n import java.util.List;\n \n public class FileBands extends BandSet\n {\n@@ -18,121 +17,119 @@\n     private final long[] file_size;\n     private final int[] file_options;\n     private final byte[][] file_bits;\n     private final List fileList;\n     private final PackingOptions options;\n     private final CpBands cpBands;\n     \n-    public FileBands(final CpBands cpBands, final SegmentHeader segmentHeader, final PackingOptions options, final Archive.SegmentUnit segmentUnit, final int effort) {\n-        super(effort, segmentHeader);\n+    public FileBands(final CpBands cpBands, final SegmentHeader segmentHeader, final PackingOptions options, final Archive.SegmentUnit segmentUnit, final int n) {\n+        super(n, segmentHeader);\n         this.fileList = segmentUnit.getFileList();\n         this.options = options;\n         this.cpBands = cpBands;\n         final int size = this.fileList.size();\n         this.fileName = new CPUTF8[size];\n         this.file_modtime = new int[size];\n         this.file_size = new long[size];\n         this.file_options = new int[size];\n-        int totalSize = 0;\n+        int n2 = 0;\n         this.file_bits = new byte[size][];\n-        final int archiveModtime = segmentHeader.getArchive_modtime();\n-        final Set classNames = new HashSet();\n-        for (final ClassReader reader : segmentUnit.getClassList()) {\n-            classNames.add(reader.getClassName());\n-        }\n-        final CPUTF8 emptyString = cpBands.getCPUtf8(\"\");\n-        int latestModtime = Integer.MIN_VALUE;\n-        final boolean isLatest = !\"keep\".equals(options.getModificationTime());\n+        final int archive_modtime = segmentHeader.getArchive_modtime();\n+        final HashSet set = new HashSet();\n+        final Iterator iterator = segmentUnit.getClassList().iterator();\n+        while (iterator.hasNext()) {\n+            set.add(((ClassReader)iterator.next()).getClassName());\n+        }\n+        final CPUTF8 cpUtf8 = cpBands.getCPUtf8(\"\");\n+        int n3 = Integer.MIN_VALUE;\n+        final boolean b = !\"keep\".equals(options.getModificationTime());\n         for (int i = 0; i < size; ++i) {\n             final Archive.PackingFile packingFile = (Archive.PackingFile)this.fileList.get(i);\n             final String name = packingFile.getName();\n             if (name.endsWith(\".class\") && !options.isPassFile(name)) {\n                 final int[] file_options = this.file_options;\n-                final int n = i;\n-                file_options[n] |= 0x2;\n-                if (classNames.contains(name.substring(0, name.length() - 6))) {\n-                    this.fileName[i] = emptyString;\n+                final int n4 = i;\n+                file_options[n4] |= 0x2;\n+                if (set.contains(name.substring(0, name.length() - 6))) {\n+                    this.fileName[i] = cpUtf8;\n                 }\n                 else {\n                     this.fileName[i] = cpBands.getCPUtf8(name);\n                 }\n             }\n             else {\n                 this.fileName[i] = cpBands.getCPUtf8(name);\n             }\n             if (options.isKeepDeflateHint() && packingFile.isDefalteHint()) {\n                 final int[] file_options2 = this.file_options;\n-                final int n2 = i;\n-                file_options2[n2] |= 0x1;\n+                final int n5 = i;\n+                file_options2[n5] |= 0x1;\n             }\n-            final byte[] bytes = packingFile.getContents();\n-            this.file_size[i] = bytes.length;\n-            totalSize += this.file_size[i];\n-            final long modtime = (packingFile.getModtime() + TimeZone.getDefault().getRawOffset()) / 1000L;\n-            this.file_modtime[i] = (int)(modtime - archiveModtime);\n-            if (isLatest && latestModtime < this.file_modtime[i]) {\n-                latestModtime = this.file_modtime[i];\n+            this.file_size[i] = packingFile.getContents().length;\n+            n2 += this.file_size[i];\n+            this.file_modtime[i] = (int)((packingFile.getModtime() + TimeZone.getDefault().getRawOffset()) / 1000L - archive_modtime);\n+            if (b && n3 < this.file_modtime[i]) {\n+                n3 = this.file_modtime[i];\n             }\n             this.file_bits[i] = packingFile.getContents();\n         }\n-        if (isLatest) {\n-            for (int index = 0; index < size; ++index) {\n-                this.file_modtime[index] = latestModtime;\n+        if (b) {\n+            for (int j = 0; j < size; ++j) {\n+                this.file_modtime[j] = n3;\n             }\n         }\n     }\n     \n     public void finaliseBands() {\n         this.file_name = new int[this.fileName.length];\n         for (int i = 0; i < this.file_name.length; ++i) {\n             if (this.fileName[i].equals(this.cpBands.getCPUtf8(\"\"))) {\n-                final Archive.PackingFile packingFile = (Archive.PackingFile)this.fileList.get(i);\n-                final String name = packingFile.getName();\n+                final String name = ((Archive.PackingFile)this.fileList.get(i)).getName();\n                 if (this.options.isPassFile(name)) {\n                     this.fileName[i] = this.cpBands.getCPUtf8(name);\n                     final int[] file_options = this.file_options;\n                     final int n = i;\n                     file_options[n] &= 0xFFFFFFFD;\n                 }\n             }\n             this.file_name[i] = this.fileName[i].getIndex();\n         }\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing file bands...\");\n-        byte[] encodedBand = this.encodeBandInt(\"file_name\", this.file_name, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_name[\" + this.file_name.length);\n-        encodedBand = this.encodeFlags(\"file_size\", this.file_size, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_file_size_hi());\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_size[\" + this.file_size.length);\n+        final byte[] encodeBandInt = this.encodeBandInt(\"file_name\", this.file_name, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from file_name[\" + this.file_name.length);\n+        final byte[] encodeFlags = this.encodeFlags(\"file_size\", this.file_size, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_file_size_hi());\n+        outputStream.write(encodeFlags);\n+        PackingUtils.log(\"Wrote \" + encodeFlags.length + \" bytes from file_size[\" + this.file_size.length);\n         if (this.segmentHeader.have_file_modtime()) {\n-            encodedBand = this.encodeBandInt(\"file_modtime\", this.file_modtime, Codec.DELTA5);\n-            out.write(encodedBand);\n-            PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_modtime[\" + this.file_modtime.length);\n+            final byte[] encodeBandInt2 = this.encodeBandInt(\"file_modtime\", this.file_modtime, Codec.DELTA5);\n+            outputStream.write(encodeBandInt2);\n+            PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from file_modtime[\" + this.file_modtime.length);\n         }\n         if (this.segmentHeader.have_file_options()) {\n-            encodedBand = this.encodeBandInt(\"file_options\", this.file_options, Codec.UNSIGNED5);\n-            out.write(encodedBand);\n-            PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_options[\" + this.file_options.length);\n-        }\n-        encodedBand = this.encodeBandInt(\"file_bits\", this.flatten(this.file_bits), Codec.BYTE1);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from file_bits[\" + this.file_bits.length);\n+            final byte[] encodeBandInt3 = this.encodeBandInt(\"file_options\", this.file_options, Codec.UNSIGNED5);\n+            outputStream.write(encodeBandInt3);\n+            PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from file_options[\" + this.file_options.length);\n+        }\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"file_bits\", this.flatten(this.file_bits), Codec.BYTE1);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from file_bits[\" + this.file_bits.length);\n     }\n     \n-    private int[] flatten(final byte[][] bytes) {\n-        int total = 0;\n-        for (int i = 0; i < bytes.length; ++i) {\n-            total += bytes[i].length;\n-        }\n-        final int[] band = new int[total];\n-        int index = 0;\n-        for (int j = 0; j < bytes.length; ++j) {\n-            for (int k = 0; k < bytes[j].length; ++k) {\n-                band[index++] = (bytes[j][k] & 0xFF);\n+    private int[] flatten(final byte[][] array) {\n+        int n = 0;\n+        for (int i = 0; i < array.length; ++i) {\n+            n += array[i].length;\n+        }\n+        final int[] array2 = new int[n];\n+        int n2 = 0;\n+        for (int j = 0; j < array.length; ++j) {\n+            for (int k = 0; k < array[j].length; ++k) {\n+                array2[n2++] = (array[j][k] & 0xFF);\n             }\n         }\n-        return band;\n+        return array2;\n     }\n }\n"}]}
