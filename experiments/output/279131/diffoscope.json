{"diffoscope-json-version": 1, "source1": "first/TimeUtilsTest.class", "source2": "second/TimeUtilsTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -39,85 +39,77 @@\n         Assertions.assertFalse(TimeUtils.isUnixTime(FileTime.from(Instant.parse((CharSequence)\"1901-12-13T03:14:08Z\"))));\n         Assertions.assertFalse(TimeUtils.isUnixTime(FileTime.from(Instant.parse((CharSequence)\"2038-01-19T03:14:08Z\"))));\n         Assertions.assertFalse(TimeUtils.isUnixTime(FileTime.from(Instant.parse((CharSequence)\"2099-06-30T12:31:42Z\"))));\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"dateToNtfsProvider\" })\n-    public void shouldConvertDateToFileTime(final String instant, final long ignored) {\n-        final Instant parsedInstant = Instant.parse(instant);\n-        final FileTime parsedFileTime = FileTime.from(parsedInstant);\n-        final Date parsedDate = Date.from(parsedInstant);\n-        Assertions.assertEquals((Object)parsedFileTime, (Object)TimeUtils.toFileTime(parsedDate));\n+    public void shouldConvertDateToFileTime(final String text, final long n) {\n+        final Instant parse = Instant.parse(text);\n+        Assertions.assertEquals((Object)FileTime.from(parse), (Object)TimeUtils.toFileTime(Date.from(parse)));\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"dateToNtfsProvider\" })\n-    public void shouldConvertDateToNtfsTime(final String instant, final long ntfsTime) {\n-        final long ntfsMillis = Math.floorDiv(ntfsTime, TimeUtils.HUNDRED_NANOS_PER_MILLISECOND) * TimeUtils.HUNDRED_NANOS_PER_MILLISECOND;\n-        final Date parsed = Date.from(Instant.parse((CharSequence)instant));\n-        final long converted = TimeUtils.toNtfsTime(parsed);\n-        Assertions.assertEquals(ntfsMillis, converted);\n-        Assertions.assertEquals(converted, SevenZArchiveEntry.javaTimeToNtfsTime(parsed));\n+    public void shouldConvertDateToNtfsTime(final String text, final long x) {\n+        final long n = Math.floorDiv(x, TimeUtils.HUNDRED_NANOS_PER_MILLISECOND) * TimeUtils.HUNDRED_NANOS_PER_MILLISECOND;\n+        final Date from = Date.from(Instant.parse((CharSequence)text));\n+        final long ntfsTime = TimeUtils.toNtfsTime(from);\n+        Assertions.assertEquals(n, ntfsTime);\n+        Assertions.assertEquals(ntfsTime, SevenZArchiveEntry.javaTimeToNtfsTime(from));\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"fileTimeToNtfsProvider\" })\n-    public void shouldConvertFileTimeToDate(final String instant, final long ignored) {\n-        final Instant parsedInstant = Instant.parse(instant);\n-        final FileTime parsedFileTime = FileTime.from(parsedInstant);\n-        final Date parsedDate = Date.from(parsedInstant);\n-        Assertions.assertEquals((Object)parsedDate, (Object)TimeUtils.toDate(parsedFileTime));\n+    public void shouldConvertFileTimeToDate(final String text, final long n) {\n+        final Instant parse = Instant.parse(text);\n+        Assertions.assertEquals((Object)Date.from(parse), (Object)TimeUtils.toDate(FileTime.from(parse)));\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"fileTimeToNtfsProvider\" })\n-    public void shouldConvertFileTimeToNtfsTime(final String instant, final long ntfsTime) {\n-        final FileTime parsed = FileTime.from(Instant.parse((CharSequence)instant));\n-        Assertions.assertEquals(ntfsTime, TimeUtils.toNtfsTime(parsed));\n+    public void shouldConvertFileTimeToNtfsTime(final String text, final long n) {\n+        Assertions.assertEquals(n, TimeUtils.toNtfsTime(FileTime.from(Instant.parse((CharSequence)text))));\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"fileTimeToUnixTimeArguments\" })\n-    public void shouldConvertFileTimeToUnixTime(final long expectedUnixTime, final String instant) {\n-        Assertions.assertEquals(expectedUnixTime, TimeUtils.toUnixTime(FileTime.from(Instant.parse((CharSequence)instant))));\n+    public void shouldConvertFileTimeToUnixTime(final long n, final String text) {\n+        Assertions.assertEquals(n, TimeUtils.toUnixTime(FileTime.from(Instant.parse((CharSequence)text))));\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"dateToNtfsProvider\" })\n-    public void shouldConvertNtfsTimeToDate(final String instant, final long ntfsTime) {\n-        final Date converted = TimeUtils.ntfsTimeToDate(ntfsTime);\n-        Assertions.assertEquals((Object)Instant.parse(instant), (Object)converted.toInstant());\n-        Assertions.assertEquals((Object)converted, (Object)SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime));\n+    public void shouldConvertNtfsTimeToDate(final String text, final long n) {\n+        final Date ntfsTimeToDate = TimeUtils.ntfsTimeToDate(n);\n+        Assertions.assertEquals((Object)Instant.parse(text), (Object)ntfsTimeToDate.toInstant());\n+        Assertions.assertEquals((Object)ntfsTimeToDate, (Object)SevenZArchiveEntry.ntfsTimeToJavaTime(n));\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"fileTimeToNtfsProvider\" })\n-    public void shouldConvertNtfsTimeToFileTime(final String instant, final long ntfsTime) {\n-        final FileTime parsed = FileTime.from(Instant.parse((CharSequence)instant));\n-        Assertions.assertEquals((Object)parsed, (Object)TimeUtils.ntfsTimeToFileTime(ntfsTime));\n+    public void shouldConvertNtfsTimeToFileTime(final String text, final long n) {\n+        Assertions.assertEquals((Object)FileTime.from(Instant.parse((CharSequence)text)), (Object)TimeUtils.ntfsTimeToFileTime(n));\n     }\n     \n     @Test\n     public void shouldConvertNullDateToNullFileTime() {\n         Assertions.assertNull((Object)TimeUtils.toFileTime((Date)null));\n     }\n     \n     @Test\n     public void shouldConvertNullFileTimeToNullDate() {\n         Assertions.assertNull((Object)TimeUtils.toDate((FileTime)null));\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"fileTimeToUnixTimeArguments\" })\n-    public void shouldConvertUnixTimeToFileTime(final long unixTime, final String expectedInstant) {\n-        Assertions.assertEquals((Object)Instant.parse(expectedInstant), (Object)TimeUtils.unixTimeToFileTime(unixTime).toInstant());\n+    public void shouldConvertUnixTimeToFileTime(final long n, final String text) {\n+        Assertions.assertEquals((Object)Instant.parse(text), (Object)TimeUtils.unixTimeToFileTime(n).toInstant());\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"truncateFileTimeProvider\" })\n-    public void shouldTruncateFileTimeToHundredNanos(final String original, final String truncated) {\n-        final FileTime originalTime = FileTime.from(Instant.parse((CharSequence)original));\n-        final FileTime truncatedTime = FileTime.from(Instant.parse((CharSequence)truncated));\n-        Assertions.assertEquals((Object)truncatedTime, (Object)TimeUtils.truncateToHundredNanos(originalTime));\n+    public void shouldTruncateFileTimeToHundredNanos(final String text, final String text2) {\n+        Assertions.assertEquals((Object)FileTime.from(Instant.parse((CharSequence)text2)), (Object)TimeUtils.truncateToHundredNanos(FileTime.from(Instant.parse((CharSequence)text))));\n     }\n }\n"}]}
