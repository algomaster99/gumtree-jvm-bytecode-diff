{"diffoscope-json-version": 1, "source1": "first/IOExceptionList.class", "source2": "second/IOExceptionList.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,47 +8,47 @@\n import java.io.IOException;\n \n public class IOExceptionList extends IOException implements Iterable<Throwable>\n {\n     private static final long serialVersionUID = 1L;\n     private final List<? extends Throwable> causeList;\n     \n-    public static void checkEmpty(final List<? extends Throwable> causeList, final Object message) throws IOExceptionList {\n-        if (!isEmpty(causeList)) {\n-            throw new IOExceptionList(Objects.toString(message, null), causeList);\n+    public static void checkEmpty(final List<? extends Throwable> list, final Object o) throws IOExceptionList {\n+        if (!isEmpty(list)) {\n+            throw new IOExceptionList(Objects.toString(o, null), list);\n         }\n     }\n     \n-    private static boolean isEmpty(final List<? extends Throwable> causeList) {\n-        return size(causeList) == 0;\n+    private static boolean isEmpty(final List<? extends Throwable> list) {\n+        return size(list) == 0;\n     }\n     \n-    private static int size(final List<? extends Throwable> causeList) {\n-        return (causeList != null) ? causeList.size() : 0;\n+    private static int size(final List<? extends Throwable> list) {\n+        return (list != null) ? list.size() : 0;\n     }\n     \n-    private static String toMessage(final List<? extends Throwable> causeList) {\n-        return String.format(\"%,d exception(s): %s\", Integer.valueOf(size(causeList)), causeList);\n+    private static String toMessage(final List<? extends Throwable> list) {\n+        return String.format(\"%,d exception(s): %s\", Integer.valueOf(size(list)), list);\n     }\n     \n-    public IOExceptionList(final List<? extends Throwable> causeList) {\n-        this(toMessage(causeList), causeList);\n+    public IOExceptionList(final List<? extends Throwable> list) {\n+        this(toMessage(list), list);\n     }\n     \n-    public IOExceptionList(final String message, final List<? extends Throwable> causeList) {\n-        super((message != null) ? message : toMessage(causeList), isEmpty(causeList) ? null : ((Throwable)causeList.get(0)));\n-        this.causeList = ((causeList == null) ? Collections.emptyList() : causeList);\n+    public IOExceptionList(final String s, final List<? extends Throwable> list) {\n+        super((s != null) ? s : toMessage(list), isEmpty(list) ? null : ((Throwable)list.get(0)));\n+        this.causeList = ((list == null) ? Collections.emptyList() : list);\n     }\n     \n-    public <T extends Throwable> T getCause(final int index) {\n-        return (T)this.causeList.get(index);\n+    public <T extends Throwable> T getCause(final int n) {\n+        return (T)this.causeList.get(n);\n     }\n     \n-    public <T extends Throwable> T getCause(final int index, final Class<T> clazz) {\n-        return clazz.cast(this.getCause(index));\n+    public <T extends Throwable> T getCause(final int n, final Class<T> clazz) {\n+        return clazz.cast(this.getCause(n));\n     }\n     \n     public <T extends Throwable> List<T> getCauseList() {\n         return (List<T>)this.causeList;\n     }\n     \n     public <T extends Throwable> List<T> getCauseList(final Class<T> clazz) {\n"}]}
