{"diffoscope-json-version": 1, "source1": "first/JarArchiveOutputStream.class", "source2": "second/JarArchiveOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,80 +1,80 @@\n-  SHA-256 checksum 81082e2390a826248416c06cdee3e8c504c5d565795996e91ecb24d05cac79f1\n+  SHA-256 checksum 0acee2bbf2d4bf826b2c819f0510bc01e92b6ebe80faf9eb1c8862761929e8d1\n   Compiled from \"JarArchiveOutputStream.java\"\n public class org.apache.commons.compress.archivers.jar.JarArchiveOutputStream extends org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #8                          // org/apache/commons/compress/archivers/jar/JarArchiveOutputStream\n-  super_class: #2                         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  this_class: #1                          // org/apache/commons/compress/archivers/jar/JarArchiveOutputStream\n+  super_class: #3                         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n   interfaces: 0, fields: 1, methods: 3, attributes: 1\n Constant pool:\n-   #1 = Methodref          #2.#3          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #2 = Class              #4             // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #3 = NameAndType        #5:#6          // \"<init>\":(Ljava/io/OutputStream;)V\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/jar/JarArchiveOutputStream\n+   #2 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveOutputStream\n+   #3 = Class              #4             // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n    #4 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #5 = Utf8               <init>\n-   #6 = Utf8               (Ljava/io/OutputStream;)V\n-   #7 = Methodref          #8.#9          // org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.setEncoding:(Ljava/lang/String;)V\n-   #8 = Class              #10            // org/apache/commons/compress/archivers/jar/JarArchiveOutputStream\n-   #9 = NameAndType        #11:#12        // setEncoding:(Ljava/lang/String;)V\n-  #10 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveOutputStream\n-  #11 = Utf8               setEncoding\n-  #12 = Utf8               (Ljava/lang/String;)V\n-  #13 = Fieldref           #8.#14         // org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.jarMarkerAdded:Z\n-  #14 = NameAndType        #15:#16        // jarMarkerAdded:Z\n-  #15 = Utf8               jarMarkerAdded\n-  #16 = Utf8               Z\n-  #17 = Class              #18            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #18 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #19 = Methodref          #20.#21        // org/apache/commons/compress/archivers/zip/JarMarker.getInstance:()Lorg/apache/commons/compress/archivers/zip/JarMarker;\n-  #20 = Class              #22            // org/apache/commons/compress/archivers/zip/JarMarker\n-  #21 = NameAndType        #23:#24        // getInstance:()Lorg/apache/commons/compress/archivers/zip/JarMarker;\n-  #22 = Utf8               org/apache/commons/compress/archivers/zip/JarMarker\n-  #23 = Utf8               getInstance\n-  #24 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/JarMarker;\n-  #25 = Methodref          #17.#26        // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #26 = NameAndType        #27:#28        // addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #27 = Utf8               addAsFirstExtraField\n-  #28 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #29 = Methodref          #2.#30         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #30 = NameAndType        #31:#32        // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #31 = Utf8               putArchiveEntry\n-  #32 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #33 = Utf8               Code\n-  #34 = Utf8               LineNumberTable\n-  #35 = Utf8               LocalVariableTable\n-  #36 = Utf8               this\n-  #37 = Utf8               Lorg/apache/commons/compress/archivers/jar/JarArchiveOutputStream;\n-  #38 = Utf8               out\n-  #39 = Utf8               Ljava/io/OutputStream;\n-  #40 = Utf8               (Ljava/io/OutputStream;Ljava/lang/String;)V\n-  #41 = Utf8               encoding\n-  #42 = Utf8               Ljava/lang/String;\n-  #43 = Utf8               ze\n-  #44 = Utf8               Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #45 = Utf8               StackMapTable\n-  #46 = Utf8               Exceptions\n-  #47 = Class              #48            // java/io/IOException\n-  #48 = Utf8               java/io/IOException\n+   #5 = Utf8               jarMarkerAdded\n+   #6 = Utf8               Z\n+   #7 = Utf8               <init>\n+   #8 = Utf8               (Ljava/io/OutputStream;)V\n+   #9 = Utf8               Code\n+  #10 = Methodref          #3.#11         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+  #11 = NameAndType        #7:#8          // \"<init>\":(Ljava/io/OutputStream;)V\n+  #12 = Utf8               LineNumberTable\n+  #13 = Utf8               LocalVariableTable\n+  #14 = Utf8               this\n+  #15 = Utf8               Lorg/apache/commons/compress/archivers/jar/JarArchiveOutputStream;\n+  #16 = Utf8               out\n+  #17 = Utf8               Ljava/io/OutputStream;\n+  #18 = Utf8               (Ljava/io/OutputStream;Ljava/lang/String;)V\n+  #19 = Methodref          #1.#20         // org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.setEncoding:(Ljava/lang/String;)V\n+  #20 = NameAndType        #21:#22        // setEncoding:(Ljava/lang/String;)V\n+  #21 = Utf8               setEncoding\n+  #22 = Utf8               (Ljava/lang/String;)V\n+  #23 = Utf8               encoding\n+  #24 = Utf8               Ljava/lang/String;\n+  #25 = Utf8               putArchiveEntry\n+  #26 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #27 = Utf8               Exceptions\n+  #28 = Class              #29            // java/io/IOException\n+  #29 = Utf8               java/io/IOException\n+  #30 = Fieldref           #1.#31         // org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.jarMarkerAdded:Z\n+  #31 = NameAndType        #5:#6          // jarMarkerAdded:Z\n+  #32 = Class              #33            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #33 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #34 = Methodref          #35.#37        // org/apache/commons/compress/archivers/zip/JarMarker.getInstance:()Lorg/apache/commons/compress/archivers/zip/JarMarker;\n+  #35 = Class              #36            // org/apache/commons/compress/archivers/zip/JarMarker\n+  #36 = Utf8               org/apache/commons/compress/archivers/zip/JarMarker\n+  #37 = NameAndType        #38:#39        // getInstance:()Lorg/apache/commons/compress/archivers/zip/JarMarker;\n+  #38 = Utf8               getInstance\n+  #39 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/JarMarker;\n+  #40 = Methodref          #32.#41        // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #41 = NameAndType        #42:#43        // addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #42 = Utf8               addAsFirstExtraField\n+  #43 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #44 = Methodref          #3.#45         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #45 = NameAndType        #25:#26        // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #46 = Utf8               ze\n+  #47 = Utf8               Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #48 = Utf8               StackMapTable\n   #49 = Utf8               SourceFile\n   #50 = Utf8               JarArchiveOutputStream.java\n {\n   private boolean jarMarkerAdded;\n     descriptor: Z\n     flags: (0x0002) ACC_PRIVATE\n \n   public org.apache.commons.compress.archivers.jar.JarArchiveOutputStream(java.io.OutputStream);\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #1                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+         2: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n          5: return\n       LineNumberTable:\n         line 41: 0\n         line 42: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveOutputStream;\n@@ -83,57 +83,57 @@\n   public org.apache.commons.compress.archivers.jar.JarArchiveOutputStream(java.io.OutputStream, java.lang.String);\n     descriptor: (Ljava/io/OutputStream;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #1                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+         2: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n          5: aload_0\n          6: aload_2\n-         7: invokevirtual #7                  // Method setEncoding:(Ljava/lang/String;)V\n+         7: invokevirtual #19                 // Method setEncoding:(Ljava/lang/String;)V\n         10: return\n       LineNumberTable:\n         line 52: 0\n         line 53: 5\n         line 54: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveOutputStream;\n             0      11     1   out   Ljava/io/OutputStream;\n             0      11     2 encoding   Ljava/lang/String;\n \n   public void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #13                 // Field jarMarkerAdded:Z\n+         1: getfield      #30                 // Field jarMarkerAdded:Z\n          4: ifne          22\n          7: aload_1\n-         8: checkcast     #17                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-        11: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/JarMarker.getInstance:()Lorg/apache/commons/compress/archivers/zip/JarMarker;\n-        14: invokevirtual #25                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+         8: checkcast     #32                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+        11: invokestatic  #34                 // Method org/apache/commons/compress/archivers/zip/JarMarker.getInstance:()Lorg/apache/commons/compress/archivers/zip/JarMarker;\n+        14: invokevirtual #40                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n         17: aload_0\n         18: iconst_1\n-        19: putfield      #13                 // Field jarMarkerAdded:Z\n+        19: putfield      #30                 // Field jarMarkerAdded:Z\n         22: aload_0\n         23: aload_1\n-        24: invokespecial #29                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+        24: invokespecial #44                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n         27: return\n       LineNumberTable:\n         line 59: 0\n         line 60: 7\n         line 61: 17\n         line 63: 22\n         line 64: 27\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      28     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveOutputStream;\n             0      28     1    ze   Lorg/apache/commons/compress/archivers/ArchiveEntry;\n       StackMapTable: number_of_entries = 1\n         frame_type = 22 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"JarArchiveOutputStream.java\"\n"}]}
