{"diffoscope-json-version": 1, "source1": "first/OperatorWrapCheck.class", "source2": "second/OperatorWrapCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,128 +16,127 @@\n     public static final String MSG_LINE_PREVIOUS = \"line.previous\";\n     private WrapOption option;\n     \n     public OperatorWrapCheck() {\n         this.option = WrapOption.NL;\n     }\n     \n-    public void setOption(final String optionStr) {\n-        this.option = WrapOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));\n+    public void setOption(final String s) {\n+        this.option = WrapOption.valueOf(s.trim().toUpperCase(Locale.ENGLISH));\n     }\n     \n     public int[] getDefaultTokens() {\n         return new int[] { 109, 82, 116, 115, 127, 125, 126, 60, 128, 123, 124, 120, 118, 122, 119, 117, 113, 112, 110, 114, 111, 174, 121 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 109, 82, 116, 115, 127, 125, 126, 60, 128, 123, 124, 120, 118, 122, 119, 117, 113, 112, 110, 114, 111, 121, 174, 80, 101, 98, 99, 100, 102, 103, 104, 105, 107, 108, 106, 180 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (isTargetNode(ast)) {\n-            if (this.option == WrapOption.NL && isNewLineModeViolation(ast)) {\n-                this.log(ast, \"line.new\", new Object[] { ast.getText() });\n+    public void visitToken(final DetailAST detailAST) {\n+        if (isTargetNode(detailAST)) {\n+            if (this.option == WrapOption.NL && isNewLineModeViolation(detailAST)) {\n+                this.log(detailAST, \"line.new\", new Object[] { detailAST.getText() });\n             }\n-            else if (this.option == WrapOption.EOL && isEndOfLineModeViolation(ast)) {\n-                this.log(ast, \"line.previous\", new Object[] { ast.getText() });\n+            else if (this.option == WrapOption.EOL && isEndOfLineModeViolation(detailAST)) {\n+                this.log(detailAST, \"line.previous\", new Object[] { detailAST.getText() });\n             }\n         }\n     }\n     \n-    private static boolean isTargetNode(final DetailAST node) {\n-        boolean result;\n-        if (node.getType() == 82) {\n-            result = !isColonFromLabel(node);\n+    private static boolean isTargetNode(final DetailAST detailAST) {\n+        boolean b;\n+        if (detailAST.getType() == 82) {\n+            b = !isColonFromLabel(detailAST);\n         }\n         else {\n-            result = (node.getType() != 60 || node.hasChildren());\n+            b = (detailAST.getType() != 60 || detailAST.hasChildren());\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isNewLineModeViolation(final DetailAST ast) {\n-        return TokenUtil.areOnSameLine(ast, getLeftNode(ast)) && !TokenUtil.areOnSameLine(ast, getRightNode(ast));\n+    private static boolean isNewLineModeViolation(final DetailAST detailAST) {\n+        return TokenUtil.areOnSameLine(detailAST, getLeftNode(detailAST)) && !TokenUtil.areOnSameLine(detailAST, getRightNode(detailAST));\n     }\n     \n-    private static boolean isEndOfLineModeViolation(final DetailAST ast) {\n-        return !TokenUtil.areOnSameLine(ast, getLeftNode(ast));\n+    private static boolean isEndOfLineModeViolation(final DetailAST detailAST) {\n+        return !TokenUtil.areOnSameLine(detailAST, getLeftNode(detailAST));\n     }\n     \n-    private static boolean isColonFromLabel(final DetailAST node) {\n-        return TokenUtil.isOfType(node.getParent(), new int[] { 22, 93, 94 });\n+    private static boolean isColonFromLabel(final DetailAST detailAST) {\n+        return TokenUtil.isOfType(detailAST.getParent(), new int[] { 22, 93, 94 });\n     }\n     \n-    private static boolean isAssignToVariable(final DetailAST node) {\n-        return TokenUtil.isOfType(node.getParent(), new int[] { 10, 178 });\n+    private static boolean isAssignToVariable(final DetailAST detailAST) {\n+        return TokenUtil.isOfType(detailAST.getParent(), new int[] { 10, 178 });\n     }\n     \n-    private static DetailAST getLeftNode(final DetailAST node) {\n-        DetailAST result;\n-        if (node.getFirstChild() == null || isAssignToVariable(node)) {\n-            result = node.getPreviousSibling();\n+    private static DetailAST getLeftNode(final DetailAST detailAST) {\n+        DetailAST detailAST2;\n+        if (detailAST.getFirstChild() == null || isAssignToVariable(detailAST)) {\n+            detailAST2 = detailAST.getPreviousSibling();\n         }\n-        else if (isInPatternDefinition(node)) {\n-            result = node.getFirstChild();\n+        else if (isInPatternDefinition(detailAST)) {\n+            detailAST2 = detailAST.getFirstChild();\n         }\n         else {\n-            result = adjustParens(node.getFirstChild(), DetailAST::getNextSibling);\n+            detailAST2 = adjustParens(detailAST.getFirstChild(), DetailAST::getNextSibling);\n         }\n-        while (result.getLastChild() != null) {\n-            result = result.getLastChild();\n+        while (detailAST2.getLastChild() != null) {\n+            detailAST2 = detailAST2.getLastChild();\n         }\n-        return result;\n+        return detailAST2;\n     }\n     \n-    private static boolean isInPatternDefinition(final DetailAST node) {\n-        DetailAST parent = node;\n-        final int[] tokensToStopOn = { 213, 28, 178, 1 };\n+    private static boolean isInPatternDefinition(final DetailAST detailAST) {\n+        DetailAST parent = detailAST;\n         do {\n             parent = parent.getParent();\n-        } while (!TokenUtil.isOfType(parent, tokensToStopOn));\n+        } while (!TokenUtil.isOfType(parent, new int[] { 213, 28, 178, 1 }));\n         return parent.getType() == 213;\n     }\n     \n-    private static DetailAST getRightNode(final DetailAST node) {\n-        DetailAST result;\n-        if (node.getLastChild() == null) {\n-            result = node.getNextSibling();\n+    private static DetailAST getRightNode(final DetailAST detailAST) {\n+        DetailAST detailAST2;\n+        if (detailAST.getLastChild() == null) {\n+            detailAST2 = detailAST.getNextSibling();\n         }\n         else {\n-            DetailAST rightNode;\n-            if (node.getType() == 109) {\n-                rightNode = node.findFirstToken(82).getPreviousSibling();\n+            DetailAST detailAST3;\n+            if (detailAST.getType() == 109) {\n+                detailAST3 = detailAST.findFirstToken(82).getPreviousSibling();\n             }\n             else {\n-                rightNode = node.getLastChild();\n+                detailAST3 = detailAST.getLastChild();\n             }\n-            result = adjustParens(rightNode, DetailAST::getPreviousSibling);\n+            detailAST2 = adjustParens(detailAST3, DetailAST::getPreviousSibling);\n         }\n-        if (!TokenUtil.isOfType(result, new int[] { 29, 162 })) {\n-            while (result.getFirstChild() != null) {\n-                result = result.getFirstChild();\n+        if (!TokenUtil.isOfType(detailAST2, new int[] { 29, 162 })) {\n+            while (detailAST2.getFirstChild() != null) {\n+                detailAST2 = detailAST2.getFirstChild();\n             }\n         }\n-        return result;\n+        return detailAST2;\n     }\n     \n-    private static DetailAST adjustParens(final DetailAST node, final UnaryOperator<DetailAST> step) {\n-        DetailAST result = node;\n-        int accumulator = 0;\n+    private static DetailAST adjustParens(final DetailAST detailAST, final UnaryOperator<DetailAST> unaryOperator) {\n+        DetailAST detailAST2 = detailAST;\n+        int n = 0;\n         while (true) {\n-            if (result.getType() == 76) {\n-                --accumulator;\n+            if (detailAST2.getType() == 76) {\n+                --n;\n             }\n-            else if (result.getType() == 77) {\n-                ++accumulator;\n+            else if (detailAST2.getType() == 77) {\n+                ++n;\n             }\n-            if (accumulator == 0) {\n+            if (n == 0) {\n                 break;\n             }\n-            result = step.apply(result);\n+            detailAST2 = (DetailAST)unaryOperator.apply(detailAST2);\n         }\n-        return result;\n+        return detailAST2;\n     }\n }\n"}]}
