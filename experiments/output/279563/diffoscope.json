{"diffoscope-json-version": 1, "source1": "first/ArchiveUtils.class", "source2": "second/ArchiveUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,120 +5,120 @@\n import java.util.Arrays;\n import java.nio.charset.StandardCharsets;\n \n public class ArchiveUtils\n {\n     private static final int MAX_SANITIZED_NAME_LENGTH = 255;\n     \n-    public static boolean isArrayZero(final byte[] a, final int size) {\n-        for (int i = 0; i < size; ++i) {\n-            if (a[i] != 0) {\n+    public static boolean isArrayZero(final byte[] array, final int n) {\n+        for (int i = 0; i < n; ++i) {\n+            if (array[i] != 0) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public static boolean isEqual(final byte[] buffer1, final byte[] buffer2) {\n-        return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false);\n+    public static boolean isEqual(final byte[] array, final byte[] array2) {\n+        return isEqual(array, 0, array.length, array2, 0, array2.length, false);\n     }\n     \n-    public static boolean isEqual(final byte[] buffer1, final byte[] buffer2, final boolean ignoreTrailingNulls) {\n-        return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);\n+    public static boolean isEqual(final byte[] array, final byte[] array2, final boolean b) {\n+        return isEqual(array, 0, array.length, array2, 0, array2.length, b);\n     }\n     \n-    public static boolean isEqual(final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2) {\n-        return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, false);\n+    public static boolean isEqual(final byte[] array, final int n, final int n2, final byte[] array2, final int n3, final int n4) {\n+        return isEqual(array, n, n2, array2, n3, n4, false);\n     }\n     \n-    public static boolean isEqual(final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2, final boolean ignoreTrailingNulls) {\n-        for (int minLen = Math.min(length1, length2), i = 0; i < minLen; ++i) {\n-            if (buffer1[offset1 + i] != buffer2[offset2 + i]) {\n+    public static boolean isEqual(final byte[] array, final int n, final int a, final byte[] array2, final int n2, final int b, final boolean b2) {\n+        for (int min = Math.min(a, b), i = 0; i < min; ++i) {\n+            if (array[n + i] != array2[n2 + i]) {\n                 return false;\n             }\n         }\n-        if (length1 == length2) {\n+        if (a == b) {\n             return true;\n         }\n-        if (ignoreTrailingNulls) {\n-            if (length1 > length2) {\n-                for (int i = length2; i < length1; ++i) {\n-                    if (buffer1[offset1 + i] != 0) {\n+        if (b2) {\n+            if (a > b) {\n+                for (int j = b; j < a; ++j) {\n+                    if (array[n + j] != 0) {\n                         return false;\n                     }\n                 }\n             }\n             else {\n-                for (int i = length1; i < length2; ++i) {\n-                    if (buffer2[offset2 + i] != 0) {\n+                for (int k = a; k < b; ++k) {\n+                    if (array2[n2 + k] != 0) {\n                         return false;\n                     }\n                 }\n             }\n             return true;\n         }\n         return false;\n     }\n     \n-    public static boolean isEqualWithNull(final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2) {\n-        return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, true);\n+    public static boolean isEqualWithNull(final byte[] array, final int n, final int n2, final byte[] array2, final int n3, final int n4) {\n+        return isEqual(array, n, n2, array2, n3, n4, true);\n     }\n     \n-    public static boolean matchAsciiBuffer(final String expected, final byte[] buffer) {\n-        return matchAsciiBuffer(expected, buffer, 0, buffer.length);\n+    public static boolean matchAsciiBuffer(final String s, final byte[] array) {\n+        return matchAsciiBuffer(s, array, 0, array.length);\n     }\n     \n-    public static boolean matchAsciiBuffer(final String expected, final byte[] buffer, final int offset, final int length) {\n-        final byte[] buffer2 = expected.getBytes(StandardCharsets.US_ASCII);\n-        return isEqual(buffer2, 0, buffer2.length, buffer, offset, length, false);\n+    public static boolean matchAsciiBuffer(final String s, final byte[] array, final int n, final int n2) {\n+        final byte[] bytes = s.getBytes(StandardCharsets.US_ASCII);\n+        return isEqual(bytes, 0, bytes.length, array, n, n2, false);\n     }\n     \n     public static String sanitize(final String s) {\n-        final char[] cs = s.toCharArray();\n-        final char[] chars = (cs.length <= 255) ? cs : Arrays.copyOf(cs, 255);\n-        if (cs.length > 255) {\n-            Arrays.fill(chars, 252, 255, '.');\n+        final char[] charArray = s.toCharArray();\n+        final char[] a = (charArray.length <= 255) ? charArray : Arrays.copyOf(charArray, 255);\n+        if (charArray.length > 255) {\n+            Arrays.fill(a, 252, 255, '.');\n         }\n         final StringBuilder sb = new StringBuilder();\n-        for (final char c : chars) {\n+        for (final char c : a) {\n             Label_0123: {\n                 if (!Character.isISOControl(c)) {\n-                    final Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n-                    if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n+                    final Character.UnicodeBlock of = Character.UnicodeBlock.of(c);\n+                    if (of != null && of != Character.UnicodeBlock.SPECIALS) {\n                         sb.append(c);\n                         break Label_0123;\n                     }\n                 }\n                 sb.append('?');\n             }\n         }\n         return sb.toString();\n     }\n     \n-    public static byte[] toAsciiBytes(final String inputString) {\n-        return inputString.getBytes(StandardCharsets.US_ASCII);\n+    public static byte[] toAsciiBytes(final String s) {\n+        return s.getBytes(StandardCharsets.US_ASCII);\n     }\n     \n-    public static String toAsciiString(final byte[] inputBytes) {\n-        return new String(inputBytes, StandardCharsets.US_ASCII);\n+    public static String toAsciiString(final byte[] bytes) {\n+        return new String(bytes, StandardCharsets.US_ASCII);\n     }\n     \n-    public static String toAsciiString(final byte[] inputBytes, final int offset, final int length) {\n-        return new String(inputBytes, offset, length, StandardCharsets.US_ASCII);\n+    public static String toAsciiString(final byte[] bytes, final int offset, final int length) {\n+        return new String(bytes, offset, length, StandardCharsets.US_ASCII);\n     }\n     \n-    public static String toString(final ArchiveEntry entry) {\n+    public static String toString(final ArchiveEntry archiveEntry) {\n         final StringBuilder sb = new StringBuilder();\n-        sb.append(entry.isDirectory() ? 'd' : '-');\n-        final String size = Long.toString(entry.getSize());\n+        sb.append(archiveEntry.isDirectory() ? 'd' : '-');\n+        final String string = Long.toString(archiveEntry.getSize());\n         sb.append(' ');\n-        for (int i = 7; i > size.length(); --i) {\n+        for (int i = 7; i > string.length(); --i) {\n             sb.append(' ');\n         }\n-        sb.append(size);\n-        sb.append(' ').append(entry.getName());\n+        sb.append(string);\n+        sb.append(' ').append(archiveEntry.getName());\n         return sb.toString();\n     }\n     \n     private ArchiveUtils() {\n     }\n }\n"}]}
