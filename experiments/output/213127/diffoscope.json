{"diffoscope-json-version": 1, "source1": "first/Functions.class", "source2": "second/Functions.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,145 +3,145 @@\n \n import java.lang.reflect.UndeclaredThrowableException;\n import java.io.UncheckedIOException;\n import java.io.IOException;\n \n public class Functions\n {\n-    public static <T extends Throwable> void run(final Functions.FailableRunnable<T> pRunnable) {\n+    public static <T extends Throwable> void run(final Functions.FailableRunnable<T> failableRunnable) {\n         try {\n-            pRunnable.run();\n+            failableRunnable.run();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <O, T extends Throwable> O call(final Functions.FailableCallable<O, T> pCallable) {\n+    public static <O, T extends Throwable> O call(final Functions.FailableCallable<O, T> failableCallable) {\n         try {\n-            return (O)pCallable.call();\n+            return (O)failableCallable.call();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <O, T extends Throwable> void accept(final Functions.FailableConsumer<O, T> pConsumer, final O pObject) {\n+    public static <O, T extends Throwable> void accept(final Functions.FailableConsumer<O, T> failableConsumer, final O o) {\n         try {\n-            pConsumer.accept((Object)pObject);\n+            failableConsumer.accept((Object)o);\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <O1, O2, T extends Throwable> void accept(final Functions.FailableBiConsumer<O1, O2, T> pConsumer, final O1 pObject1, final O2 pObject2) {\n+    public static <O1, O2, T extends Throwable> void accept(final Functions.FailableBiConsumer<O1, O2, T> failableBiConsumer, final O1 o1, final O2 o2) {\n         try {\n-            pConsumer.accept((Object)pObject1, (Object)pObject2);\n+            failableBiConsumer.accept((Object)o1, (Object)o2);\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <I, O, T extends Throwable> O apply(final Functions.FailableFunction<I, O, T> pFunction, final I pInput) {\n+    public static <I, O, T extends Throwable> O apply(final Functions.FailableFunction<I, O, T> failableFunction, final I n) {\n         try {\n-            return (O)pFunction.apply((Object)pInput);\n+            return (O)failableFunction.apply((Object)n);\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <I1, I2, O, T extends Throwable> O apply(final Functions.FailableBiFunction<I1, I2, O, T> pFunction, final I1 pInput1, final I2 pInput2) {\n+    public static <I1, I2, O, T extends Throwable> O apply(final Functions.FailableBiFunction<I1, I2, O, T> failableBiFunction, final I1 i1, final I2 i2) {\n         try {\n-            return (O)pFunction.apply((Object)pInput1, (Object)pInput2);\n+            return (O)failableBiFunction.apply((Object)i1, (Object)i2);\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <O, T extends Throwable> boolean test(final Functions.FailablePredicate<O, T> pPredicate, final O pObject) {\n+    public static <O, T extends Throwable> boolean test(final Functions.FailablePredicate<O, T> failablePredicate, final O o) {\n         try {\n-            return pPredicate.test((Object)pObject);\n+            return failablePredicate.test((Object)o);\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <O1, O2, T extends Throwable> boolean test(final Functions.FailableBiPredicate<O1, O2, T> pPredicate, final O1 pObject1, final O2 pObject2) {\n+    public static <O1, O2, T extends Throwable> boolean test(final Functions.FailableBiPredicate<O1, O2, T> failableBiPredicate, final O1 o1, final O2 o2) {\n         try {\n-            return pPredicate.test((Object)pObject1, (Object)pObject2);\n+            return failableBiPredicate.test((Object)o1, (Object)o2);\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n     @SafeVarargs\n-    public static void tryWithResources(final Functions.FailableRunnable<? extends Throwable> pAction, final Functions.FailableConsumer<Throwable, ? extends Throwable> pErrorHandler, final Functions.FailableRunnable<? extends Throwable>... pResources) {\n-        Functions.FailableConsumer<Throwable, ? extends Throwable> errorHandler;\n-        if (pErrorHandler == null) {\n-            errorHandler = (Functions.FailableConsumer<Throwable, ? extends Throwable>)(t -> rethrow(t));\n+    public static void tryWithResources(final Functions.FailableRunnable<? extends Throwable> failableRunnable, final Functions.FailableConsumer<Throwable, ? extends Throwable> failableConsumer, final Functions.FailableRunnable<? extends Throwable>... array) {\n+        Functions.FailableConsumer failableConsumer2;\n+        if (failableConsumer == null) {\n+            failableConsumer2 = (t -> rethrow(t));\n         }\n         else {\n-            errorHandler = pErrorHandler;\n+            failableConsumer2 = failableConsumer;\n         }\n-        if (pResources != null) {\n-            for (final Functions.FailableRunnable<? extends Throwable> runnable : pResources) {\n-                if (runnable == null) {\n+        if (array != null) {\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                if (array[i] == null) {\n                     throw new NullPointerException(\"A resource action must not be null.\");\n                 }\n             }\n         }\n-        Throwable th = null;\n+        Object o = null;\n         try {\n-            pAction.run();\n+            failableRunnable.run();\n         }\n         catch (final Throwable t) {\n-            th = t;\n+            o = t;\n         }\n-        if (pResources != null) {\n-            for (final Functions.FailableRunnable<?> runnable2 : pResources) {\n+        if (array != null) {\n+            for (final Functions.FailableRunnable<? extends Throwable> failableRunnable2 : array) {\n                 try {\n-                    runnable2.run();\n+                    failableRunnable2.run();\n                 }\n                 catch (final Throwable t2) {\n-                    if (th == null) {\n-                        th = t2;\n+                    if (o == null) {\n+                        o = t2;\n                     }\n                 }\n             }\n         }\n-        if (th != null) {\n+        if (o != null) {\n             try {\n-                errorHandler.accept((Object)th);\n+                failableConsumer2.accept(o);\n             }\n-            catch (final Throwable t) {\n-                throw rethrow(t);\n+            catch (final Throwable t3) {\n+                throw rethrow(t3);\n             }\n         }\n     }\n     \n     @SafeVarargs\n-    public static void tryWithResources(final Functions.FailableRunnable<? extends Throwable> pAction, final Functions.FailableRunnable<? extends Throwable>... pResources) {\n-        tryWithResources(pAction, (Functions.FailableConsumer<Throwable, ? extends Throwable>)null, pResources);\n+    public static void tryWithResources(final Functions.FailableRunnable<? extends Throwable> failableRunnable, final Functions.FailableRunnable<? extends Throwable>... array) {\n+        tryWithResources(failableRunnable, (Functions.FailableConsumer<Throwable, ? extends Throwable>)null, array);\n     }\n     \n-    public static RuntimeException rethrow(final Throwable pThrowable) {\n-        if (pThrowable == null) {\n+    public static RuntimeException rethrow(final Throwable undeclaredThrowable) {\n+        if (undeclaredThrowable == null) {\n             throw new NullPointerException(\"The Throwable must not be null.\");\n         }\n-        if (pThrowable instanceof RuntimeException) {\n-            throw (RuntimeException)pThrowable;\n+        if (undeclaredThrowable instanceof RuntimeException) {\n+            throw (RuntimeException)undeclaredThrowable;\n         }\n-        if (pThrowable instanceof Error) {\n-            throw (Error)pThrowable;\n+        if (undeclaredThrowable instanceof Error) {\n+            throw (Error)undeclaredThrowable;\n         }\n-        if (pThrowable instanceof IOException) {\n-            throw new UncheckedIOException((IOException)pThrowable);\n+        if (undeclaredThrowable instanceof IOException) {\n+            throw new UncheckedIOException((IOException)undeclaredThrowable);\n         }\n-        throw new UndeclaredThrowableException(pThrowable);\n+        throw new UndeclaredThrowableException(undeclaredThrowable);\n     }\n }\n"}]}
