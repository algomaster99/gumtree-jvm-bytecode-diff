{"diffoscope-json-version": 1, "source1": "first/VMSFTPEntryParser.class", "source2": "second/VMSFTPEntryParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,107 +16,104 @@\n     private static final String DEFAULT_DATE_FORMAT = \"d-MMM-yyyy HH:mm:ss\";\n     private static final String REGEX = \"(.*?;[0-9]+)\\\\s*(\\\\d+)(?:/\\\\d+)?\\\\s*(\\\\S+)\\\\s+(\\\\S+)\\\\s+\\\\[(([0-9$A-Za-z_]+)|([0-9$A-Za-z_]+),([0-9$a-zA-Z_]+))\\\\]?\\\\s*\\\\([a-zA-Z]*,([a-zA-Z]*),([a-zA-Z]*),([a-zA-Z]*)\\\\)\";\n     \n     public VMSFTPEntryParser() {\n         this(null);\n     }\n     \n-    public VMSFTPEntryParser(final FTPClientConfig config) {\n+    public VMSFTPEntryParser(final FTPClientConfig ftpClientConfig) {\n         super(\"(.*?;[0-9]+)\\\\s*(\\\\d+)(?:/\\\\d+)?\\\\s*(\\\\S+)\\\\s+(\\\\S+)\\\\s+\\\\[(([0-9$A-Za-z_]+)|([0-9$A-Za-z_]+),([0-9$a-zA-Z_]+))\\\\]?\\\\s*\\\\([a-zA-Z]*,([a-zA-Z]*),([a-zA-Z]*),([a-zA-Z]*)\\\\)\");\n-        this.configure(config);\n+        this.configure(ftpClientConfig);\n     }\n     \n-    public FTPFile parseFTPEntry(final String entry) {\n-        final long longBlock = 512L;\n-        if (this.matches(entry)) {\n-            final FTPFile f = new FTPFile();\n-            f.setRawListing(entry);\n-            String name = this.group(1);\n-            final String size = this.group(2);\n-            final String datestr = this.group(3) + \" \" + this.group(4);\n-            final String owner = this.group(5);\n-            final String[] permissions = { this.group(9), this.group(10), this.group(11) };\n+    public FTPFile parseFTPEntry(final String rawListing) {\n+        if (this.matches(rawListing)) {\n+            final FTPFile ftpFile = new FTPFile();\n+            ftpFile.setRawListing(rawListing);\n+            final String group = this.group(1);\n+            final String group2 = this.group(2);\n+            final String string = this.group(3) + \" \" + this.group(4);\n+            final String group3 = this.group(5);\n+            final String[] array = { this.group(9), this.group(10), this.group(11) };\n             try {\n-                f.setTimestamp(super.parseTimestamp(datestr));\n+                ftpFile.setTimestamp(super.parseTimestamp(string));\n             }\n             catch (final ParseException ex) {}\n-            final StringTokenizer t = new StringTokenizer(owner, \",\");\n-            String grp = null;\n+            final StringTokenizer stringTokenizer = new StringTokenizer(group3, \",\");\n+            String nextToken = null;\n             String user = null;\n-            switch (t.countTokens()) {\n+            switch (stringTokenizer.countTokens()) {\n                 case 1: {\n-                    grp = null;\n-                    user = t.nextToken();\n+                    nextToken = null;\n+                    user = stringTokenizer.nextToken();\n                     break;\n                 }\n                 case 2: {\n-                    grp = t.nextToken();\n-                    user = t.nextToken();\n+                    nextToken = stringTokenizer.nextToken();\n+                    user = stringTokenizer.nextToken();\n                     break;\n                 }\n                 default: {\n-                    grp = null;\n+                    nextToken = null;\n                     user = null;\n                     break;\n                 }\n             }\n-            if (name.lastIndexOf(\".DIR\") != -1) {\n-                f.setType(1);\n+            if (group.lastIndexOf(\".DIR\") != -1) {\n+                ftpFile.setType(1);\n             }\n             else {\n-                f.setType(0);\n+                ftpFile.setType(0);\n             }\n             if (this.isVersioning()) {\n-                f.setName(name);\n+                ftpFile.setName(group);\n             }\n             else {\n-                name = name.substring(0, name.lastIndexOf(59));\n-                f.setName(name);\n+                ftpFile.setName(group.substring(0, group.lastIndexOf(59)));\n             }\n-            final long sizeInBytes = Long.parseLong(size) * 512L;\n-            f.setSize(sizeInBytes);\n-            f.setGroup(grp);\n-            f.setUser(user);\n-            for (int access = 0; access < 3; ++access) {\n-                final String permission = permissions[access];\n-                f.setPermission(access, 0, permission.indexOf(82) >= 0);\n-                f.setPermission(access, 1, permission.indexOf(87) >= 0);\n-                f.setPermission(access, 2, permission.indexOf(69) >= 0);\n+            ftpFile.setSize(Long.parseLong(group2) * 512L);\n+            ftpFile.setGroup(nextToken);\n+            ftpFile.setUser(user);\n+            for (int i = 0; i < 3; ++i) {\n+                final String s = array[i];\n+                ftpFile.setPermission(i, 0, s.indexOf(82) >= 0);\n+                ftpFile.setPermission(i, 1, s.indexOf(87) >= 0);\n+                ftpFile.setPermission(i, 2, s.indexOf(69) >= 0);\n             }\n-            return f;\n+            return ftpFile;\n         }\n         return null;\n     }\n     \n-    public String readNextEntry(final BufferedReader reader) throws IOException {\n-        String line = reader.readLine();\n-        final StringBuilder entry = new StringBuilder();\n-        while (line != null) {\n-            if (line.startsWith(\"Directory\") || line.startsWith(\"Total\")) {\n-                line = reader.readLine();\n+    public String readNextEntry(final BufferedReader bufferedReader) throws IOException {\n+        String str = bufferedReader.readLine();\n+        final StringBuilder sb = new StringBuilder();\n+        while (str != null) {\n+            if (str.startsWith(\"Directory\") || str.startsWith(\"Total\")) {\n+                str = bufferedReader.readLine();\n             }\n             else {\n-                entry.append(line);\n-                if (line.trim().endsWith(\")\")) {\n+                sb.append(str);\n+                if (str.trim().endsWith(\")\")) {\n                     break;\n                 }\n-                line = reader.readLine();\n+                str = bufferedReader.readLine();\n             }\n         }\n-        return (entry.length() == 0) ? null : entry.toString();\n+        return (sb.length() == 0) ? null : sb.toString();\n     }\n     \n     protected boolean isVersioning() {\n         return false;\n     }\n     \n     protected FTPClientConfig getDefaultConfiguration() {\n         return new FTPClientConfig(\"VMS\", \"d-MMM-yyyy HH:mm:ss\", (String)null);\n     }\n     \n     @Deprecated\n-    public FTPFile[] parseFileList(final InputStream listStream) throws IOException {\n-        final FTPListParseEngine engine = new FTPListParseEngine((FTPFileEntryParser)this);\n-        engine.readServerList(listStream, (String)null);\n-        return engine.getFiles();\n+    public FTPFile[] parseFileList(final InputStream inputStream) throws IOException {\n+        final FTPListParseEngine ftpListParseEngine = new FTPListParseEngine((FTPFileEntryParser)this);\n+        ftpListParseEngine.readServerList(inputStream, (String)null);\n+        return ftpListParseEngine.getFiles();\n     }\n }\n"}]}
