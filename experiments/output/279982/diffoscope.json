{"diffoscope-json-version": 1, "source1": "first/PropertyConverter.class", "source2": "second/PropertyConverter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,15 +5,14 @@\n import java.text.SimpleDateFormat;\n import java.net.UnknownHostException;\n import org.apache.commons.lang3.StringUtils;\n import java.util.regex.PatternSyntaxException;\n import java.net.MalformedURLException;\n import java.net.URISyntaxException;\n import java.nio.file.Paths;\n-import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.time.format.DateTimeParseException;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.configuration2.ex.ConversionException;\n import java.time.Duration;\n import java.net.InetAddress;\n import java.awt.Color;\n@@ -37,457 +36,451 @@\n     private static final Class<?>[] CONSTR_ARGS;\n     private static final String INTERNET_ADDRESS_CLASSNAME_JAVAX = \"javax.mail.internet.InternetAddress\";\n     private static final String INTERNET_ADDRESS_CLASSNAME_JAKARTA = \"jakarta.mail.internet.InternetAddress\";\n     \n     private PropertyConverter() {\n     }\n     \n-    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {\n-        if (cls.isInstance(value)) {\n-            return value;\n+    public static Object to(final Class<?> obj, final Object o, final DefaultConversionHandler defaultConversionHandler) throws ConversionException {\n+        if (obj.isInstance(o)) {\n+            return o;\n         }\n-        if (String.class.equals(cls)) {\n-            return String.valueOf(value);\n+        if (String.class.equals(obj)) {\n+            return String.valueOf(o);\n         }\n-        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {\n-            return toBoolean(value);\n+        if (Boolean.class.equals(obj) || Boolean.TYPE.equals(obj)) {\n+            return toBoolean(o);\n         }\n-        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {\n-            return toCharacter(value);\n+        if (Character.class.equals(obj) || Character.TYPE.equals(obj)) {\n+            return toCharacter(o);\n         }\n-        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {\n-            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {\n-                return toInteger(value);\n+        if (Number.class.isAssignableFrom(obj) || obj.isPrimitive()) {\n+            if (Integer.class.equals(obj) || Integer.TYPE.equals(obj)) {\n+                return toInteger(o);\n             }\n-            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {\n-                return toLong(value);\n+            if (Long.class.equals(obj) || Long.TYPE.equals(obj)) {\n+                return toLong(o);\n             }\n-            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {\n-                return toByte(value);\n+            if (Byte.class.equals(obj) || Byte.TYPE.equals(obj)) {\n+                return toByte(o);\n             }\n-            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {\n-                return toShort(value);\n+            if (Short.class.equals(obj) || Short.TYPE.equals(obj)) {\n+                return toShort(o);\n             }\n-            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {\n-                return toFloat(value);\n+            if (Float.class.equals(obj) || Float.TYPE.equals(obj)) {\n+                return toFloat(o);\n             }\n-            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {\n-                return toDouble(value);\n+            if (Double.class.equals(obj) || Double.TYPE.equals(obj)) {\n+                return toDouble(o);\n             }\n-            if (BigInteger.class.equals(cls)) {\n-                return toBigInteger(value);\n+            if (BigInteger.class.equals(obj)) {\n+                return toBigInteger(o);\n             }\n-            if (BigDecimal.class.equals(cls)) {\n-                return toBigDecimal(value);\n+            if (BigDecimal.class.equals(obj)) {\n+                return toBigDecimal(o);\n             }\n         }\n         else {\n-            if (Date.class.equals(cls)) {\n-                return toDate(value, convHandler.getDateFormat());\n+            if (Date.class.equals(obj)) {\n+                return toDate(o, defaultConversionHandler.getDateFormat());\n             }\n-            if (Calendar.class.equals(cls)) {\n-                return toCalendar(value, convHandler.getDateFormat());\n+            if (Calendar.class.equals(obj)) {\n+                return toCalendar(o, defaultConversionHandler.getDateFormat());\n             }\n-            if (File.class.equals(cls)) {\n-                return toFile(value);\n+            if (File.class.equals(obj)) {\n+                return toFile(o);\n             }\n-            if (Path.class.equals(cls)) {\n-                return toPath(value);\n+            if (Path.class.equals(obj)) {\n+                return toPath(o);\n             }\n-            if (URI.class.equals(cls)) {\n-                return toURI(value);\n+            if (URI.class.equals(obj)) {\n+                return toURI(o);\n             }\n-            if (URL.class.equals(cls)) {\n-                return toURL(value);\n+            if (URL.class.equals(obj)) {\n+                return toURL(o);\n             }\n-            if (Pattern.class.equals(cls)) {\n-                return toPattern(value);\n+            if (Pattern.class.equals(obj)) {\n+                return toPattern(o);\n             }\n-            if (Locale.class.equals(cls)) {\n-                return toLocale(value);\n+            if (Locale.class.equals(obj)) {\n+                return toLocale(o);\n             }\n-            if (isEnum(cls)) {\n-                return convertToEnum(cls, value);\n+            if (isEnum(obj)) {\n+                return convertToEnum(obj, o);\n             }\n-            if (Color.class.equals(cls)) {\n-                return toColor(value);\n+            if (Color.class.equals(obj)) {\n+                return toColor(o);\n             }\n-            if (cls.getName().equals(\"javax.mail.internet.InternetAddress\")) {\n-                return toInternetAddress(value, \"javax.mail.internet.InternetAddress\");\n+            if (obj.getName().equals(\"javax.mail.internet.InternetAddress\")) {\n+                return toInternetAddress(o, \"javax.mail.internet.InternetAddress\");\n             }\n-            if (cls.getName().equals(\"jakarta.mail.internet.InternetAddress\")) {\n-                return toInternetAddress(value, \"jakarta.mail.internet.InternetAddress\");\n+            if (obj.getName().equals(\"jakarta.mail.internet.InternetAddress\")) {\n+                return toInternetAddress(o, \"jakarta.mail.internet.InternetAddress\");\n             }\n-            if (InetAddress.class.isAssignableFrom(cls)) {\n-                return toInetAddress(value);\n+            if (InetAddress.class.isAssignableFrom(obj)) {\n+                return toInetAddress(o);\n             }\n-            if (Duration.class.equals(cls)) {\n-                return toDuration(value);\n+            if (Duration.class.equals(obj)) {\n+                return toDuration(o);\n             }\n         }\n-        throw new ConversionException(\"The value '\" + value + \"' (\" + value.getClass() + \") can't be converted to a \" + cls.getName() + \" object\");\n+        throw new ConversionException(\"The value '\" + o + \"' (\" + o.getClass() + \") can't be converted to a \" + obj.getName() + \" object\");\n     }\n     \n-    public static Boolean toBoolean(final Object value) throws ConversionException {\n-        if (value instanceof Boolean) {\n-            return (Boolean)value;\n+    public static Boolean toBoolean(final Object o) throws ConversionException {\n+        if (o instanceof Boolean) {\n+            return (Boolean)o;\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Boolean object\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Boolean object\");\n         }\n-        final Boolean b = BooleanUtils.toBooleanObject((String)value);\n-        if (b == null) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Boolean object\");\n+        final Boolean booleanObject = BooleanUtils.toBooleanObject((String)o);\n+        if (booleanObject == null) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Boolean object\");\n         }\n-        return b;\n+        return booleanObject;\n     }\n     \n-    public static Character toCharacter(final Object value) throws ConversionException {\n-        final String strValue = String.valueOf(value);\n-        if (strValue.length() == 1) {\n-            return Character.valueOf(strValue.charAt(0));\n+    public static Character toCharacter(final Object obj) throws ConversionException {\n+        final String value = String.valueOf(obj);\n+        if (value.length() == 1) {\n+            return Character.valueOf(value.charAt(0));\n         }\n-        throw new ConversionException(String.format(\"The value '%s' cannot be converted to a Character object!\", strValue));\n+        throw new ConversionException(String.format(\"The value '%s' cannot be converted to a Character object!\", value));\n     }\n     \n-    public static Byte toByte(final Object value) throws ConversionException {\n-        final Number n = toNumber(value, Byte.class);\n-        if (n instanceof Byte) {\n-            return (Byte)n;\n+    public static Byte toByte(final Object o) throws ConversionException {\n+        final Number number = toNumber(o, Byte.class);\n+        if (number instanceof Byte) {\n+            return (Byte)number;\n         }\n-        return Byte.valueOf(n.byteValue());\n+        return Byte.valueOf(number.byteValue());\n     }\n     \n-    public static Short toShort(final Object value) throws ConversionException {\n-        final Number n = toNumber(value, Short.class);\n-        if (n instanceof Short) {\n-            return (Short)n;\n+    public static Short toShort(final Object o) throws ConversionException {\n+        final Number number = toNumber(o, Short.class);\n+        if (number instanceof Short) {\n+            return (Short)number;\n         }\n-        return Short.valueOf(n.shortValue());\n+        return Short.valueOf(number.shortValue());\n     }\n     \n-    public static Integer toInteger(final Object value) throws ConversionException {\n-        final Number n = toNumber(value, Integer.class);\n-        if (n instanceof Integer) {\n-            return (Integer)n;\n+    public static Integer toInteger(final Object o) throws ConversionException {\n+        final Number number = toNumber(o, Integer.class);\n+        if (number instanceof Integer) {\n+            return (Integer)number;\n         }\n-        return Integer.valueOf(n.intValue());\n+        return Integer.valueOf(number.intValue());\n     }\n     \n-    public static Long toLong(final Object value) throws ConversionException {\n-        final Number n = toNumber(value, Long.class);\n-        if (n instanceof Long) {\n-            return (Long)n;\n+    public static Long toLong(final Object o) throws ConversionException {\n+        final Number number = toNumber(o, Long.class);\n+        if (number instanceof Long) {\n+            return (Long)number;\n         }\n-        return Long.valueOf(n.longValue());\n+        return Long.valueOf(number.longValue());\n     }\n     \n-    public static Float toFloat(final Object value) throws ConversionException {\n-        final Number n = toNumber(value, Float.class);\n-        if (n instanceof Float) {\n-            return (Float)n;\n+    public static Float toFloat(final Object o) throws ConversionException {\n+        final Number number = toNumber(o, Float.class);\n+        if (number instanceof Float) {\n+            return (Float)number;\n         }\n-        return Float.valueOf(n.floatValue());\n+        return Float.valueOf(number.floatValue());\n     }\n     \n-    public static Double toDouble(final Object value) throws ConversionException {\n-        final Number n = toNumber(value, Double.class);\n-        if (n instanceof Double) {\n-            return (Double)n;\n+    public static Double toDouble(final Object o) throws ConversionException {\n+        final Number number = toNumber(o, Double.class);\n+        if (number instanceof Double) {\n+            return (Double)number;\n         }\n-        return Double.valueOf(n.doubleValue());\n+        return Double.valueOf(number.doubleValue());\n     }\n     \n-    public static Duration toDuration(final Object value) throws ConversionException {\n-        if (value instanceof Duration) {\n-            return (Duration)value;\n+    public static Duration toDuration(final Object o) throws ConversionException {\n+        if (o instanceof Duration) {\n+            return (Duration)o;\n         }\n-        if (value instanceof CharSequence) {\n+        if (o instanceof CharSequence) {\n             try {\n-                return Duration.parse((CharSequence)value);\n+                return Duration.parse((CharSequence)o);\n             }\n-            catch (final DateTimeParseException e) {\n-                throw new ConversionException(\"Could not convert \" + value + \" to Duration\", (Throwable)e);\n+            catch (final DateTimeParseException ex) {\n+                throw new ConversionException(\"Could not convert \" + o + \" to Duration\", (Throwable)ex);\n             }\n         }\n-        throw new ConversionException(\"The value \" + value + \" can't be converted to a Duration\");\n+        throw new ConversionException(\"The value \" + o + \" can't be converted to a Duration\");\n     }\n     \n-    public static BigInteger toBigInteger(final Object value) throws ConversionException {\n-        final Number n = toNumber(value, BigInteger.class);\n-        if (n instanceof BigInteger) {\n-            return (BigInteger)n;\n+    public static BigInteger toBigInteger(final Object o) throws ConversionException {\n+        final Number number = toNumber(o, BigInteger.class);\n+        if (number instanceof BigInteger) {\n+            return (BigInteger)number;\n         }\n-        return BigInteger.valueOf(n.longValue());\n+        return BigInteger.valueOf(number.longValue());\n     }\n     \n-    public static BigDecimal toBigDecimal(final Object value) throws ConversionException {\n-        final Number n = toNumber(value, BigDecimal.class);\n-        if (n instanceof BigDecimal) {\n-            return (BigDecimal)n;\n+    public static BigDecimal toBigDecimal(final Object o) throws ConversionException {\n+        final Number number = toNumber(o, BigDecimal.class);\n+        if (number instanceof BigDecimal) {\n+            return (BigDecimal)number;\n         }\n-        return new BigDecimal(n.doubleValue());\n+        return new BigDecimal(number.doubleValue());\n     }\n     \n-    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException {\n-        if (value instanceof Number) {\n-            return (Number)value;\n+    static Number toNumber(final Object o, final Class<?> clazz) throws ConversionException {\n+        if (o instanceof Number) {\n+            return (Number)o;\n         }\n-        final String str = value.toString();\n-        if (str.startsWith(\"0x\")) {\n+        final String string = o.toString();\n+        if (string.startsWith(\"0x\")) {\n             try {\n-                return new BigInteger(str.substring(\"0x\".length()), 16);\n+                return new BigInteger(string.substring(\"0x\".length()), 16);\n             }\n-            catch (final NumberFormatException nex) {\n-                throw new ConversionException(\"Could not convert \" + str + \" to \" + targetClass.getName() + \"! Invalid hex number.\", (Throwable)nex);\n+            catch (final NumberFormatException ex) {\n+                throw new ConversionException(\"Could not convert \" + string + \" to \" + clazz.getName() + \"! Invalid hex number.\", (Throwable)ex);\n             }\n         }\n-        if (str.startsWith(\"0b\")) {\n+        if (string.startsWith(\"0b\")) {\n             try {\n-                return new BigInteger(str.substring(\"0b\".length()), 2);\n+                return new BigInteger(string.substring(\"0b\".length()), 2);\n             }\n-            catch (final NumberFormatException nex) {\n-                throw new ConversionException(\"Could not convert \" + str + \" to \" + targetClass.getName() + \"! Invalid binary number.\", (Throwable)nex);\n+            catch (final NumberFormatException ex2) {\n+                throw new ConversionException(\"Could not convert \" + string + \" to \" + clazz.getName() + \"! Invalid binary number.\", (Throwable)ex2);\n             }\n         }\n         try {\n-            final Constructor<?> constr = targetClass.getConstructor(PropertyConverter.CONSTR_ARGS);\n-            return (Number)constr.newInstance(str);\n+            return (Number)clazz.getConstructor(PropertyConverter.CONSTR_ARGS).newInstance(string);\n         }\n-        catch (final InvocationTargetException itex) {\n-            throw new ConversionException(\"Could not convert \" + str + \" to \" + targetClass.getName(), itex.getTargetException());\n+        catch (final InvocationTargetException ex3) {\n+            throw new ConversionException(\"Could not convert \" + string + \" to \" + clazz.getName(), ex3.getTargetException());\n         }\n-        catch (final Exception ex) {\n-            throw new ConversionException(\"Conversion error when trying to convert \" + str + \" to \" + targetClass.getName(), (Throwable)ex);\n+        catch (final Exception ex4) {\n+            throw new ConversionException(\"Conversion error when trying to convert \" + string + \" to \" + clazz.getName(), (Throwable)ex4);\n         }\n     }\n     \n-    public static File toFile(final Object value) throws ConversionException {\n-        if (value instanceof File) {\n-            return (File)value;\n+    public static File toFile(final Object obj) throws ConversionException {\n+        if (obj instanceof File) {\n+            return (File)obj;\n         }\n-        if (value instanceof Path) {\n-            return ((Path)value).toFile();\n+        if (obj instanceof Path) {\n+            return ((Path)obj).toFile();\n         }\n-        if (value instanceof String) {\n-            return new File((String)value);\n+        if (obj instanceof String) {\n+            return new File((String)obj);\n         }\n-        throw new ConversionException(\"The value \" + value + \" can't be converted to a File\");\n+        throw new ConversionException(\"The value \" + obj + \" can't be converted to a File\");\n     }\n     \n-    public static Path toPath(final Object value) throws ConversionException {\n-        if (value instanceof File) {\n-            return ((File)value).toPath();\n+    public static Path toPath(final Object obj) throws ConversionException {\n+        if (obj instanceof File) {\n+            return ((File)obj).toPath();\n         }\n-        if (value instanceof Path) {\n-            return (Path)value;\n+        if (obj instanceof Path) {\n+            return (Path)obj;\n         }\n-        if (value instanceof String) {\n-            return Paths.get((String)value, new String[0]);\n+        if (obj instanceof String) {\n+            return Paths.get((String)obj, new String[0]);\n         }\n-        throw new ConversionException(\"The value \" + value + \" can't be converted to a Path\");\n+        throw new ConversionException(\"The value \" + obj + \" can't be converted to a Path\");\n     }\n     \n-    public static URI toURI(final Object value) throws ConversionException {\n-        if (value instanceof URI) {\n-            return (URI)value;\n+    public static URI toURI(final Object o) throws ConversionException {\n+        if (o instanceof URI) {\n+            return (URI)o;\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to an URI\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to an URI\");\n         }\n         try {\n-            return new URI((String)value);\n+            return new URI((String)o);\n         }\n-        catch (final URISyntaxException e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to an URI\", (Throwable)e);\n+        catch (final URISyntaxException ex) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to an URI\", (Throwable)ex);\n         }\n     }\n     \n-    public static URL toURL(final Object value) throws ConversionException {\n-        if (value instanceof URL) {\n-            return (URL)value;\n+    public static URL toURL(final Object o) throws ConversionException {\n+        if (o instanceof URL) {\n+            return (URL)o;\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to an URL\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to an URL\");\n         }\n         try {\n-            return new URL((String)value);\n+            return new URL((String)o);\n         }\n-        catch (final MalformedURLException e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to an URL\", (Throwable)e);\n+        catch (final MalformedURLException ex) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to an URL\", (Throwable)ex);\n         }\n     }\n     \n-    public static Pattern toPattern(final Object value) throws ConversionException {\n-        if (value instanceof Pattern) {\n-            return (Pattern)value;\n+    public static Pattern toPattern(final Object o) throws ConversionException {\n+        if (o instanceof Pattern) {\n+            return (Pattern)o;\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Pattern\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Pattern\");\n         }\n         try {\n-            return Pattern.compile((String)value);\n+            return Pattern.compile((String)o);\n         }\n-        catch (final PatternSyntaxException e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Pattern\", (Throwable)e);\n+        catch (final PatternSyntaxException ex) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Pattern\", (Throwable)ex);\n         }\n     }\n     \n-    public static Locale toLocale(final Object value) throws ConversionException {\n-        if (value instanceof Locale) {\n-            return (Locale)value;\n+    public static Locale toLocale(final Object o) throws ConversionException {\n+        if (o instanceof Locale) {\n+            return (Locale)o;\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Locale\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Locale\");\n         }\n-        final String[] elements = ((String)value).split(\"_\");\n-        final int size = elements.length;\n-        if (size >= 1 && (elements[0].length() == 2 || elements[0].isEmpty())) {\n-            final String language = elements[0];\n-            final String country = (size >= 2) ? elements[1] : \"\";\n-            final String variant = (size >= 3) ? elements[2] : \"\";\n-            return new Locale(language, country, variant);\n+        final String[] split = ((String)o).split(\"_\");\n+        final int length = split.length;\n+        if (length >= 1 && (split[0].length() == 2 || split[0].isEmpty())) {\n+            return new Locale(split[0], (length >= 2) ? split[1] : \"\", (length >= 3) ? split[2] : \"\");\n         }\n-        throw new ConversionException(\"The value \" + value + \" can't be converted to a Locale\");\n+        throw new ConversionException(\"The value \" + o + \" can't be converted to a Locale\");\n     }\n     \n-    public static Color toColor(final Object value) throws ConversionException {\n-        if (value instanceof Color) {\n-            return (Color)value;\n+    public static Color toColor(final Object obj) throws ConversionException {\n+        if (obj instanceof Color) {\n+            return (Color)obj;\n         }\n-        if (!(value instanceof String) || StringUtils.isBlank((CharSequence)(String)value)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Color\");\n+        if (!(obj instanceof String) || StringUtils.isBlank((CharSequence)(String)obj)) {\n+            throw new ConversionException(\"The value \" + obj + \" can't be converted to a Color\");\n         }\n-        String color = ((String)value).trim();\n-        final int[] components = new int[3];\n-        final int minlength = components.length * 2;\n-        if (color.length() < minlength) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Color\");\n+        String s = ((String)obj).trim();\n+        final int[] array = new int[3];\n+        final int beginIndex = array.length * 2;\n+        if (s.length() < beginIndex) {\n+            throw new ConversionException(\"The value \" + obj + \" can't be converted to a Color\");\n         }\n-        if (color.startsWith(\"#\")) {\n-            color = color.substring(1);\n+        if (s.startsWith(\"#\")) {\n+            s = s.substring(1);\n         }\n         try {\n-            for (int i = 0; i < components.length; ++i) {\n-                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), 16);\n+            for (int i = 0; i < array.length; ++i) {\n+                array[i] = Integer.parseInt(s.substring(2 * i, 2 * i + 2), 16);\n             }\n-            int alpha;\n-            if (color.length() >= minlength + 2) {\n-                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), 16);\n+            int a;\n+            if (s.length() >= beginIndex + 2) {\n+                a = Integer.parseInt(s.substring(beginIndex, beginIndex + 2), 16);\n             }\n             else {\n-                alpha = Color.black.getAlpha();\n+                a = Color.black.getAlpha();\n             }\n-            return new Color(components[0], components[1], components[2], alpha);\n+            return new Color(array[0], array[1], array[2], a);\n         }\n-        catch (final Exception e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Color\", (Throwable)e);\n+        catch (final Exception ex) {\n+            throw new ConversionException(\"The value \" + obj + \" can't be converted to a Color\", (Throwable)ex);\n         }\n     }\n     \n-    static InetAddress toInetAddress(final Object value) throws ConversionException {\n-        if (value instanceof InetAddress) {\n-            return (InetAddress)value;\n+    static InetAddress toInetAddress(final Object o) throws ConversionException {\n+        if (o instanceof InetAddress) {\n+            return (InetAddress)o;\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a InetAddress\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a InetAddress\");\n         }\n         try {\n-            return InetAddress.getByName((String)value);\n+            return InetAddress.getByName((String)o);\n         }\n-        catch (final UnknownHostException e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a InetAddress\", (Throwable)e);\n+        catch (final UnknownHostException ex) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a InetAddress\", (Throwable)ex);\n         }\n     }\n     \n-    static Object toInternetAddress(final Object value, final String targetClassName) throws ConversionException {\n-        if (value.getClass().getName().equals(targetClassName)) {\n-            return value;\n+    static Object toInternetAddress(final Object o, final String s) throws ConversionException {\n+        if (o.getClass().getName().equals(s)) {\n+            return o;\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to an InternetAddress\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to an InternetAddress\");\n         }\n         try {\n-            final Constructor<?> ctor = Class.forName(targetClassName).getConstructor(String.class);\n-            return ctor.newInstance(value);\n+            return Class.forName(s).getConstructor(String.class).newInstance(o);\n         }\n-        catch (final Exception e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to an InternetAddress\", (Throwable)e);\n+        catch (final Exception ex) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to an InternetAddress\", (Throwable)ex);\n         }\n     }\n     \n-    static boolean isEnum(final Class<?> cls) {\n-        return cls.isEnum();\n+    static boolean isEnum(final Class<?> clazz) {\n+        return clazz.isEnum();\n     }\n     \n-    static <E extends Enum<E>> E toEnum(final Object value, final Class<E> cls) throws ConversionException {\n-        if (value.getClass().equals(cls)) {\n-            return cls.cast(value);\n+    static <E extends Enum<E>> E toEnum(final Object o, final Class<E> clazz) throws ConversionException {\n+        if (o.getClass().equals(clazz)) {\n+            return (E)clazz.cast(o);\n         }\n-        if (value instanceof String) {\n+        if (o instanceof String) {\n             try {\n-                return Enum.valueOf(cls, (String)value);\n+                return Enum.valueOf(clazz, (String)o);\n             }\n-            catch (final Exception e) {\n-                throw new ConversionException(\"The value \" + value + \" can't be converted to a \" + cls.getName());\n+            catch (final Exception ex) {\n+                throw new ConversionException(\"The value \" + o + \" can't be converted to a \" + clazz.getName());\n             }\n         }\n-        if (!(value instanceof Number)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a \" + cls.getName());\n+        if (!(o instanceof Number)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a \" + clazz.getName());\n         }\n         try {\n-            final E[] enumConstants = (E[])cls.getEnumConstants();\n-            return enumConstants[((Number)value).intValue()];\n+            return (E)((Enum[])clazz.getEnumConstants())[((Number)o).intValue()];\n         }\n-        catch (final Exception e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a \" + cls.getName());\n+        catch (final Exception ex2) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a \" + clazz.getName());\n         }\n     }\n     \n-    public static Date toDate(final Object value, final String format) throws ConversionException {\n-        if (value instanceof Date) {\n-            return (Date)value;\n+    public static Date toDate(final Object o, final String pattern) throws ConversionException {\n+        if (o instanceof Date) {\n+            return (Date)o;\n         }\n-        if (value instanceof Calendar) {\n-            return ((Calendar)value).getTime();\n+        if (o instanceof Calendar) {\n+            return ((Calendar)o).getTime();\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Date\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Date\");\n         }\n         try {\n-            return new SimpleDateFormat(format).parse((String)value);\n+            return new SimpleDateFormat(pattern).parse((String)o);\n         }\n-        catch (final ParseException e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Date\", (Throwable)e);\n+        catch (final ParseException ex) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Date\", (Throwable)ex);\n         }\n     }\n     \n-    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {\n-        if (value instanceof Calendar) {\n-            return (Calendar)value;\n+    public static Calendar toCalendar(final Object o, final String pattern) throws ConversionException {\n+        if (o instanceof Calendar) {\n+            return (Calendar)o;\n         }\n-        if (value instanceof Date) {\n-            final Calendar calendar = Calendar.getInstance();\n-            calendar.setTime((Date)value);\n-            return calendar;\n+        if (o instanceof Date) {\n+            final Calendar instance = Calendar.getInstance();\n+            instance.setTime((Date)o);\n+            return instance;\n         }\n-        if (!(value instanceof String)) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Calendar\");\n+        if (!(o instanceof String)) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Calendar\");\n         }\n         try {\n-            final Calendar calendar = Calendar.getInstance();\n-            calendar.setTime(new SimpleDateFormat(format).parse((String)value));\n-            return calendar;\n+            final Calendar instance2 = Calendar.getInstance();\n+            instance2.setTime(new SimpleDateFormat(pattern).parse((String)o));\n+            return instance2;\n         }\n-        catch (final ParseException e) {\n-            throw new ConversionException(\"The value \" + value + \" can't be converted to a Calendar\", (Throwable)e);\n+        catch (final ParseException ex) {\n+            throw new ConversionException(\"The value \" + o + \" can't be converted to a Calendar\", (Throwable)ex);\n         }\n     }\n     \n-    private static Object convertToEnum(final Class<?> enumClass, final Object value) {\n-        return toEnum(value, (Class<Object>)enumClass.asSubclass(Enum.class));\n+    private static Object convertToEnum(final Class<?> clazz, final Object o) {\n+        return toEnum(o, (Class<Object>)clazz.asSubclass(Enum.class));\n     }\n     \n     static {\n         CONSTR_ARGS = new Class[] { String.class };\n     }\n }\n"}]}
