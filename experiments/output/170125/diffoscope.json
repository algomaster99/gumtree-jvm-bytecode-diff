{"diffoscope-json-version": 1, "source1": "first/FTPClient.class", "source2": "second/FTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -182,25 +182,41 @@\n         final boolean isInet6Address = this.getRemoteAddress() instanceof Inet6Address;\n         final int soTimeoutMillis = DurationUtils.toMillisInt(this.dataTimeout);\n         Socket socket;\n         if (this.dataConnectionMode == 0) {\n             try (final ServerSocket server = this._serverSocketFactory_.createServerSocket(this.getActivePort(), 1, this.getHostAddress())) {\n                 if (isInet6Address) {\n                     if (!FTPReply.isPositiveCompletion(this.eprt(this.getReportHostAddress(), server.getLocalPort()))) {\n-                        return null;\n+                        final Socket socket2 = null;\n+                        if (server != null) {\n+                            server.close();\n+                        }\n+                        return socket2;\n                     }\n                 }\n                 else if (!FTPReply.isPositiveCompletion(this.port(this.getReportHostAddress(), server.getLocalPort()))) {\n-                    return null;\n+                    final Socket socket3 = null;\n+                    if (server != null) {\n+                        server.close();\n+                    }\n+                    return socket3;\n                 }\n                 if (this.restartOffset > 0L && !this.restart(this.restartOffset)) {\n-                    return null;\n+                    final Socket socket4 = null;\n+                    if (server != null) {\n+                        server.close();\n+                    }\n+                    return socket4;\n                 }\n                 if (!FTPReply.isPositivePreliminary(this.sendCommand(command, arg))) {\n-                    return null;\n+                    final Socket socket5 = null;\n+                    if (server != null) {\n+                        server.close();\n+                    }\n+                    return socket5;\n                 }\n                 if (soTimeoutMillis >= 0) {\n                     server.setSoTimeout(soTimeoutMillis);\n                 }\n                 socket = server.accept();\n                 if (soTimeoutMillis >= 0) {\n                     socket.setSoTimeout(soTimeoutMillis);\n@@ -908,15 +924,19 @@\n         return this.listNames(null);\n     }\n     \n     public String[] listNames(final String pathname) throws IOException {\n         final ArrayList<String> results = new ArrayList<String>();\n         try (final Socket socket = this._openDataConnection_(FTPCmd.NLST, this.getListArguments(pathname))) {\n             if (socket == null) {\n-                return null;\n+                final String[] array = null;\n+                if (socket != null) {\n+                    socket.close();\n+                }\n+                return array;\n             }\n             try (final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), this.getControlEncoding()))) {\n                 String line;\n                 while ((line = reader.readLine()) != null) {\n                     results.add(line);\n                 }\n             }\n"}]}
