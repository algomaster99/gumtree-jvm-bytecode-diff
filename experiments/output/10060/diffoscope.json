{"diffoscope-json-version": 1, "source1": "first/ConstructorUtilsTest.class", "source2": "second/ConstructorUtilsTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -52,23 +52,17 @@\n     public void testInvokeExactConstructor() throws Exception {\n         Assertions.assertEquals((Object)\"()\", (Object)((ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, (Object[])ArrayUtils.EMPTY_CLASS_ARRAY)).toString());\n         Assertions.assertEquals((Object)\"()\", (Object)((ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, (Object[])null)).toString());\n         Assertions.assertEquals((Object)\"(String)\", (Object)((ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { \"\" })).toString());\n         Assertions.assertEquals((Object)\"(Object)\", (Object)((ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { new Object() })).toString());\n         Assertions.assertEquals((Object)\"(Integer)\", (Object)((ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { NumberUtils.INTEGER_ONE })).toString());\n         Assertions.assertEquals((Object)\"(double)\", (Object)((ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })).toString());\n-        Assertions.assertThrows((Class)NoSuchMethodException.class, () -> {\n-            final ConstructorUtilsTest.TestBean testBean = (ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { NumberUtils.BYTE_ONE });\n-        });\n-        Assertions.assertThrows((Class)NoSuchMethodException.class, () -> {\n-            final ConstructorUtilsTest.TestBean testBean = (ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { NumberUtils.LONG_ONE });\n-        });\n-        Assertions.assertThrows((Class)NoSuchMethodException.class, () -> {\n-            final ConstructorUtilsTest.TestBean testBean = (ConstructorUtilsTest.TestBean)ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { Boolean.TRUE });\n-        });\n+        Assertions.assertThrows((Class)NoSuchMethodException.class, () -> ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { NumberUtils.BYTE_ONE }));\n+        Assertions.assertThrows((Class)NoSuchMethodException.class, () -> ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { NumberUtils.LONG_ONE }));\n+        Assertions.assertThrows((Class)NoSuchMethodException.class, () -> ConstructorUtils.invokeExactConstructor((Class)ConstructorUtilsTest.TestBean.class, new Object[] { Boolean.TRUE }));\n     }\n     \n     @Test\n     public void testGetAccessibleConstructor() throws Exception {\n         Assertions.assertNotNull((Object)ConstructorUtils.getAccessibleConstructor((Constructor)Object.class.getConstructor((Class<?>[])ArrayUtils.EMPTY_CLASS_ARRAY)));\n         Assertions.assertNull((Object)ConstructorUtils.getAccessibleConstructor((Constructor)ConstructorUtilsTest.PrivateClass.class.getConstructor((Class<?>[])ArrayUtils.EMPTY_CLASS_ARRAY)));\n         Assertions.assertNull((Object)ConstructorUtils.getAccessibleConstructor((Class)ConstructorUtilsTest.PrivateClass.PublicInnerClass.class, new Class[0]));\n"}]}
