{"diffoscope-json-version": 1, "source1": "first/AuthenticatingSMTPClient.class", "source2": "second/AuthenticatingSMTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,96 +4,94 @@\n import java.security.spec.InvalidKeySpecException;\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n import java.security.Key;\n import javax.crypto.spec.SecretKeySpec;\n import javax.crypto.Mac;\n import org.apache.commons.net.util.Base64;\n-import java.net.InetAddress;\n import java.io.IOException;\n import javax.net.ssl.SSLContext;\n \n public class AuthenticatingSMTPClient extends SMTPSClient\n {\n     public AuthenticatingSMTPClient() {\n     }\n     \n-    public AuthenticatingSMTPClient(final String protocol) {\n-        super(protocol);\n+    public AuthenticatingSMTPClient(final String s) {\n+        super(s);\n     }\n     \n-    public AuthenticatingSMTPClient(final String proto, final boolean implicit) {\n-        super(proto, implicit);\n+    public AuthenticatingSMTPClient(final String s, final boolean b) {\n+        super(s, b);\n     }\n     \n-    public AuthenticatingSMTPClient(final String proto, final boolean implicit, final String encoding) {\n-        super(proto, implicit, encoding);\n+    public AuthenticatingSMTPClient(final String s, final boolean b, final String s2) {\n+        super(s, b, s2);\n     }\n     \n-    public AuthenticatingSMTPClient(final boolean implicit, final SSLContext ctx) {\n-        super(implicit, ctx);\n+    public AuthenticatingSMTPClient(final boolean b, final SSLContext sslContext) {\n+        super(b, sslContext);\n     }\n     \n-    public AuthenticatingSMTPClient(final String protocol, final String encoding) {\n-        super(protocol, false, encoding);\n+    public AuthenticatingSMTPClient(final String s, final String s2) {\n+        super(s, false, s2);\n     }\n     \n-    public int ehlo(final String hostname) throws IOException {\n-        return this.sendCommand(15, hostname);\n+    public int ehlo(final String s) throws IOException {\n+        return this.sendCommand(15, s);\n     }\n     \n-    public boolean elogin(final String hostname) throws IOException {\n-        return SMTPReply.isPositiveCompletion(this.ehlo(hostname));\n+    public boolean elogin(final String s) throws IOException {\n+        return SMTPReply.isPositiveCompletion(this.ehlo(s));\n     }\n     \n     public boolean elogin() throws IOException {\n-        final InetAddress host = this.getLocalAddress();\n-        final String name = host.getHostName();\n-        return name != null && SMTPReply.isPositiveCompletion(this.ehlo(name));\n+        final String hostName = this.getLocalAddress().getHostName();\n+        return hostName != null && SMTPReply.isPositiveCompletion(this.ehlo(hostName));\n     }\n     \n     public int[] getEnhancedReplyCode() {\n-        final String reply = this.getReplyString().substring(4);\n-        final String[] parts = reply.substring(0, reply.indexOf(32)).split(\"\\\\.\");\n-        final int[] res = new int[parts.length];\n-        for (int i = 0; i < parts.length; ++i) {\n-            res[i] = Integer.parseInt(parts[i]);\n+        final String substring = this.getReplyString().substring(4);\n+        final String[] split = substring.substring(0, substring.indexOf(32)).split(\"\\\\.\");\n+        final int[] array = new int[split.length];\n+        for (int i = 0; i < split.length; ++i) {\n+            array[i] = Integer.parseInt(split[i]);\n         }\n-        return res;\n+        return array;\n     }\n     \n-    public boolean auth(final AuthenticatingSMTPClient.AUTH_METHOD method, final String username, final String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n-        if (!SMTPReply.isPositiveIntermediate(this.sendCommand(14, AuthenticatingSMTPClient.AUTH_METHOD.getAuthName(method)))) {\n+    public boolean auth(final AuthenticatingSMTPClient.AUTH_METHOD auth_METHOD, final String str, final String str2) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n+        if (!SMTPReply.isPositiveIntermediate(this.sendCommand(14, AuthenticatingSMTPClient.AUTH_METHOD.getAuthName(auth_METHOD)))) {\n             return false;\n         }\n-        if (method.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.PLAIN)) {\n-            return SMTPReply.isPositiveCompletion(this.sendCommand(Base64.encodeBase64StringUnChunked((\"\\u0000\" + username + \"\\u0000\" + password).getBytes(this.getCharset()))));\n+        if (auth_METHOD.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.PLAIN)) {\n+            return SMTPReply.isPositiveCompletion(this.sendCommand(Base64.encodeBase64StringUnChunked((\"\\u0000\" + str + \"\\u0000\" + str2).getBytes(this.getCharset()))));\n         }\n-        if (method.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.CRAM_MD5)) {\n-            final byte[] serverChallenge = Base64.decodeBase64(this.getReplyString().substring(4).trim());\n-            final Mac hmac_md5 = Mac.getInstance(\"HmacMD5\");\n-            hmac_md5.init(new SecretKeySpec(password.getBytes(this.getCharset()), \"HmacMD5\"));\n-            final byte[] hmacResult = this.convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes(this.getCharset());\n-            final byte[] usernameBytes = username.getBytes(this.getCharset());\n-            final byte[] toEncode = new byte[usernameBytes.length + 1 + hmacResult.length];\n-            System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);\n-            toEncode[usernameBytes.length] = 32;\n-            System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);\n-            return SMTPReply.isPositiveCompletion(this.sendCommand(Base64.encodeBase64StringUnChunked(toEncode)));\n-        }\n-        if (method.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.LOGIN)) {\n-            return SMTPReply.isPositiveIntermediate(this.sendCommand(Base64.encodeBase64StringUnChunked(username.getBytes(this.getCharset())))) && SMTPReply.isPositiveCompletion(this.sendCommand(Base64.encodeBase64StringUnChunked(password.getBytes(this.getCharset()))));\n-        }\n-        return (method.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.XOAUTH) || method.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.XOAUTH2)) && SMTPReply.isPositiveIntermediate(this.sendCommand(Base64.encodeBase64StringUnChunked(username.getBytes(this.getCharset()))));\n-    }\n-    \n-    private String convertToHexString(final byte[] a) {\n-        final StringBuilder result = new StringBuilder(a.length * 2);\n-        for (final byte element : a) {\n-            if ((element & 0xFF) <= 15) {\n-                result.append(\"0\");\n+        if (auth_METHOD.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.CRAM_MD5)) {\n+            final byte[] decodeBase64 = Base64.decodeBase64(this.getReplyString().substring(4).trim());\n+            final Mac instance = Mac.getInstance(\"HmacMD5\");\n+            instance.init(new SecretKeySpec(str2.getBytes(this.getCharset()), \"HmacMD5\"));\n+            final byte[] bytes = this.convertToHexString(instance.doFinal(decodeBase64)).getBytes(this.getCharset());\n+            final byte[] bytes2 = str.getBytes(this.getCharset());\n+            final byte[] array = new byte[bytes2.length + 1 + bytes.length];\n+            System.arraycopy(bytes2, 0, array, 0, bytes2.length);\n+            array[bytes2.length] = 32;\n+            System.arraycopy(bytes, 0, array, bytes2.length + 1, bytes.length);\n+            return SMTPReply.isPositiveCompletion(this.sendCommand(Base64.encodeBase64StringUnChunked(array)));\n+        }\n+        if (auth_METHOD.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.LOGIN)) {\n+            return SMTPReply.isPositiveIntermediate(this.sendCommand(Base64.encodeBase64StringUnChunked(str.getBytes(this.getCharset())))) && SMTPReply.isPositiveCompletion(this.sendCommand(Base64.encodeBase64StringUnChunked(str2.getBytes(this.getCharset()))));\n+        }\n+        return (auth_METHOD.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.XOAUTH) || auth_METHOD.equals((Object)AuthenticatingSMTPClient.AUTH_METHOD.XOAUTH2)) && SMTPReply.isPositiveIntermediate(this.sendCommand(Base64.encodeBase64StringUnChunked(str.getBytes(this.getCharset()))));\n+    }\n+    \n+    private String convertToHexString(final byte[] array) {\n+        final StringBuilder sb = new StringBuilder(array.length * 2);\n+        for (final byte b : array) {\n+            if ((b & 0xFF) <= 15) {\n+                sb.append(\"0\");\n             }\n-            result.append(Integer.toHexString(element & 0xFF));\n+            sb.append(Integer.toHexString(b & 0xFF));\n         }\n-        return result.toString();\n+        return sb.toString();\n     }\n }\n"}]}
