{"diffoscope-json-version": 1, "source1": "first/ConfigurationUtils.class", "source2": "second/ConfigurationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,15 +3,14 @@\n \n import org.apache.commons.logging.LogFactory;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Proxy;\n import org.apache.commons.configuration2.event.ConfigurationErrorEvent;\n import org.apache.commons.configuration2.sync.NoOpSynchronizer;\n import org.apache.commons.configuration2.sync.Synchronizer;\n-import java.lang.reflect.Method;\n import java.lang.reflect.InvocationTargetException;\n import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n import org.apache.commons.configuration2.tree.ExpressionEngine;\n import java.io.Writer;\n import java.io.StringWriter;\n import java.util.Iterator;\n import java.io.OutputStream;\n@@ -27,207 +26,206 @@\n     private static final Class<?>[] IMMUTABLE_HIERARCHICAL_CONFIG_IFCS;\n     private static final EventSource DUMMY_EVENT_SOURCE;\n     private static final Log LOG;\n     \n     private ConfigurationUtils() {\n     }\n     \n-    public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {\n-        dump(configuration, new PrintWriter((OutputStream)out));\n+    public static void dump(final ImmutableConfiguration immutableConfiguration, final PrintStream out) {\n+        dump(immutableConfiguration, new PrintWriter((OutputStream)out));\n     }\n     \n-    public static void dump(final Configuration configuration, final PrintStream out) {\n-        dump((ImmutableConfiguration)configuration, out);\n+    public static void dump(final Configuration configuration, final PrintStream printStream) {\n+        dump((ImmutableConfiguration)configuration, printStream);\n     }\n     \n-    public static void dump(final ImmutableConfiguration configuration, final PrintWriter out) {\n-        final Iterator<String> keys = configuration.getKeys();\n+    public static void dump(final ImmutableConfiguration immutableConfiguration, final PrintWriter printWriter) {\n+        final Iterator keys = immutableConfiguration.getKeys();\n         while (keys.hasNext()) {\n-            final String key = (String)keys.next();\n-            final Object value = configuration.getProperty(key);\n-            out.print(key);\n-            out.print(\"=\");\n-            out.print(value);\n+            final String s = (String)keys.next();\n+            final Object property = immutableConfiguration.getProperty(s);\n+            printWriter.print(s);\n+            printWriter.print(\"=\");\n+            printWriter.print(property);\n             if (keys.hasNext()) {\n-                out.println();\n+                printWriter.println();\n             }\n         }\n-        out.flush();\n+        printWriter.flush();\n     }\n     \n-    public static void dump(final Configuration configuration, final PrintWriter out) {\n-        dump((ImmutableConfiguration)configuration, out);\n+    public static void dump(final Configuration configuration, final PrintWriter printWriter) {\n+        dump((ImmutableConfiguration)configuration, printWriter);\n     }\n     \n-    public static String toString(final ImmutableConfiguration configuration) {\n-        final StringWriter writer = new StringWriter();\n-        dump(configuration, new PrintWriter((Writer)writer));\n-        return writer.toString();\n+    public static String toString(final ImmutableConfiguration immutableConfiguration) {\n+        final StringWriter out = new StringWriter();\n+        dump(immutableConfiguration, new PrintWriter((Writer)out));\n+        return out.toString();\n     }\n     \n     public static String toString(final Configuration configuration) {\n         return toString((ImmutableConfiguration)configuration);\n     }\n     \n-    public static void copy(final ImmutableConfiguration source, final Configuration target) {\n-        final Iterator<String> keys = source.getKeys();\n+    public static void copy(final ImmutableConfiguration immutableConfiguration, final Configuration configuration) {\n+        final Iterator keys = immutableConfiguration.getKeys();\n         while (keys.hasNext()) {\n-            final String key = (String)keys.next();\n-            target.setProperty(key, source.getProperty(key));\n+            final String s = (String)keys.next();\n+            configuration.setProperty(s, immutableConfiguration.getProperty(s));\n         }\n     }\n     \n-    public static void copy(final Configuration source, final Configuration target) {\n-        copy((ImmutableConfiguration)source, target);\n+    public static void copy(final Configuration configuration, final Configuration configuration2) {\n+        copy((ImmutableConfiguration)configuration, configuration2);\n     }\n     \n-    public static void append(final ImmutableConfiguration source, final Configuration target) {\n-        final Iterator<String> keys = source.getKeys();\n+    public static void append(final ImmutableConfiguration immutableConfiguration, final Configuration configuration) {\n+        final Iterator keys = immutableConfiguration.getKeys();\n         while (keys.hasNext()) {\n-            final String key = (String)keys.next();\n-            target.addProperty(key, source.getProperty(key));\n+            final String s = (String)keys.next();\n+            configuration.addProperty(s, immutableConfiguration.getProperty(s));\n         }\n     }\n     \n-    public static void append(final Configuration source, final Configuration target) {\n-        append((ImmutableConfiguration)source, target);\n+    public static void append(final Configuration configuration, final Configuration configuration2) {\n+        append((ImmutableConfiguration)configuration, configuration2);\n     }\n     \n-    public static HierarchicalConfiguration<?> convertToHierarchical(final Configuration conf) {\n-        return convertToHierarchical(conf, null);\n+    public static HierarchicalConfiguration<?> convertToHierarchical(final Configuration configuration) {\n+        return convertToHierarchical(configuration, null);\n     }\n     \n-    public static HierarchicalConfiguration<?> convertToHierarchical(final Configuration conf, final ExpressionEngine engine) {\n-        if (conf == null) {\n+    public static HierarchicalConfiguration<?> convertToHierarchical(final Configuration configuration, final ExpressionEngine expressionEngine) {\n+        if (configuration == null) {\n             return null;\n         }\n-        if (conf instanceof HierarchicalConfiguration) {\n-            final HierarchicalConfiguration<?> hc = (HierarchicalConfiguration<?>)conf;\n-            if (engine != null) {\n-                hc.setExpressionEngine(engine);\n+        if (configuration instanceof HierarchicalConfiguration) {\n+            final HierarchicalConfiguration hierarchicalConfiguration = (HierarchicalConfiguration)configuration;\n+            if (expressionEngine != null) {\n+                hierarchicalConfiguration.setExpressionEngine(expressionEngine);\n             }\n-            return hc;\n+            return (HierarchicalConfiguration<?>)hierarchicalConfiguration;\n         }\n-        final BaseHierarchicalConfiguration hc2 = new BaseHierarchicalConfiguration();\n-        if (engine != null) {\n-            hc2.setExpressionEngine(engine);\n+        final BaseHierarchicalConfiguration baseHierarchicalConfiguration = new BaseHierarchicalConfiguration();\n+        if (expressionEngine != null) {\n+            baseHierarchicalConfiguration.setExpressionEngine(expressionEngine);\n         }\n-        hc2.copy(conf);\n-        return (HierarchicalConfiguration<?>)hc2;\n+        baseHierarchicalConfiguration.copy(configuration);\n+        return (HierarchicalConfiguration<?>)baseHierarchicalConfiguration;\n     }\n     \n-    public static Configuration cloneConfiguration(final Configuration config) throws ConfigurationRuntimeException {\n-        if (config == null) {\n+    public static Configuration cloneConfiguration(final Configuration configuration) throws ConfigurationRuntimeException {\n+        if (configuration == null) {\n             return null;\n         }\n         try {\n-            return (Configuration)clone(config);\n+            return (Configuration)clone(configuration);\n         }\n-        catch (final CloneNotSupportedException cnex) {\n-            throw new ConfigurationRuntimeException((Throwable)cnex);\n+        catch (final CloneNotSupportedException ex) {\n+            throw new ConfigurationRuntimeException((Throwable)ex);\n         }\n     }\n     \n-    public static Object cloneIfPossible(final Object obj) {\n+    public static Object cloneIfPossible(final Object o) {\n         try {\n-            return clone(obj);\n+            return clone(o);\n         }\n         catch (final Exception ex) {\n-            return obj;\n+            return o;\n         }\n     }\n     \n     static Object clone(final Object obj) throws CloneNotSupportedException {\n         if (obj instanceof Cloneable) {\n             try {\n-                final Method m = obj.getClass().getMethod(\"clone\", (Class<?>[])new Class[0]);\n-                return m.invoke(obj, new Object[0]);\n+                return obj.getClass().getMethod(\"clone\", (Class<?>[])new Class[0]).invoke(obj, new Object[0]);\n             }\n-            catch (final NoSuchMethodException nmex) {\n+            catch (final NoSuchMethodException ex) {\n                 throw new CloneNotSupportedException(\"No clone() method found for class\" + obj.getClass().getName());\n             }\n-            catch (final IllegalAccessException | InvocationTargetException itex) {\n-                throw new ConfigurationRuntimeException((Throwable)itex);\n+            catch (final IllegalAccessException | InvocationTargetException ex2) {\n+                throw new ConfigurationRuntimeException((Throwable)ex2);\n             }\n         }\n         throw new CloneNotSupportedException(obj.getClass().getName() + \" does not implement Cloneable\");\n     }\n     \n-    public static Synchronizer cloneSynchronizer(final Synchronizer sync) {\n-        if (sync == null) {\n+    public static Synchronizer cloneSynchronizer(final Synchronizer obj) {\n+        if (obj == null) {\n             throw new IllegalArgumentException(\"Synchronizer must not be null!\");\n         }\n-        if (NoOpSynchronizer.INSTANCE == sync) {\n-            return sync;\n+        if (NoOpSynchronizer.INSTANCE == obj) {\n+            return obj;\n         }\n         try {\n-            return (Synchronizer)sync.getClass().newInstance();\n+            return (Synchronizer)obj.getClass().newInstance();\n         }\n         catch (final Exception ex) {\n-            ConfigurationUtils.LOG.info((Object)(\"Cannot create new instance of \" + sync.getClass()));\n+            ConfigurationUtils.LOG.info((Object)(\"Cannot create new instance of \" + obj.getClass()));\n             try {\n-                return (Synchronizer)clone(sync);\n+                return (Synchronizer)clone(obj);\n             }\n-            catch (final CloneNotSupportedException cnex) {\n-                throw new ConfigurationRuntimeException(\"Cannot clone Synchronizer \" + sync);\n+            catch (final CloneNotSupportedException ex2) {\n+                throw new ConfigurationRuntimeException(\"Cannot clone Synchronizer \" + obj);\n             }\n         }\n     }\n     \n-    public static void enableRuntimeExceptions(final Configuration src) {\n-        if (!(src instanceof EventSource)) {\n+    public static void enableRuntimeExceptions(final Configuration configuration) {\n+        if (!(configuration instanceof EventSource)) {\n             throw new IllegalArgumentException(\"Configuration must implement EventSource!\");\n         }\n-        ((EventSource)src).addEventListener(ConfigurationErrorEvent.ANY, event -> {\n-            throw new ConfigurationRuntimeException(event.getCause());\n+        ((EventSource)configuration).addEventListener(ConfigurationErrorEvent.ANY, configurationErrorEvent -> {\n+            throw new ConfigurationRuntimeException(configurationErrorEvent.getCause());\n         });\n     }\n     \n-    public static Class<?> loadClass(final String clsName) throws ClassNotFoundException {\n+    public static Class<?> loadClass(final String s) throws ClassNotFoundException {\n         if (ConfigurationUtils.LOG.isDebugEnabled()) {\n-            ConfigurationUtils.LOG.debug((Object)(\"Loading class \" + clsName));\n+            ConfigurationUtils.LOG.debug((Object)(\"Loading class \" + s));\n         }\n-        final ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n         try {\n-            if (cl != null) {\n-                return cl.loadClass(clsName);\n+            if (contextClassLoader != null) {\n+                return contextClassLoader.loadClass(s);\n             }\n         }\n-        catch (final ClassNotFoundException cnfex) {\n-            ConfigurationUtils.LOG.info((Object)(\"Could not load class \" + clsName + \" using CCL. Falling back to default CL.\"), (Throwable)cnfex);\n+        catch (final ClassNotFoundException ex) {\n+            ConfigurationUtils.LOG.info((Object)(\"Could not load class \" + s + \" using CCL. Falling back to default CL.\"), (Throwable)ex);\n         }\n-        return ConfigurationUtils.class.getClassLoader().loadClass(clsName);\n+        return ConfigurationUtils.class.getClassLoader().loadClass(s);\n     }\n     \n-    public static Class<?> loadClassNoEx(final String clsName) {\n+    public static Class<?> loadClassNoEx(final String str) {\n         try {\n-            return loadClass(clsName);\n+            return loadClass(str);\n         }\n-        catch (final ClassNotFoundException cnfex) {\n-            throw new ConfigurationRuntimeException(\"Cannot load class \" + clsName, (Throwable)cnfex);\n+        catch (final ClassNotFoundException ex) {\n+            throw new ConfigurationRuntimeException(\"Cannot load class \" + str, (Throwable)ex);\n         }\n     }\n     \n-    public static ImmutableConfiguration unmodifiableConfiguration(final Configuration c) {\n-        return createUnmodifiableConfiguration(ConfigurationUtils.IMMUTABLE_CONFIG_IFCS, c);\n+    public static ImmutableConfiguration unmodifiableConfiguration(final Configuration configuration) {\n+        return createUnmodifiableConfiguration(ConfigurationUtils.IMMUTABLE_CONFIG_IFCS, configuration);\n     }\n     \n-    public static ImmutableHierarchicalConfiguration unmodifiableConfiguration(final HierarchicalConfiguration<?> c) {\n-        return (ImmutableHierarchicalConfiguration)createUnmodifiableConfiguration(ConfigurationUtils.IMMUTABLE_HIERARCHICAL_CONFIG_IFCS, (Configuration)c);\n+    public static ImmutableHierarchicalConfiguration unmodifiableConfiguration(final HierarchicalConfiguration<?> hierarchicalConfiguration) {\n+        return (ImmutableHierarchicalConfiguration)createUnmodifiableConfiguration(ConfigurationUtils.IMMUTABLE_HIERARCHICAL_CONFIG_IFCS, (Configuration)hierarchicalConfiguration);\n     }\n     \n-    private static ImmutableConfiguration createUnmodifiableConfiguration(final Class<?>[] ifcs, final Configuration c) {\n-        return (ImmutableConfiguration)Proxy.newProxyInstance(ConfigurationUtils.class.getClassLoader(), ifcs, (InvocationHandler)new ImmutableConfigurationInvocationHandler(c));\n+    private static ImmutableConfiguration createUnmodifiableConfiguration(final Class<?>[] interfaces, final Configuration configuration) {\n+        return (ImmutableConfiguration)Proxy.newProxyInstance(ConfigurationUtils.class.getClassLoader(), interfaces, (InvocationHandler)new ImmutableConfigurationInvocationHandler(configuration));\n     }\n     \n-    public static EventSource asEventSource(final Object obj, final boolean mockIfUnsupported) {\n+    public static EventSource asEventSource(final Object obj, final boolean b) {\n         if (obj instanceof EventSource) {\n             return (EventSource)obj;\n         }\n-        if (!mockIfUnsupported) {\n+        if (!b) {\n             throw new ConfigurationRuntimeException(\"Cannot cast to EventSource: \" + obj);\n         }\n         return ConfigurationUtils.DUMMY_EVENT_SOURCE;\n     }\n     \n     static {\n         IMMUTABLE_CONFIG_IFCS = new Class[] { ImmutableConfiguration.class };\n"}]}
