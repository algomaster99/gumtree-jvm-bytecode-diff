{"diffoscope-json-version": 1, "source1": "first/SiteUtil.class", "source2": "second/SiteUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,10 +1,11 @@\n \n package com.puppycrawl.tools.checkstyle.site;\n \n+import com.puppycrawl.tools.checkstyle.ModuleFactory;\n import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilter;\n import com.puppycrawl.tools.checkstyle.api.Filter;\n import com.puppycrawl.tools.checkstyle.Checker;\n import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;\n import com.puppycrawl.tools.checkstyle.TreeWalkerFilter;\n import com.puppycrawl.tools.checkstyle.TreeWalker;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n@@ -15,15 +16,14 @@\n import java.util.stream.Collectors;\n import java.nio.file.Files;\n import java.nio.file.FileVisitOption;\n import java.nio.file.Paths;\n import java.nio.file.Path;\n import com.puppycrawl.tools.checkstyle.PackageNamesLoader;\n import com.puppycrawl.tools.checkstyle.PackageObjectFactory;\n-import com.puppycrawl.tools.checkstyle.ModuleFactory;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import java.util.Locale;\n import com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck;\n import com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck;\n import com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -37,119 +37,114 @@\n public final class SiteUtil\n {\n     private static final Map<Class<?>, String> CLASS_TO_PARENT_MODULE;\n     \n     private SiteUtil() {\n     }\n     \n-    public static Set<String> getMessageKeys(final Class<?> module) throws MacroExecutionException {\n-        final Set<Field> messageKeyFields = getCheckMessageKeys(module);\n-        final Set<String> messageKeys = new TreeSet<String>();\n-        for (final Field field : messageKeyFields) {\n-            messageKeys.add(getFieldValue(field, (Object)module));\n+    public static Set<String> getMessageKeys(final Class<?> clazz) throws MacroExecutionException {\n+        final Set<Field> checkMessageKeys = getCheckMessageKeys(clazz);\n+        final TreeSet set = new TreeSet();\n+        final Iterator<Field> iterator = checkMessageKeys.iterator();\n+        while (iterator.hasNext()) {\n+            set.add(getFieldValue(iterator.next(), clazz));\n         }\n-        return messageKeys;\n+        return set;\n     }\n     \n-    private static Set<Field> getCheckMessageKeys(final Class<?> module) throws MacroExecutionException {\n+    private static Set<Field> getCheckMessageKeys(final Class<?> clazz) throws MacroExecutionException {\n         try {\n-            final Set<Field> checkstyleMessages = new HashSet<Field>();\n-            final Field[] declaredFields;\n-            final Field[] fields = declaredFields = module.getDeclaredFields();\n-            for (final Field field : declaredFields) {\n+            final HashSet set = new HashSet();\n+            for (final Field field : clazz.getDeclaredFields()) {\n                 if (field.getName().startsWith(\"MSG_\")) {\n-                    checkstyleMessages.add(field);\n+                    set.add(field);\n                 }\n             }\n-            final Class<?> superModule = module.getSuperclass();\n-            if (superModule != null) {\n-                checkstyleMessages.addAll(getCheckMessageKeys(superModule));\n+            final Class superclass = clazz.getSuperclass();\n+            if (superclass != null) {\n+                set.addAll(getCheckMessageKeys(superclass));\n             }\n-            if (module == RegexpMultilineCheck.class) {\n-                checkstyleMessages.addAll(getCheckMessageKeys(Class.forName(\"com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector\")));\n+            if (clazz == RegexpMultilineCheck.class) {\n+                set.addAll(getCheckMessageKeys(Class.forName(\"com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector\")));\n             }\n-            else if (module == RegexpSinglelineCheck.class || module == RegexpSinglelineJavaCheck.class) {\n-                checkstyleMessages.addAll(getCheckMessageKeys(Class.forName(\"com.puppycrawl.tools.checkstyle.checks.regexp.SinglelineDetector\")));\n+            else if (clazz == RegexpSinglelineCheck.class || clazz == RegexpSinglelineJavaCheck.class) {\n+                set.addAll(getCheckMessageKeys(Class.forName(\"com.puppycrawl.tools.checkstyle.checks.regexp.SinglelineDetector\")));\n             }\n-            return checkstyleMessages;\n+            return set;\n         }\n         catch (final ClassNotFoundException ex) {\n-            final String message = String.format(Locale.ROOT, \"Couldn't find class: %s\", module.getName());\n-            throw new MacroExecutionException(message, (Throwable)ex);\n+            throw new MacroExecutionException(String.format(Locale.ROOT, \"Couldn't find class: %s\", clazz.getName()), (Throwable)ex);\n         }\n     }\n     \n-    private static String getFieldValue(final Field field, final Object instance) throws MacroExecutionException {\n+    private static String getFieldValue(final Field field, final Object obj) throws MacroExecutionException {\n         try {\n             field.trySetAccessible();\n-            return field.get(instance).toString();\n+            return field.get(obj).toString();\n         }\n         catch (final IllegalAccessException ex) {\n             throw new MacroExecutionException(\"Couldn't get field value\", (Throwable)ex);\n         }\n     }\n     \n-    public static Object getModuleInstance(final String moduleName) throws MacroExecutionException {\n-        final ModuleFactory factory = (ModuleFactory)getPackageObjectFactory();\n+    public static Object getModuleInstance(final String s) throws MacroExecutionException {\n+        final PackageObjectFactory packageObjectFactory = getPackageObjectFactory();\n         try {\n-            return factory.createModule(moduleName);\n+            return ((ModuleFactory)packageObjectFactory).createModule(s);\n         }\n         catch (final CheckstyleException ex) {\n-            throw new MacroExecutionException(\"Couldn't find class: \" + moduleName, (Throwable)ex);\n+            throw new MacroExecutionException(\"Couldn't find class: \" + s, (Throwable)ex);\n         }\n     }\n     \n     private static PackageObjectFactory getPackageObjectFactory() throws MacroExecutionException {\n         try {\n-            final ClassLoader cl = ViolationMessagesMacro.class.getClassLoader();\n-            final Set<String> packageNames = PackageNamesLoader.getPackageNames(cl);\n-            return new PackageObjectFactory((Set)packageNames, cl);\n+            final ClassLoader classLoader = ViolationMessagesMacro.class.getClassLoader();\n+            return new PackageObjectFactory(PackageNamesLoader.getPackageNames(classLoader), classLoader);\n         }\n         catch (final CheckstyleException ex) {\n             throw new MacroExecutionException(\"Couldn't load checkstyle modules\", (Throwable)ex);\n         }\n     }\n     \n-    public static String getNewlineAndIndentSpaces(final int amountOfSpaces) {\n-        return System.lineSeparator() + \" \".repeat(amountOfSpaces);\n+    public static String getNewlineAndIndentSpaces(final int count) {\n+        return System.lineSeparator() + \" \".repeat(count);\n     }\n     \n     public static Set<Path> getXdocsTemplatesFilePaths() throws MacroExecutionException {\n-        final Path directory = Paths.get(\"src/xdocs\", new String[0]);\n-        try (final Stream<Path> stream = Files.find(directory, Integer.MAX_VALUE, (path, attr) -> attr.isRegularFile() && path.toString().endsWith(\".xml.template\"), new FileVisitOption[0])) {\n-            final Set<? super Path> set = (Set<? super Path>)stream.collect((Collector<? super Path, ?, Set<? super Path>>)Collectors.toSet());\n+        final Path value = Paths.get(\"src/xdocs\", new String[0]);\n+        try (final Stream<Path> find = Files.find(value, Integer.MAX_VALUE, (path, basicFileAttributes) -> basicFileAttributes.isRegularFile() && path.toString().endsWith(\".xml.template\"), new FileVisitOption[0])) {\n+            final Set<Object> set = (Set<Object>)find.collect(Collectors.toSet());\n             return (Set<Path>)set;\n         }\n-        catch (final IOException ioException) {\n-            throw new MacroExecutionException(\"Failed to find xdocs templates\", (Throwable)ioException);\n+        catch (final IOException ex) {\n+            throw new MacroExecutionException(\"Failed to find xdocs templates\", (Throwable)ex);\n         }\n     }\n     \n-    public static String getParentModule(final Class<?> moduleClass) throws MacroExecutionException {\n-        String parentModuleName = \"\";\n-        for (Class<?> parentClass = moduleClass.getSuperclass(); parentClass != null; parentClass = parentClass.getSuperclass()) {\n-            parentModuleName = SiteUtil.CLASS_TO_PARENT_MODULE.get(parentClass);\n-            if (parentModuleName != null) {\n+    public static String getParentModule(final Class<?> clazz) throws MacroExecutionException {\n+        String s = \"\";\n+        for (Class<?> clazz2 = clazz.getSuperclass(); clazz2 != null; clazz2 = clazz2.getSuperclass()) {\n+            s = SiteUtil.CLASS_TO_PARENT_MODULE.get(clazz2);\n+            if (s != null) {\n                 break;\n             }\n         }\n-        if (parentModuleName == null || parentModuleName.isEmpty()) {\n-            final Class<?>[] interfaces2;\n-            final Class<?>[] interfaces = interfaces2 = moduleClass.getInterfaces();\n-            for (final Class<?> interfaceClass : interfaces2) {\n-                parentModuleName = SiteUtil.CLASS_TO_PARENT_MODULE.get(interfaceClass);\n-                if (parentModuleName != null) {\n+        if (s == null || s.isEmpty()) {\n+            final Class[] interfaces = clazz.getInterfaces();\n+            for (int length = interfaces.length, i = 0; i < length; ++i) {\n+                s = SiteUtil.CLASS_TO_PARENT_MODULE.get(interfaces[i]);\n+                if (s != null) {\n                     break;\n                 }\n             }\n         }\n-        if (parentModuleName == null || parentModuleName.isEmpty()) {\n-            final String message = String.format(Locale.ROOT, \"Failed to find parent module for %s\", moduleClass.getSimpleName());\n-            throw new MacroExecutionException(message);\n+        if (s == null || s.isEmpty()) {\n+            throw new MacroExecutionException(String.format(Locale.ROOT, \"Failed to find parent module for %s\", clazz.getSimpleName()));\n         }\n-        return parentModuleName;\n+        return s;\n     }\n     \n     static {\n         CLASS_TO_PARENT_MODULE = Map.ofEntries(Map.entry(AbstractCheck.class, TreeWalker.class.getSimpleName()), Map.entry(TreeWalkerFilter.class, TreeWalker.class.getSimpleName()), Map.entry(AbstractFileSetCheck.class, Checker.class.getSimpleName()), Map.entry(Filter.class, Checker.class.getSimpleName()), Map.entry(BeforeExecutionFileFilter.class, Checker.class.getSimpleName()));\n     }\n }\n"}]}
