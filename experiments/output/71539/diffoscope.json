{"diffoscope-json-version": 1, "source1": "first/Lister.class", "source2": "second/Lister.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,14 +15,18 @@\n import java.nio.file.OpenOption;\n import java.io.File;\n \n public final class Lister\n {\n     private static final ArchiveStreamFactory FACTORY;\n     \n+    static {\n+        FACTORY = ArchiveStreamFactory.DEFAULT;\n+    }\n+    \n     public static void main(final String[] args) throws Exception {\n         if (args.length == 0) {\n             usage();\n             return;\n         }\n         System.out.println(\"Analysing \" + args[0]);\n         final File f = new File(args[0]);\n@@ -41,130 +45,191 @@\n         }\n         else {\n             listStream(f, args);\n         }\n     }\n     \n     private static void listStream(final File f, final String[] args) throws ArchiveException, IOException {\n-        final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]));\n+        Throwable t = null;\n         try {\n-            final ArchiveInputStream ais = createArchiveInputStream(args, fis);\n+            final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]));\n             try {\n-                System.out.println(\"Created \" + ais.toString());\n-                ArchiveEntry ae;\n-                while ((ae = ais.getNextEntry()) != null) {\n-                    System.out.println(ae.getName());\n-                }\n-                if (ais != null) {\n-                    ais.close();\n+                final ArchiveInputStream ais = createArchiveInputStream(args, fis);\n+                try {\n+                    System.out.println(\"Created \" + ais.toString());\n+                    ArchiveEntry ae;\n+                    while ((ae = ais.getNextEntry()) != null) {\n+                        System.out.println(ae.getName());\n+                    }\n                 }\n-            }\n-            catch (final Throwable t) {\n-                if (ais != null) {\n-                    try {\n+                finally {\n+                    if (ais != null) {\n                         ais.close();\n                     }\n-                    catch (final Throwable exception) {\n+                }\n+                if (fis != null) {\n+                    fis.close();\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n                         t.addSuppressed(exception);\n                     }\n                 }\n-                throw t;\n+                if (fis != null) {\n+                    fis.close();\n+                }\n             }\n-            fis.close();\n         }\n-        catch (final Throwable t2) {\n-            try {\n-                fis.close();\n-            }\n-            catch (final Throwable exception2) {\n-                t2.addSuppressed(exception2);\n+        finally {\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n             }\n-            throw t2;\n         }\n     }\n     \n     private static ArchiveInputStream createArchiveInputStream(final String[] args, final InputStream fis) throws ArchiveException {\n         if (args.length > 1) {\n             return Lister.FACTORY.createArchiveInputStream(args[1], fis);\n         }\n         return Lister.FACTORY.createArchiveInputStream(fis);\n     }\n     \n     private static String detectFormat(final File f) throws ArchiveException, IOException {\n-        try (final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]))) {\n-            return ArchiveStreamFactory.detect(fis);\n+        Throwable t = null;\n+        try {\n+            final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]));\n+            try {\n+                return ArchiveStreamFactory.detect(fis);\n+            }\n+            finally {\n+                if (fis != null) {\n+                    fis.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     private static void list7z(final File f) throws ArchiveException, IOException {\n-        final SevenZFile z = new SevenZFile(f);\n+        Throwable t = null;\n         try {\n-            System.out.println(\"Created \" + z.toString());\n-            ArchiveEntry ae;\n-            while ((ae = (ArchiveEntry)z.getNextEntry()) != null) {\n-                final String name = (ae.getName() == null) ? (z.getDefaultName() + \" (entry name was null)\") : ae.getName();\n-                System.out.println(name);\n-            }\n-            z.close();\n-        }\n-        catch (final Throwable t) {\n+            final SevenZFile z = new SevenZFile(f);\n             try {\n-                z.close();\n+                System.out.println(\"Created \" + z.toString());\n+                ArchiveEntry ae;\n+                while ((ae = (ArchiveEntry)z.getNextEntry()) != null) {\n+                    final String name = (ae.getName() == null) ? (String.valueOf(z.getDefaultName()) + \" (entry name was null)\") : ae.getName();\n+                    System.out.println(name);\n+                }\n             }\n-            catch (final Throwable exception) {\n-                t.addSuppressed(exception);\n+            finally {\n+                if (z != null) {\n+                    z.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n-            throw t;\n         }\n     }\n     \n     private static void listZipUsingZipFile(final File f) throws ArchiveException, IOException {\n-        final ZipFile z = new ZipFile(f);\n+        Throwable t = null;\n         try {\n-            System.out.println(\"Created \" + z.toString());\n-            final Enumeration<ZipArchiveEntry> en = z.getEntries();\n-            while (en.hasMoreElements()) {\n-                System.out.println(((ZipArchiveEntry)en.nextElement()).getName());\n-            }\n-            z.close();\n-        }\n-        catch (final Throwable t) {\n+            final ZipFile z = new ZipFile(f);\n             try {\n-                z.close();\n+                System.out.println(\"Created \" + z.toString());\n+                final Enumeration<ZipArchiveEntry> en = z.getEntries();\n+                while (en.hasMoreElements()) {\n+                    System.out.println(((ZipArchiveEntry)en.nextElement()).getName());\n+                }\n             }\n-            catch (final Throwable exception) {\n-                t.addSuppressed(exception);\n+            finally {\n+                if (z != null) {\n+                    z.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n-            throw t;\n         }\n     }\n     \n     private static void listZipUsingTarFile(final File f) throws ArchiveException, IOException {\n-        final TarFile t = new TarFile(f);\n+        Throwable t2 = null;\n         try {\n-            System.out.println(\"Created \" + t.toString());\n-            for (final TarArchiveEntry en : t.getEntries()) {\n-                System.out.println(en.getName());\n-            }\n-            t.close();\n-        }\n-        catch (final Throwable t2) {\n+            final TarFile t = new TarFile(f);\n             try {\n-                t.close();\n+                System.out.println(\"Created \" + t.toString());\n+                for (final TarArchiveEntry en : t.getEntries()) {\n+                    System.out.println(en.getName());\n+                }\n+            }\n+            finally {\n+                if (t != null) {\n+                    t.close();\n+                }\n             }\n-            catch (final Throwable exception) {\n-                t2.addSuppressed(exception);\n+        }\n+        finally {\n+            if (t2 == null) {\n+                final Throwable exception;\n+                t2 = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t2 != exception) {\n+                    t2.addSuppressed(exception);\n+                }\n             }\n-            throw t2;\n         }\n     }\n     \n     private static void usage() {\n         System.out.println(\"Parameters: archive-name [archive-type]\\n\");\n         System.out.println(\"the magic archive-type 'zipfile' prefers ZipFile over ZipArchiveInputStream\");\n         System.out.println(\"the magic archive-type 'tarfile' prefers TarFile over TarArchiveInputStream\");\n     }\n-    \n-    static {\n-        FACTORY = ArchiveStreamFactory.DEFAULT;\n-    }\n }\n"}]}
