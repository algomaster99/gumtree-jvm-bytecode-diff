{"diffoscope-json-version": 1, "source1": "first/InterpolatorSpecification$Builder.class", "source2": "second/InterpolatorSpecification$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,66 +17,67 @@\n     private Function<Object, String> stringConverter;\n     \n     public Builder() {\n         this.prefixLookups = new HashMap();\n         this.defLookups = new LinkedList();\n     }\n     \n-    public Builder withPrefixLookup(final String prefix, final Lookup lookup) {\n-        if (prefix == null) {\n+    public Builder withPrefixLookup(final String s, final Lookup lookup) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Prefix must not be null!\");\n         }\n         checkLookup(lookup);\n-        this.prefixLookups.put(prefix, lookup);\n+        this.prefixLookups.put(s, lookup);\n         return this;\n     }\n     \n-    public Builder withPrefixLookups(final Map<String, ? extends Lookup> lookups) {\n-        if (lookups != null) {\n-            for (final Map.Entry<String, ? extends Lookup> e : lookups.entrySet()) {\n-                this.withPrefixLookup(e.getKey(), (Lookup)e.getValue());\n+    public Builder withPrefixLookups(final Map<String, ? extends Lookup> map) {\n+        if (map != null) {\n+            for (final Map.Entry entry : map.entrySet()) {\n+                this.withPrefixLookup((String)entry.getKey(), (Lookup)entry.getValue());\n             }\n         }\n         return this;\n     }\n     \n     public Builder withDefaultLookup(final Lookup lookup) {\n         checkLookup(lookup);\n         this.defLookups.add(lookup);\n         return this;\n     }\n     \n-    public Builder withDefaultLookups(final Collection<? extends Lookup> lookups) {\n-        if (lookups != null) {\n-            for (final Lookup l : lookups) {\n-                this.withDefaultLookup(l);\n+    public Builder withDefaultLookups(final Collection<? extends Lookup> collection) {\n+        if (collection != null) {\n+            final Iterator<? extends Lookup> iterator = collection.iterator();\n+            while (iterator.hasNext()) {\n+                this.withDefaultLookup((Lookup)iterator.next());\n             }\n         }\n         return this;\n     }\n     \n-    public Builder withInterpolator(final ConfigurationInterpolator ci) {\n-        this.interpolator = ci;\n+    public Builder withInterpolator(final ConfigurationInterpolator interpolator) {\n+        this.interpolator = interpolator;\n         return this;\n     }\n     \n-    public Builder withParentInterpolator(final ConfigurationInterpolator parent) {\n-        this.parentInterpolator = parent;\n+    public Builder withParentInterpolator(final ConfigurationInterpolator parentInterpolator) {\n+        this.parentInterpolator = parentInterpolator;\n         return this;\n     }\n     \n-    public Builder withStringConverter(final Function<Object, String> fn) {\n-        this.stringConverter = fn;\n+    public Builder withStringConverter(final Function<Object, String> stringConverter) {\n+        this.stringConverter = stringConverter;\n         return this;\n     }\n     \n     public InterpolatorSpecification create() {\n-        final InterpolatorSpecification spec = new InterpolatorSpecification(this, (InterpolatorSpecification.InterpolatorSpecification$1)null);\n+        final InterpolatorSpecification interpolatorSpecification = new InterpolatorSpecification(this, (InterpolatorSpecification.InterpolatorSpecification$1)null);\n         this.reset();\n-        return spec;\n+        return interpolatorSpecification;\n     }\n     \n     public void reset() {\n         this.interpolator = null;\n         this.parentInterpolator = null;\n         this.prefixLookups.clear();\n         this.defLookups.clear();\n"}]}
