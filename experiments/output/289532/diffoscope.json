{"diffoscope-json-version": 1, "source1": "first/CSVParser.class", "source2": "second/CSVParser.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,150 +1,150 @@\n-  SHA-256 checksum 98f095357134ba89f4b9864c43a090471f461159600d186074b2c050bd808919\n+  SHA-256 checksum 850872ed4b2749303b368b85ec1647de46683cdb4fbc4f8fa400d144c0a283a6\n   Compiled from \"CSVParser.java\"\n public final class org.apache.commons.csv.CSVParser extends java.lang.Object implements java.lang.Iterable<org.apache.commons.csv.CSVRecord>, java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #14                         // org/apache/commons/csv/CSVParser\n   super_class: #76                        // java/lang/Object\n   interfaces: 2, fields: 8, methods: 25, attributes: 3\n Constant pool:\n-    #1 = String             #211          // file\n-    #2 = Methodref          #212.#213     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-    #3 = Methodref          #214.#215     // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #4 = Methodref          #14.#216      // org/apache/commons/csv/CSVParser.parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-    #5 = String             #217          // inputStream\n+    #1 = String             #208          // file\n+    #2 = Methodref          #209.#210     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+    #3 = Methodref          #211.#212     // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #4 = Methodref          #14.#213      // org/apache/commons/csv/CSVParser.parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+    #5 = String             #214          // inputStream\n     #6 = String             #137          // format\n-    #7 = Class              #218          // java/io/InputStreamReader\n-    #8 = Methodref          #7.#219       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-    #9 = Methodref          #14.#220      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-   #10 = String             #221          // path\n-   #11 = Class              #222          // java/nio/file/OpenOption\n-   #12 = Methodref          #223.#224     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-   #13 = Methodref          #14.#225      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-   #14 = Class              #226          // org/apache/commons/csv/CSVParser\n-   #15 = Methodref          #14.#227      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-   #16 = String             #228          // string\n-   #17 = Class              #229          // java/io/StringReader\n-   #18 = Methodref          #17.#230      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n-   #19 = String             #231          // url\n-   #20 = String             #232          // charset\n-   #21 = Methodref          #233.#234     // java/net/URL.openStream:()Ljava/io/InputStream;\n-   #22 = Methodref          #14.#235      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-   #23 = Methodref          #76.#236      // java/lang/Object.\"<init>\":()V\n-   #24 = Class              #237          // java/util/ArrayList\n-   #25 = Methodref          #24.#236      // java/util/ArrayList.\"<init>\":()V\n-   #26 = Fieldref           #14.#238      // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n-   #27 = Class              #239          // org/apache/commons/csv/Token\n-   #28 = Methodref          #27.#236      // org/apache/commons/csv/Token.\"<init>\":()V\n-   #29 = Fieldref           #14.#240      // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n-   #30 = String             #241          // reader\n-   #31 = Methodref          #242.#243     // org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n-   #32 = Fieldref           #14.#244      // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n-   #33 = Class              #245          // org/apache/commons/csv/Lexer\n-   #34 = Class              #246          // org/apache/commons/csv/ExtendedBufferedReader\n-   #35 = Methodref          #34.#247      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n-   #36 = Methodref          #33.#248      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-   #37 = Fieldref           #14.#249      // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n-   #38 = Class              #250          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n-   #39 = Methodref          #38.#251      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-   #40 = Fieldref           #14.#252      // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-   #41 = Methodref          #14.#253      // org/apache/commons/csv/CSVParser.createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n-   #42 = Fieldref           #14.#254      // org/apache/commons/csv/CSVParser.headers:Lorg/apache/commons/csv/CSVParser$Headers;\n-   #43 = Fieldref           #14.#255      // org/apache/commons/csv/CSVParser.characterOffset:J\n-   #44 = Fieldref           #14.#256      // org/apache/commons/csv/CSVParser.recordNumber:J\n-   #45 = Fieldref           #27.#257      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-   #46 = Methodref          #67.#258      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #47 = Methodref          #242.#259     // org/apache/commons/csv/CSVFormat.getTrim:()Z\n-   #48 = Methodref          #260.#261     // java/lang/String.trim:()Ljava/lang/String;\n-   #49 = Methodref          #260.#262     // java/lang/String.isEmpty:()Z\n-   #50 = Methodref          #242.#263     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n-   #51 = Methodref          #14.#264      // org/apache/commons/csv/CSVParser.handleNull:(Ljava/lang/String;)Ljava/lang/String;\n-   #52 = InterfaceMethodref #265.#266     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #53 = Methodref          #33.#267      // org/apache/commons/csv/Lexer.close:()V\n-   #54 = Methodref          #242.#268     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n-   #55 = Class              #269          // java/util/TreeMap\n-   #56 = Fieldref           #260.#270     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-   #57 = Methodref          #55.#271      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n-   #58 = Class              #272          // java/util/LinkedHashMap\n-   #59 = Methodref          #58.#236      // java/util/LinkedHashMap.\"<init>\":()V\n-   #60 = Methodref          #242.#273     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n-   #61 = Methodref          #14.#274      // org/apache/commons/csv/CSVParser.createEmptyHeaderMap:()Ljava/util/Map;\n-   #62 = Methodref          #14.#275      // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-   #63 = Methodref          #122.#276     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n-   #64 = Methodref          #242.#277     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n-   #65 = Methodref          #242.#278     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n-   #66 = Class              #279          // java/lang/IllegalArgumentException\n-   #67 = Class              #280          // java/lang/StringBuilder\n-   #68 = Methodref          #67.#236      // java/lang/StringBuilder.\"<init>\":()V\n-   #69 = String             #281          // A header name is missing in\n-   #70 = Methodref          #67.#282      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #71 = Methodref          #283.#284     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-   #72 = Methodref          #66.#230      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #73 = InterfaceMethodref #285.#286     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #74 = Methodref          #242.#287     // org/apache/commons/csv/CSVFormat.getAllowDuplicateHeaderNames:()Z\n-   #75 = String             #288          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n-   #76 = Class              #289          // java/lang/Object\n-   #77 = Methodref          #260.#290     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #78 = Methodref          #291.#292     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #79 = InterfaceMethodref #285.#293     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #80 = Methodref          #24.#294      // java/util/ArrayList.\"<init>\":(I)V\n-   #81 = Methodref          #295.#296     // java/util/Collections.emptyList:()Ljava/util/List;\n-   #82 = Methodref          #295.#297     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #83 = Class              #298          // org/apache/commons/csv/CSVParser$Headers\n-   #84 = Methodref          #83.#299      // org/apache/commons/csv/CSVParser$Headers.\"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n-   #85 = Methodref          #33.#300      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n-   #86 = Methodref          #33.#301      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n-   #87 = Fieldref           #83.#302      // org/apache/commons/csv/CSVParser$Headers.headerMap:Ljava/util/Map;\n-   #88 = InterfaceMethodref #285.#303     // java/util/Map.putAll:(Ljava/util/Map;)V\n-   #89 = Fieldref           #83.#304      // org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n-   #90 = Fieldref           #27.#305      // org/apache/commons/csv/Token.isQuoted:Z\n-   #91 = Methodref          #242.#306     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n-   #92 = Methodref          #14.#307      // org/apache/commons/csv/CSVParser.isStrictQuoteMode:()Z\n-   #93 = Methodref          #260.#308     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #94 = Methodref          #33.#309      // org/apache/commons/csv/Lexer.isClosed:()Z\n-   #95 = Methodref          #242.#310     // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-   #96 = Fieldref           #311.#312     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-   #97 = Fieldref           #311.#313     // org/apache/commons/csv/QuoteMode.NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n-   #98 = InterfaceMethodref #265.#314     // java/util/List.clear:()V\n-   #99 = Methodref          #33.#315      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n-  #100 = Methodref          #27.#316      // org/apache/commons/csv/Token.reset:()V\n-  #101 = Methodref          #33.#317      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #102 = Fieldref           #133.#318     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n-  #103 = Fieldref           #27.#319      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-  #104 = Methodref          #320.#321     // org/apache/commons/csv/Token$Type.ordinal:()I\n-  #105 = Methodref          #14.#322      // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n-  #106 = Fieldref           #27.#323      // org/apache/commons/csv/Token.isReady:Z\n-  #107 = Class              #324          // java/io/IOException\n-  #108 = String             #325          // (line\n-  #109 = Methodref          #14.#300      // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n-  #110 = Methodref          #67.#326      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-  #111 = String             #327          // ) invalid parse sequence\n-  #112 = Methodref          #107.#230     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #113 = Class              #328          // org/apache/commons/csv/Constants\n-  #114 = Methodref          #67.#329      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #115 = Methodref          #67.#330      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #116 = Fieldref           #320.#331     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #117 = Class              #332          // java/lang/IllegalStateException\n-  #118 = String             #333          // Unexpected Token type:\n-  #119 = Methodref          #67.#334      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #120 = Methodref          #117.#230     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #121 = InterfaceMethodref #265.#262     // java/util/List.isEmpty:()Z\n-  #122 = Class              #335          // org/apache/commons/csv/CSVRecord\n-  #123 = Fieldref           #113.#336     // org/apache/commons/csv/Constants.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #124 = InterfaceMethodref #265.#337     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #125 = Class              #338          // \"[Ljava/lang/String;\"\n-  #126 = Methodref          #122.#339     // org/apache/commons/csv/CSVRecord.\"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #127 = Methodref          #14.#340      // org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n-  #128 = Class              #341          // java/util/Spliterator\n-  #129 = Methodref          #342.#343     // java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #130 = Methodref          #344.#345     // java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n-  #131 = Class              #346          // java/lang/Iterable\n-  #132 = Class              #347          // java/io/Closeable\n-  #133 = Class              #348          // org/apache/commons/csv/CSVParser$1\n+    #7 = Class              #215          // java/io/InputStreamReader\n+    #8 = Methodref          #7.#216       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+    #9 = Methodref          #14.#217      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #10 = String             #218          // path\n+   #11 = Class              #219          // java/nio/file/OpenOption\n+   #12 = Methodref          #220.#221     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #13 = Methodref          #14.#222      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #14 = Class              #223          // org/apache/commons/csv/CSVParser\n+   #15 = Methodref          #14.#224      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+   #16 = String             #225          // string\n+   #17 = Class              #226          // java/io/StringReader\n+   #18 = Methodref          #17.#227      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+   #19 = String             #228          // url\n+   #20 = String             #229          // charset\n+   #21 = Methodref          #230.#231     // java/net/URL.openStream:()Ljava/io/InputStream;\n+   #22 = Methodref          #14.#232      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+   #23 = Methodref          #76.#233      // java/lang/Object.\"<init>\":()V\n+   #24 = Class              #234          // java/util/ArrayList\n+   #25 = Methodref          #24.#233      // java/util/ArrayList.\"<init>\":()V\n+   #26 = Fieldref           #14.#235      // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n+   #27 = Class              #236          // org/apache/commons/csv/Token\n+   #28 = Methodref          #27.#233      // org/apache/commons/csv/Token.\"<init>\":()V\n+   #29 = Fieldref           #14.#237      // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n+   #30 = String             #238          // reader\n+   #31 = Methodref          #239.#240     // org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n+   #32 = Fieldref           #14.#241      // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n+   #33 = Class              #242          // org/apache/commons/csv/Lexer\n+   #34 = Class              #243          // org/apache/commons/csv/ExtendedBufferedReader\n+   #35 = Methodref          #34.#244      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n+   #36 = Methodref          #33.#245      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+   #37 = Fieldref           #14.#246      // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n+   #38 = Class              #247          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n+   #39 = Methodref          #38.#248      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+   #40 = Fieldref           #14.#249      // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+   #41 = Methodref          #14.#250      // org/apache/commons/csv/CSVParser.createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n+   #42 = Fieldref           #14.#251      // org/apache/commons/csv/CSVParser.headers:Lorg/apache/commons/csv/CSVParser$Headers;\n+   #43 = Fieldref           #14.#252      // org/apache/commons/csv/CSVParser.characterOffset:J\n+   #44 = Fieldref           #14.#253      // org/apache/commons/csv/CSVParser.recordNumber:J\n+   #45 = Fieldref           #27.#254      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+   #46 = Methodref          #67.#255      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #47 = Methodref          #239.#256     // org/apache/commons/csv/CSVFormat.getTrim:()Z\n+   #48 = Methodref          #170.#257     // java/lang/String.trim:()Ljava/lang/String;\n+   #49 = Methodref          #170.#258     // java/lang/String.isEmpty:()Z\n+   #50 = Methodref          #239.#259     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n+   #51 = Methodref          #14.#260      // org/apache/commons/csv/CSVParser.handleNull:(Ljava/lang/String;)Ljava/lang/String;\n+   #52 = InterfaceMethodref #179.#261     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #53 = Methodref          #33.#262      // org/apache/commons/csv/Lexer.close:()V\n+   #54 = Methodref          #239.#263     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n+   #55 = Class              #264          // java/util/TreeMap\n+   #56 = Fieldref           #170.#265     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+   #57 = Methodref          #55.#266      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n+   #58 = Class              #267          // java/util/LinkedHashMap\n+   #59 = Methodref          #58.#233      // java/util/LinkedHashMap.\"<init>\":()V\n+   #60 = Methodref          #239.#268     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+   #61 = Methodref          #14.#269      // org/apache/commons/csv/CSVParser.createEmptyHeaderMap:()Ljava/util/Map;\n+   #62 = Methodref          #14.#270      // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+   #63 = Methodref          #122.#271     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n+   #64 = Methodref          #239.#272     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n+   #65 = Methodref          #239.#273     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n+   #66 = Class              #274          // java/lang/IllegalArgumentException\n+   #67 = Class              #275          // java/lang/StringBuilder\n+   #68 = Methodref          #67.#233      // java/lang/StringBuilder.\"<init>\":()V\n+   #69 = String             #276          // A header name is missing in\n+   #70 = Methodref          #67.#277      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #71 = Methodref          #278.#279     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+   #72 = Methodref          #66.#227      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #73 = InterfaceMethodref #175.#280     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #74 = Methodref          #239.#281     // org/apache/commons/csv/CSVFormat.getAllowDuplicateHeaderNames:()Z\n+   #75 = String             #282          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n+   #76 = Class              #283          // java/lang/Object\n+   #77 = Methodref          #170.#284     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #78 = Methodref          #285.#286     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #79 = InterfaceMethodref #175.#287     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #80 = Methodref          #24.#288      // java/util/ArrayList.\"<init>\":(I)V\n+   #81 = Methodref          #289.#290     // java/util/Collections.emptyList:()Ljava/util/List;\n+   #82 = Methodref          #289.#291     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+   #83 = Class              #292          // org/apache/commons/csv/CSVParser$Headers\n+   #84 = Methodref          #83.#293      // org/apache/commons/csv/CSVParser$Headers.\"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n+   #85 = Methodref          #33.#294      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n+   #86 = Methodref          #33.#295      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n+   #87 = Fieldref           #83.#296      // org/apache/commons/csv/CSVParser$Headers.headerMap:Ljava/util/Map;\n+   #88 = InterfaceMethodref #175.#297     // java/util/Map.putAll:(Ljava/util/Map;)V\n+   #89 = Fieldref           #83.#298      // org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n+   #90 = Fieldref           #27.#299      // org/apache/commons/csv/Token.isQuoted:Z\n+   #91 = Methodref          #239.#300     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n+   #92 = Methodref          #14.#301      // org/apache/commons/csv/CSVParser.isStrictQuoteMode:()Z\n+   #93 = Methodref          #170.#302     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #94 = Methodref          #33.#303      // org/apache/commons/csv/Lexer.isClosed:()Z\n+   #95 = Methodref          #239.#304     // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+   #96 = Fieldref           #305.#306     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+   #97 = Fieldref           #305.#307     // org/apache/commons/csv/QuoteMode.NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n+   #98 = InterfaceMethodref #179.#308     // java/util/List.clear:()V\n+   #99 = Methodref          #33.#309      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n+  #100 = Methodref          #27.#310      // org/apache/commons/csv/Token.reset:()V\n+  #101 = Methodref          #33.#311      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #102 = Fieldref           #133.#312     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n+  #103 = Fieldref           #27.#313      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+  #104 = Methodref          #314.#315     // org/apache/commons/csv/Token$Type.ordinal:()I\n+  #105 = Methodref          #14.#316      // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n+  #106 = Fieldref           #27.#317      // org/apache/commons/csv/Token.isReady:Z\n+  #107 = Class              #318          // java/io/IOException\n+  #108 = String             #319          // (line\n+  #109 = Methodref          #14.#294      // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n+  #110 = Methodref          #67.#320      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #111 = String             #321          // ) invalid parse sequence\n+  #112 = Methodref          #107.#227     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #113 = Class              #322          // org/apache/commons/csv/Constants\n+  #114 = Methodref          #67.#323      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #115 = Methodref          #67.#324      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #116 = Fieldref           #314.#325     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #117 = Class              #326          // java/lang/IllegalStateException\n+  #118 = String             #327          // Unexpected Token type:\n+  #119 = Methodref          #67.#328      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #120 = Methodref          #117.#227     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #121 = InterfaceMethodref #179.#258     // java/util/List.isEmpty:()Z\n+  #122 = Class              #329          // org/apache/commons/csv/CSVRecord\n+  #123 = Fieldref           #113.#330     // org/apache/commons/csv/Constants.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #124 = InterfaceMethodref #179.#331     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #125 = Class              #332          // \"[Ljava/lang/String;\"\n+  #126 = Methodref          #122.#333     // org/apache/commons/csv/CSVRecord.\"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #127 = Methodref          #14.#334      // org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n+  #128 = Class              #335          // java/util/Spliterator\n+  #129 = Methodref          #336.#337     // java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #130 = Methodref          #338.#339     // java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #131 = Class              #340          // java/lang/Iterable\n+  #132 = Class              #341          // java/io/Closeable\n+  #133 = Class              #342          // org/apache/commons/csv/CSVParser$1\n   #134 = Utf8               InnerClasses\n   #135 = Utf8               Headers\n   #136 = Utf8               CSVRecordIterator\n   #137 = Utf8               format\n   #138 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n   #139 = Utf8               headers\n   #140 = Utf8               Lorg/apache/commons/csv/CSVParser$Headers;\n@@ -173,296 +173,290 @@\n   #163 = Utf8               (Ljava/net/URL;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n   #164 = Utf8               <init>\n   #165 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n   #166 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n   #167 = Utf8               addRecordValue\n   #168 = Utf8               (Z)V\n   #169 = Utf8               StackMapTable\n-  #170 = Class              #349          // java/lang/String\n+  #170 = Class              #343          // java/lang/String\n   #171 = Utf8               close\n   #172 = Utf8               ()V\n   #173 = Utf8               createEmptyHeaderMap\n   #174 = Utf8               ()Ljava/util/Map;\n-  #175 = Class              #350          // java/util/Map\n+  #175 = Class              #344          // java/util/Map\n   #176 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n   #177 = Utf8               createHeaders\n   #178 = Utf8               ()Lorg/apache/commons/csv/CSVParser$Headers;\n-  #179 = Class              #226          // org/apache/commons/csv/CSVParser\n-  #180 = Class              #351          // java/util/List\n-  #181 = Utf8               getCurrentLineNumber\n-  #182 = Utf8               ()J\n-  #183 = Utf8               getFirstEndOfLine\n-  #184 = Utf8               ()Ljava/lang/String;\n-  #185 = Utf8               getHeaderMap\n-  #186 = Utf8               getHeaderMapRaw\n-  #187 = Utf8               getHeaderNames\n-  #188 = Utf8               ()Ljava/util/List;\n-  #189 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n-  #190 = Utf8               getRecordNumber\n-  #191 = Utf8               getRecords\n-  #192 = Class              #335          // org/apache/commons/csv/CSVRecord\n-  #193 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n-  #194 = Utf8               handleNull\n-  #195 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #196 = Utf8               isClosed\n-  #197 = Utf8               ()Z\n-  #198 = Utf8               isStrictQuoteMode\n-  #199 = Utf8               iterator\n-  #200 = Utf8               ()Ljava/util/Iterator;\n-  #201 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n-  #202 = Utf8               nextRecord\n-  #203 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n-  #204 = Class              #280          // java/lang/StringBuilder\n-  #205 = Utf8               stream\n-  #206 = Utf8               ()Ljava/util/stream/Stream;\n-  #207 = Utf8               ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n-  #208 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n-  #209 = Utf8               SourceFile\n-  #210 = Utf8               CSVParser.java\n-  #211 = Utf8               file\n-  #212 = Class              #352          // java/util/Objects\n-  #213 = NameAndType        #353:#354     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #214 = Class              #355          // java/io/File\n-  #215 = NameAndType        #356:#357     // toPath:()Ljava/nio/file/Path;\n-  #216 = NameAndType        #154:#160     // parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #217 = Utf8               inputStream\n-  #218 = Utf8               java/io/InputStreamReader\n-  #219 = NameAndType        #164:#358     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #220 = NameAndType        #154:#161     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #221 = Utf8               path\n-  #222 = Utf8               java/nio/file/OpenOption\n-  #223 = Class              #359          // java/nio/file/Files\n-  #224 = NameAndType        #360:#361     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #225 = NameAndType        #154:#159     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #226 = Utf8               org/apache/commons/csv/CSVParser\n-  #227 = NameAndType        #164:#165     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #228 = Utf8               string\n-  #229 = Utf8               java/io/StringReader\n-  #230 = NameAndType        #164:#362     // \"<init>\":(Ljava/lang/String;)V\n-  #231 = Utf8               url\n-  #232 = Utf8               charset\n-  #233 = Class              #363          // java/net/URL\n-  #234 = NameAndType        #364:#365     // openStream:()Ljava/io/InputStream;\n-  #235 = NameAndType        #164:#166     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-  #236 = NameAndType        #164:#172     // \"<init>\":()V\n-  #237 = Utf8               java/util/ArrayList\n-  #238 = NameAndType        #145:#146     // recordList:Ljava/util/List;\n-  #239 = Utf8               org/apache/commons/csv/Token\n-  #240 = NameAndType        #152:#153     // reusableToken:Lorg/apache/commons/csv/Token;\n-  #241 = Utf8               reader\n-  #242 = Class              #366          // org/apache/commons/csv/CSVFormat\n-  #243 = NameAndType        #367:#368     // copy:()Lorg/apache/commons/csv/CSVFormat;\n-  #244 = NameAndType        #137:#138     // format:Lorg/apache/commons/csv/CSVFormat;\n-  #245 = Utf8               org/apache/commons/csv/Lexer\n-  #246 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n-  #247 = NameAndType        #164:#369     // \"<init>\":(Ljava/io/Reader;)V\n-  #248 = NameAndType        #164:#370     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #249 = NameAndType        #141:#142     // lexer:Lorg/apache/commons/csv/Lexer;\n-  #250 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n-  #251 = NameAndType        #164:#371     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-  #252 = NameAndType        #143:#144     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-  #253 = NameAndType        #177:#178     // createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n-  #254 = NameAndType        #139:#140     // headers:Lorg/apache/commons/csv/CSVParser$Headers;\n-  #255 = NameAndType        #151:#150     // characterOffset:J\n-  #256 = NameAndType        #149:#150     // recordNumber:J\n-  #257 = NameAndType        #372:#373     // content:Ljava/lang/StringBuilder;\n-  #258 = NameAndType        #374:#184     // toString:()Ljava/lang/String;\n-  #259 = NameAndType        #375:#197     // getTrim:()Z\n-  #260 = Class              #349          // java/lang/String\n-  #261 = NameAndType        #376:#184     // trim:()Ljava/lang/String;\n-  #262 = NameAndType        #377:#197     // isEmpty:()Z\n-  #263 = NameAndType        #378:#197     // getTrailingDelimiter:()Z\n-  #264 = NameAndType        #194:#195     // handleNull:(Ljava/lang/String;)Ljava/lang/String;\n-  #265 = Class              #351          // java/util/List\n-  #266 = NameAndType        #379:#380     // add:(Ljava/lang/Object;)Z\n-  #267 = NameAndType        #171:#172     // close:()V\n-  #268 = NameAndType        #381:#197     // getIgnoreHeaderCase:()Z\n-  #269 = Utf8               java/util/TreeMap\n-  #270 = NameAndType        #382:#383     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-  #271 = NameAndType        #164:#384     // \"<init>\":(Ljava/util/Comparator;)V\n-  #272 = Utf8               java/util/LinkedHashMap\n-  #273 = NameAndType        #385:#386     // getHeader:()[Ljava/lang/String;\n-  #274 = NameAndType        #173:#174     // createEmptyHeaderMap:()Ljava/util/Map;\n-  #275 = NameAndType        #202:#203     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-  #276 = NameAndType        #387:#386     // values:()[Ljava/lang/String;\n-  #277 = NameAndType        #388:#197     // getSkipHeaderRecord:()Z\n-  #278 = NameAndType        #389:#197     // getAllowMissingColumnNames:()Z\n-  #279 = Utf8               java/lang/IllegalArgumentException\n-  #280 = Utf8               java/lang/StringBuilder\n-  #281 = Utf8               A header name is missing in\n-  #282 = NameAndType        #390:#391     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #283 = Class              #392          // java/util/Arrays\n-  #284 = NameAndType        #374:#393     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #285 = Class              #350          // java/util/Map\n-  #286 = NameAndType        #394:#380     // containsKey:(Ljava/lang/Object;)Z\n-  #287 = NameAndType        #395:#197     // getAllowDuplicateHeaderNames:()Z\n-  #288 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n-  #289 = Utf8               java/lang/Object\n-  #290 = NameAndType        #137:#396     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #291 = Class              #397          // java/lang/Integer\n-  #292 = NameAndType        #398:#399     // valueOf:(I)Ljava/lang/Integer;\n-  #293 = NameAndType        #400:#401     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #294 = NameAndType        #164:#402     // \"<init>\":(I)V\n-  #295 = Class              #403          // java/util/Collections\n-  #296 = NameAndType        #404:#188     // emptyList:()Ljava/util/List;\n-  #297 = NameAndType        #405:#406     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #298 = Utf8               org/apache/commons/csv/CSVParser$Headers\n-  #299 = NameAndType        #164:#407     // \"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n-  #300 = NameAndType        #181:#182     // getCurrentLineNumber:()J\n-  #301 = NameAndType        #408:#184     // getFirstEol:()Ljava/lang/String;\n-  #302 = NameAndType        #409:#410     // headerMap:Ljava/util/Map;\n-  #303 = NameAndType        #411:#412     // putAll:(Ljava/util/Map;)V\n-  #304 = NameAndType        #413:#146     // headerNames:Ljava/util/List;\n-  #305 = NameAndType        #414:#415     // isQuoted:Z\n-  #306 = NameAndType        #416:#184     // getNullString:()Ljava/lang/String;\n-  #307 = NameAndType        #198:#197     // isStrictQuoteMode:()Z\n-  #308 = NameAndType        #417:#380     // equals:(Ljava/lang/Object;)Z\n-  #309 = NameAndType        #196:#197     // isClosed:()Z\n-  #310 = NameAndType        #418:#419     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #311 = Class              #420          // org/apache/commons/csv/QuoteMode\n-  #312 = NameAndType        #421:#422     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #313 = NameAndType        #423:#422     // NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n-  #314 = NameAndType        #424:#172     // clear:()V\n-  #315 = NameAndType        #425:#182     // getCharacterPosition:()J\n-  #316 = NameAndType        #426:#172     // reset:()V\n-  #317 = NameAndType        #427:#428     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #318 = NameAndType        #429:#430     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n-  #319 = NameAndType        #431:#433     // type:Lorg/apache/commons/csv/Token$Type;\n-  #320 = Class              #434          // org/apache/commons/csv/Token$Type\n-  #321 = NameAndType        #435:#436     // ordinal:()I\n-  #322 = NameAndType        #167:#168     // addRecordValue:(Z)V\n-  #323 = NameAndType        #437:#415     // isReady:Z\n-  #324 = Utf8               java/io/IOException\n-  #325 = Utf8               (line\n-  #326 = NameAndType        #390:#438     // append:(J)Ljava/lang/StringBuilder;\n-  #327 = Utf8               ) invalid parse sequence\n-  #328 = Utf8               org/apache/commons/csv/Constants\n-  #329 = NameAndType        #390:#439     // append:(C)Ljava/lang/StringBuilder;\n-  #330 = NameAndType        #390:#440     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #331 = NameAndType        #441:#433     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #332 = Utf8               java/lang/IllegalStateException\n-  #333 = Utf8               Unexpected Token type:\n-  #334 = NameAndType        #390:#442     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #335 = Utf8               org/apache/commons/csv/CSVRecord\n-  #336 = NameAndType        #443:#338     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #337 = NameAndType        #444:#445     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #338 = Utf8               [Ljava/lang/String;\n-  #339 = NameAndType        #164:#446     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #340 = NameAndType        #199:#200     // iterator:()Ljava/util/Iterator;\n-  #341 = Utf8               java/util/Spliterator\n-  #342 = Class              #447          // java/util/Spliterators\n-  #343 = NameAndType        #448:#449     // spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #344 = Class              #450          // java/util/stream/StreamSupport\n-  #345 = NameAndType        #205:#451     // stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n-  #346 = Utf8               java/lang/Iterable\n-  #347 = Utf8               java/io/Closeable\n-  #348 = Utf8               org/apache/commons/csv/CSVParser$1\n-  #349 = Utf8               java/lang/String\n-  #350 = Utf8               java/util/Map\n-  #351 = Utf8               java/util/List\n-  #352 = Utf8               java/util/Objects\n-  #353 = Utf8               requireNonNull\n-  #354 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #355 = Utf8               java/io/File\n-  #356 = Utf8               toPath\n-  #357 = Utf8               ()Ljava/nio/file/Path;\n-  #358 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #359 = Utf8               java/nio/file/Files\n-  #360 = Utf8               newInputStream\n-  #361 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #362 = Utf8               (Ljava/lang/String;)V\n-  #363 = Utf8               java/net/URL\n-  #364 = Utf8               openStream\n-  #365 = Utf8               ()Ljava/io/InputStream;\n-  #366 = Utf8               org/apache/commons/csv/CSVFormat\n-  #367 = Utf8               copy\n-  #368 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n-  #369 = Utf8               (Ljava/io/Reader;)V\n-  #370 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #371 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n-  #372 = Utf8               content\n-  #373 = Utf8               Ljava/lang/StringBuilder;\n-  #374 = Utf8               toString\n-  #375 = Utf8               getTrim\n-  #376 = Utf8               trim\n-  #377 = Utf8               isEmpty\n-  #378 = Utf8               getTrailingDelimiter\n-  #379 = Utf8               add\n-  #380 = Utf8               (Ljava/lang/Object;)Z\n-  #381 = Utf8               getIgnoreHeaderCase\n-  #382 = Utf8               CASE_INSENSITIVE_ORDER\n-  #383 = Utf8               Ljava/util/Comparator;\n-  #384 = Utf8               (Ljava/util/Comparator;)V\n-  #385 = Utf8               getHeader\n-  #386 = Utf8               ()[Ljava/lang/String;\n-  #387 = Utf8               values\n-  #388 = Utf8               getSkipHeaderRecord\n-  #389 = Utf8               getAllowMissingColumnNames\n-  #390 = Utf8               append\n-  #391 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #392 = Utf8               java/util/Arrays\n-  #393 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #394 = Utf8               containsKey\n-  #395 = Utf8               getAllowDuplicateHeaderNames\n-  #396 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #397 = Utf8               java/lang/Integer\n-  #398 = Utf8               valueOf\n-  #399 = Utf8               (I)Ljava/lang/Integer;\n-  #400 = Utf8               put\n-  #401 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #402 = Utf8               (I)V\n-  #403 = Utf8               java/util/Collections\n-  #404 = Utf8               emptyList\n-  #405 = Utf8               unmodifiableList\n-  #406 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #407 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n-  #408 = Utf8               getFirstEol\n-  #409 = Utf8               headerMap\n-  #410 = Utf8               Ljava/util/Map;\n-  #411 = Utf8               putAll\n-  #412 = Utf8               (Ljava/util/Map;)V\n-  #413 = Utf8               headerNames\n-  #414 = Utf8               isQuoted\n-  #415 = Utf8               Z\n-  #416 = Utf8               getNullString\n-  #417 = Utf8               equals\n-  #418 = Utf8               getQuoteMode\n-  #419 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n-  #420 = Utf8               org/apache/commons/csv/QuoteMode\n-  #421 = Utf8               ALL_NON_NULL\n-  #422 = Utf8               Lorg/apache/commons/csv/QuoteMode;\n-  #423 = Utf8               NON_NUMERIC\n-  #424 = Utf8               clear\n-  #425 = Utf8               getCharacterPosition\n-  #426 = Utf8               reset\n-  #427 = Utf8               nextToken\n-  #428 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #429 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n-  #430 = Utf8               [I\n-  #431 = Utf8               type\n-  #432 = Utf8               Type\n-  #433 = Utf8               Lorg/apache/commons/csv/Token$Type;\n-  #434 = Utf8               org/apache/commons/csv/Token$Type\n-  #435 = Utf8               ordinal\n-  #436 = Utf8               ()I\n-  #437 = Utf8               isReady\n-  #438 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #439 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #440 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #441 = Utf8               TOKEN\n-  #442 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #443 = Utf8               EMPTY_STRING_ARRAY\n-  #444 = Utf8               toArray\n-  #445 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #446 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #447 = Utf8               java/util/Spliterators\n-  #448 = Utf8               spliteratorUnknownSize\n-  #449 = Utf8               (Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #450 = Utf8               java/util/stream/StreamSupport\n-  #451 = Utf8               (Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #179 = Class              #345          // java/util/List\n+  #180 = Utf8               getCurrentLineNumber\n+  #181 = Utf8               ()J\n+  #182 = Utf8               getFirstEndOfLine\n+  #183 = Utf8               ()Ljava/lang/String;\n+  #184 = Utf8               getHeaderMap\n+  #185 = Utf8               getHeaderMapRaw\n+  #186 = Utf8               getHeaderNames\n+  #187 = Utf8               ()Ljava/util/List;\n+  #188 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n+  #189 = Utf8               getRecordNumber\n+  #190 = Utf8               getRecords\n+  #191 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+  #192 = Utf8               handleNull\n+  #193 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #194 = Utf8               isClosed\n+  #195 = Utf8               ()Z\n+  #196 = Utf8               isStrictQuoteMode\n+  #197 = Utf8               iterator\n+  #198 = Utf8               ()Ljava/util/Iterator;\n+  #199 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+  #200 = Utf8               nextRecord\n+  #201 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n+  #202 = Utf8               stream\n+  #203 = Utf8               ()Ljava/util/stream/Stream;\n+  #204 = Utf8               ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n+  #205 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+  #206 = Utf8               SourceFile\n+  #207 = Utf8               CSVParser.java\n+  #208 = Utf8               file\n+  #209 = Class              #346          // java/util/Objects\n+  #210 = NameAndType        #347:#348     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #211 = Class              #349          // java/io/File\n+  #212 = NameAndType        #350:#351     // toPath:()Ljava/nio/file/Path;\n+  #213 = NameAndType        #154:#160     // parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #214 = Utf8               inputStream\n+  #215 = Utf8               java/io/InputStreamReader\n+  #216 = NameAndType        #164:#352     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #217 = NameAndType        #154:#161     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #218 = Utf8               path\n+  #219 = Utf8               java/nio/file/OpenOption\n+  #220 = Class              #353          // java/nio/file/Files\n+  #221 = NameAndType        #354:#355     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #222 = NameAndType        #154:#159     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #223 = Utf8               org/apache/commons/csv/CSVParser\n+  #224 = NameAndType        #164:#165     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #225 = Utf8               string\n+  #226 = Utf8               java/io/StringReader\n+  #227 = NameAndType        #164:#356     // \"<init>\":(Ljava/lang/String;)V\n+  #228 = Utf8               url\n+  #229 = Utf8               charset\n+  #230 = Class              #357          // java/net/URL\n+  #231 = NameAndType        #358:#359     // openStream:()Ljava/io/InputStream;\n+  #232 = NameAndType        #164:#166     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+  #233 = NameAndType        #164:#172     // \"<init>\":()V\n+  #234 = Utf8               java/util/ArrayList\n+  #235 = NameAndType        #145:#146     // recordList:Ljava/util/List;\n+  #236 = Utf8               org/apache/commons/csv/Token\n+  #237 = NameAndType        #152:#153     // reusableToken:Lorg/apache/commons/csv/Token;\n+  #238 = Utf8               reader\n+  #239 = Class              #360          // org/apache/commons/csv/CSVFormat\n+  #240 = NameAndType        #361:#362     // copy:()Lorg/apache/commons/csv/CSVFormat;\n+  #241 = NameAndType        #137:#138     // format:Lorg/apache/commons/csv/CSVFormat;\n+  #242 = Utf8               org/apache/commons/csv/Lexer\n+  #243 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n+  #244 = NameAndType        #164:#363     // \"<init>\":(Ljava/io/Reader;)V\n+  #245 = NameAndType        #164:#364     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #246 = NameAndType        #141:#142     // lexer:Lorg/apache/commons/csv/Lexer;\n+  #247 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n+  #248 = NameAndType        #164:#365     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+  #249 = NameAndType        #143:#144     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+  #250 = NameAndType        #177:#178     // createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n+  #251 = NameAndType        #139:#140     // headers:Lorg/apache/commons/csv/CSVParser$Headers;\n+  #252 = NameAndType        #151:#150     // characterOffset:J\n+  #253 = NameAndType        #149:#150     // recordNumber:J\n+  #254 = NameAndType        #366:#367     // content:Ljava/lang/StringBuilder;\n+  #255 = NameAndType        #368:#183     // toString:()Ljava/lang/String;\n+  #256 = NameAndType        #369:#195     // getTrim:()Z\n+  #257 = NameAndType        #370:#183     // trim:()Ljava/lang/String;\n+  #258 = NameAndType        #371:#195     // isEmpty:()Z\n+  #259 = NameAndType        #372:#195     // getTrailingDelimiter:()Z\n+  #260 = NameAndType        #192:#193     // handleNull:(Ljava/lang/String;)Ljava/lang/String;\n+  #261 = NameAndType        #373:#374     // add:(Ljava/lang/Object;)Z\n+  #262 = NameAndType        #171:#172     // close:()V\n+  #263 = NameAndType        #375:#195     // getIgnoreHeaderCase:()Z\n+  #264 = Utf8               java/util/TreeMap\n+  #265 = NameAndType        #376:#377     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+  #266 = NameAndType        #164:#378     // \"<init>\":(Ljava/util/Comparator;)V\n+  #267 = Utf8               java/util/LinkedHashMap\n+  #268 = NameAndType        #379:#380     // getHeader:()[Ljava/lang/String;\n+  #269 = NameAndType        #173:#174     // createEmptyHeaderMap:()Ljava/util/Map;\n+  #270 = NameAndType        #200:#201     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+  #271 = NameAndType        #381:#380     // values:()[Ljava/lang/String;\n+  #272 = NameAndType        #382:#195     // getSkipHeaderRecord:()Z\n+  #273 = NameAndType        #383:#195     // getAllowMissingColumnNames:()Z\n+  #274 = Utf8               java/lang/IllegalArgumentException\n+  #275 = Utf8               java/lang/StringBuilder\n+  #276 = Utf8               A header name is missing in\n+  #277 = NameAndType        #384:#385     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #278 = Class              #386          // java/util/Arrays\n+  #279 = NameAndType        #368:#387     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #280 = NameAndType        #388:#374     // containsKey:(Ljava/lang/Object;)Z\n+  #281 = NameAndType        #389:#195     // getAllowDuplicateHeaderNames:()Z\n+  #282 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n+  #283 = Utf8               java/lang/Object\n+  #284 = NameAndType        #137:#390     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #285 = Class              #391          // java/lang/Integer\n+  #286 = NameAndType        #392:#393     // valueOf:(I)Ljava/lang/Integer;\n+  #287 = NameAndType        #394:#395     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #288 = NameAndType        #164:#396     // \"<init>\":(I)V\n+  #289 = Class              #397          // java/util/Collections\n+  #290 = NameAndType        #398:#187     // emptyList:()Ljava/util/List;\n+  #291 = NameAndType        #399:#400     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #292 = Utf8               org/apache/commons/csv/CSVParser$Headers\n+  #293 = NameAndType        #164:#401     // \"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n+  #294 = NameAndType        #180:#181     // getCurrentLineNumber:()J\n+  #295 = NameAndType        #402:#183     // getFirstEol:()Ljava/lang/String;\n+  #296 = NameAndType        #403:#404     // headerMap:Ljava/util/Map;\n+  #297 = NameAndType        #405:#406     // putAll:(Ljava/util/Map;)V\n+  #298 = NameAndType        #407:#146     // headerNames:Ljava/util/List;\n+  #299 = NameAndType        #408:#409     // isQuoted:Z\n+  #300 = NameAndType        #410:#183     // getNullString:()Ljava/lang/String;\n+  #301 = NameAndType        #196:#195     // isStrictQuoteMode:()Z\n+  #302 = NameAndType        #411:#374     // equals:(Ljava/lang/Object;)Z\n+  #303 = NameAndType        #194:#195     // isClosed:()Z\n+  #304 = NameAndType        #412:#413     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #305 = Class              #414          // org/apache/commons/csv/QuoteMode\n+  #306 = NameAndType        #415:#416     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #307 = NameAndType        #417:#416     // NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n+  #308 = NameAndType        #418:#172     // clear:()V\n+  #309 = NameAndType        #419:#181     // getCharacterPosition:()J\n+  #310 = NameAndType        #420:#172     // reset:()V\n+  #311 = NameAndType        #421:#422     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #312 = NameAndType        #423:#424     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n+  #313 = NameAndType        #425:#427     // type:Lorg/apache/commons/csv/Token$Type;\n+  #314 = Class              #428          // org/apache/commons/csv/Token$Type\n+  #315 = NameAndType        #429:#430     // ordinal:()I\n+  #316 = NameAndType        #167:#168     // addRecordValue:(Z)V\n+  #317 = NameAndType        #431:#409     // isReady:Z\n+  #318 = Utf8               java/io/IOException\n+  #319 = Utf8               (line\n+  #320 = NameAndType        #384:#432     // append:(J)Ljava/lang/StringBuilder;\n+  #321 = Utf8               ) invalid parse sequence\n+  #322 = Utf8               org/apache/commons/csv/Constants\n+  #323 = NameAndType        #384:#433     // append:(C)Ljava/lang/StringBuilder;\n+  #324 = NameAndType        #384:#434     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #325 = NameAndType        #435:#427     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #326 = Utf8               java/lang/IllegalStateException\n+  #327 = Utf8               Unexpected Token type:\n+  #328 = NameAndType        #384:#436     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #329 = Utf8               org/apache/commons/csv/CSVRecord\n+  #330 = NameAndType        #437:#332     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #331 = NameAndType        #438:#439     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #332 = Utf8               [Ljava/lang/String;\n+  #333 = NameAndType        #164:#440     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #334 = NameAndType        #197:#198     // iterator:()Ljava/util/Iterator;\n+  #335 = Utf8               java/util/Spliterator\n+  #336 = Class              #441          // java/util/Spliterators\n+  #337 = NameAndType        #442:#443     // spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #338 = Class              #444          // java/util/stream/StreamSupport\n+  #339 = NameAndType        #202:#445     // stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #340 = Utf8               java/lang/Iterable\n+  #341 = Utf8               java/io/Closeable\n+  #342 = Utf8               org/apache/commons/csv/CSVParser$1\n+  #343 = Utf8               java/lang/String\n+  #344 = Utf8               java/util/Map\n+  #345 = Utf8               java/util/List\n+  #346 = Utf8               java/util/Objects\n+  #347 = Utf8               requireNonNull\n+  #348 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #349 = Utf8               java/io/File\n+  #350 = Utf8               toPath\n+  #351 = Utf8               ()Ljava/nio/file/Path;\n+  #352 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #353 = Utf8               java/nio/file/Files\n+  #354 = Utf8               newInputStream\n+  #355 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #356 = Utf8               (Ljava/lang/String;)V\n+  #357 = Utf8               java/net/URL\n+  #358 = Utf8               openStream\n+  #359 = Utf8               ()Ljava/io/InputStream;\n+  #360 = Utf8               org/apache/commons/csv/CSVFormat\n+  #361 = Utf8               copy\n+  #362 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n+  #363 = Utf8               (Ljava/io/Reader;)V\n+  #364 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #365 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n+  #366 = Utf8               content\n+  #367 = Utf8               Ljava/lang/StringBuilder;\n+  #368 = Utf8               toString\n+  #369 = Utf8               getTrim\n+  #370 = Utf8               trim\n+  #371 = Utf8               isEmpty\n+  #372 = Utf8               getTrailingDelimiter\n+  #373 = Utf8               add\n+  #374 = Utf8               (Ljava/lang/Object;)Z\n+  #375 = Utf8               getIgnoreHeaderCase\n+  #376 = Utf8               CASE_INSENSITIVE_ORDER\n+  #377 = Utf8               Ljava/util/Comparator;\n+  #378 = Utf8               (Ljava/util/Comparator;)V\n+  #379 = Utf8               getHeader\n+  #380 = Utf8               ()[Ljava/lang/String;\n+  #381 = Utf8               values\n+  #382 = Utf8               getSkipHeaderRecord\n+  #383 = Utf8               getAllowMissingColumnNames\n+  #384 = Utf8               append\n+  #385 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #386 = Utf8               java/util/Arrays\n+  #387 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #388 = Utf8               containsKey\n+  #389 = Utf8               getAllowDuplicateHeaderNames\n+  #390 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #391 = Utf8               java/lang/Integer\n+  #392 = Utf8               valueOf\n+  #393 = Utf8               (I)Ljava/lang/Integer;\n+  #394 = Utf8               put\n+  #395 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #396 = Utf8               (I)V\n+  #397 = Utf8               java/util/Collections\n+  #398 = Utf8               emptyList\n+  #399 = Utf8               unmodifiableList\n+  #400 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #401 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n+  #402 = Utf8               getFirstEol\n+  #403 = Utf8               headerMap\n+  #404 = Utf8               Ljava/util/Map;\n+  #405 = Utf8               putAll\n+  #406 = Utf8               (Ljava/util/Map;)V\n+  #407 = Utf8               headerNames\n+  #408 = Utf8               isQuoted\n+  #409 = Utf8               Z\n+  #410 = Utf8               getNullString\n+  #411 = Utf8               equals\n+  #412 = Utf8               getQuoteMode\n+  #413 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n+  #414 = Utf8               org/apache/commons/csv/QuoteMode\n+  #415 = Utf8               ALL_NON_NULL\n+  #416 = Utf8               Lorg/apache/commons/csv/QuoteMode;\n+  #417 = Utf8               NON_NUMERIC\n+  #418 = Utf8               clear\n+  #419 = Utf8               getCharacterPosition\n+  #420 = Utf8               reset\n+  #421 = Utf8               nextToken\n+  #422 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #423 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n+  #424 = Utf8               [I\n+  #425 = Utf8               type\n+  #426 = Utf8               Type\n+  #427 = Utf8               Lorg/apache/commons/csv/Token$Type;\n+  #428 = Utf8               org/apache/commons/csv/Token$Type\n+  #429 = Utf8               ordinal\n+  #430 = Utf8               ()I\n+  #431 = Utf8               isReady\n+  #432 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #433 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #434 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #435 = Utf8               TOKEN\n+  #436 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #437 = Utf8               EMPTY_STRING_ARRAY\n+  #438 = Utf8               toArray\n+  #439 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #440 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #441 = Utf8               java/util/Spliterators\n+  #442 = Utf8               spliteratorUnknownSize\n+  #443 = Utf8               (Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #444 = Utf8               java/util/stream/StreamSupport\n+  #445 = Utf8               (Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n {\n   private final org.apache.commons.csv.CSVFormat format;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.csv.CSVParser$Headers headers;\n     descriptor: Lorg/apache/commons/csv/CSVParser$Headers;\n@@ -834,14 +828,17 @@\n         20: goto          30\n         23: new           #58                 // class java/util/LinkedHashMap\n         26: dup\n         27: invokespecial #59                 // Method java/util/LinkedHashMap.\"<init>\":()V\n         30: areturn\n       LineNumberTable:\n         line 460: 0\n+        line 461: 10\n+        line 462: 23\n+        line 460: 30\n       StackMapTable: number_of_entries = 2\n         frame_type = 23 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ class java/util/Map ]\n     Signature: #176                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   private org.apache.commons.csv.CSVParser$Headers createHeaders() throws java.io.IOException;\n@@ -1146,15 +1143,15 @@\n          0: aload_0\n          1: getfield      #42                 // Field headers:Lorg/apache/commons/csv/CSVParser$Headers;\n          4: getfield      #89                 // Field org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n          7: invokestatic  #82                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n         10: areturn\n       LineNumberTable:\n         line 593: 0\n-    Signature: #189                         // ()Ljava/util/List<Ljava/lang/String;>;\n+    Signature: #188                         // ()Ljava/util/List<Ljava/lang/String;>;\n \n   public long getRecordNumber();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n@@ -1195,15 +1192,15 @@\n           locals = [ top, class java/util/List ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 19\n           locals = [ class org/apache/commons/csv/CSVParser, class org/apache/commons/csv/CSVRecord, class java/util/List ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #193                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #191                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n \n   private java.lang.String handleNull(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/String;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=5, args_size=2\n          0: aload_0\n@@ -1307,15 +1304,15 @@\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #40                 // Field csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n          4: areturn\n       LineNumberTable:\n         line 684: 0\n-    Signature: #201                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #199                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n \n   org.apache.commons.csv.CSVRecord nextRecord() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/csv/CSVRecord;\n     flags: (0x0000)\n     Code:\n       stack=9, locals=6, args_size=1\n          0: aconst_null\n@@ -1519,16 +1516,16 @@\n          4: bipush        16\n          6: invokestatic  #129                // Method java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n          9: iconst_0\n         10: invokestatic  #130                // Method java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n         13: areturn\n       LineNumberTable:\n         line 746: 0\n-    Signature: #207                         // ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #204                         // ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n }\n-Signature: #208                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+Signature: #205                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n SourceFile: \"CSVParser.java\"\n InnerClasses:\n   static #133;                            // class org/apache/commons/csv/CSVParser$1\n   private static final #135= #83 of #14;  // Headers=class org/apache/commons/csv/CSVParser$Headers of class org/apache/commons/csv/CSVParser\n   #136= #38 of #14;                       // CSVRecordIterator=class org/apache/commons/csv/CSVParser$CSVRecordIterator of class org/apache/commons/csv/CSVParser\n-  static final #432= #320 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n+  static final #426= #314 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n"}]}
