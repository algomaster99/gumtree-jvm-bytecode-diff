{"diffoscope-json-version": 1, "source1": "first/Telnet.class", "source2": "second/Telnet.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -46,240 +46,239 @@\n         this.setDefaultPort(23);\n         this.doResponse = new int[256];\n         this.willResponse = new int[256];\n         this.options = new int[256];\n         this.optionHandlers = new TelnetOptionHandler[256];\n     }\n     \n-    Telnet(final String termtype) {\n+    Telnet(final String terminalType) {\n         this.terminalType = null;\n         this.aytMonitor = new Object();\n         this.aytFlag = true;\n         this.spyStream = null;\n         this.notifhand = null;\n         this.setDefaultPort(23);\n         this.doResponse = new int[256];\n         this.willResponse = new int[256];\n         this.options = new int[256];\n-        this.terminalType = termtype;\n+        this.terminalType = terminalType;\n         this.optionHandlers = new TelnetOptionHandler[256];\n     }\n     \n-    boolean stateIsWill(final int option) {\n-        return (this.options[option] & 0x1) != 0x0;\n+    boolean stateIsWill(final int n) {\n+        return (this.options[n] & 0x1) != 0x0;\n     }\n     \n-    boolean stateIsWont(final int option) {\n-        return !this.stateIsWill(option);\n+    boolean stateIsWont(final int n) {\n+        return !this.stateIsWill(n);\n     }\n     \n-    boolean stateIsDo(final int option) {\n-        return (this.options[option] & 0x2) != 0x0;\n+    boolean stateIsDo(final int n) {\n+        return (this.options[n] & 0x2) != 0x0;\n     }\n     \n-    boolean stateIsDont(final int option) {\n-        return !this.stateIsDo(option);\n+    boolean stateIsDont(final int n) {\n+        return !this.stateIsDo(n);\n     }\n     \n-    boolean requestedWill(final int option) {\n-        return (this.options[option] & 0x4) != 0x0;\n+    boolean requestedWill(final int n) {\n+        return (this.options[n] & 0x4) != 0x0;\n     }\n     \n-    boolean requestedWont(final int option) {\n-        return !this.requestedWill(option);\n+    boolean requestedWont(final int n) {\n+        return !this.requestedWill(n);\n     }\n     \n-    boolean requestedDo(final int option) {\n-        return (this.options[option] & 0x8) != 0x0;\n+    boolean requestedDo(final int n) {\n+        return (this.options[n] & 0x8) != 0x0;\n     }\n     \n-    boolean requestedDont(final int option) {\n-        return !this.requestedDo(option);\n+    boolean requestedDont(final int n) {\n+        return !this.requestedDo(n);\n     }\n     \n-    void setWill(final int option) throws IOException {\n+    void setWill(final int n) throws IOException {\n         final int[] options = this.options;\n-        options[option] |= 0x1;\n-        if (this.requestedWill(option) && this.optionHandlers[option] != null) {\n-            this.optionHandlers[option].setWill(true);\n-            final int[] subneg = this.optionHandlers[option].startSubnegotiationLocal();\n-            if (subneg != null) {\n-                this._sendSubnegotiation(subneg);\n+        options[n] |= 0x1;\n+        if (this.requestedWill(n) && this.optionHandlers[n] != null) {\n+            this.optionHandlers[n].setWill(true);\n+            final int[] startSubnegotiationLocal = this.optionHandlers[n].startSubnegotiationLocal();\n+            if (startSubnegotiationLocal != null) {\n+                this._sendSubnegotiation(startSubnegotiationLocal);\n             }\n         }\n     }\n     \n-    void setDo(final int option) throws IOException {\n+    void setDo(final int n) throws IOException {\n         final int[] options = this.options;\n-        options[option] |= 0x2;\n-        if (this.requestedDo(option) && this.optionHandlers[option] != null) {\n-            this.optionHandlers[option].setDo(true);\n-            final int[] subneg = this.optionHandlers[option].startSubnegotiationRemote();\n-            if (subneg != null) {\n-                this._sendSubnegotiation(subneg);\n+        options[n] |= 0x2;\n+        if (this.requestedDo(n) && this.optionHandlers[n] != null) {\n+            this.optionHandlers[n].setDo(true);\n+            final int[] startSubnegotiationRemote = this.optionHandlers[n].startSubnegotiationRemote();\n+            if (startSubnegotiationRemote != null) {\n+                this._sendSubnegotiation(startSubnegotiationRemote);\n             }\n         }\n     }\n     \n-    void setWantWill(final int option) {\n+    void setWantWill(final int n) {\n         final int[] options = this.options;\n-        options[option] |= 0x4;\n+        options[n] |= 0x4;\n     }\n     \n-    void setWantDo(final int option) {\n+    void setWantDo(final int n) {\n         final int[] options = this.options;\n-        options[option] |= 0x8;\n+        options[n] |= 0x8;\n     }\n     \n-    void setWont(final int option) {\n+    void setWont(final int n) {\n         final int[] options = this.options;\n-        options[option] &= 0xFFFFFFFE;\n-        if (this.optionHandlers[option] != null) {\n-            this.optionHandlers[option].setWill(false);\n+        options[n] &= 0xFFFFFFFE;\n+        if (this.optionHandlers[n] != null) {\n+            this.optionHandlers[n].setWill(false);\n         }\n     }\n     \n-    void setDont(final int option) {\n+    void setDont(final int n) {\n         final int[] options = this.options;\n-        options[option] &= 0xFFFFFFFD;\n-        if (this.optionHandlers[option] != null) {\n-            this.optionHandlers[option].setDo(false);\n+        options[n] &= 0xFFFFFFFD;\n+        if (this.optionHandlers[n] != null) {\n+            this.optionHandlers[n].setDo(false);\n         }\n     }\n     \n-    void setWantWont(final int option) {\n+    void setWantWont(final int n) {\n         final int[] options = this.options;\n-        options[option] &= 0xFFFFFFFB;\n+        options[n] &= 0xFFFFFFFB;\n     }\n     \n-    void setWantDont(final int option) {\n+    void setWantDont(final int n) {\n         final int[] options = this.options;\n-        options[option] &= 0xFFFFFFF7;\n+        options[n] &= 0xFFFFFFF7;\n     }\n     \n-    void processCommand(final int command) {\n+    void processCommand(final int n) {\n         if (this.notifhand != null) {\n-            this.notifhand.receivedNegotiation(5, command);\n+            this.notifhand.receivedNegotiation(5, n);\n         }\n     }\n     \n-    void processDo(final int option) throws IOException {\n+    void processDo(final int n) throws IOException {\n         if (this.notifhand != null) {\n-            this.notifhand.receivedNegotiation(1, option);\n+            this.notifhand.receivedNegotiation(1, n);\n         }\n-        boolean acceptNewState = false;\n-        if (this.optionHandlers[option] != null) {\n-            acceptNewState = this.optionHandlers[option].getAcceptLocal();\n+        boolean acceptLocal = false;\n+        if (this.optionHandlers[n] != null) {\n+            acceptLocal = this.optionHandlers[n].getAcceptLocal();\n         }\n-        else if (option == 24 && this.terminalType != null && this.terminalType.length() > 0) {\n-            acceptNewState = true;\n+        else if (n == 24 && this.terminalType != null && this.terminalType.length() > 0) {\n+            acceptLocal = true;\n         }\n-        if (this.willResponse[option] > 0) {\n+        if (this.willResponse[n] > 0) {\n             final int[] willResponse = this.willResponse;\n-            --willResponse[option];\n-            if (this.willResponse[option] > 0 && this.stateIsWill(option)) {\n+            --willResponse[n];\n+            if (this.willResponse[n] > 0 && this.stateIsWill(n)) {\n                 final int[] willResponse2 = this.willResponse;\n-                --willResponse2[option];\n+                --willResponse2[n];\n             }\n         }\n-        if (this.willResponse[option] == 0) {\n-            if (this.requestedWont(option)) {\n-                if (acceptNewState) {\n-                    this.setWantWill(option);\n-                    this.sendWill(option);\n+        if (this.willResponse[n] == 0) {\n+            if (this.requestedWont(n)) {\n+                if (acceptLocal) {\n+                    this.setWantWill(n);\n+                    this.sendWill(n);\n                 }\n                 else {\n                     final int[] willResponse3 = this.willResponse;\n-                    ++willResponse3[option];\n-                    this.sendWont(option);\n+                    ++willResponse3[n];\n+                    this.sendWont(n);\n                 }\n             }\n         }\n-        this.setWill(option);\n+        this.setWill(n);\n     }\n     \n-    void processDont(final int option) throws IOException {\n+    void processDont(final int n) throws IOException {\n         if (this.notifhand != null) {\n-            this.notifhand.receivedNegotiation(2, option);\n+            this.notifhand.receivedNegotiation(2, n);\n         }\n-        if (this.willResponse[option] > 0) {\n+        if (this.willResponse[n] > 0) {\n             final int[] willResponse = this.willResponse;\n-            --willResponse[option];\n-            if (this.willResponse[option] > 0 && this.stateIsWont(option)) {\n+            --willResponse[n];\n+            if (this.willResponse[n] > 0 && this.stateIsWont(n)) {\n                 final int[] willResponse2 = this.willResponse;\n-                --willResponse2[option];\n+                --willResponse2[n];\n             }\n         }\n-        if (this.willResponse[option] == 0 && this.requestedWill(option)) {\n-            if (this.stateIsWill(option) || this.requestedWill(option)) {\n-                this.sendWont(option);\n+        if (this.willResponse[n] == 0 && this.requestedWill(n)) {\n+            if (this.stateIsWill(n) || this.requestedWill(n)) {\n+                this.sendWont(n);\n             }\n-            this.setWantWont(option);\n+            this.setWantWont(n);\n         }\n-        this.setWont(option);\n+        this.setWont(n);\n     }\n     \n-    void processWill(final int option) throws IOException {\n+    void processWill(final int n) throws IOException {\n         if (this.notifhand != null) {\n-            this.notifhand.receivedNegotiation(3, option);\n+            this.notifhand.receivedNegotiation(3, n);\n         }\n-        boolean acceptNewState = false;\n-        if (this.optionHandlers[option] != null) {\n-            acceptNewState = this.optionHandlers[option].getAcceptRemote();\n+        boolean acceptRemote = false;\n+        if (this.optionHandlers[n] != null) {\n+            acceptRemote = this.optionHandlers[n].getAcceptRemote();\n         }\n-        if (this.doResponse[option] > 0) {\n+        if (this.doResponse[n] > 0) {\n             final int[] doResponse = this.doResponse;\n-            --doResponse[option];\n-            if (this.doResponse[option] > 0 && this.stateIsDo(option)) {\n+            --doResponse[n];\n+            if (this.doResponse[n] > 0 && this.stateIsDo(n)) {\n                 final int[] doResponse2 = this.doResponse;\n-                --doResponse2[option];\n+                --doResponse2[n];\n             }\n         }\n-        if (this.doResponse[option] == 0 && this.requestedDont(option)) {\n-            if (acceptNewState) {\n-                this.setWantDo(option);\n-                this.sendDo(option);\n+        if (this.doResponse[n] == 0 && this.requestedDont(n)) {\n+            if (acceptRemote) {\n+                this.setWantDo(n);\n+                this.sendDo(n);\n             }\n             else {\n                 final int[] doResponse3 = this.doResponse;\n-                ++doResponse3[option];\n-                this.sendDont(option);\n+                ++doResponse3[n];\n+                this.sendDont(n);\n             }\n         }\n-        this.setDo(option);\n+        this.setDo(n);\n     }\n     \n-    void processWont(final int option) throws IOException {\n+    void processWont(final int n) throws IOException {\n         if (this.notifhand != null) {\n-            this.notifhand.receivedNegotiation(4, option);\n+            this.notifhand.receivedNegotiation(4, n);\n         }\n-        if (this.doResponse[option] > 0) {\n+        if (this.doResponse[n] > 0) {\n             final int[] doResponse = this.doResponse;\n-            --doResponse[option];\n-            if (this.doResponse[option] > 0 && this.stateIsDont(option)) {\n+            --doResponse[n];\n+            if (this.doResponse[n] > 0 && this.stateIsDont(n)) {\n                 final int[] doResponse2 = this.doResponse;\n-                --doResponse2[option];\n+                --doResponse2[n];\n             }\n         }\n-        if (this.doResponse[option] == 0 && this.requestedDo(option)) {\n-            if (this.stateIsDo(option) || this.requestedDo(option)) {\n-                this.sendDont(option);\n+        if (this.doResponse[n] == 0 && this.requestedDo(n)) {\n+            if (this.stateIsDo(n) || this.requestedDo(n)) {\n+                this.sendDont(n);\n             }\n-            this.setWantDont(option);\n+            this.setWantDont(n);\n         }\n-        this.setDont(option);\n+        this.setDont(n);\n     }\n     \n-    void processSuboption(final int[] suboption, final int suboptionLength) throws IOException {\n-        if (suboptionLength > 0) {\n-            if (this.optionHandlers[suboption[0]] != null) {\n-                final int[] responseSuboption = this.optionHandlers[suboption[0]].answerSubnegotiation(suboption, suboptionLength);\n-                this._sendSubnegotiation(responseSuboption);\n+    void processSuboption(final int[] array, final int n) throws IOException {\n+        if (n > 0) {\n+            if (this.optionHandlers[array[0]] != null) {\n+                this._sendSubnegotiation(this.optionHandlers[array[0]].answerSubnegotiation(array, n));\n             }\n-            else if (suboptionLength > 1 && suboption[0] == 24 && suboption[1] == 1) {\n+            else if (n > 1 && array[0] == 24 && array[1] == 1) {\n                 this.sendTerminalType();\n             }\n         }\n     }\n     \n     final synchronized void sendTerminalType() throws IOException {\n         if (this.terminalType != null) {\n@@ -287,230 +286,230 @@\n             this._output_.write(Telnet._COMMAND_IS);\n             this._output_.write(this.terminalType.getBytes(this.getCharset()));\n             this._output_.write(Telnet._COMMAND_SE);\n             this._output_.flush();\n         }\n     }\n     \n-    final synchronized void _sendSubnegotiation(final int[] subn) throws IOException {\n-        if (subn != null) {\n+    final synchronized void _sendSubnegotiation(final int[] array) throws IOException {\n+        if (array != null) {\n             this._output_.write(Telnet._COMMAND_SB);\n-            for (final int element : subn) {\n-                final byte b = (byte)element;\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                final byte b = (byte)array[i];\n                 if (b == -1) {\n                     this._output_.write(b);\n                 }\n                 this._output_.write(b);\n             }\n             this._output_.write(Telnet._COMMAND_SE);\n             this._output_.flush();\n         }\n     }\n     \n-    final synchronized void _sendCommand(final byte cmd) throws IOException {\n+    final synchronized void _sendCommand(final byte b) throws IOException {\n         this._output_.write(255);\n-        this._output_.write(cmd);\n+        this._output_.write(b);\n         this._output_.flush();\n     }\n     \n     final synchronized void processAYTResponse() {\n         if (!this.aytFlag) {\n             synchronized (this.aytMonitor) {\n                 this.aytFlag = true;\n                 this.aytMonitor.notifyAll();\n             }\n         }\n     }\n     \n     protected void _connectAction_() throws IOException {\n-        for (int ii = 0; ii < 256; ++ii) {\n-            this.doResponse[ii] = 0;\n-            this.willResponse[ii] = 0;\n-            this.options[ii] = 0;\n-            if (this.optionHandlers[ii] != null) {\n-                this.optionHandlers[ii].setDo(false);\n-                this.optionHandlers[ii].setWill(false);\n+        for (int i = 0; i < 256; ++i) {\n+            this.doResponse[i] = 0;\n+            this.willResponse[i] = 0;\n+            this.options[i] = 0;\n+            if (this.optionHandlers[i] != null) {\n+                this.optionHandlers[i].setDo(false);\n+                this.optionHandlers[i].setWill(false);\n             }\n         }\n         super._connectAction_();\n         this._input_ = new BufferedInputStream(this._input_);\n         this._output_ = new BufferedOutputStream(this._output_);\n-        for (int ii = 0; ii < 256; ++ii) {\n-            if (this.optionHandlers[ii] != null) {\n-                if (this.optionHandlers[ii].getInitLocal()) {\n-                    this.requestWill(this.optionHandlers[ii].getOptionCode());\n+        for (int j = 0; j < 256; ++j) {\n+            if (this.optionHandlers[j] != null) {\n+                if (this.optionHandlers[j].getInitLocal()) {\n+                    this.requestWill(this.optionHandlers[j].getOptionCode());\n                 }\n-                if (this.optionHandlers[ii].getInitRemote()) {\n-                    this.requestDo(this.optionHandlers[ii].getOptionCode());\n+                if (this.optionHandlers[j].getInitRemote()) {\n+                    this.requestDo(this.optionHandlers[j].getOptionCode());\n                 }\n             }\n         }\n     }\n     \n-    final synchronized void sendDo(final int option) throws IOException {\n+    final synchronized void sendDo(final int n) throws IOException {\n         this._output_.write(Telnet._COMMAND_DO);\n-        this._output_.write(option);\n+        this._output_.write(n);\n         this._output_.flush();\n     }\n     \n-    final synchronized void requestDo(final int option) throws IOException {\n-        if ((this.doResponse[option] == 0 && this.stateIsDo(option)) || this.requestedDo(option)) {\n+    final synchronized void requestDo(final int wantDo) throws IOException {\n+        if ((this.doResponse[wantDo] == 0 && this.stateIsDo(wantDo)) || this.requestedDo(wantDo)) {\n             return;\n         }\n-        this.setWantDo(option);\n+        this.setWantDo(wantDo);\n         final int[] doResponse = this.doResponse;\n-        ++doResponse[option];\n-        this.sendDo(option);\n+        ++doResponse[wantDo];\n+        this.sendDo(wantDo);\n     }\n     \n-    final synchronized void sendDont(final int option) throws IOException {\n+    final synchronized void sendDont(final int n) throws IOException {\n         this._output_.write(Telnet._COMMAND_DONT);\n-        this._output_.write(option);\n+        this._output_.write(n);\n         this._output_.flush();\n     }\n     \n-    final synchronized void requestDont(final int option) throws IOException {\n-        if ((this.doResponse[option] == 0 && this.stateIsDont(option)) || this.requestedDont(option)) {\n+    final synchronized void requestDont(final int wantDont) throws IOException {\n+        if ((this.doResponse[wantDont] == 0 && this.stateIsDont(wantDont)) || this.requestedDont(wantDont)) {\n             return;\n         }\n-        this.setWantDont(option);\n+        this.setWantDont(wantDont);\n         final int[] doResponse = this.doResponse;\n-        ++doResponse[option];\n-        this.sendDont(option);\n+        ++doResponse[wantDont];\n+        this.sendDont(wantDont);\n     }\n     \n-    final synchronized void sendWill(final int option) throws IOException {\n+    final synchronized void sendWill(final int n) throws IOException {\n         this._output_.write(Telnet._COMMAND_WILL);\n-        this._output_.write(option);\n+        this._output_.write(n);\n         this._output_.flush();\n     }\n     \n-    final synchronized void requestWill(final int option) throws IOException {\n-        if ((this.willResponse[option] == 0 && this.stateIsWill(option)) || this.requestedWill(option)) {\n+    final synchronized void requestWill(final int wantWill) throws IOException {\n+        if ((this.willResponse[wantWill] == 0 && this.stateIsWill(wantWill)) || this.requestedWill(wantWill)) {\n             return;\n         }\n-        this.setWantWill(option);\n+        this.setWantWill(wantWill);\n         final int[] doResponse = this.doResponse;\n-        ++doResponse[option];\n-        this.sendWill(option);\n+        ++doResponse[wantWill];\n+        this.sendWill(wantWill);\n     }\n     \n-    final synchronized void sendWont(final int option) throws IOException {\n+    final synchronized void sendWont(final int n) throws IOException {\n         this._output_.write(Telnet._COMMAND_WONT);\n-        this._output_.write(option);\n+        this._output_.write(n);\n         this._output_.flush();\n     }\n     \n-    final synchronized void requestWont(final int option) throws IOException {\n-        if ((this.willResponse[option] == 0 && this.stateIsWont(option)) || this.requestedWont(option)) {\n+    final synchronized void requestWont(final int wantWont) throws IOException {\n+        if ((this.willResponse[wantWont] == 0 && this.stateIsWont(wantWont)) || this.requestedWont(wantWont)) {\n             return;\n         }\n-        this.setWantWont(option);\n+        this.setWantWont(wantWont);\n         final int[] doResponse = this.doResponse;\n-        ++doResponse[option];\n-        this.sendWont(option);\n+        ++doResponse[wantWont];\n+        this.sendWont(wantWont);\n     }\n     \n-    final synchronized void sendByte(final int b) throws IOException {\n-        this._output_.write(b);\n-        this.spyWrite(b);\n+    final synchronized void sendByte(final int n) throws IOException {\n+        this._output_.write(n);\n+        this.spyWrite(n);\n     }\n     \n-    final boolean _sendAYT(final long timeout) throws IOException, IllegalArgumentException, InterruptedException {\n-        boolean retValue = false;\n+    final boolean _sendAYT(final long timeoutMillis) throws IOException, IllegalArgumentException, InterruptedException {\n+        boolean b = false;\n         synchronized (this.aytMonitor) {\n             synchronized (this) {\n                 this.aytFlag = false;\n                 this._output_.write(Telnet._COMMAND_AYT);\n                 this._output_.flush();\n             }\n-            this.aytMonitor.wait(timeout);\n+            this.aytMonitor.wait(timeoutMillis);\n             if (!this.aytFlag) {\n-                retValue = false;\n+                b = false;\n                 this.aytFlag = true;\n             }\n             else {\n-                retValue = true;\n+                b = true;\n             }\n         }\n-        return retValue;\n+        return b;\n     }\n     \n-    void addOptionHandler(final TelnetOptionHandler opthand) throws InvalidTelnetOptionException, IOException {\n-        final int optcode = opthand.getOptionCode();\n-        if (!TelnetOption.isValidOption(optcode)) {\n-            throw new InvalidTelnetOptionException(\"Invalid Option Code\", optcode);\n+    void addOptionHandler(final TelnetOptionHandler telnetOptionHandler) throws InvalidTelnetOptionException, IOException {\n+        final int optionCode = telnetOptionHandler.getOptionCode();\n+        if (!TelnetOption.isValidOption(optionCode)) {\n+            throw new InvalidTelnetOptionException(\"Invalid Option Code\", optionCode);\n         }\n-        if (this.optionHandlers[optcode] == null) {\n-            this.optionHandlers[optcode] = opthand;\n+        if (this.optionHandlers[optionCode] == null) {\n+            this.optionHandlers[optionCode] = telnetOptionHandler;\n             if (this.isConnected()) {\n-                if (opthand.getInitLocal()) {\n-                    this.requestWill(optcode);\n+                if (telnetOptionHandler.getInitLocal()) {\n+                    this.requestWill(optionCode);\n                 }\n-                if (opthand.getInitRemote()) {\n-                    this.requestDo(optcode);\n+                if (telnetOptionHandler.getInitRemote()) {\n+                    this.requestDo(optionCode);\n                 }\n             }\n             return;\n         }\n-        throw new InvalidTelnetOptionException(\"Already registered option\", optcode);\n+        throw new InvalidTelnetOptionException(\"Already registered option\", optionCode);\n     }\n     \n-    void deleteOptionHandler(final int optcode) throws InvalidTelnetOptionException, IOException {\n-        if (!TelnetOption.isValidOption(optcode)) {\n-            throw new InvalidTelnetOptionException(\"Invalid Option Code\", optcode);\n+    void deleteOptionHandler(final int n) throws InvalidTelnetOptionException, IOException {\n+        if (!TelnetOption.isValidOption(n)) {\n+            throw new InvalidTelnetOptionException(\"Invalid Option Code\", n);\n         }\n-        if (this.optionHandlers[optcode] == null) {\n-            throw new InvalidTelnetOptionException(\"Unregistered option\", optcode);\n+        if (this.optionHandlers[n] == null) {\n+            throw new InvalidTelnetOptionException(\"Unregistered option\", n);\n         }\n-        final TelnetOptionHandler opthand = this.optionHandlers[optcode];\n-        this.optionHandlers[optcode] = null;\n-        if (opthand.getWill()) {\n-            this.requestWont(optcode);\n+        final TelnetOptionHandler telnetOptionHandler = this.optionHandlers[n];\n+        this.optionHandlers[n] = null;\n+        if (telnetOptionHandler.getWill()) {\n+            this.requestWont(n);\n         }\n-        if (opthand.getDo()) {\n-            this.requestDont(optcode);\n+        if (telnetOptionHandler.getDo()) {\n+            this.requestDont(n);\n         }\n     }\n     \n-    void _registerSpyStream(final OutputStream spystream) {\n-        this.spyStream = spystream;\n+    void _registerSpyStream(final OutputStream spyStream) {\n+        this.spyStream = spyStream;\n     }\n     \n     void _stopSpyStream() {\n         this.spyStream = null;\n     }\n     \n-    void spyRead(final int ch) {\n-        final OutputStream spy = this.spyStream;\n-        if (spy != null) {\n+    void spyRead(final int n) {\n+        final OutputStream spyStream = this.spyStream;\n+        if (spyStream != null) {\n             try {\n-                if (ch != 13) {\n-                    if (ch == 10) {\n-                        spy.write(13);\n+                if (n != 13) {\n+                    if (n == 10) {\n+                        spyStream.write(13);\n                     }\n-                    spy.write(ch);\n-                    spy.flush();\n+                    spyStream.write(n);\n+                    spyStream.flush();\n                 }\n             }\n-            catch (final IOException e) {\n+            catch (final IOException ex) {\n                 this.spyStream = null;\n             }\n         }\n     }\n     \n-    void spyWrite(final int ch) {\n+    void spyWrite(final int n) {\n         if (!this.stateIsDo(1) || !this.requestedDo(1)) {\n-            final OutputStream spy = this.spyStream;\n-            if (spy != null) {\n+            final OutputStream spyStream = this.spyStream;\n+            if (spyStream != null) {\n                 try {\n-                    spy.write(ch);\n-                    spy.flush();\n+                    spyStream.write(n);\n+                    spyStream.flush();\n                 }\n-                catch (final IOException e) {\n+                catch (final IOException ex) {\n                     this.spyStream = null;\n                 }\n             }\n         }\n     }\n     \n     public void registerNotifHandler(final TelnetNotificationHandler notifhand) {\n"}]}
