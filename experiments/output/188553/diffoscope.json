{"diffoscope-json-version": 1, "source1": "first/ZipSplitOutputStream.class", "source2": "second/ZipSplitOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,243 +1,243 @@\n-  SHA-256 checksum a895442d72d8bb66690df8d28670d79b023aa3a46d9e25313c22e45128a12ff8\n+  SHA-256 checksum a0da67f351af781853b681cc7eb7a5d8f225059250ea41330a0d6ccf1dd7dfb9\n   Compiled from \"ZipSplitOutputStream.java\"\n class org.apache.commons.compress.archivers.zip.ZipSplitOutputStream extends java.io.OutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #5                          // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n-  super_class: #62                        // java/io/OutputStream\n+  this_class: #8                          // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n+  super_class: #14                        // java/io/OutputStream\n   interfaces: 0, fields: 9, methods: 13, attributes: 1\n Constant pool:\n-    #1 = Methodref          #127.#128     // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #2 = Methodref          #5.#129       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.\"<init>\":(Ljava/nio/file/Path;J)V\n-    #3 = Methodref          #62.#130      // java/io/OutputStream.\"<init>\":()V\n-    #4 = Fieldref           #5.#131       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.singleByte:[B\n-    #5 = Class              #132          // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n-    #6 = Long               65536l\n-    #8 = Long               4294967295l\n-   #10 = Class              #133          // java/lang/IllegalArgumentException\n-   #11 = String             #134          // zip split segment size should between 64K and 4,294,967,295\n-   #12 = Methodref          #10.#135      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #13 = Fieldref           #5.#136       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.zipFile:Ljava/nio/file/Path;\n-   #14 = Fieldref           #5.#137       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.splitSize:J\n-   #15 = Class              #138          // java/nio/file/OpenOption\n-   #16 = Methodref          #139.#140     // java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-   #17 = Fieldref           #5.#141       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.outputStream:Ljava/io/OutputStream;\n-   #18 = Methodref          #5.#142       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.writeZipSplitSignature:()V\n-   #19 = String             #143          // The unsplittable content size is bigger than the split segment size\n-   #20 = Fieldref           #5.#144       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.currentSplitSegmentBytesWritten:J\n-   #21 = Methodref          #5.#145       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.openNewSplitSegment:()V\n-   #22 = Methodref          #5.#146       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.write:([B)V\n-   #23 = Methodref          #5.#147       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.write:([BII)V\n-   #24 = Methodref          #62.#147      // java/io/OutputStream.write:([BII)V\n-   #25 = Fieldref           #5.#148       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.finished:Z\n-   #26 = Methodref          #5.#149       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.finish:()V\n-   #27 = Class              #150          // java/io/IOException\n-   #28 = String             #151          // This archive has already been finished\n-   #29 = Methodref          #27.#135      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #30 = Methodref          #152.#153     // org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n-   #31 = Methodref          #62.#154      // java/io/OutputStream.close:()V\n-   #32 = Class              #155          // java/lang/StringBuilder\n-   #33 = Methodref          #32.#130      // java/lang/StringBuilder.\"<init>\":()V\n-   #34 = Methodref          #32.#156      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #35 = String             #157          // .zip\n-   #36 = Methodref          #32.#158      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #37 = InterfaceMethodref #90.#159      // java/nio/file/Path.resolveSibling:(Ljava/lang/String;)Ljava/nio/file/Path;\n-   #38 = Class              #160          // java/nio/file/CopyOption\n-   #39 = Fieldref           #161.#162     // java/nio/file/StandardCopyOption.ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;\n-   #40 = Methodref          #139.#163     // java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n-   #41 = Fieldref           #5.#164       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.currentSplitSegmentIndex:I\n-   #42 = Methodref          #165.#166     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #43 = Methodref          #5.#167       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/nio/file/Path;\n-   #44 = Fieldref           #168.#169     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-   #45 = Methodref          #62.#146      // java/io/OutputStream.write:([B)V\n-   #46 = Methodref          #165.#170     // java/lang/Integer.intValue:()I\n-   #47 = String             #171          // .z\n-   #48 = String             #172          // 0\n-   #49 = Methodref          #32.#173      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #50 = InterfaceMethodref #90.#174      // java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n-   #51 = Methodref          #175.#176     // java/util/Objects.nonNull:(Ljava/lang/Object;)Z\n-   #52 = InterfaceMethodref #90.#177      // java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n-   #53 = InterfaceMethodref #90.#158      // java/nio/file/Path.toString:()Ljava/lang/String;\n-   #54 = String             #178          // .\n-   #55 = InterfaceMethodref #90.#179      // java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n-   #56 = Class              #180          // java/lang/String\n-   #57 = Methodref          #181.#182     // java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n-   #58 = Class              #183          // java/nio/file/LinkOption\n-   #59 = Methodref          #139.#184     // java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #60 = String             #185          // split zip segment\n-   #61 = String             #186          //  already exists\n-   #62 = Class              #187          // java/io/OutputStream\n-   #63 = Utf8               outputStream\n-   #64 = Utf8               Ljava/io/OutputStream;\n-   #65 = Utf8               zipFile\n-   #66 = Utf8               Ljava/nio/file/Path;\n-   #67 = Utf8               splitSize\n-   #68 = Utf8               J\n-   #69 = Utf8               currentSplitSegmentIndex\n-   #70 = Utf8               I\n-   #71 = Utf8               currentSplitSegmentBytesWritten\n-   #72 = Utf8               finished\n-   #73 = Utf8               Z\n-   #74 = Utf8               singleByte\n-   #75 = Utf8               [B\n-   #76 = Utf8               ZIP_SEGMENT_MIN_SIZE\n-   #77 = Utf8               ConstantValue\n-   #78 = Utf8               ZIP_SEGMENT_MAX_SIZE\n-   #79 = Utf8               <init>\n-   #80 = Utf8               (Ljava/io/File;J)V\n-   #81 = Utf8               Code\n-   #82 = Utf8               LineNumberTable\n-   #83 = Utf8               LocalVariableTable\n-   #84 = Utf8               this\n-   #85 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n-   #86 = Utf8               Ljava/io/File;\n-   #87 = Utf8               Exceptions\n-   #88 = Utf8               (Ljava/nio/file/Path;J)V\n-   #89 = Utf8               StackMapTable\n-   #90 = Class              #188          // java/nio/file/Path\n-   #91 = Utf8               prepareToWriteUnsplittableContent\n-   #92 = Utf8               (J)V\n-   #93 = Utf8               unsplittableContentSize\n-   #94 = Utf8               bytesRemainingInThisSegment\n-   #95 = Utf8               write\n-   #96 = Utf8               (I)V\n-   #97 = Utf8               i\n-   #98 = Utf8               ([B)V\n-   #99 = Utf8               b\n-  #100 = Utf8               ([BII)V\n-  #101 = Utf8               bytesToWriteForThisSegment\n-  #102 = Utf8               off\n-  #103 = Utf8               len\n-  #104 = Utf8               close\n-  #105 = Utf8               ()V\n-  #106 = Utf8               finish\n-  #107 = Utf8               zipFileBaseName\n-  #108 = Utf8               Ljava/lang/String;\n-  #109 = Utf8               openNewSplitSegment\n-  #110 = Utf8               newFile\n-  #111 = Utf8               writeZipSplitSignature\n-  #112 = Utf8               createNewSplitSegmentFile\n-  #113 = Utf8               (Ljava/lang/Integer;)Ljava/nio/file/Path;\n-  #114 = Utf8               zipSplitSegmentSuffixIndex\n-  #115 = Utf8               Ljava/lang/Integer;\n-  #116 = Utf8               newZipSplitSegmentSuffixIndex\n-  #117 = Utf8               baseName\n-  #118 = Utf8               extension\n-  #119 = Utf8               parent\n-  #120 = Utf8               dir\n-  #121 = Utf8               getCurrentSplitSegmentIndex\n-  #122 = Utf8               ()I\n-  #123 = Utf8               getCurrentSplitSegmentBytesWritten\n-  #124 = Utf8               ()J\n-  #125 = Utf8               SourceFile\n-  #126 = Utf8               ZipSplitOutputStream.java\n-  #127 = Class              #189          // java/io/File\n-  #128 = NameAndType        #190:#191     // toPath:()Ljava/nio/file/Path;\n-  #129 = NameAndType        #79:#88       // \"<init>\":(Ljava/nio/file/Path;J)V\n-  #130 = NameAndType        #79:#105      // \"<init>\":()V\n-  #131 = NameAndType        #74:#75       // singleByte:[B\n-  #132 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n-  #133 = Utf8               java/lang/IllegalArgumentException\n-  #134 = Utf8               zip split segment size should between 64K and 4,294,967,295\n-  #135 = NameAndType        #79:#192      // \"<init>\":(Ljava/lang/String;)V\n-  #136 = NameAndType        #65:#66       // zipFile:Ljava/nio/file/Path;\n-  #137 = NameAndType        #67:#68       // splitSize:J\n-  #138 = Utf8               java/nio/file/OpenOption\n-  #139 = Class              #193          // java/nio/file/Files\n-  #140 = NameAndType        #194:#195     // newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-  #141 = NameAndType        #63:#64       // outputStream:Ljava/io/OutputStream;\n-  #142 = NameAndType        #111:#105     // writeZipSplitSignature:()V\n-  #143 = Utf8               The unsplittable content size is bigger than the split segment size\n-  #144 = NameAndType        #71:#68       // currentSplitSegmentBytesWritten:J\n-  #145 = NameAndType        #109:#105     // openNewSplitSegment:()V\n-  #146 = NameAndType        #95:#98       // write:([B)V\n-  #147 = NameAndType        #95:#100      // write:([BII)V\n-  #148 = NameAndType        #72:#73       // finished:Z\n-  #149 = NameAndType        #106:#105     // finish:()V\n-  #150 = Utf8               java/io/IOException\n-  #151 = Utf8               This archive has already been finished\n-  #152 = Class              #196          // org/apache/commons/compress/utils/FileNameUtils\n-  #153 = NameAndType        #197:#198     // getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n-  #154 = NameAndType        #104:#105     // close:()V\n-  #155 = Utf8               java/lang/StringBuilder\n-  #156 = NameAndType        #199:#200     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #157 = Utf8               .zip\n-  #158 = NameAndType        #201:#202     // toString:()Ljava/lang/String;\n-  #159 = NameAndType        #203:#204     // resolveSibling:(Ljava/lang/String;)Ljava/nio/file/Path;\n-  #160 = Utf8               java/nio/file/CopyOption\n-  #161 = Class              #205          // java/nio/file/StandardCopyOption\n-  #162 = NameAndType        #206:#207     // ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;\n-  #163 = NameAndType        #208:#209     // move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n-  #164 = NameAndType        #69:#70       // currentSplitSegmentIndex:I\n-  #165 = Class              #210          // java/lang/Integer\n-  #166 = NameAndType        #211:#212     // valueOf:(I)Ljava/lang/Integer;\n-  #167 = NameAndType        #112:#113     // createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/nio/file/Path;\n-  #168 = Class              #213          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #169 = NameAndType        #214:#75      // DD_SIG:[B\n-  #170 = NameAndType        #215:#122     // intValue:()I\n-  #171 = Utf8               .z\n-  #172 = Utf8               0\n-  #173 = NameAndType        #199:#216     // append:(I)Ljava/lang/StringBuilder;\n-  #174 = NameAndType        #217:#191     // getParent:()Ljava/nio/file/Path;\n-  #175 = Class              #218          // java/util/Objects\n-  #176 = NameAndType        #219:#220     // nonNull:(Ljava/lang/Object;)Z\n-  #177 = NameAndType        #221:#191     // toAbsolutePath:()Ljava/nio/file/Path;\n-  #178 = Utf8               .\n-  #179 = NameAndType        #222:#223     // getFileSystem:()Ljava/nio/file/FileSystem;\n-  #180 = Utf8               java/lang/String\n-  #181 = Class              #224          // java/nio/file/FileSystem\n-  #182 = NameAndType        #225:#226     // getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+    #1 = Methodref          #2.#3         // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #2 = Class              #4            // java/io/File\n+    #3 = NameAndType        #5:#6         // toPath:()Ljava/nio/file/Path;\n+    #4 = Utf8               java/io/File\n+    #5 = Utf8               toPath\n+    #6 = Utf8               ()Ljava/nio/file/Path;\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.\"<init>\":(Ljava/nio/file/Path;J)V\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n+    #9 = NameAndType        #11:#12       // \"<init>\":(Ljava/nio/file/Path;J)V\n+   #10 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n+   #11 = Utf8               <init>\n+   #12 = Utf8               (Ljava/nio/file/Path;J)V\n+   #13 = Methodref          #14.#15       // java/io/OutputStream.\"<init>\":()V\n+   #14 = Class              #16           // java/io/OutputStream\n+   #15 = NameAndType        #11:#17       // \"<init>\":()V\n+   #16 = Utf8               java/io/OutputStream\n+   #17 = Utf8               ()V\n+   #18 = Fieldref           #8.#19        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.singleByte:[B\n+   #19 = NameAndType        #20:#21       // singleByte:[B\n+   #20 = Utf8               singleByte\n+   #21 = Utf8               [B\n+   #22 = Long               65536l\n+   #24 = Long               4294967295l\n+   #26 = Class              #27           // java/lang/IllegalArgumentException\n+   #27 = Utf8               java/lang/IllegalArgumentException\n+   #28 = String             #29           // zip split segment size should between 64K and 4,294,967,295\n+   #29 = Utf8               zip split segment size should between 64K and 4,294,967,295\n+   #30 = Methodref          #26.#31       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #31 = NameAndType        #11:#32       // \"<init>\":(Ljava/lang/String;)V\n+   #32 = Utf8               (Ljava/lang/String;)V\n+   #33 = Fieldref           #8.#34        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.zipFile:Ljava/nio/file/Path;\n+   #34 = NameAndType        #35:#36       // zipFile:Ljava/nio/file/Path;\n+   #35 = Utf8               zipFile\n+   #36 = Utf8               Ljava/nio/file/Path;\n+   #37 = Fieldref           #8.#38        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.splitSize:J\n+   #38 = NameAndType        #39:#40       // splitSize:J\n+   #39 = Utf8               splitSize\n+   #40 = Utf8               J\n+   #41 = Class              #42           // java/nio/file/OpenOption\n+   #42 = Utf8               java/nio/file/OpenOption\n+   #43 = Methodref          #44.#45       // java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+   #44 = Class              #46           // java/nio/file/Files\n+   #45 = NameAndType        #47:#48       // newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+   #46 = Utf8               java/nio/file/Files\n+   #47 = Utf8               newOutputStream\n+   #48 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+   #49 = Fieldref           #8.#50        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.outputStream:Ljava/io/OutputStream;\n+   #50 = NameAndType        #51:#52       // outputStream:Ljava/io/OutputStream;\n+   #51 = Utf8               outputStream\n+   #52 = Utf8               Ljava/io/OutputStream;\n+   #53 = Methodref          #8.#54        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.writeZipSplitSignature:()V\n+   #54 = NameAndType        #55:#17       // writeZipSplitSignature:()V\n+   #55 = Utf8               writeZipSplitSignature\n+   #56 = String             #57           // The unsplittable content size is bigger than the split segment size\n+   #57 = Utf8               The unsplittable content size is bigger than the split segment size\n+   #58 = Fieldref           #8.#59        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.currentSplitSegmentBytesWritten:J\n+   #59 = NameAndType        #60:#40       // currentSplitSegmentBytesWritten:J\n+   #60 = Utf8               currentSplitSegmentBytesWritten\n+   #61 = Methodref          #8.#62        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.openNewSplitSegment:()V\n+   #62 = NameAndType        #63:#17       // openNewSplitSegment:()V\n+   #63 = Utf8               openNewSplitSegment\n+   #64 = Methodref          #8.#65        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.write:([B)V\n+   #65 = NameAndType        #66:#67       // write:([B)V\n+   #66 = Utf8               write\n+   #67 = Utf8               ([B)V\n+   #68 = Methodref          #8.#69        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.write:([BII)V\n+   #69 = NameAndType        #66:#70       // write:([BII)V\n+   #70 = Utf8               ([BII)V\n+   #71 = Methodref          #14.#69       // java/io/OutputStream.write:([BII)V\n+   #72 = Fieldref           #8.#73        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.finished:Z\n+   #73 = NameAndType        #74:#75       // finished:Z\n+   #74 = Utf8               finished\n+   #75 = Utf8               Z\n+   #76 = Methodref          #8.#77        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.finish:()V\n+   #77 = NameAndType        #78:#17       // finish:()V\n+   #78 = Utf8               finish\n+   #79 = Class              #80           // java/io/IOException\n+   #80 = Utf8               java/io/IOException\n+   #81 = String             #82           // This archive has already been finished\n+   #82 = Utf8               This archive has already been finished\n+   #83 = Methodref          #79.#31       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #84 = Methodref          #85.#86       // org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n+   #85 = Class              #87           // org/apache/commons/compress/utils/FileNameUtils\n+   #86 = NameAndType        #88:#89       // getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n+   #87 = Utf8               org/apache/commons/compress/utils/FileNameUtils\n+   #88 = Utf8               getBaseName\n+   #89 = Utf8               (Ljava/nio/file/Path;)Ljava/lang/String;\n+   #90 = Methodref          #14.#91       // java/io/OutputStream.close:()V\n+   #91 = NameAndType        #92:#17       // close:()V\n+   #92 = Utf8               close\n+   #93 = Class              #94           // java/lang/StringBuilder\n+   #94 = Utf8               java/lang/StringBuilder\n+   #95 = Methodref          #93.#15       // java/lang/StringBuilder.\"<init>\":()V\n+   #96 = Methodref          #93.#97       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #97 = NameAndType        #98:#99       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #98 = Utf8               append\n+   #99 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #100 = String             #101          // .zip\n+  #101 = Utf8               .zip\n+  #102 = Methodref          #93.#103      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #103 = NameAndType        #104:#105     // toString:()Ljava/lang/String;\n+  #104 = Utf8               toString\n+  #105 = Utf8               ()Ljava/lang/String;\n+  #106 = InterfaceMethodref #107.#108     // java/nio/file/Path.resolveSibling:(Ljava/lang/String;)Ljava/nio/file/Path;\n+  #107 = Class              #109          // java/nio/file/Path\n+  #108 = NameAndType        #110:#111     // resolveSibling:(Ljava/lang/String;)Ljava/nio/file/Path;\n+  #109 = Utf8               java/nio/file/Path\n+  #110 = Utf8               resolveSibling\n+  #111 = Utf8               (Ljava/lang/String;)Ljava/nio/file/Path;\n+  #112 = Class              #113          // java/nio/file/CopyOption\n+  #113 = Utf8               java/nio/file/CopyOption\n+  #114 = Fieldref           #115.#116     // java/nio/file/StandardCopyOption.ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;\n+  #115 = Class              #117          // java/nio/file/StandardCopyOption\n+  #116 = NameAndType        #118:#119     // ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;\n+  #117 = Utf8               java/nio/file/StandardCopyOption\n+  #118 = Utf8               ATOMIC_MOVE\n+  #119 = Utf8               Ljava/nio/file/StandardCopyOption;\n+  #120 = Methodref          #44.#121      // java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n+  #121 = NameAndType        #122:#123     // move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n+  #122 = Utf8               move\n+  #123 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n+  #124 = Fieldref           #8.#125       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.currentSplitSegmentIndex:I\n+  #125 = NameAndType        #126:#127     // currentSplitSegmentIndex:I\n+  #126 = Utf8               currentSplitSegmentIndex\n+  #127 = Utf8               I\n+  #128 = Methodref          #129.#130     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #129 = Class              #131          // java/lang/Integer\n+  #130 = NameAndType        #132:#133     // valueOf:(I)Ljava/lang/Integer;\n+  #131 = Utf8               java/lang/Integer\n+  #132 = Utf8               valueOf\n+  #133 = Utf8               (I)Ljava/lang/Integer;\n+  #134 = Methodref          #8.#135       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/nio/file/Path;\n+  #135 = NameAndType        #136:#137     // createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/nio/file/Path;\n+  #136 = Utf8               createNewSplitSegmentFile\n+  #137 = Utf8               (Ljava/lang/Integer;)Ljava/nio/file/Path;\n+  #138 = Fieldref           #139.#140     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+  #139 = Class              #141          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #140 = NameAndType        #142:#21      // DD_SIG:[B\n+  #141 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #142 = Utf8               DD_SIG\n+  #143 = Methodref          #14.#65       // java/io/OutputStream.write:([B)V\n+  #144 = Methodref          #129.#145     // java/lang/Integer.intValue:()I\n+  #145 = NameAndType        #146:#147     // intValue:()I\n+  #146 = Utf8               intValue\n+  #147 = Utf8               ()I\n+  #148 = String             #149          // .z\n+  #149 = Utf8               .z\n+  #150 = String             #151          // 0\n+  #151 = Utf8               0\n+  #152 = Methodref          #93.#153      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #153 = NameAndType        #98:#154      // append:(I)Ljava/lang/StringBuilder;\n+  #154 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #155 = InterfaceMethodref #107.#156     // java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n+  #156 = NameAndType        #157:#6       // getParent:()Ljava/nio/file/Path;\n+  #157 = Utf8               getParent\n+  #158 = Methodref          #159.#160     // java/util/Objects.nonNull:(Ljava/lang/Object;)Z\n+  #159 = Class              #161          // java/util/Objects\n+  #160 = NameAndType        #162:#163     // nonNull:(Ljava/lang/Object;)Z\n+  #161 = Utf8               java/util/Objects\n+  #162 = Utf8               nonNull\n+  #163 = Utf8               (Ljava/lang/Object;)Z\n+  #164 = InterfaceMethodref #107.#165     // java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n+  #165 = NameAndType        #166:#6       // toAbsolutePath:()Ljava/nio/file/Path;\n+  #166 = Utf8               toAbsolutePath\n+  #167 = InterfaceMethodref #107.#103     // java/nio/file/Path.toString:()Ljava/lang/String;\n+  #168 = String             #169          // .\n+  #169 = Utf8               .\n+  #170 = InterfaceMethodref #107.#171     // java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n+  #171 = NameAndType        #172:#173     // getFileSystem:()Ljava/nio/file/FileSystem;\n+  #172 = Utf8               getFileSystem\n+  #173 = Utf8               ()Ljava/nio/file/FileSystem;\n+  #174 = Class              #175          // java/lang/String\n+  #175 = Utf8               java/lang/String\n+  #176 = Methodref          #177.#178     // java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+  #177 = Class              #179          // java/nio/file/FileSystem\n+  #178 = NameAndType        #180:#181     // getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+  #179 = Utf8               java/nio/file/FileSystem\n+  #180 = Utf8               getPath\n+  #181 = Utf8               (Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+  #182 = Class              #183          // java/nio/file/LinkOption\n   #183 = Utf8               java/nio/file/LinkOption\n-  #184 = NameAndType        #227:#228     // exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #185 = Utf8               split zip segment\n-  #186 = Utf8                already exists\n-  #187 = Utf8               java/io/OutputStream\n-  #188 = Utf8               java/nio/file/Path\n-  #189 = Utf8               java/io/File\n-  #190 = Utf8               toPath\n-  #191 = Utf8               ()Ljava/nio/file/Path;\n-  #192 = Utf8               (Ljava/lang/String;)V\n-  #193 = Utf8               java/nio/file/Files\n-  #194 = Utf8               newOutputStream\n-  #195 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-  #196 = Utf8               org/apache/commons/compress/utils/FileNameUtils\n-  #197 = Utf8               getBaseName\n-  #198 = Utf8               (Ljava/nio/file/Path;)Ljava/lang/String;\n-  #199 = Utf8               append\n-  #200 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #201 = Utf8               toString\n-  #202 = Utf8               ()Ljava/lang/String;\n-  #203 = Utf8               resolveSibling\n-  #204 = Utf8               (Ljava/lang/String;)Ljava/nio/file/Path;\n-  #205 = Utf8               java/nio/file/StandardCopyOption\n-  #206 = Utf8               ATOMIC_MOVE\n-  #207 = Utf8               Ljava/nio/file/StandardCopyOption;\n-  #208 = Utf8               move\n-  #209 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n-  #210 = Utf8               java/lang/Integer\n-  #211 = Utf8               valueOf\n-  #212 = Utf8               (I)Ljava/lang/Integer;\n-  #213 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #214 = Utf8               DD_SIG\n-  #215 = Utf8               intValue\n-  #216 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #217 = Utf8               getParent\n-  #218 = Utf8               java/util/Objects\n-  #219 = Utf8               nonNull\n-  #220 = Utf8               (Ljava/lang/Object;)Z\n-  #221 = Utf8               toAbsolutePath\n-  #222 = Utf8               getFileSystem\n-  #223 = Utf8               ()Ljava/nio/file/FileSystem;\n-  #224 = Utf8               java/nio/file/FileSystem\n-  #225 = Utf8               getPath\n-  #226 = Utf8               (Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n-  #227 = Utf8               exists\n-  #228 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #184 = Methodref          #44.#185      // java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #185 = NameAndType        #186:#187     // exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #186 = Utf8               exists\n+  #187 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #188 = String             #189          // split zip segment\n+  #189 = Utf8               split zip segment\n+  #190 = String             #191          //  already exists\n+  #191 = Utf8                already exists\n+  #192 = Utf8               ZIP_SEGMENT_MIN_SIZE\n+  #193 = Utf8               ConstantValue\n+  #194 = Utf8               ZIP_SEGMENT_MAX_SIZE\n+  #195 = Utf8               (Ljava/io/File;J)V\n+  #196 = Utf8               Code\n+  #197 = Utf8               LineNumberTable\n+  #198 = Utf8               LocalVariableTable\n+  #199 = Utf8               this\n+  #200 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n+  #201 = Utf8               Ljava/io/File;\n+  #202 = Utf8               Exceptions\n+  #203 = Utf8               StackMapTable\n+  #204 = Utf8               prepareToWriteUnsplittableContent\n+  #205 = Utf8               (J)V\n+  #206 = Utf8               unsplittableContentSize\n+  #207 = Utf8               bytesRemainingInThisSegment\n+  #208 = Utf8               (I)V\n+  #209 = Utf8               i\n+  #210 = Utf8               b\n+  #211 = Utf8               bytesToWriteForThisSegment\n+  #212 = Utf8               off\n+  #213 = Utf8               len\n+  #214 = Utf8               zipFileBaseName\n+  #215 = Utf8               Ljava/lang/String;\n+  #216 = Utf8               newFile\n+  #217 = Utf8               zipSplitSegmentSuffixIndex\n+  #218 = Utf8               Ljava/lang/Integer;\n+  #219 = Utf8               newZipSplitSegmentSuffixIndex\n+  #220 = Utf8               baseName\n+  #221 = Utf8               extension\n+  #222 = Utf8               parent\n+  #223 = Utf8               dir\n+  #224 = Utf8               getCurrentSplitSegmentIndex\n+  #225 = Utf8               getCurrentSplitSegmentBytesWritten\n+  #226 = Utf8               ()J\n+  #227 = Utf8               SourceFile\n+  #228 = Utf8               ZipSplitOutputStream.java\n {\n   private java.io.OutputStream outputStream;\n     descriptor: Ljava/io/OutputStream;\n     flags: (0x0002) ACC_PRIVATE\n \n   private java.nio.file.Path zipFile;\n     descriptor: Ljava/nio/file/Path;\n@@ -278,15 +278,15 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n          1: aload_1\n          2: invokevirtual #1                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          5: lload_2\n-         6: invokespecial #2                  // Method \"<init>\":(Ljava/nio/file/Path;J)V\n+         6: invokespecial #7                  // Method \"<init>\":(Ljava/nio/file/Path;J)V\n          9: return\n       LineNumberTable:\n         line 63: 0\n         line 64: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n@@ -297,46 +297,46 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipSplitOutputStream(java.nio.file.Path, long) throws java.lang.IllegalArgumentException, java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #3                  // Method java/io/OutputStream.\"<init>\":()V\n+         1: invokespecial #13                 // Method java/io/OutputStream.\"<init>\":()V\n          4: aload_0\n          5: iconst_1\n          6: newarray       byte\n-         8: putfield      #4                  // Field singleByte:[B\n+         8: putfield      #18                 // Field singleByte:[B\n         11: lload_2\n-        12: ldc2_w        #6                  // long 65536l\n+        12: ldc2_w        #22                 // long 65536l\n         15: lcmp\n         16: iflt          27\n         19: lload_2\n-        20: ldc2_w        #8                  // long 4294967295l\n+        20: ldc2_w        #24                 // long 4294967295l\n         23: lcmp\n         24: ifle          37\n-        27: new           #10                 // class java/lang/IllegalArgumentException\n+        27: new           #26                 // class java/lang/IllegalArgumentException\n         30: dup\n-        31: ldc           #11                 // String zip split segment size should between 64K and 4,294,967,295\n-        33: invokespecial #12                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        31: ldc           #28                 // String zip split segment size should between 64K and 4,294,967,295\n+        33: invokespecial #30                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         36: athrow\n         37: aload_0\n         38: aload_1\n-        39: putfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n+        39: putfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n         42: aload_0\n         43: lload_2\n-        44: putfield      #14                 // Field splitSize:J\n+        44: putfield      #37                 // Field splitSize:J\n         47: aload_0\n         48: aload_1\n         49: iconst_0\n-        50: anewarray     #15                 // class java/nio/file/OpenOption\n-        53: invokestatic  #16                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-        56: putfield      #17                 // Field outputStream:Ljava/io/OutputStream;\n+        50: anewarray     #41                 // class java/nio/file/OpenOption\n+        53: invokestatic  #43                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+        56: putfield      #49                 // Field outputStream:Ljava/io/OutputStream;\n         59: aload_0\n-        60: invokespecial #18                 // Method writeZipSplitSignature:()V\n+        60: invokespecial #53                 // Method writeZipSplitSignature:()V\n         63: return\n       LineNumberTable:\n         line 74: 0\n         line 42: 4\n         line 75: 11\n         line 76: 27\n         line 78: 37\n@@ -361,34 +361,34 @@\n   public void prepareToWriteUnsplittableContent(long) throws java.lang.IllegalArgumentException, java.io.IOException;\n     descriptor: (J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=2\n          0: lload_1\n          1: aload_0\n-         2: getfield      #14                 // Field splitSize:J\n+         2: getfield      #37                 // Field splitSize:J\n          5: lcmp\n          6: ifle          19\n-         9: new           #10                 // class java/lang/IllegalArgumentException\n+         9: new           #26                 // class java/lang/IllegalArgumentException\n         12: dup\n-        13: ldc           #19                 // String The unsplittable content size is bigger than the split segment size\n-        15: invokespecial #12                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #56                 // String The unsplittable content size is bigger than the split segment size\n+        15: invokespecial #30                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: getfield      #14                 // Field splitSize:J\n+        20: getfield      #37                 // Field splitSize:J\n         23: aload_0\n-        24: getfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+        24: getfield      #58                 // Field currentSplitSegmentBytesWritten:J\n         27: lsub\n         28: lstore_3\n         29: lload_3\n         30: lload_1\n         31: lcmp\n         32: ifge          39\n         35: aload_0\n-        36: invokespecial #21                 // Method openNewSplitSegment:()V\n+        36: invokespecial #61                 // Method openNewSplitSegment:()V\n         39: return\n       LineNumberTable:\n         line 97: 0\n         line 98: 9\n         line 101: 19\n         line 102: 29\n         line 103: 35\n@@ -408,25 +408,25 @@\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #4                  // Field singleByte:[B\n+         1: getfield      #18                 // Field singleByte:[B\n          4: iconst_0\n          5: iload_1\n          6: sipush        255\n          9: iand\n         10: i2b\n         11: bastore\n         12: aload_0\n         13: aload_0\n-        14: getfield      #4                  // Field singleByte:[B\n-        17: invokevirtual #22                 // Method write:([B)V\n+        14: getfield      #18                 // Field singleByte:[B\n+        17: invokevirtual #64                 // Method write:([B)V\n         20: return\n       LineNumberTable:\n         line 109: 0\n         line 110: 12\n         line 111: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -441,15 +441,15 @@\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #23                 // Method write:([BII)V\n+         5: invokevirtual #68                 // Method write:([BII)V\n          8: return\n       LineNumberTable:\n         line 115: 0\n         line 116: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n@@ -462,74 +462,74 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=5, args_size=4\n          0: iload_3\n          1: ifgt          5\n          4: return\n          5: aload_0\n-         6: getfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+         6: getfield      #58                 // Field currentSplitSegmentBytesWritten:J\n          9: aload_0\n-        10: getfield      #14                 // Field splitSize:J\n+        10: getfield      #37                 // Field splitSize:J\n         13: lcmp\n         14: iflt          31\n         17: aload_0\n-        18: invokespecial #21                 // Method openNewSplitSegment:()V\n+        18: invokespecial #61                 // Method openNewSplitSegment:()V\n         21: aload_0\n         22: aload_1\n         23: iload_2\n         24: iload_3\n-        25: invokevirtual #23                 // Method write:([BII)V\n+        25: invokevirtual #68                 // Method write:([BII)V\n         28: goto          108\n         31: aload_0\n-        32: getfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+        32: getfield      #58                 // Field currentSplitSegmentBytesWritten:J\n         35: iload_3\n         36: i2l\n         37: ladd\n         38: aload_0\n-        39: getfield      #14                 // Field splitSize:J\n+        39: getfield      #37                 // Field splitSize:J\n         42: lcmp\n         43: ifle          87\n         46: aload_0\n-        47: getfield      #14                 // Field splitSize:J\n+        47: getfield      #37                 // Field splitSize:J\n         50: l2i\n         51: aload_0\n-        52: getfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+        52: getfield      #58                 // Field currentSplitSegmentBytesWritten:J\n         55: l2i\n         56: isub\n         57: istore        4\n         59: aload_0\n         60: aload_1\n         61: iload_2\n         62: iload         4\n-        64: invokevirtual #23                 // Method write:([BII)V\n+        64: invokevirtual #68                 // Method write:([BII)V\n         67: aload_0\n-        68: invokespecial #21                 // Method openNewSplitSegment:()V\n+        68: invokespecial #61                 // Method openNewSplitSegment:()V\n         71: aload_0\n         72: aload_1\n         73: iload_2\n         74: iload         4\n         76: iadd\n         77: iload_3\n         78: iload         4\n         80: isub\n-        81: invokevirtual #23                 // Method write:([BII)V\n+        81: invokevirtual #68                 // Method write:([BII)V\n         84: goto          108\n         87: aload_0\n-        88: getfield      #17                 // Field outputStream:Ljava/io/OutputStream;\n+        88: getfield      #49                 // Field outputStream:Ljava/io/OutputStream;\n         91: aload_1\n         92: iload_2\n         93: iload_3\n-        94: invokevirtual #24                 // Method java/io/OutputStream.write:([BII)V\n+        94: invokevirtual #71                 // Method java/io/OutputStream.write:([BII)V\n         97: aload_0\n         98: dup\n-        99: getfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+        99: getfield      #58                 // Field currentSplitSegmentBytesWritten:J\n        102: iload_3\n        103: i2l\n        104: ladd\n-       105: putfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+       105: putfield      #58                 // Field currentSplitSegmentBytesWritten:J\n        108: return\n       LineNumberTable:\n         line 129: 0\n         line 130: 4\n         line 133: 5\n         line 134: 17\n         line 135: 21\n@@ -559,18 +559,18 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field finished:Z\n+         1: getfield      #72                 // Field finished:Z\n          4: ifne          11\n          7: aload_0\n-         8: invokespecial #26                 // Method finish:()V\n+         8: invokespecial #76                 // Method finish:()V\n         11: return\n       LineNumberTable:\n         line 149: 0\n         line 150: 7\n         line 152: 11\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -582,52 +582,52 @@\n \n   private void finish() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field finished:Z\n+         1: getfield      #72                 // Field finished:Z\n          4: ifeq          17\n-         7: new           #27                 // class java/io/IOException\n+         7: new           #79                 // class java/io/IOException\n         10: dup\n-        11: ldc           #28                 // String This archive has already been finished\n-        13: invokespecial #29                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #81                 // String This archive has already been finished\n+        13: invokespecial #83                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n-        21: invokestatic  #30                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n+        18: getfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n+        21: invokestatic  #84                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n         24: astore_1\n         25: aload_0\n-        26: getfield      #17                 // Field outputStream:Ljava/io/OutputStream;\n-        29: invokevirtual #31                 // Method java/io/OutputStream.close:()V\n+        26: getfield      #49                 // Field outputStream:Ljava/io/OutputStream;\n+        29: invokevirtual #90                 // Method java/io/OutputStream.close:()V\n         32: aload_0\n-        33: getfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n+        33: getfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n         36: aload_0\n-        37: getfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n-        40: new           #32                 // class java/lang/StringBuilder\n+        37: getfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n+        40: new           #93                 // class java/lang/StringBuilder\n         43: dup\n-        44: invokespecial #33                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        44: invokespecial #95                 // Method java/lang/StringBuilder.\"<init>\":()V\n         47: aload_1\n-        48: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        51: ldc           #35                 // String .zip\n-        53: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        56: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        59: invokeinterface #37,  2           // InterfaceMethod java/nio/file/Path.resolveSibling:(Ljava/lang/String;)Ljava/nio/file/Path;\n+        48: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        51: ldc           #100                // String .zip\n+        53: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        56: invokevirtual #102                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        59: invokeinterface #106,  2          // InterfaceMethod java/nio/file/Path.resolveSibling:(Ljava/lang/String;)Ljava/nio/file/Path;\n         64: iconst_1\n-        65: anewarray     #38                 // class java/nio/file/CopyOption\n+        65: anewarray     #112                // class java/nio/file/CopyOption\n         68: dup\n         69: iconst_0\n-        70: getstatic     #39                 // Field java/nio/file/StandardCopyOption.ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;\n+        70: getstatic     #114                // Field java/nio/file/StandardCopyOption.ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;\n         73: aastore\n-        74: invokestatic  #40                 // Method java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n+        74: invokestatic  #120                // Method java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n         77: pop\n         78: aload_0\n         79: iconst_1\n-        80: putfield      #25                 // Field finished:Z\n+        80: putfield      #72                 // Field finished:Z\n         83: return\n       LineNumberTable:\n         line 160: 0\n         line 161: 7\n         line 164: 17\n         line 165: 25\n         line 166: 32\n@@ -644,60 +644,60 @@\n \n   private void openNewSplitSegment() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #41                 // Field currentSplitSegmentIndex:I\n+         1: getfield      #124                // Field currentSplitSegmentIndex:I\n          4: ifne          42\n          7: aload_0\n-         8: getfield      #17                 // Field outputStream:Ljava/io/OutputStream;\n-        11: invokevirtual #31                 // Method java/io/OutputStream.close:()V\n+         8: getfield      #49                 // Field outputStream:Ljava/io/OutputStream;\n+        11: invokevirtual #90                 // Method java/io/OutputStream.close:()V\n         14: aload_0\n         15: iconst_1\n-        16: invokestatic  #42                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-        19: invokespecial #43                 // Method createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/nio/file/Path;\n+        16: invokestatic  #128                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+        19: invokespecial #134                // Method createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/nio/file/Path;\n         22: astore_1\n         23: aload_0\n-        24: getfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n+        24: getfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n         27: aload_1\n         28: iconst_1\n-        29: anewarray     #38                 // class java/nio/file/CopyOption\n+        29: anewarray     #112                // class java/nio/file/CopyOption\n         32: dup\n         33: iconst_0\n-        34: getstatic     #39                 // Field java/nio/file/StandardCopyOption.ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;\n+        34: getstatic     #114                // Field java/nio/file/StandardCopyOption.ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;\n         37: aastore\n-        38: invokestatic  #40                 // Method java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n+        38: invokestatic  #120                // Method java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;\n         41: pop\n         42: aload_0\n         43: aconst_null\n-        44: invokespecial #43                 // Method createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/nio/file/Path;\n+        44: invokespecial #134                // Method createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/nio/file/Path;\n         47: astore_1\n         48: aload_0\n-        49: getfield      #17                 // Field outputStream:Ljava/io/OutputStream;\n-        52: invokevirtual #31                 // Method java/io/OutputStream.close:()V\n+        49: getfield      #49                 // Field outputStream:Ljava/io/OutputStream;\n+        52: invokevirtual #90                 // Method java/io/OutputStream.close:()V\n         55: aload_0\n         56: aload_1\n         57: iconst_0\n-        58: anewarray     #15                 // class java/nio/file/OpenOption\n-        61: invokestatic  #16                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-        64: putfield      #17                 // Field outputStream:Ljava/io/OutputStream;\n+        58: anewarray     #41                 // class java/nio/file/OpenOption\n+        61: invokestatic  #43                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+        64: putfield      #49                 // Field outputStream:Ljava/io/OutputStream;\n         67: aload_0\n         68: lconst_0\n-        69: putfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+        69: putfield      #58                 // Field currentSplitSegmentBytesWritten:J\n         72: aload_0\n         73: aload_1\n-        74: putfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n+        74: putfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n         77: aload_0\n         78: dup\n-        79: getfield      #41                 // Field currentSplitSegmentIndex:I\n+        79: getfield      #124                // Field currentSplitSegmentIndex:I\n         82: iconst_1\n         83: iadd\n-        84: putfield      #41                 // Field currentSplitSegmentIndex:I\n+        84: putfield      #124                // Field currentSplitSegmentIndex:I\n         87: return\n       LineNumberTable:\n         line 177: 0\n         line 178: 7\n         line 179: 14\n         line 180: 23\n         line 183: 42\n@@ -719,25 +719,25 @@\n \n   private void writeZipSplitSignature() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field outputStream:Ljava/io/OutputStream;\n-         4: getstatic     #44                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-         7: invokevirtual #45                 // Method java/io/OutputStream.write:([B)V\n+         1: getfield      #49                 // Field outputStream:Ljava/io/OutputStream;\n+         4: getstatic     #138                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+         7: invokevirtual #143                // Method java/io/OutputStream.write:([B)V\n         10: aload_0\n         11: dup\n-        12: getfield      #20                 // Field currentSplitSegmentBytesWritten:J\n-        15: getstatic     #44                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+        12: getfield      #58                 // Field currentSplitSegmentBytesWritten:J\n+        15: getstatic     #138                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n         18: arraylength\n         19: i2l\n         20: ladd\n-        21: putfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+        21: putfield      #58                 // Field currentSplitSegmentBytesWritten:J\n         24: return\n       LineNumberTable:\n         line 199: 0\n         line 200: 10\n         line 201: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -749,103 +749,103 @@\n     descriptor: (Ljava/lang/Integer;)Ljava/nio/file/Path;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=8, args_size=2\n          0: aload_1\n          1: ifnonnull     13\n          4: aload_0\n-         5: getfield      #41                 // Field currentSplitSegmentIndex:I\n+         5: getfield      #124                // Field currentSplitSegmentIndex:I\n          8: iconst_2\n          9: iadd\n         10: goto          17\n         13: aload_1\n-        14: invokevirtual #46                 // Method java/lang/Integer.intValue:()I\n+        14: invokevirtual #144                // Method java/lang/Integer.intValue:()I\n         17: istore_2\n         18: aload_0\n-        19: getfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n-        22: invokestatic  #30                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n+        19: getfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n+        22: invokestatic  #84                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n         25: astore_3\n-        26: ldc           #47                 // String .z\n+        26: ldc           #148                // String .z\n         28: astore        4\n         30: iload_2\n         31: bipush        9\n         33: if_icmpgt     65\n-        36: new           #32                 // class java/lang/StringBuilder\n+        36: new           #93                 // class java/lang/StringBuilder\n         39: dup\n-        40: invokespecial #33                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        40: invokespecial #95                 // Method java/lang/StringBuilder.\"<init>\":()V\n         43: aload         4\n-        45: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        48: ldc           #48                 // String 0\n-        50: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        45: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        48: ldc           #150                // String 0\n+        50: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         53: iload_2\n-        54: invokevirtual #49                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        57: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        54: invokevirtual #152                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        57: invokevirtual #102                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         60: astore        4\n         62: goto          86\n-        65: new           #32                 // class java/lang/StringBuilder\n+        65: new           #93                 // class java/lang/StringBuilder\n         68: dup\n-        69: invokespecial #33                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        69: invokespecial #95                 // Method java/lang/StringBuilder.\"<init>\":()V\n         72: aload         4\n-        74: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        74: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         77: iload_2\n-        78: invokevirtual #49                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        81: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        78: invokevirtual #152                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        81: invokevirtual #102                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         84: astore        4\n         86: aload_0\n-        87: getfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n-        90: invokeinterface #50,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n+        87: getfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n+        90: invokeinterface #155,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n         95: astore        5\n         97: aload         5\n-        99: invokestatic  #51                 // Method java/util/Objects.nonNull:(Ljava/lang/Object;)Z\n+        99: invokestatic  #158                // Method java/util/Objects.nonNull:(Ljava/lang/Object;)Z\n        102: ifeq          120\n        105: aload         5\n-       107: invokeinterface #52,  1           // InterfaceMethod java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n-       112: invokeinterface #53,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;\n+       107: invokeinterface #164,  1          // InterfaceMethod java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n+       112: invokeinterface #167,  1          // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;\n        117: goto          122\n-       120: ldc           #54                 // String .\n+       120: ldc           #168                // String .\n        122: astore        6\n        124: aload_0\n-       125: getfield      #13                 // Field zipFile:Ljava/nio/file/Path;\n-       128: invokeinterface #55,  1           // InterfaceMethod java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n+       125: getfield      #33                 // Field zipFile:Ljava/nio/file/Path;\n+       128: invokeinterface #170,  1          // InterfaceMethod java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n        133: aload         6\n        135: iconst_1\n-       136: anewarray     #56                 // class java/lang/String\n+       136: anewarray     #174                // class java/lang/String\n        139: dup\n        140: iconst_0\n-       141: new           #32                 // class java/lang/StringBuilder\n+       141: new           #93                 // class java/lang/StringBuilder\n        144: dup\n-       145: invokespecial #33                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       145: invokespecial #95                 // Method java/lang/StringBuilder.\"<init>\":()V\n        148: aload_3\n-       149: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       149: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        152: aload         4\n-       154: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       157: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       154: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       157: invokevirtual #102                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n        160: aastore\n-       161: invokevirtual #57                 // Method java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+       161: invokevirtual #176                // Method java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n        164: astore        7\n        166: aload         7\n        168: iconst_0\n-       169: anewarray     #58                 // class java/nio/file/LinkOption\n-       172: invokestatic  #59                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+       169: anewarray     #182                // class java/nio/file/LinkOption\n+       172: invokestatic  #184                // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n        175: ifeq          215\n-       178: new           #27                 // class java/io/IOException\n+       178: new           #79                 // class java/io/IOException\n        181: dup\n-       182: new           #32                 // class java/lang/StringBuilder\n+       182: new           #93                 // class java/lang/StringBuilder\n        185: dup\n-       186: invokespecial #33                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       189: ldc           #60                 // String split zip segment\n-       191: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       186: invokespecial #95                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       189: ldc           #188                // String split zip segment\n+       191: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        194: aload_3\n-       195: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       195: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        198: aload         4\n-       200: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       203: ldc           #61                 // String  already exists\n-       205: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       208: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       211: invokespecial #29                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       200: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       203: ldc           #190                // String  already exists\n+       205: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       208: invokevirtual #102                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       211: invokespecial #83                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        214: athrow\n        215: aload         7\n        217: areturn\n       LineNumberTable:\n         line 226: 0\n         line 227: 18\n         line 228: 26\n@@ -889,29 +889,29 @@\n \n   public int getCurrentSplitSegmentIndex();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #41                 // Field currentSplitSegmentIndex:I\n+         1: getfield      #124                // Field currentSplitSegmentIndex:I\n          4: ireturn\n       LineNumberTable:\n         line 246: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n \n   public long getCurrentSplitSegmentBytesWritten();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #20                 // Field currentSplitSegmentBytesWritten:J\n+         1: getfield      #58                 // Field currentSplitSegmentBytesWritten:J\n          4: lreturn\n       LineNumberTable:\n         line 250: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n }\n"}]}
