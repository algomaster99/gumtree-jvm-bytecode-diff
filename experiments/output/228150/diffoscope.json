{"diffoscope-json-version": 1, "source1": "first/BaseNCodecInputStream.class", "source2": "second/BaseNCodecInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,79 +22,78 @@\n     \n     @Override\n     public int available() throws IOException {\n         return this.context.eof ? 0 : 1;\n     }\n     \n     @Override\n-    public synchronized void mark(final int readLimit) {\n+    public synchronized void mark(final int n) {\n     }\n     \n     @Override\n     public boolean markSupported() {\n         return false;\n     }\n     \n     @Override\n     public int read() throws IOException {\n-        int r;\n-        for (r = this.read(this.singleByte, 0, 1); r == 0; r = this.read(this.singleByte, 0, 1)) {}\n-        if (r > 0) {\n+        int i;\n+        for (i = this.read(this.singleByte, 0, 1); i == 0; i = this.read(this.singleByte, 0, 1)) {}\n+        if (i > 0) {\n             final byte b = this.singleByte[0];\n             return (b < 0) ? (256 + b) : b;\n         }\n         return -1;\n     }\n     \n     @Override\n-    public int read(final byte[] b, final int offset, final int len) throws IOException {\n-        if (b == null) {\n+    public int read(final byte[] array, final int n, final int n2) throws IOException {\n+        if (array == null) {\n             throw new NullPointerException();\n         }\n-        if (offset < 0 || len < 0) {\n+        if (n < 0 || n2 < 0) {\n             throw new IndexOutOfBoundsException();\n         }\n-        if (offset > b.length || offset + len > b.length) {\n+        if (n > array.length || n + n2 > array.length) {\n             throw new IndexOutOfBoundsException();\n         }\n-        if (len == 0) {\n+        if (n2 == 0) {\n             return 0;\n         }\n-        int readLen;\n-        for (readLen = 0; readLen == 0; readLen = this.baseNCodec.readResults(b, offset, len, this.context)) {\n+        int i;\n+        for (i = 0; i == 0; i = this.baseNCodec.readResults(array, n, n2, this.context)) {\n             if (!this.baseNCodec.hasData(this.context)) {\n-                final byte[] buf = new byte[this.doEncode ? 4096 : 8192];\n-                final int c = this.in.read(buf);\n+                final byte[] b = new byte[this.doEncode ? 4096 : 8192];\n+                final int read = this.in.read(b);\n                 if (this.doEncode) {\n-                    this.baseNCodec.encode(buf, 0, c, this.context);\n+                    this.baseNCodec.encode(b, 0, read, this.context);\n                 }\n                 else {\n-                    this.baseNCodec.decode(buf, 0, c, this.context);\n+                    this.baseNCodec.decode(b, 0, read, this.context);\n                 }\n             }\n         }\n-        return readLen;\n+        return i;\n     }\n     \n     @Override\n     public synchronized void reset() throws IOException {\n         throw new IOException(\"mark/reset not supported\");\n     }\n     \n     @Override\n-    public long skip(final long n) throws IOException {\n-        if (n < 0L) {\n-            throw new IllegalArgumentException(\"Negative skip length: \" + n);\n-        }\n-        final byte[] b = new byte[512];\n-        long todo;\n-        int len;\n-        for (todo = n; todo > 0L; todo -= len) {\n-            len = (int)Math.min(b.length, todo);\n-            len = this.read(b, 0, len);\n-            if (len == -1) {\n+    public long skip(final long lng) throws IOException {\n+        if (lng < 0L) {\n+            throw new IllegalArgumentException(\"Negative skip length: \" + lng);\n+        }\n+        final byte[] array = new byte[512];\n+        long b;\n+        int read;\n+        for (b = lng; b > 0L; b -= read) {\n+            read = this.read(array, 0, (int)Math.min(array.length, b));\n+            if (read == -1) {\n                 break;\n             }\n         }\n-        return n - todo;\n+        return lng - b;\n     }\n }\n"}]}
