{"diffoscope-json-version": 1, "source1": "first/BaseEventSource.class", "source2": "second/BaseEventSource.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,13 @@\n \n package org.apache.commons.configuration2.event;\n \n import java.util.List;\n import java.util.Collections;\n import java.util.function.Consumer;\n-import java.util.Objects;\n import java.util.LinkedList;\n import java.util.Collection;\n \n public class BaseEventSource implements EventSource\n {\n     private EventListenerList eventListeners;\n     private final Object lockDetailEventsCount;\n@@ -17,18 +16,15 @@\n     public BaseEventSource() {\n         this.lockDetailEventsCount = new Object();\n         this.initListeners();\n     }\n     \n     public <T extends Event> Collection<EventListener<? super T>> getEventListeners(final EventType<T> eventType) {\n         final List<EventListener<? super T>> result = new LinkedList<EventListener<? super T>>();\n-        final Iterable eventListeners = this.eventListeners.getEventListeners((EventType)eventType);\n-        final List<EventListener<? super T>> obj = result;\n-        Objects.requireNonNull((LinkedList)obj);\n-        eventListeners.forEach(obj::add);\n+        this.eventListeners.getEventListeners((EventType)eventType).forEach(result::add);\n         return Collections.unmodifiableCollection((Collection<? extends EventListener<? super T>>)result);\n     }\n     \n     public List<EventListenerRegistrationData<?>> getEventListenerRegistrations() {\n         return this.eventListeners.getRegistrations();\n     }\n     \n@@ -40,14 +36,15 @@\n         synchronized (this.lockDetailEventsCount) {\n             if (enable) {\n                 ++this.detailEvents;\n             }\n             else {\n                 --this.detailEvents;\n             }\n+            monitorexit(this.lockDetailEventsCount);\n         }\n     }\n     \n     public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n         this.eventListeners.addEventListener((EventType)eventType, (EventListener)listener);\n     }\n     \n@@ -56,18 +53,15 @@\n     }\n     \n     public void clearEventListeners() {\n         this.eventListeners.clear();\n     }\n     \n     public void clearErrorListeners() {\n-        final List registrationsForSuperType = this.eventListeners.getRegistrationsForSuperType(ConfigurationErrorEvent.ANY);\n-        final EventListenerList eventListeners = this.eventListeners;\n-        Objects.requireNonNull(eventListeners);\n-        registrationsForSuperType.forEach(eventListeners::removeEventListener);\n+        this.eventListeners.getRegistrationsForSuperType(ConfigurationErrorEvent.ANY).forEach(this.eventListeners::removeEventListener);\n     }\n     \n     public void copyEventListeners(final BaseEventSource source) {\n         if (source == null) {\n             throw new IllegalArgumentException(\"Target event source must not be null!\");\n         }\n         source.eventListeners.addAll(this.eventListeners);\n@@ -112,11 +106,13 @@\n     \n     private void initListeners() {\n         this.eventListeners = new EventListenerList();\n     }\n     \n     private boolean checkDetailEvents(final int limit) {\n         synchronized (this.lockDetailEventsCount) {\n-            return this.detailEvents > limit;\n+            final boolean b = this.detailEvents > limit;\n+            monitorexit(this.lockDetailEventsCount);\n+            return b;\n         }\n     }\n }\n"}]}
