{"diffoscope-json-version": 1, "source1": "first/SlistHandler.class", "source2": "second/SlistHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,27 +5,27 @@\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.BitSet;\n \n public class SlistHandler extends BlockParentHandler\n {\n     private static final BitSet PARENT_TOKEN_TYPES;\n     \n-    public SlistHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, \"block\", ast, parent);\n+    public SlistHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, \"block\", detailAST, abstractExpressionHandler);\n     }\n     \n-    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler child) {\n-        IndentLevel result;\n-        if ((this.getParent() instanceof BlockParentHandler && !(this.getParent() instanceof SlistHandler)) || (child instanceof SlistHandler && this.getParent() instanceof CaseHandler)) {\n-            result = this.getParent().getSuggestedChildIndent(child);\n+    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler abstractExpressionHandler) {\n+        IndentLevel indentLevel;\n+        if ((this.getParent() instanceof BlockParentHandler && !(this.getParent() instanceof SlistHandler)) || (abstractExpressionHandler instanceof SlistHandler && this.getParent() instanceof CaseHandler)) {\n+            indentLevel = this.getParent().getSuggestedChildIndent(abstractExpressionHandler);\n         }\n         else {\n-            result = super.getSuggestedChildIndent(child);\n+            indentLevel = super.getSuggestedChildIndent(abstractExpressionHandler);\n         }\n-        return result;\n+        return indentLevel;\n     }\n     \n     protected DetailAST getListChild() {\n         return this.getMainAst();\n     }\n     \n     protected DetailAST getLeftCurly() {\n@@ -37,26 +37,25 @@\n     }\n     \n     protected DetailAST getTopLevelAst() {\n         return null;\n     }\n     \n     private boolean hasBlockParent() {\n-        final int parentType = this.getMainAst().getParent().getType();\n-        return SlistHandler.PARENT_TOKEN_TYPES.get(parentType);\n+        return SlistHandler.PARENT_TOKEN_TYPES.get(this.getMainAst().getParent().getType());\n     }\n     \n     public void checkIndentation() {\n         if (!this.hasBlockParent() && !this.isSameLineCaseGroup()) {\n             super.checkIndentation();\n         }\n     }\n     \n     private boolean isSameLineCaseGroup() {\n-        final DetailAST parentNode = this.getMainAst().getParent();\n-        return parentNode.getType() == 33 && TokenUtil.areOnSameLine(this.getMainAst(), parentNode);\n+        final DetailAST parent = this.getMainAst().getParent();\n+        return parent.getType() == 33 && TokenUtil.areOnSameLine(this.getMainAst(), parent);\n     }\n     \n     static {\n         PARENT_TOKEN_TYPES = TokenUtil.asBitSet(new int[] { 8, 9, 12, 67, 83, 84, 85, 91, 92, 95, 96, 97, 203 });\n     }\n }\n"}]}
