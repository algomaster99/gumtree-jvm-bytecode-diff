{"diffoscope-json-version": 1, "source1": "first/RecordComponentNumberCheck.class", "source2": "second/RecordComponentNumberCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,48 +19,46 @@\n     private AccessModifierOption[] accessModifiers;\n     \n     public RecordComponentNumberCheck() {\n         this.max = 8;\n         this.accessModifiers = new AccessModifierOption[] { AccessModifierOption.PUBLIC, AccessModifierOption.PROTECTED, AccessModifierOption.PACKAGE, AccessModifierOption.PRIVATE };\n     }\n     \n-    public void setMax(final int value) {\n-        this.max = value;\n+    public void setMax(final int max) {\n+        this.max = max;\n     }\n     \n-    public void setAccessModifiers(final AccessModifierOption... accessModifiers) {\n-        this.accessModifiers = Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    public void setAccessModifiers(final AccessModifierOption... original) {\n+        this.accessModifiers = Arrays.copyOf(original, original.length);\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getAcceptableTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 199 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return this.getAcceptableTokens();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final AccessModifierOption accessModifier = CheckUtil.getAccessModifierFromModifiersToken(ast);\n-        if (this.matchAccessModifiers(accessModifier)) {\n-            final DetailAST recordComponents = ast.findFirstToken(201);\n-            final int componentCount = countComponents(recordComponents);\n-            if (componentCount > this.max) {\n-                this.log(ast, \"too.many.components\", new Object[] { Integer.valueOf(componentCount), Integer.valueOf(this.max) });\n+    public void visitToken(final DetailAST detailAST) {\n+        if (this.matchAccessModifiers(CheckUtil.getAccessModifierFromModifiersToken(detailAST))) {\n+            final int countComponents = countComponents(detailAST.findFirstToken(201));\n+            if (countComponents > this.max) {\n+                this.log(detailAST, \"too.many.components\", new Object[] { Integer.valueOf(countComponents), Integer.valueOf(this.max) });\n             }\n         }\n     }\n     \n-    private static int countComponents(final DetailAST recordComponents) {\n-        final AtomicInteger count = new AtomicInteger(0);\n-        TokenUtil.forEachChild(recordComponents, 202, node -> count.getAndIncrement());\n-        return count.get();\n+    private static int countComponents(final DetailAST detailAST) {\n+        final AtomicInteger atomicInteger = new AtomicInteger(0);\n+        TokenUtil.forEachChild(detailAST, 202, p1 -> atomicInteger2.getAndIncrement());\n+        return atomicInteger.get();\n     }\n     \n-    private boolean matchAccessModifiers(final AccessModifierOption accessModifier) {\n-        return Arrays.stream(this.accessModifiers).anyMatch(modifier -> modifier == accessModifier);\n+    private boolean matchAccessModifiers(final AccessModifierOption accessModifierOption) {\n+        return Arrays.stream(this.accessModifiers).anyMatch(accessModifierOption3 -> accessModifierOption3 == accessModifierOption2);\n     }\n }\n"}]}
