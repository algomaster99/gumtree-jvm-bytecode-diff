{"diffoscope-json-version": 1, "source1": "first/ConstantValue.class", "source2": "second/ConstantValue.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,76 +5,74 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class ConstantValue extends Attribute\n {\n     private int constantValueIndex;\n     \n-    public ConstantValue(final ConstantValue c) {\n-        this(c.getNameIndex(), c.getLength(), c.getConstantValueIndex(), c.getConstantPool());\n+    public ConstantValue(final ConstantValue constantValue) {\n+        this(constantValue.getNameIndex(), constantValue.getLength(), constantValue.getConstantValueIndex(), constantValue.getConstantPool());\n     }\n     \n-    ConstantValue(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, input.readUnsignedShort(), constant_pool);\n+    ConstantValue(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, dataInput.readUnsignedShort(), constantPool);\n     }\n     \n-    public ConstantValue(final int name_index, final int length, final int constantValueIndex, final ConstantPool constant_pool) {\n-        super((byte)1, name_index, length, constant_pool);\n+    public ConstantValue(final int n, final int n2, final int constantValueIndex, final ConstantPool constantPool) {\n+        super((byte)1, n, n2, constantPool);\n         this.constantValueIndex = constantValueIndex;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitConstantValue(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitConstantValue(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.constantValueIndex);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.constantValueIndex);\n     }\n     \n     public int getConstantValueIndex() {\n         return this.constantValueIndex;\n     }\n     \n     public void setConstantValueIndex(final int constantValueIndex) {\n         this.constantValueIndex = constantValueIndex;\n     }\n     \n     public String toString() {\n-        Constant c = super.getConstantPool().getConstant(this.constantValueIndex);\n-        String buf = null;\n-        switch (c.getTag()) {\n+        final Constant constant = super.getConstantPool().getConstant(this.constantValueIndex);\n+        String s = null;\n+        switch (constant.getTag()) {\n             case 5: {\n-                buf = String.valueOf(((ConstantLong)c).getBytes());\n+                s = String.valueOf(((ConstantLong)constant).getBytes());\n                 break;\n             }\n             case 4: {\n-                buf = String.valueOf(((ConstantFloat)c).getBytes());\n+                s = String.valueOf(((ConstantFloat)constant).getBytes());\n                 break;\n             }\n             case 6: {\n-                buf = String.valueOf(((ConstantDouble)c).getBytes());\n+                s = String.valueOf(((ConstantDouble)constant).getBytes());\n                 break;\n             }\n             case 3: {\n-                buf = String.valueOf(((ConstantInteger)c).getBytes());\n+                s = String.valueOf(((ConstantInteger)constant).getBytes());\n                 break;\n             }\n             case 8: {\n-                final int i = ((ConstantString)c).getStringIndex();\n-                c = super.getConstantPool().getConstant(i, (byte)1);\n-                buf = \"\\\"\" + Utility.convertString(((ConstantUtf8)c).getBytes()) + \"\\\"\";\n+                s = \"\\\"\" + Utility.convertString(((ConstantUtf8)super.getConstantPool().getConstant(((ConstantString)constant).getStringIndex(), (byte)1)).getBytes()) + \"\\\"\";\n                 break;\n             }\n             default: {\n-                throw new IllegalStateException(\"Type of ConstValue invalid: \" + c);\n+                throw new IllegalStateException(\"Type of ConstValue invalid: \" + constant);\n             }\n         }\n-        return buf;\n+        return s;\n     }\n     \n-    public Attribute copy(final ConstantPool _constant_pool) {\n-        final ConstantValue c = (ConstantValue)this.clone();\n-        c.setConstantPool(_constant_pool);\n-        return c;\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final ConstantValue constantValue = (ConstantValue)this.clone();\n+        constantValue.setConstantPool(constantPool);\n+        return constantValue;\n     }\n }\n"}]}
