{"diffoscope-json-version": 1, "source1": "first/JsonReadFeature.class", "source2": "second/JsonReadFeature.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,43 +2,45 @@\n package com.fasterxml.jackson.core.json;\n \n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.FormatFeature;\n \n public enum JsonReadFeature implements FormatFeature\n {\n-    ALLOW_JAVA_COMMENTS(false, JsonParser.Feature.ALLOW_COMMENTS), \n-    ALLOW_YAML_COMMENTS(false, JsonParser.Feature.ALLOW_YAML_COMMENTS), \n-    ALLOW_SINGLE_QUOTES(false, JsonParser.Feature.ALLOW_SINGLE_QUOTES), \n-    ALLOW_UNQUOTED_FIELD_NAMES(false, JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES), \n-    ALLOW_UNESCAPED_CONTROL_CHARS(false, JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS), \n-    ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false, JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER), \n-    ALLOW_LEADING_ZEROS_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS), \n-    ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS), \n-    ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS), \n-    ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS), \n-    ALLOW_NON_NUMERIC_NUMBERS(false, JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS), \n-    ALLOW_MISSING_VALUES(false, JsonParser.Feature.ALLOW_MISSING_VALUES), \n-    ALLOW_TRAILING_COMMA(false, JsonParser.Feature.ALLOW_TRAILING_COMMA);\n+    ALLOW_JAVA_COMMENTS(\"ALLOW_JAVA_COMMENTS\", 0, false, JsonParser.Feature.ALLOW_COMMENTS), \n+    ALLOW_YAML_COMMENTS(\"ALLOW_YAML_COMMENTS\", 1, false, JsonParser.Feature.ALLOW_YAML_COMMENTS), \n+    ALLOW_SINGLE_QUOTES(\"ALLOW_SINGLE_QUOTES\", 2, false, JsonParser.Feature.ALLOW_SINGLE_QUOTES), \n+    ALLOW_UNQUOTED_FIELD_NAMES(\"ALLOW_UNQUOTED_FIELD_NAMES\", 3, false, JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES), \n+    ALLOW_UNESCAPED_CONTROL_CHARS(\"ALLOW_UNESCAPED_CONTROL_CHARS\", 4, false, JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS), \n+    ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(\"ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER\", 5, false, JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER), \n+    ALLOW_LEADING_ZEROS_FOR_NUMBERS(\"ALLOW_LEADING_ZEROS_FOR_NUMBERS\", 6, false, JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS), \n+    ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS(\"ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS\", 7, false, JsonParser.Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS), \n+    ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS(\"ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS\", 8, false, JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS), \n+    ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS(\"ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS\", 9, false, JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS), \n+    ALLOW_NON_NUMERIC_NUMBERS(\"ALLOW_NON_NUMERIC_NUMBERS\", 10, false, JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS), \n+    ALLOW_MISSING_VALUES(\"ALLOW_MISSING_VALUES\", 11, false, JsonParser.Feature.ALLOW_MISSING_VALUES), \n+    ALLOW_TRAILING_COMMA(\"ALLOW_TRAILING_COMMA\", 12, false, JsonParser.Feature.ALLOW_TRAILING_COMMA);\n     \n     private final boolean _defaultState;\n     private final int _mask;\n     private final JsonParser.Feature _mappedFeature;\n     \n     public static int collectDefaults() {\n         int flags = 0;\n-        for (final JsonReadFeature f : values()) {\n+        JsonReadFeature[] values;\n+        for (int length = (values = values()).length, i = 0; i < length; ++i) {\n+            final JsonReadFeature f = values[i];\n             if (f.enabledByDefault()) {\n                 flags |= f.getMask();\n             }\n         }\n         return flags;\n     }\n     \n-    private JsonReadFeature(final boolean defaultState, final JsonParser.Feature mapTo) {\n+    private JsonReadFeature(final String name, final int ordinal, final boolean defaultState, final JsonParser.Feature mapTo) {\n         this._defaultState = defaultState;\n         this._mask = 1 << this.ordinal();\n         this._mappedFeature = mapTo;\n     }\n     \n     public boolean enabledByDefault() {\n         return this._defaultState;\n"}]}
