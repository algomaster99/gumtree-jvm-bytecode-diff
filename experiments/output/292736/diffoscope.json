{"diffoscope-json-version": 1, "source1": "first/Telnet.class", "source2": "second/Telnet.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,107 +1,107 @@\n-  SHA-256 checksum 6a1f687760f308a603a6ed3413530174394e2b136a438f3b5b3a7b9f84e8309e\n+  SHA-256 checksum c504e5db0fe524b640025bbd03774cad39259458322472117f2ef097f52c3ece\n   Compiled from \"Telnet.java\"\n class org.apache.commons.net.telnet.Telnet extends org.apache.commons.net.SocketClient\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n   this_class: #1                          // org/apache/commons/net/telnet/Telnet\n   super_class: #90                        // org/apache/commons/net/SocketClient\n   interfaces: 0, fields: 27, methods: 48, attributes: 1\n Constant pool:\n-    #1 = Class              #208          // org/apache/commons/net/telnet/Telnet\n-    #2 = Methodref          #90.#209      // org/apache/commons/net/SocketClient.\"<init>\":()V\n-    #3 = Class              #210          // java/lang/Object\n-    #4 = Methodref          #3.#209       // java/lang/Object.\"<init>\":()V\n-    #5 = Fieldref           #1.#211       // org/apache/commons/net/telnet/Telnet.aytMonitor:Ljava/lang/Object;\n-    #6 = Fieldref           #1.#212       // org/apache/commons/net/telnet/Telnet.aytFlag:Z\n-    #7 = Methodref          #1.#213       // org/apache/commons/net/telnet/Telnet.setDefaultPort:(I)V\n-    #8 = Class              #214          // org/apache/commons/net/telnet/TelnetOption\n-    #9 = Fieldref           #1.#215       // org/apache/commons/net/telnet/Telnet.doResponse:[I\n-   #10 = Fieldref           #1.#216       // org/apache/commons/net/telnet/Telnet.willResponse:[I\n-   #11 = Fieldref           #1.#217       // org/apache/commons/net/telnet/Telnet.options:[I\n-   #12 = Class              #218          // org/apache/commons/net/telnet/TelnetOptionHandler\n-   #13 = Fieldref           #1.#219       // org/apache/commons/net/telnet/Telnet.optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n-   #14 = Fieldref           #1.#220       // org/apache/commons/net/telnet/Telnet.terminalType:Ljava/lang/String;\n-   #15 = Methodref          #1.#221       // org/apache/commons/net/telnet/Telnet.stateIsWill:(I)Z\n-   #16 = Methodref          #1.#222       // org/apache/commons/net/telnet/Telnet.stateIsDo:(I)Z\n-   #17 = Methodref          #1.#223       // org/apache/commons/net/telnet/Telnet.requestedWill:(I)Z\n-   #18 = Methodref          #1.#224       // org/apache/commons/net/telnet/Telnet.requestedDo:(I)Z\n-   #19 = Methodref          #12.#225      // org/apache/commons/net/telnet/TelnetOptionHandler.setWill:(Z)V\n-   #20 = Methodref          #12.#226      // org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationLocal:()[I\n-   #21 = Methodref          #1.#227       // org/apache/commons/net/telnet/Telnet._sendSubnegotiation:([I)V\n-   #22 = Methodref          #12.#228      // org/apache/commons/net/telnet/TelnetOptionHandler.setDo:(Z)V\n-   #23 = Methodref          #12.#229      // org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationRemote:()[I\n-   #24 = Fieldref           #1.#230       // org/apache/commons/net/telnet/Telnet.notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;\n-   #25 = Class              #231          // org/apache/commons/net/telnet/TelnetNotificationHandler\n-   #26 = InterfaceMethodref #25.#232      // org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V\n-   #27 = Methodref          #12.#233      // org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptLocal:()Z\n-   #28 = Methodref          #234.#235     // java/lang/String.isEmpty:()Z\n-   #29 = Methodref          #1.#236       // org/apache/commons/net/telnet/Telnet.requestedWont:(I)Z\n-   #30 = Methodref          #1.#237       // org/apache/commons/net/telnet/Telnet.setWantWill:(I)V\n-   #31 = Methodref          #1.#238       // org/apache/commons/net/telnet/Telnet.sendWill:(I)V\n-   #32 = Methodref          #1.#239       // org/apache/commons/net/telnet/Telnet.sendWont:(I)V\n-   #33 = Methodref          #1.#240       // org/apache/commons/net/telnet/Telnet.setWill:(I)V\n-   #34 = Methodref          #1.#241       // org/apache/commons/net/telnet/Telnet.stateIsWont:(I)Z\n-   #35 = Methodref          #1.#242       // org/apache/commons/net/telnet/Telnet.setWantWont:(I)V\n-   #36 = Methodref          #1.#243       // org/apache/commons/net/telnet/Telnet.setWont:(I)V\n-   #37 = Methodref          #12.#244      // org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptRemote:()Z\n-   #38 = Methodref          #1.#245       // org/apache/commons/net/telnet/Telnet.requestedDont:(I)Z\n-   #39 = Methodref          #1.#246       // org/apache/commons/net/telnet/Telnet.setWantDo:(I)V\n-   #40 = Methodref          #1.#247       // org/apache/commons/net/telnet/Telnet.sendDo:(I)V\n-   #41 = Methodref          #1.#248       // org/apache/commons/net/telnet/Telnet.sendDont:(I)V\n-   #42 = Methodref          #1.#249       // org/apache/commons/net/telnet/Telnet.setDo:(I)V\n-   #43 = Methodref          #1.#250       // org/apache/commons/net/telnet/Telnet.stateIsDont:(I)Z\n-   #44 = Methodref          #1.#251       // org/apache/commons/net/telnet/Telnet.setWantDont:(I)V\n-   #45 = Methodref          #1.#252       // org/apache/commons/net/telnet/Telnet.setDont:(I)V\n-   #46 = Methodref          #12.#253      // org/apache/commons/net/telnet/TelnetOptionHandler.answerSubnegotiation:([II)[I\n-   #47 = Methodref          #1.#254       // org/apache/commons/net/telnet/Telnet.sendTerminalType:()V\n-   #48 = Fieldref           #1.#255       // org/apache/commons/net/telnet/Telnet._output_:Ljava/io/OutputStream;\n-   #49 = Fieldref           #1.#256       // org/apache/commons/net/telnet/Telnet.COMMAND_SB:[B\n-   #50 = Methodref          #257.#258     // java/io/OutputStream.write:([B)V\n-   #51 = Fieldref           #1.#259       // org/apache/commons/net/telnet/Telnet.COMMAND_IS:[B\n-   #52 = Methodref          #1.#260       // org/apache/commons/net/telnet/Telnet.getCharset:()Ljava/nio/charset/Charset;\n-   #53 = Methodref          #234.#261     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #54 = Fieldref           #1.#262       // org/apache/commons/net/telnet/Telnet.COMMAND_SE:[B\n-   #55 = Methodref          #257.#263     // java/io/OutputStream.flush:()V\n-   #56 = Class              #264          // org/apache/commons/net/telnet/TelnetCommand\n-   #57 = Methodref          #257.#265     // java/io/OutputStream.write:(I)V\n-   #58 = Methodref          #3.#266       // java/lang/Object.notifyAll:()V\n-   #59 = Methodref          #90.#267      // org/apache/commons/net/SocketClient._connectAction_:()V\n-   #60 = Class              #268          // java/io/BufferedInputStream\n-   #61 = Fieldref           #1.#269       // org/apache/commons/net/telnet/Telnet._input_:Ljava/io/InputStream;\n-   #62 = Methodref          #60.#270      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #63 = Class              #271          // java/io/BufferedOutputStream\n-   #64 = Methodref          #63.#272      // java/io/BufferedOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #65 = Methodref          #12.#273      // org/apache/commons/net/telnet/TelnetOptionHandler.getInitLocal:()Z\n-   #66 = Methodref          #12.#274      // org/apache/commons/net/telnet/TelnetOptionHandler.getOptionCode:()I\n-   #67 = Methodref          #1.#275       // org/apache/commons/net/telnet/Telnet.requestWill:(I)V\n-   #68 = Methodref          #12.#276      // org/apache/commons/net/telnet/TelnetOptionHandler.getInitRemote:()Z\n-   #69 = Methodref          #1.#277       // org/apache/commons/net/telnet/Telnet.requestDo:(I)V\n-   #70 = Fieldref           #1.#278       // org/apache/commons/net/telnet/Telnet.COMMAND_DO:[B\n-   #71 = Fieldref           #1.#279       // org/apache/commons/net/telnet/Telnet.COMMAND_DONT:[B\n-   #72 = Fieldref           #1.#280       // org/apache/commons/net/telnet/Telnet.COMMAND_WILL:[B\n-   #73 = Fieldref           #1.#281       // org/apache/commons/net/telnet/Telnet.COMMAND_WONT:[B\n-   #74 = Methodref          #1.#282       // org/apache/commons/net/telnet/Telnet.spyWrite:(I)V\n-   #75 = Fieldref           #1.#283       // org/apache/commons/net/telnet/Telnet.COMMAND_AYT:[B\n-   #76 = Methodref          #3.#284       // java/lang/Object.wait:(J)V\n-   #77 = Methodref          #8.#285       // org/apache/commons/net/telnet/TelnetOption.isValidOption:(I)Z\n-   #78 = Methodref          #1.#286       // org/apache/commons/net/telnet/Telnet.isConnected:()Z\n-   #79 = Class              #287          // org/apache/commons/net/telnet/InvalidTelnetOptionException\n-   #80 = String             #288          // Already registered option\n-   #81 = Methodref          #79.#289      // org/apache/commons/net/telnet/InvalidTelnetOptionException.\"<init>\":(Ljava/lang/String;I)V\n-   #82 = String             #290          // Invalid Option Code\n-   #83 = String             #291          // Unregistered option\n-   #84 = Methodref          #12.#292      // org/apache/commons/net/telnet/TelnetOptionHandler.getWill:()Z\n-   #85 = Methodref          #1.#293       // org/apache/commons/net/telnet/Telnet.requestWont:(I)V\n-   #86 = Methodref          #12.#294      // org/apache/commons/net/telnet/TelnetOptionHandler.getDo:()Z\n-   #87 = Methodref          #1.#295       // org/apache/commons/net/telnet/Telnet.requestDont:(I)V\n-   #88 = Fieldref           #1.#296       // org/apache/commons/net/telnet/Telnet.spyStream:Ljava/io/OutputStream;\n-   #89 = Class              #297          // java/io/IOException\n-   #90 = Class              #298          // org/apache/commons/net/SocketClient\n+    #1 = Class              #204          // org/apache/commons/net/telnet/Telnet\n+    #2 = Methodref          #90.#205      // org/apache/commons/net/SocketClient.\"<init>\":()V\n+    #3 = Class              #206          // java/lang/Object\n+    #4 = Methodref          #3.#205       // java/lang/Object.\"<init>\":()V\n+    #5 = Fieldref           #1.#207       // org/apache/commons/net/telnet/Telnet.aytMonitor:Ljava/lang/Object;\n+    #6 = Fieldref           #1.#208       // org/apache/commons/net/telnet/Telnet.aytFlag:Z\n+    #7 = Methodref          #1.#209       // org/apache/commons/net/telnet/Telnet.setDefaultPort:(I)V\n+    #8 = Class              #210          // org/apache/commons/net/telnet/TelnetOption\n+    #9 = Fieldref           #1.#211       // org/apache/commons/net/telnet/Telnet.doResponse:[I\n+   #10 = Fieldref           #1.#212       // org/apache/commons/net/telnet/Telnet.willResponse:[I\n+   #11 = Fieldref           #1.#213       // org/apache/commons/net/telnet/Telnet.options:[I\n+   #12 = Class              #214          // org/apache/commons/net/telnet/TelnetOptionHandler\n+   #13 = Fieldref           #1.#215       // org/apache/commons/net/telnet/Telnet.optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n+   #14 = Fieldref           #1.#216       // org/apache/commons/net/telnet/Telnet.terminalType:Ljava/lang/String;\n+   #15 = Methodref          #1.#217       // org/apache/commons/net/telnet/Telnet.stateIsWill:(I)Z\n+   #16 = Methodref          #1.#218       // org/apache/commons/net/telnet/Telnet.stateIsDo:(I)Z\n+   #17 = Methodref          #1.#219       // org/apache/commons/net/telnet/Telnet.requestedWill:(I)Z\n+   #18 = Methodref          #1.#220       // org/apache/commons/net/telnet/Telnet.requestedDo:(I)Z\n+   #19 = Methodref          #12.#221      // org/apache/commons/net/telnet/TelnetOptionHandler.setWill:(Z)V\n+   #20 = Methodref          #12.#222      // org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationLocal:()[I\n+   #21 = Methodref          #1.#223       // org/apache/commons/net/telnet/Telnet._sendSubnegotiation:([I)V\n+   #22 = Methodref          #12.#224      // org/apache/commons/net/telnet/TelnetOptionHandler.setDo:(Z)V\n+   #23 = Methodref          #12.#225      // org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationRemote:()[I\n+   #24 = Fieldref           #1.#226       // org/apache/commons/net/telnet/Telnet.notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;\n+   #25 = Class              #227          // org/apache/commons/net/telnet/TelnetNotificationHandler\n+   #26 = InterfaceMethodref #25.#228      // org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V\n+   #27 = Methodref          #12.#229      // org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptLocal:()Z\n+   #28 = Methodref          #230.#231     // java/lang/String.isEmpty:()Z\n+   #29 = Methodref          #1.#232       // org/apache/commons/net/telnet/Telnet.requestedWont:(I)Z\n+   #30 = Methodref          #1.#233       // org/apache/commons/net/telnet/Telnet.setWantWill:(I)V\n+   #31 = Methodref          #1.#234       // org/apache/commons/net/telnet/Telnet.sendWill:(I)V\n+   #32 = Methodref          #1.#235       // org/apache/commons/net/telnet/Telnet.sendWont:(I)V\n+   #33 = Methodref          #1.#236       // org/apache/commons/net/telnet/Telnet.setWill:(I)V\n+   #34 = Methodref          #1.#237       // org/apache/commons/net/telnet/Telnet.stateIsWont:(I)Z\n+   #35 = Methodref          #1.#238       // org/apache/commons/net/telnet/Telnet.setWantWont:(I)V\n+   #36 = Methodref          #1.#239       // org/apache/commons/net/telnet/Telnet.setWont:(I)V\n+   #37 = Methodref          #12.#240      // org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptRemote:()Z\n+   #38 = Methodref          #1.#241       // org/apache/commons/net/telnet/Telnet.requestedDont:(I)Z\n+   #39 = Methodref          #1.#242       // org/apache/commons/net/telnet/Telnet.setWantDo:(I)V\n+   #40 = Methodref          #1.#243       // org/apache/commons/net/telnet/Telnet.sendDo:(I)V\n+   #41 = Methodref          #1.#244       // org/apache/commons/net/telnet/Telnet.sendDont:(I)V\n+   #42 = Methodref          #1.#245       // org/apache/commons/net/telnet/Telnet.setDo:(I)V\n+   #43 = Methodref          #1.#246       // org/apache/commons/net/telnet/Telnet.stateIsDont:(I)Z\n+   #44 = Methodref          #1.#247       // org/apache/commons/net/telnet/Telnet.setWantDont:(I)V\n+   #45 = Methodref          #1.#248       // org/apache/commons/net/telnet/Telnet.setDont:(I)V\n+   #46 = Methodref          #12.#249      // org/apache/commons/net/telnet/TelnetOptionHandler.answerSubnegotiation:([II)[I\n+   #47 = Methodref          #1.#250       // org/apache/commons/net/telnet/Telnet.sendTerminalType:()V\n+   #48 = Fieldref           #1.#251       // org/apache/commons/net/telnet/Telnet._output_:Ljava/io/OutputStream;\n+   #49 = Fieldref           #1.#252       // org/apache/commons/net/telnet/Telnet.COMMAND_SB:[B\n+   #50 = Methodref          #196.#253     // java/io/OutputStream.write:([B)V\n+   #51 = Fieldref           #1.#254       // org/apache/commons/net/telnet/Telnet.COMMAND_IS:[B\n+   #52 = Methodref          #1.#255       // org/apache/commons/net/telnet/Telnet.getCharset:()Ljava/nio/charset/Charset;\n+   #53 = Methodref          #230.#256     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #54 = Fieldref           #1.#257       // org/apache/commons/net/telnet/Telnet.COMMAND_SE:[B\n+   #55 = Methodref          #196.#258     // java/io/OutputStream.flush:()V\n+   #56 = Class              #259          // org/apache/commons/net/telnet/TelnetCommand\n+   #57 = Methodref          #196.#260     // java/io/OutputStream.write:(I)V\n+   #58 = Methodref          #3.#261       // java/lang/Object.notifyAll:()V\n+   #59 = Methodref          #90.#262      // org/apache/commons/net/SocketClient._connectAction_:()V\n+   #60 = Class              #263          // java/io/BufferedInputStream\n+   #61 = Fieldref           #1.#264       // org/apache/commons/net/telnet/Telnet._input_:Ljava/io/InputStream;\n+   #62 = Methodref          #60.#265      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #63 = Class              #266          // java/io/BufferedOutputStream\n+   #64 = Methodref          #63.#267      // java/io/BufferedOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #65 = Methodref          #12.#268      // org/apache/commons/net/telnet/TelnetOptionHandler.getInitLocal:()Z\n+   #66 = Methodref          #12.#269      // org/apache/commons/net/telnet/TelnetOptionHandler.getOptionCode:()I\n+   #67 = Methodref          #1.#270       // org/apache/commons/net/telnet/Telnet.requestWill:(I)V\n+   #68 = Methodref          #12.#271      // org/apache/commons/net/telnet/TelnetOptionHandler.getInitRemote:()Z\n+   #69 = Methodref          #1.#272       // org/apache/commons/net/telnet/Telnet.requestDo:(I)V\n+   #70 = Fieldref           #1.#273       // org/apache/commons/net/telnet/Telnet.COMMAND_DO:[B\n+   #71 = Fieldref           #1.#274       // org/apache/commons/net/telnet/Telnet.COMMAND_DONT:[B\n+   #72 = Fieldref           #1.#275       // org/apache/commons/net/telnet/Telnet.COMMAND_WILL:[B\n+   #73 = Fieldref           #1.#276       // org/apache/commons/net/telnet/Telnet.COMMAND_WONT:[B\n+   #74 = Methodref          #1.#277       // org/apache/commons/net/telnet/Telnet.spyWrite:(I)V\n+   #75 = Fieldref           #1.#278       // org/apache/commons/net/telnet/Telnet.COMMAND_AYT:[B\n+   #76 = Methodref          #3.#279       // java/lang/Object.wait:(J)V\n+   #77 = Methodref          #8.#280       // org/apache/commons/net/telnet/TelnetOption.isValidOption:(I)Z\n+   #78 = Methodref          #1.#281       // org/apache/commons/net/telnet/Telnet.isConnected:()Z\n+   #79 = Class              #282          // org/apache/commons/net/telnet/InvalidTelnetOptionException\n+   #80 = String             #283          // Already registered option\n+   #81 = Methodref          #79.#284      // org/apache/commons/net/telnet/InvalidTelnetOptionException.\"<init>\":(Ljava/lang/String;I)V\n+   #82 = String             #285          // Invalid Option Code\n+   #83 = String             #286          // Unregistered option\n+   #84 = Methodref          #12.#287      // org/apache/commons/net/telnet/TelnetOptionHandler.getWill:()Z\n+   #85 = Methodref          #1.#288       // org/apache/commons/net/telnet/Telnet.requestWont:(I)V\n+   #86 = Methodref          #12.#289      // org/apache/commons/net/telnet/TelnetOptionHandler.getDo:()Z\n+   #87 = Methodref          #1.#290       // org/apache/commons/net/telnet/Telnet.requestDont:(I)V\n+   #88 = Fieldref           #1.#291       // org/apache/commons/net/telnet/Telnet.spyStream:Ljava/io/OutputStream;\n+   #89 = Class              #292          // java/io/IOException\n+   #90 = Class              #293          // org/apache/commons/net/SocketClient\n    #91 = Utf8               debug\n    #92 = Utf8               Z\n    #93 = Utf8               ConstantValue\n    #94 = Integer            0\n    #95 = Utf8               debugoptions\n    #96 = Utf8               COMMAND_DO\n    #97 = Utf8               [B\n@@ -174,183 +174,178 @@\n   #164 = Utf8               processWont\n   #165 = Utf8               processSuboption\n   #166 = Utf8               ([II)V\n   #167 = Utf8               sendTerminalType\n   #168 = Utf8               _sendSubnegotiation\n   #169 = Utf8               ([I)V\n   #170 = Class              #115          // \"[I\"\n-  #171 = Class              #208          // org/apache/commons/net/telnet/Telnet\n-  #172 = Utf8               _sendCommand\n-  #173 = Utf8               (B)V\n-  #174 = Utf8               processAYTResponse\n-  #175 = Class              #210          // java/lang/Object\n-  #176 = Class              #299          // java/lang/Throwable\n-  #177 = Utf8               _connectAction_\n-  #178 = Utf8               sendDo\n-  #179 = Utf8               requestDo\n-  #180 = Utf8               sendDont\n-  #181 = Utf8               requestDont\n-  #182 = Utf8               sendWill\n-  #183 = Utf8               requestWill\n-  #184 = Utf8               sendWont\n-  #185 = Utf8               requestWont\n-  #186 = Utf8               sendByte\n-  #187 = Utf8               _sendAYT\n-  #188 = Utf8               (J)Z\n-  #189 = Class              #300          // java/lang/IllegalArgumentException\n-  #190 = Class              #301          // java/lang/InterruptedException\n-  #191 = Utf8               addOptionHandler\n-  #192 = Utf8               (Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n-  #193 = Utf8               deleteOptionHandler\n-  #194 = Class              #218          // org/apache/commons/net/telnet/TelnetOptionHandler\n-  #195 = Utf8               _registerSpyStream\n-  #196 = Utf8               (Ljava/io/OutputStream;)V\n-  #197 = Utf8               _stopSpyStream\n-  #198 = Utf8               spyRead\n-  #199 = Class              #302          // java/io/OutputStream\n-  #200 = Class              #297          // java/io/IOException\n-  #201 = Utf8               spyWrite\n-  #202 = Utf8               registerNotifHandler\n-  #203 = Utf8               (Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n-  #204 = Utf8               unregisterNotifHandler\n-  #205 = Utf8               <clinit>\n-  #206 = Utf8               SourceFile\n-  #207 = Utf8               Telnet.java\n-  #208 = Utf8               org/apache/commons/net/telnet/Telnet\n-  #209 = NameAndType        #135:#136     // \"<init>\":()V\n-  #210 = Utf8               java/lang/Object\n-  #211 = NameAndType        #128:#129     // aytMonitor:Ljava/lang/Object;\n-  #212 = NameAndType        #130:#92      // aytFlag:Z\n-  #213 = NameAndType        #303:#151     // setDefaultPort:(I)V\n-  #214 = Utf8               org/apache/commons/net/telnet/TelnetOption\n-  #215 = NameAndType        #114:#115     // doResponse:[I\n-  #216 = NameAndType        #116:#115     // willResponse:[I\n-  #217 = NameAndType        #117:#115     // options:[I\n-  #218 = Utf8               org/apache/commons/net/telnet/TelnetOptionHandler\n-  #219 = NameAndType        #125:#126     // optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n-  #220 = NameAndType        #123:#124     // terminalType:Ljava/lang/String;\n-  #221 = NameAndType        #140:#141     // stateIsWill:(I)Z\n-  #222 = NameAndType        #144:#141     // stateIsDo:(I)Z\n-  #223 = NameAndType        #146:#141     // requestedWill:(I)Z\n-  #224 = NameAndType        #148:#141     // requestedDo:(I)Z\n-  #225 = NameAndType        #150:#304     // setWill:(Z)V\n-  #226 = NameAndType        #305:#306     // startSubnegotiationLocal:()[I\n-  #227 = NameAndType        #168:#169     // _sendSubnegotiation:([I)V\n-  #228 = NameAndType        #153:#304     // setDo:(Z)V\n-  #229 = NameAndType        #307:#306     // startSubnegotiationRemote:()[I\n-  #230 = NameAndType        #133:#134     // notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;\n-  #231 = Utf8               org/apache/commons/net/telnet/TelnetNotificationHandler\n-  #232 = NameAndType        #308:#309     // receivedNegotiation:(II)V\n-  #233 = NameAndType        #310:#311     // getAcceptLocal:()Z\n-  #234 = Class              #312          // java/lang/String\n-  #235 = NameAndType        #313:#311     // isEmpty:()Z\n-  #236 = NameAndType        #147:#141     // requestedWont:(I)Z\n-  #237 = NameAndType        #154:#151     // setWantWill:(I)V\n-  #238 = NameAndType        #182:#151     // sendWill:(I)V\n-  #239 = NameAndType        #184:#151     // sendWont:(I)V\n-  #240 = NameAndType        #150:#151     // setWill:(I)V\n-  #241 = NameAndType        #143:#141     // stateIsWont:(I)Z\n-  #242 = NameAndType        #158:#151     // setWantWont:(I)V\n-  #243 = NameAndType        #156:#151     // setWont:(I)V\n-  #244 = NameAndType        #314:#311     // getAcceptRemote:()Z\n-  #245 = NameAndType        #149:#141     // requestedDont:(I)Z\n-  #246 = NameAndType        #155:#151     // setWantDo:(I)V\n-  #247 = NameAndType        #178:#151     // sendDo:(I)V\n-  #248 = NameAndType        #180:#151     // sendDont:(I)V\n-  #249 = NameAndType        #153:#151     // setDo:(I)V\n-  #250 = NameAndType        #145:#141     // stateIsDont:(I)Z\n-  #251 = NameAndType        #159:#151     // setWantDont:(I)V\n-  #252 = NameAndType        #157:#151     // setDont:(I)V\n-  #253 = NameAndType        #315:#316     // answerSubnegotiation:([II)[I\n-  #254 = NameAndType        #167:#136     // sendTerminalType:()V\n-  #255 = NameAndType        #317:#132     // _output_:Ljava/io/OutputStream;\n-  #256 = NameAndType        #101:#97      // COMMAND_SB:[B\n-  #257 = Class              #302          // java/io/OutputStream\n-  #258 = NameAndType        #318:#319     // write:([B)V\n-  #259 = NameAndType        #122:#97      // COMMAND_IS:[B\n-  #260 = NameAndType        #320:#321     // getCharset:()Ljava/nio/charset/Charset;\n-  #261 = NameAndType        #322:#323     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #262 = NameAndType        #102:#97      // COMMAND_SE:[B\n-  #263 = NameAndType        #324:#136     // flush:()V\n-  #264 = Utf8               org/apache/commons/net/telnet/TelnetCommand\n-  #265 = NameAndType        #318:#151     // write:(I)V\n-  #266 = NameAndType        #325:#136     // notifyAll:()V\n-  #267 = NameAndType        #177:#136     // _connectAction_:()V\n-  #268 = Utf8               java/io/BufferedInputStream\n-  #269 = NameAndType        #326:#327     // _input_:Ljava/io/InputStream;\n-  #270 = NameAndType        #135:#328     // \"<init>\":(Ljava/io/InputStream;)V\n-  #271 = Utf8               java/io/BufferedOutputStream\n-  #272 = NameAndType        #135:#196     // \"<init>\":(Ljava/io/OutputStream;)V\n-  #273 = NameAndType        #329:#311     // getInitLocal:()Z\n-  #274 = NameAndType        #330:#331     // getOptionCode:()I\n-  #275 = NameAndType        #183:#151     // requestWill:(I)V\n-  #276 = NameAndType        #332:#311     // getInitRemote:()Z\n-  #277 = NameAndType        #179:#151     // requestDo:(I)V\n-  #278 = NameAndType        #96:#97       // COMMAND_DO:[B\n-  #279 = NameAndType        #98:#97       // COMMAND_DONT:[B\n-  #280 = NameAndType        #99:#97       // COMMAND_WILL:[B\n-  #281 = NameAndType        #100:#97      // COMMAND_WONT:[B\n-  #282 = NameAndType        #201:#151     // spyWrite:(I)V\n-  #283 = NameAndType        #127:#97      // COMMAND_AYT:[B\n-  #284 = NameAndType        #333:#334     // wait:(J)V\n-  #285 = NameAndType        #335:#141     // isValidOption:(I)Z\n-  #286 = NameAndType        #336:#311     // isConnected:()Z\n-  #287 = Utf8               org/apache/commons/net/telnet/InvalidTelnetOptionException\n-  #288 = Utf8               Already registered option\n-  #289 = NameAndType        #135:#337     // \"<init>\":(Ljava/lang/String;I)V\n-  #290 = Utf8               Invalid Option Code\n-  #291 = Utf8               Unregistered option\n-  #292 = NameAndType        #338:#311     // getWill:()Z\n-  #293 = NameAndType        #185:#151     // requestWont:(I)V\n-  #294 = NameAndType        #339:#311     // getDo:()Z\n-  #295 = NameAndType        #181:#151     // requestDont:(I)V\n-  #296 = NameAndType        #131:#132     // spyStream:Ljava/io/OutputStream;\n-  #297 = Utf8               java/io/IOException\n-  #298 = Utf8               org/apache/commons/net/SocketClient\n-  #299 = Utf8               java/lang/Throwable\n-  #300 = Utf8               java/lang/IllegalArgumentException\n-  #301 = Utf8               java/lang/InterruptedException\n-  #302 = Utf8               java/io/OutputStream\n-  #303 = Utf8               setDefaultPort\n-  #304 = Utf8               (Z)V\n-  #305 = Utf8               startSubnegotiationLocal\n-  #306 = Utf8               ()[I\n-  #307 = Utf8               startSubnegotiationRemote\n-  #308 = Utf8               receivedNegotiation\n-  #309 = Utf8               (II)V\n-  #310 = Utf8               getAcceptLocal\n-  #311 = Utf8               ()Z\n-  #312 = Utf8               java/lang/String\n-  #313 = Utf8               isEmpty\n-  #314 = Utf8               getAcceptRemote\n-  #315 = Utf8               answerSubnegotiation\n-  #316 = Utf8               ([II)[I\n-  #317 = Utf8               _output_\n-  #318 = Utf8               write\n-  #319 = Utf8               ([B)V\n-  #320 = Utf8               getCharset\n-  #321 = Utf8               ()Ljava/nio/charset/Charset;\n-  #322 = Utf8               getBytes\n-  #323 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #324 = Utf8               flush\n-  #325 = Utf8               notifyAll\n-  #326 = Utf8               _input_\n-  #327 = Utf8               Ljava/io/InputStream;\n-  #328 = Utf8               (Ljava/io/InputStream;)V\n-  #329 = Utf8               getInitLocal\n-  #330 = Utf8               getOptionCode\n-  #331 = Utf8               ()I\n-  #332 = Utf8               getInitRemote\n-  #333 = Utf8               wait\n-  #334 = Utf8               (J)V\n-  #335 = Utf8               isValidOption\n-  #336 = Utf8               isConnected\n-  #337 = Utf8               (Ljava/lang/String;I)V\n-  #338 = Utf8               getWill\n-  #339 = Utf8               getDo\n+  #171 = Utf8               _sendCommand\n+  #172 = Utf8               (B)V\n+  #173 = Utf8               processAYTResponse\n+  #174 = Class              #294          // java/lang/Throwable\n+  #175 = Utf8               _connectAction_\n+  #176 = Utf8               sendDo\n+  #177 = Utf8               requestDo\n+  #178 = Utf8               sendDont\n+  #179 = Utf8               requestDont\n+  #180 = Utf8               sendWill\n+  #181 = Utf8               requestWill\n+  #182 = Utf8               sendWont\n+  #183 = Utf8               requestWont\n+  #184 = Utf8               sendByte\n+  #185 = Utf8               _sendAYT\n+  #186 = Utf8               (J)Z\n+  #187 = Class              #295          // java/lang/IllegalArgumentException\n+  #188 = Class              #296          // java/lang/InterruptedException\n+  #189 = Utf8               addOptionHandler\n+  #190 = Utf8               (Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n+  #191 = Utf8               deleteOptionHandler\n+  #192 = Utf8               _registerSpyStream\n+  #193 = Utf8               (Ljava/io/OutputStream;)V\n+  #194 = Utf8               _stopSpyStream\n+  #195 = Utf8               spyRead\n+  #196 = Class              #297          // java/io/OutputStream\n+  #197 = Utf8               spyWrite\n+  #198 = Utf8               registerNotifHandler\n+  #199 = Utf8               (Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n+  #200 = Utf8               unregisterNotifHandler\n+  #201 = Utf8               <clinit>\n+  #202 = Utf8               SourceFile\n+  #203 = Utf8               Telnet.java\n+  #204 = Utf8               org/apache/commons/net/telnet/Telnet\n+  #205 = NameAndType        #135:#136     // \"<init>\":()V\n+  #206 = Utf8               java/lang/Object\n+  #207 = NameAndType        #128:#129     // aytMonitor:Ljava/lang/Object;\n+  #208 = NameAndType        #130:#92      // aytFlag:Z\n+  #209 = NameAndType        #298:#151     // setDefaultPort:(I)V\n+  #210 = Utf8               org/apache/commons/net/telnet/TelnetOption\n+  #211 = NameAndType        #114:#115     // doResponse:[I\n+  #212 = NameAndType        #116:#115     // willResponse:[I\n+  #213 = NameAndType        #117:#115     // options:[I\n+  #214 = Utf8               org/apache/commons/net/telnet/TelnetOptionHandler\n+  #215 = NameAndType        #125:#126     // optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n+  #216 = NameAndType        #123:#124     // terminalType:Ljava/lang/String;\n+  #217 = NameAndType        #140:#141     // stateIsWill:(I)Z\n+  #218 = NameAndType        #144:#141     // stateIsDo:(I)Z\n+  #219 = NameAndType        #146:#141     // requestedWill:(I)Z\n+  #220 = NameAndType        #148:#141     // requestedDo:(I)Z\n+  #221 = NameAndType        #150:#299     // setWill:(Z)V\n+  #222 = NameAndType        #300:#301     // startSubnegotiationLocal:()[I\n+  #223 = NameAndType        #168:#169     // _sendSubnegotiation:([I)V\n+  #224 = NameAndType        #153:#299     // setDo:(Z)V\n+  #225 = NameAndType        #302:#301     // startSubnegotiationRemote:()[I\n+  #226 = NameAndType        #133:#134     // notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;\n+  #227 = Utf8               org/apache/commons/net/telnet/TelnetNotificationHandler\n+  #228 = NameAndType        #303:#304     // receivedNegotiation:(II)V\n+  #229 = NameAndType        #305:#306     // getAcceptLocal:()Z\n+  #230 = Class              #307          // java/lang/String\n+  #231 = NameAndType        #308:#306     // isEmpty:()Z\n+  #232 = NameAndType        #147:#141     // requestedWont:(I)Z\n+  #233 = NameAndType        #154:#151     // setWantWill:(I)V\n+  #234 = NameAndType        #180:#151     // sendWill:(I)V\n+  #235 = NameAndType        #182:#151     // sendWont:(I)V\n+  #236 = NameAndType        #150:#151     // setWill:(I)V\n+  #237 = NameAndType        #143:#141     // stateIsWont:(I)Z\n+  #238 = NameAndType        #158:#151     // setWantWont:(I)V\n+  #239 = NameAndType        #156:#151     // setWont:(I)V\n+  #240 = NameAndType        #309:#306     // getAcceptRemote:()Z\n+  #241 = NameAndType        #149:#141     // requestedDont:(I)Z\n+  #242 = NameAndType        #155:#151     // setWantDo:(I)V\n+  #243 = NameAndType        #176:#151     // sendDo:(I)V\n+  #244 = NameAndType        #178:#151     // sendDont:(I)V\n+  #245 = NameAndType        #153:#151     // setDo:(I)V\n+  #246 = NameAndType        #145:#141     // stateIsDont:(I)Z\n+  #247 = NameAndType        #159:#151     // setWantDont:(I)V\n+  #248 = NameAndType        #157:#151     // setDont:(I)V\n+  #249 = NameAndType        #310:#311     // answerSubnegotiation:([II)[I\n+  #250 = NameAndType        #167:#136     // sendTerminalType:()V\n+  #251 = NameAndType        #312:#132     // _output_:Ljava/io/OutputStream;\n+  #252 = NameAndType        #101:#97      // COMMAND_SB:[B\n+  #253 = NameAndType        #313:#314     // write:([B)V\n+  #254 = NameAndType        #122:#97      // COMMAND_IS:[B\n+  #255 = NameAndType        #315:#316     // getCharset:()Ljava/nio/charset/Charset;\n+  #256 = NameAndType        #317:#318     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #257 = NameAndType        #102:#97      // COMMAND_SE:[B\n+  #258 = NameAndType        #319:#136     // flush:()V\n+  #259 = Utf8               org/apache/commons/net/telnet/TelnetCommand\n+  #260 = NameAndType        #313:#151     // write:(I)V\n+  #261 = NameAndType        #320:#136     // notifyAll:()V\n+  #262 = NameAndType        #175:#136     // _connectAction_:()V\n+  #263 = Utf8               java/io/BufferedInputStream\n+  #264 = NameAndType        #321:#322     // _input_:Ljava/io/InputStream;\n+  #265 = NameAndType        #135:#323     // \"<init>\":(Ljava/io/InputStream;)V\n+  #266 = Utf8               java/io/BufferedOutputStream\n+  #267 = NameAndType        #135:#193     // \"<init>\":(Ljava/io/OutputStream;)V\n+  #268 = NameAndType        #324:#306     // getInitLocal:()Z\n+  #269 = NameAndType        #325:#326     // getOptionCode:()I\n+  #270 = NameAndType        #181:#151     // requestWill:(I)V\n+  #271 = NameAndType        #327:#306     // getInitRemote:()Z\n+  #272 = NameAndType        #177:#151     // requestDo:(I)V\n+  #273 = NameAndType        #96:#97       // COMMAND_DO:[B\n+  #274 = NameAndType        #98:#97       // COMMAND_DONT:[B\n+  #275 = NameAndType        #99:#97       // COMMAND_WILL:[B\n+  #276 = NameAndType        #100:#97      // COMMAND_WONT:[B\n+  #277 = NameAndType        #197:#151     // spyWrite:(I)V\n+  #278 = NameAndType        #127:#97      // COMMAND_AYT:[B\n+  #279 = NameAndType        #328:#329     // wait:(J)V\n+  #280 = NameAndType        #330:#141     // isValidOption:(I)Z\n+  #281 = NameAndType        #331:#306     // isConnected:()Z\n+  #282 = Utf8               org/apache/commons/net/telnet/InvalidTelnetOptionException\n+  #283 = Utf8               Already registered option\n+  #284 = NameAndType        #135:#332     // \"<init>\":(Ljava/lang/String;I)V\n+  #285 = Utf8               Invalid Option Code\n+  #286 = Utf8               Unregistered option\n+  #287 = NameAndType        #333:#306     // getWill:()Z\n+  #288 = NameAndType        #183:#151     // requestWont:(I)V\n+  #289 = NameAndType        #334:#306     // getDo:()Z\n+  #290 = NameAndType        #179:#151     // requestDont:(I)V\n+  #291 = NameAndType        #131:#132     // spyStream:Ljava/io/OutputStream;\n+  #292 = Utf8               java/io/IOException\n+  #293 = Utf8               org/apache/commons/net/SocketClient\n+  #294 = Utf8               java/lang/Throwable\n+  #295 = Utf8               java/lang/IllegalArgumentException\n+  #296 = Utf8               java/lang/InterruptedException\n+  #297 = Utf8               java/io/OutputStream\n+  #298 = Utf8               setDefaultPort\n+  #299 = Utf8               (Z)V\n+  #300 = Utf8               startSubnegotiationLocal\n+  #301 = Utf8               ()[I\n+  #302 = Utf8               startSubnegotiationRemote\n+  #303 = Utf8               receivedNegotiation\n+  #304 = Utf8               (II)V\n+  #305 = Utf8               getAcceptLocal\n+  #306 = Utf8               ()Z\n+  #307 = Utf8               java/lang/String\n+  #308 = Utf8               isEmpty\n+  #309 = Utf8               getAcceptRemote\n+  #310 = Utf8               answerSubnegotiation\n+  #311 = Utf8               ([II)[I\n+  #312 = Utf8               _output_\n+  #313 = Utf8               write\n+  #314 = Utf8               ([B)V\n+  #315 = Utf8               getCharset\n+  #316 = Utf8               ()Ljava/nio/charset/Charset;\n+  #317 = Utf8               getBytes\n+  #318 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #319 = Utf8               flush\n+  #320 = Utf8               notifyAll\n+  #321 = Utf8               _input_\n+  #322 = Utf8               Ljava/io/InputStream;\n+  #323 = Utf8               (Ljava/io/InputStream;)V\n+  #324 = Utf8               getInitLocal\n+  #325 = Utf8               getOptionCode\n+  #326 = Utf8               ()I\n+  #327 = Utf8               getInitRemote\n+  #328 = Utf8               wait\n+  #329 = Utf8               (J)V\n+  #330 = Utf8               isValidOption\n+  #331 = Utf8               isConnected\n+  #332 = Utf8               (Ljava/lang/String;I)V\n+  #333 = Utf8               getWill\n+  #334 = Utf8               getDo\n {\n   static final boolean debug = false;\n     descriptor: Z\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n     ConstantValue: int 0\n \n   static final boolean debugoptions = false;\n"}]}
