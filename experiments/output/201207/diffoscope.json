{"diffoscope-json-version": 1, "source1": "first/Sha2Crypt.class", "source2": "second/Sha2Crypt.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,186 +16,186 @@\n     private static final String ROUNDS_PREFIX = \"rounds=\";\n     private static final int SHA256_BLOCKSIZE = 32;\n     static final String SHA256_PREFIX = \"$5$\";\n     private static final int SHA512_BLOCKSIZE = 64;\n     static final String SHA512_PREFIX = \"$6$\";\n     private static final Pattern SALT_PATTERN;\n     \n-    public static String sha256Crypt(final byte[] keyBytes) {\n-        return sha256Crypt(keyBytes, null);\n+    public static String sha256Crypt(final byte[] array) {\n+        return sha256Crypt(array, null);\n     }\n     \n-    public static String sha256Crypt(final byte[] keyBytes, String salt) {\n-        if (salt == null) {\n-            salt = \"$5$\" + B64.getRandomSalt(8);\n+    public static String sha256Crypt(final byte[] array, String string) {\n+        if (string == null) {\n+            string = \"$5$\" + B64.getRandomSalt(8);\n         }\n-        return sha2Crypt(keyBytes, salt, \"$5$\", 32, \"SHA-256\");\n+        return sha2Crypt(array, string, \"$5$\", 32, \"SHA-256\");\n     }\n     \n-    public static String sha256Crypt(final byte[] keyBytes, String salt, final Random random) {\n-        if (salt == null) {\n-            salt = \"$5$\" + B64.getRandomSalt(8, random);\n+    public static String sha256Crypt(final byte[] array, String string, final Random random) {\n+        if (string == null) {\n+            string = \"$5$\" + B64.getRandomSalt(8, random);\n         }\n-        return sha2Crypt(keyBytes, salt, \"$5$\", 32, \"SHA-256\");\n+        return sha2Crypt(array, string, \"$5$\", 32, \"SHA-256\");\n     }\n     \n-    private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {\n-        final int keyLen = keyBytes.length;\n-        int rounds = 5000;\n-        boolean roundsCustom = false;\n-        if (salt == null) {\n+    private static String sha2Crypt(final byte[] array, final String s, final String str, final int n, final String s2) {\n+        final int length = array.length;\n+        int max = 5000;\n+        boolean b = false;\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Salt must not be null\");\n         }\n-        final Matcher m = Sha2Crypt.SALT_PATTERN.matcher(salt);\n-        if (!m.find()) {\n-            throw new IllegalArgumentException(\"Invalid salt value: \" + salt);\n-        }\n-        if (m.group(3) != null) {\n-            rounds = Integer.parseInt(m.group(3));\n-            rounds = Math.max(1000, Math.min(999999999, rounds));\n-            roundsCustom = true;\n-        }\n-        final String saltString = m.group(4);\n-        final byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);\n-        final int saltLen = saltBytes.length;\n-        MessageDigest ctx = DigestUtils.getDigest(algorithm);\n-        ctx.update(keyBytes);\n-        ctx.update(saltBytes);\n-        MessageDigest altCtx = DigestUtils.getDigest(algorithm);\n-        altCtx.update(keyBytes);\n-        altCtx.update(saltBytes);\n-        altCtx.update(keyBytes);\n-        byte[] altResult = altCtx.digest();\n-        int cnt;\n-        for (cnt = keyBytes.length; cnt > blocksize; cnt -= blocksize) {\n-            ctx.update(altResult, 0, blocksize);\n-        }\n-        ctx.update(altResult, 0, cnt);\n-        for (cnt = keyBytes.length; cnt > 0; cnt >>= 1) {\n-            if ((cnt & 0x1) != 0x0) {\n-                ctx.update(altResult, 0, blocksize);\n+        final Matcher matcher = Sha2Crypt.SALT_PATTERN.matcher(s);\n+        if (!matcher.find()) {\n+            throw new IllegalArgumentException(\"Invalid salt value: \" + s);\n+        }\n+        if (matcher.group(3) != null) {\n+            max = Math.max(1000, Math.min(999999999, Integer.parseInt(matcher.group(3))));\n+            b = true;\n+        }\n+        final String group = matcher.group(4);\n+        final byte[] bytes = group.getBytes(Charsets.UTF_8);\n+        final int length2 = bytes.length;\n+        MessageDigest messageDigest = DigestUtils.getDigest(s2);\n+        messageDigest.update(array);\n+        messageDigest.update(bytes);\n+        final MessageDigest digest = DigestUtils.getDigest(s2);\n+        digest.update(array);\n+        digest.update(bytes);\n+        digest.update(array);\n+        final byte[] digest2 = digest.digest();\n+        int i;\n+        for (i = array.length; i > n; i -= n) {\n+            messageDigest.update(digest2, 0, n);\n+        }\n+        messageDigest.update(digest2, 0, i);\n+        for (int j = array.length; j > 0; j >>= 1) {\n+            if ((j & 0x1) != 0x0) {\n+                messageDigest.update(digest2, 0, n);\n             }\n             else {\n-                ctx.update(keyBytes);\n+                messageDigest.update(array);\n             }\n         }\n-        altResult = ctx.digest();\n-        altCtx = DigestUtils.getDigest(algorithm);\n-        for (int i = 1; i <= keyLen; ++i) {\n-            altCtx.update(keyBytes);\n-        }\n-        byte[] tempResult = altCtx.digest();\n-        final byte[] pBytes = new byte[keyLen];\n-        int cp;\n-        for (cp = 0; cp < keyLen - blocksize; cp += blocksize) {\n-            System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n-        }\n-        System.arraycopy(tempResult, 0, pBytes, cp, keyLen - cp);\n-        altCtx = DigestUtils.getDigest(algorithm);\n-        for (int j = 1; j <= 16 + (altResult[0] & 0xFF); ++j) {\n-            altCtx.update(saltBytes);\n-        }\n-        tempResult = altCtx.digest();\n-        final byte[] sBytes = new byte[saltLen];\n-        for (cp = 0; cp < saltLen - blocksize; cp += blocksize) {\n-            System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n-        }\n-        System.arraycopy(tempResult, 0, sBytes, cp, saltLen - cp);\n-        for (int k = 0; k <= rounds - 1; ++k) {\n-            ctx = DigestUtils.getDigest(algorithm);\n-            if ((k & 0x1) != 0x0) {\n-                ctx.update(pBytes, 0, keyLen);\n+        byte[] array2 = messageDigest.digest();\n+        final MessageDigest digest3 = DigestUtils.getDigest(s2);\n+        for (int k = 1; k <= length; ++k) {\n+            digest3.update(array);\n+        }\n+        final byte[] digest4 = digest3.digest();\n+        final byte[] array3 = new byte[length];\n+        int l;\n+        for (l = 0; l < length - n; l += n) {\n+            System.arraycopy(digest4, 0, array3, l, n);\n+        }\n+        System.arraycopy(digest4, 0, array3, l, length - l);\n+        final MessageDigest digest5 = DigestUtils.getDigest(s2);\n+        for (int n2 = 1; n2 <= 16 + (array2[0] & 0xFF); ++n2) {\n+            digest5.update(bytes);\n+        }\n+        final byte[] digest6 = digest5.digest();\n+        final byte[] array4 = new byte[length2];\n+        int n3;\n+        for (n3 = 0; n3 < length2 - n; n3 += n) {\n+            System.arraycopy(digest6, 0, array4, n3, n);\n+        }\n+        System.arraycopy(digest6, 0, array4, n3, length2 - n3);\n+        for (int n4 = 0; n4 <= max - 1; ++n4) {\n+            messageDigest = DigestUtils.getDigest(s2);\n+            if ((n4 & 0x1) != 0x0) {\n+                messageDigest.update(array3, 0, length);\n             }\n             else {\n-                ctx.update(altResult, 0, blocksize);\n+                messageDigest.update(array2, 0, n);\n             }\n-            if (k % 3 != 0) {\n-                ctx.update(sBytes, 0, saltLen);\n+            if (n4 % 3 != 0) {\n+                messageDigest.update(array4, 0, length2);\n             }\n-            if (k % 7 != 0) {\n-                ctx.update(pBytes, 0, keyLen);\n+            if (n4 % 7 != 0) {\n+                messageDigest.update(array3, 0, length);\n             }\n-            if ((k & 0x1) != 0x0) {\n-                ctx.update(altResult, 0, blocksize);\n+            if ((n4 & 0x1) != 0x0) {\n+                messageDigest.update(array2, 0, n);\n             }\n             else {\n-                ctx.update(pBytes, 0, keyLen);\n+                messageDigest.update(array3, 0, length);\n             }\n-            altResult = ctx.digest();\n+            array2 = messageDigest.digest();\n         }\n-        final StringBuilder buffer = new StringBuilder(saltPrefix);\n-        if (roundsCustom) {\n-            buffer.append(\"rounds=\");\n-            buffer.append(rounds);\n-            buffer.append(\"$\");\n-        }\n-        buffer.append(saltString);\n-        buffer.append(\"$\");\n-        if (blocksize == 32) {\n-            B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);\n-            B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);\n-            B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);\n-            B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);\n-            B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);\n-            B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);\n-            B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);\n-            B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);\n-            B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);\n-            B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);\n-            B64.b64from24bit((byte)0, altResult[31], altResult[30], 3, buffer);\n+        final StringBuilder sb = new StringBuilder(str);\n+        if (b) {\n+            sb.append(\"rounds=\");\n+            sb.append(max);\n+            sb.append(\"$\");\n+        }\n+        sb.append(group);\n+        sb.append(\"$\");\n+        if (n == 32) {\n+            B64.b64from24bit(array2[0], array2[10], array2[20], 4, sb);\n+            B64.b64from24bit(array2[21], array2[1], array2[11], 4, sb);\n+            B64.b64from24bit(array2[12], array2[22], array2[2], 4, sb);\n+            B64.b64from24bit(array2[3], array2[13], array2[23], 4, sb);\n+            B64.b64from24bit(array2[24], array2[4], array2[14], 4, sb);\n+            B64.b64from24bit(array2[15], array2[25], array2[5], 4, sb);\n+            B64.b64from24bit(array2[6], array2[16], array2[26], 4, sb);\n+            B64.b64from24bit(array2[27], array2[7], array2[17], 4, sb);\n+            B64.b64from24bit(array2[18], array2[28], array2[8], 4, sb);\n+            B64.b64from24bit(array2[9], array2[19], array2[29], 4, sb);\n+            B64.b64from24bit((byte)0, array2[31], array2[30], 3, sb);\n         }\n         else {\n-            B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);\n-            B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);\n-            B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);\n-            B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);\n-            B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);\n-            B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);\n-            B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);\n-            B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);\n-            B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);\n-            B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);\n-            B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);\n-            B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);\n-            B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);\n-            B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);\n-            B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);\n-            B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);\n-            B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);\n-            B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);\n-            B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);\n-            B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);\n-            B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);\n-            B64.b64from24bit((byte)0, (byte)0, altResult[63], 2, buffer);\n-        }\n-        Arrays.fill(tempResult, (byte)0);\n-        Arrays.fill(pBytes, (byte)0);\n-        Arrays.fill(sBytes, (byte)0);\n-        ctx.reset();\n-        altCtx.reset();\n-        Arrays.fill(keyBytes, (byte)0);\n-        Arrays.fill(saltBytes, (byte)0);\n-        return buffer.toString();\n-    }\n-    \n-    public static String sha512Crypt(final byte[] keyBytes) {\n-        return sha512Crypt(keyBytes, null);\n-    }\n-    \n-    public static String sha512Crypt(final byte[] keyBytes, String salt) {\n-        if (salt == null) {\n-            salt = \"$6$\" + B64.getRandomSalt(8);\n-        }\n-        return sha2Crypt(keyBytes, salt, \"$6$\", 64, \"SHA-512\");\n-    }\n-    \n-    public static String sha512Crypt(final byte[] keyBytes, String salt, final Random random) {\n-        if (salt == null) {\n-            salt = \"$6$\" + B64.getRandomSalt(8, random);\n+            B64.b64from24bit(array2[0], array2[21], array2[42], 4, sb);\n+            B64.b64from24bit(array2[22], array2[43], array2[1], 4, sb);\n+            B64.b64from24bit(array2[44], array2[2], array2[23], 4, sb);\n+            B64.b64from24bit(array2[3], array2[24], array2[45], 4, sb);\n+            B64.b64from24bit(array2[25], array2[46], array2[4], 4, sb);\n+            B64.b64from24bit(array2[47], array2[5], array2[26], 4, sb);\n+            B64.b64from24bit(array2[6], array2[27], array2[48], 4, sb);\n+            B64.b64from24bit(array2[28], array2[49], array2[7], 4, sb);\n+            B64.b64from24bit(array2[50], array2[8], array2[29], 4, sb);\n+            B64.b64from24bit(array2[9], array2[30], array2[51], 4, sb);\n+            B64.b64from24bit(array2[31], array2[52], array2[10], 4, sb);\n+            B64.b64from24bit(array2[53], array2[11], array2[32], 4, sb);\n+            B64.b64from24bit(array2[12], array2[33], array2[54], 4, sb);\n+            B64.b64from24bit(array2[34], array2[55], array2[13], 4, sb);\n+            B64.b64from24bit(array2[56], array2[14], array2[35], 4, sb);\n+            B64.b64from24bit(array2[15], array2[36], array2[57], 4, sb);\n+            B64.b64from24bit(array2[37], array2[58], array2[16], 4, sb);\n+            B64.b64from24bit(array2[59], array2[17], array2[38], 4, sb);\n+            B64.b64from24bit(array2[18], array2[39], array2[60], 4, sb);\n+            B64.b64from24bit(array2[40], array2[61], array2[19], 4, sb);\n+            B64.b64from24bit(array2[62], array2[20], array2[41], 4, sb);\n+            B64.b64from24bit((byte)0, (byte)0, array2[63], 2, sb);\n+        }\n+        Arrays.fill(digest6, (byte)0);\n+        Arrays.fill(array3, (byte)0);\n+        Arrays.fill(array4, (byte)0);\n+        messageDigest.reset();\n+        digest5.reset();\n+        Arrays.fill(array, (byte)0);\n+        Arrays.fill(bytes, (byte)0);\n+        return sb.toString();\n+    }\n+    \n+    public static String sha512Crypt(final byte[] array) {\n+        return sha512Crypt(array, null);\n+    }\n+    \n+    public static String sha512Crypt(final byte[] array, String string) {\n+        if (string == null) {\n+            string = \"$6$\" + B64.getRandomSalt(8);\n+        }\n+        return sha2Crypt(array, string, \"$6$\", 64, \"SHA-512\");\n+    }\n+    \n+    public static String sha512Crypt(final byte[] array, String string, final Random random) {\n+        if (string == null) {\n+            string = \"$6$\" + B64.getRandomSalt(8, random);\n         }\n-        return sha2Crypt(keyBytes, salt, \"$6$\", 64, \"SHA-512\");\n+        return sha2Crypt(array, string, \"$6$\", 64, \"SHA-512\");\n     }\n     \n     static {\n         SALT_PATTERN = Pattern.compile(\"^\\\\$([56])\\\\$(rounds=(\\\\d+)\\\\$)?([\\\\.\\\\/a-zA-Z0-9]{1,16}).*\");\n     }\n }\n"}]}
