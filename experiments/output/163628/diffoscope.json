{"diffoscope-json-version": 1, "source1": "first/ZipEightByteInteger.class", "source2": "second/ZipEightByteInteger.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,51 +1,51 @@\n-  SHA-256 checksum 69c77b13f8187e8143e83a4af74f122b391e540819b72d30edad8831eeb2a97f\n+  SHA-256 checksum 5e4df0654af37cb9acd6c4395970f7c507ece6bf75153b3731a510ebde69dd9f\n   Compiled from \"ZipEightByteInteger.java\"\n public final class org.apache.commons.compress.archivers.zip.ZipEightByteInteger implements java.io.Serializable\n   minor version: 0\n   major version: 51\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #12                         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n   super_class: #41                        // java/lang/Object\n   interfaces: 1, fields: 26, methods: 17, attributes: 1\n Constant pool:\n     #1 = Class              #136          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #137.#138     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-    #3 = Methodref          #12.#139      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(Ljava/math/BigInteger;)V\n-    #4 = Methodref          #41.#140      // java/lang/Object.\"<init>\":()V\n-    #5 = Fieldref           #12.#141      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.value:Ljava/math/BigInteger;\n-    #6 = Methodref          #12.#142      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-    #7 = Methodref          #12.#143      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([BI)Ljava/math/BigInteger;\n-    #8 = Methodref          #12.#144      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(Ljava/math/BigInteger;)[B\n-    #9 = Methodref          #137.#145     // java/math/BigInteger.longValue:()J\n+    #2 = Methodref          #121.#137     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+    #3 = Methodref          #12.#138      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(Ljava/math/BigInteger;)V\n+    #4 = Methodref          #41.#139      // java/lang/Object.\"<init>\":()V\n+    #5 = Fieldref           #12.#140      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.value:Ljava/math/BigInteger;\n+    #6 = Methodref          #12.#141      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+    #7 = Methodref          #12.#142      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([BI)Ljava/math/BigInteger;\n+    #8 = Methodref          #12.#143      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(Ljava/math/BigInteger;)[B\n+    #9 = Methodref          #121.#144     // java/math/BigInteger.longValue:()J\n    #10 = Long               255l\n-   #12 = Class              #146          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #12 = Class              #145          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n    #13 = Long               65280l\n    #15 = Long               16711680l\n    #17 = Long               4278190080l\n    #19 = Long               1095216660480l\n    #21 = Long               280375465082880l\n    #23 = Long               71776119061217280l\n    #25 = Long               9151314442816847872l\n-   #27 = Methodref          #137.#147     // java/math/BigInteger.testBit:(I)Z\n-   #28 = Methodref          #137.#148     // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n-   #29 = Methodref          #12.#149      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n-   #30 = Methodref          #12.#150      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:()Ljava/math/BigInteger;\n-   #31 = Methodref          #137.#151     // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n-   #32 = Methodref          #137.#152     // java/math/BigInteger.hashCode:()I\n-   #33 = Class              #153          // java/lang/StringBuilder\n-   #34 = Methodref          #33.#140      // java/lang/StringBuilder.\"<init>\":()V\n-   #35 = String             #154          // ZipEightByteInteger value:\n-   #36 = Methodref          #33.#155      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #33.#156      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #38 = Methodref          #33.#157      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #39 = Methodref          #12.#158      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-   #40 = Fieldref           #12.#159      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #41 = Class              #160          // java/lang/Object\n-   #42 = Class              #161          // java/io/Serializable\n+   #27 = Methodref          #121.#146     // java/math/BigInteger.testBit:(I)Z\n+   #28 = Methodref          #121.#147     // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n+   #29 = Methodref          #12.#148      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n+   #30 = Methodref          #12.#149      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:()Ljava/math/BigInteger;\n+   #31 = Methodref          #121.#150     // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+   #32 = Methodref          #121.#151     // java/math/BigInteger.hashCode:()I\n+   #33 = Class              #152          // java/lang/StringBuilder\n+   #34 = Methodref          #33.#139      // java/lang/StringBuilder.\"<init>\":()V\n+   #35 = String             #153          // ZipEightByteInteger value:\n+   #36 = Methodref          #33.#154      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #37 = Methodref          #33.#155      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #38 = Methodref          #33.#156      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #39 = Methodref          #12.#157      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+   #40 = Fieldref           #12.#158      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #41 = Class              #159          // java/lang/Object\n+   #42 = Class              #160          // java/io/Serializable\n    #43 = Utf8               serialVersionUID\n    #44 = Utf8               J\n    #45 = Utf8               ConstantValue\n    #46 = Long               1l\n    #48 = Utf8               BYTE_1\n    #49 = Utf8               I\n    #50 = Integer            1\n@@ -115,15 +115,15 @@\n   #114 = Utf8               (Ljava/math/BigInteger;)[B\n   #115 = Utf8               result\n   #116 = Utf8               val\n   #117 = Utf8               StackMapTable\n   #118 = Class              #104          // \"[B\"\n   #119 = Utf8               ([BI)J\n   #120 = Utf8               ([BI)Ljava/math/BigInteger;\n-  #121 = Class              #162          // java/math/BigInteger\n+  #121 = Class              #161          // java/math/BigInteger\n   #122 = Utf8               ([B)J\n   #123 = Utf8               ([B)Ljava/math/BigInteger;\n   #124 = Utf8               equals\n   #125 = Utf8               (Ljava/lang/Object;)Z\n   #126 = Utf8               o\n   #127 = Utf8               Ljava/lang/Object;\n   #128 = Utf8               hashCode\n@@ -131,50 +131,49 @@\n   #130 = Utf8               toString\n   #131 = Utf8               ()Ljava/lang/String;\n   #132 = Utf8               <clinit>\n   #133 = Utf8               ()V\n   #134 = Utf8               SourceFile\n   #135 = Utf8               ZipEightByteInteger.java\n   #136 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #137 = Class              #162          // java/math/BigInteger\n-  #138 = NameAndType        #163:#164     // valueOf:(J)Ljava/math/BigInteger;\n-  #139 = NameAndType        #95:#101      // \"<init>\":(Ljava/math/BigInteger;)V\n-  #140 = NameAndType        #95:#133      // \"<init>\":()V\n-  #141 = NameAndType        #91:#92       // value:Ljava/math/BigInteger;\n-  #142 = NameAndType        #95:#105      // \"<init>\":([BI)V\n-  #143 = NameAndType        #111:#120     // getValue:([BI)Ljava/math/BigInteger;\n-  #144 = NameAndType        #107:#114     // getBytes:(Ljava/math/BigInteger;)[B\n-  #145 = NameAndType        #165:#110     // longValue:()J\n-  #146 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #147 = NameAndType        #166:#167     // testBit:(I)Z\n-  #148 = NameAndType        #168:#169     // setBit:(I)Ljava/math/BigInteger;\n-  #149 = NameAndType        #109:#119     // getLongValue:([BI)J\n-  #150 = NameAndType        #111:#112     // getValue:()Ljava/math/BigInteger;\n-  #151 = NameAndType        #124:#125     // equals:(Ljava/lang/Object;)Z\n-  #152 = NameAndType        #128:#129     // hashCode:()I\n-  #153 = Utf8               java/lang/StringBuilder\n-  #154 = Utf8               ZipEightByteInteger value:\n-  #155 = NameAndType        #170:#171     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #156 = NameAndType        #170:#172     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #157 = NameAndType        #130:#131     // toString:()Ljava/lang/String;\n-  #158 = NameAndType        #95:#96       // \"<init>\":(J)V\n-  #159 = NameAndType        #93:#94       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #160 = Utf8               java/lang/Object\n-  #161 = Utf8               java/io/Serializable\n-  #162 = Utf8               java/math/BigInteger\n-  #163 = Utf8               valueOf\n-  #164 = Utf8               (J)Ljava/math/BigInteger;\n-  #165 = Utf8               longValue\n-  #166 = Utf8               testBit\n-  #167 = Utf8               (I)Z\n-  #168 = Utf8               setBit\n-  #169 = Utf8               (I)Ljava/math/BigInteger;\n-  #170 = Utf8               append\n-  #171 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #172 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #137 = NameAndType        #162:#163     // valueOf:(J)Ljava/math/BigInteger;\n+  #138 = NameAndType        #95:#101      // \"<init>\":(Ljava/math/BigInteger;)V\n+  #139 = NameAndType        #95:#133      // \"<init>\":()V\n+  #140 = NameAndType        #91:#92       // value:Ljava/math/BigInteger;\n+  #141 = NameAndType        #95:#105      // \"<init>\":([BI)V\n+  #142 = NameAndType        #111:#120     // getValue:([BI)Ljava/math/BigInteger;\n+  #143 = NameAndType        #107:#114     // getBytes:(Ljava/math/BigInteger;)[B\n+  #144 = NameAndType        #164:#110     // longValue:()J\n+  #145 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #146 = NameAndType        #165:#166     // testBit:(I)Z\n+  #147 = NameAndType        #167:#168     // setBit:(I)Ljava/math/BigInteger;\n+  #148 = NameAndType        #109:#119     // getLongValue:([BI)J\n+  #149 = NameAndType        #111:#112     // getValue:()Ljava/math/BigInteger;\n+  #150 = NameAndType        #124:#125     // equals:(Ljava/lang/Object;)Z\n+  #151 = NameAndType        #128:#129     // hashCode:()I\n+  #152 = Utf8               java/lang/StringBuilder\n+  #153 = Utf8               ZipEightByteInteger value:\n+  #154 = NameAndType        #169:#170     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #155 = NameAndType        #169:#171     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #156 = NameAndType        #130:#131     // toString:()Ljava/lang/String;\n+  #157 = NameAndType        #95:#96       // \"<init>\":(J)V\n+  #158 = NameAndType        #93:#94       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #159 = Utf8               java/lang/Object\n+  #160 = Utf8               java/io/Serializable\n+  #161 = Utf8               java/math/BigInteger\n+  #162 = Utf8               valueOf\n+  #163 = Utf8               (J)Ljava/math/BigInteger;\n+  #164 = Utf8               longValue\n+  #165 = Utf8               testBit\n+  #166 = Utf8               (I)Z\n+  #167 = Utf8               setBit\n+  #168 = Utf8               (I)Ljava/math/BigInteger;\n+  #169 = Utf8               append\n+  #170 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #171 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n {\n   private static final long serialVersionUID = 1l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 1l\n \n   private static final int BYTE_1 = 1;\n@@ -710,15 +709,15 @@\n         line 180: 48\n         line 181: 64\n         line 182: 80\n         line 183: 96\n         line 184: 112\n         line 185: 123\n         line 186: 129\n-        line 187: 147\n+        line 187: 143\n         line 186: 155\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0     156     0 bytes   [B\n             0     156     1 offset   I\n            15     141     2 value   J\n           129      27     4   val   Ljava/math/BigInteger;\n"}]}
