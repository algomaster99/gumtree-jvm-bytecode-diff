{"diffoscope-json-version": 1, "source1": "first/CompareToBuilder.class", "source2": "second/CompareToBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,433 +13,431 @@\n {\n     private int comparison;\n     \n     public CompareToBuilder() {\n         this.comparison = 0;\n     }\n     \n-    public static int reflectionCompare(final Object lhs, final Object rhs) {\n-        return reflectionCompare(lhs, rhs, false, null, new String[0]);\n+    public static int reflectionCompare(final Object o, final Object o2) {\n+        return reflectionCompare(o, o2, false, null, new String[0]);\n     }\n     \n-    public static int reflectionCompare(final Object lhs, final Object rhs, final boolean compareTransients) {\n-        return reflectionCompare(lhs, rhs, compareTransients, null, new String[0]);\n+    public static int reflectionCompare(final Object o, final Object o2, final boolean b) {\n+        return reflectionCompare(o, o2, b, null, new String[0]);\n     }\n     \n-    public static int reflectionCompare(final Object lhs, final Object rhs, final Collection<String> excludeFields) {\n-        return reflectionCompare(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray((Collection)excludeFields));\n+    public static int reflectionCompare(final Object o, final Object o2, final Collection<String> collection) {\n+        return reflectionCompare(o, o2, ReflectionToStringBuilder.toNoNullStringArray((Collection)collection));\n     }\n     \n-    public static int reflectionCompare(final Object lhs, final Object rhs, final String... excludeFields) {\n-        return reflectionCompare(lhs, rhs, false, null, excludeFields);\n+    public static int reflectionCompare(final Object o, final Object o2, final String... array) {\n+        return reflectionCompare(o, o2, false, null, array);\n     }\n     \n-    public static int reflectionCompare(final Object lhs, final Object rhs, final boolean compareTransients, final Class<?> reflectUpToClass, final String... excludeFields) {\n-        if (lhs == rhs) {\n+    public static int reflectionCompare(final Object obj, final Object obj2, final boolean b, final Class<?> clazz, final String... array) {\n+        if (obj == obj2) {\n             return 0;\n         }\n-        Objects.requireNonNull(lhs, \"lhs\");\n-        Objects.requireNonNull(rhs, \"rhs\");\n-        Class<?> lhsClazz = lhs.getClass();\n-        if (!lhsClazz.isInstance(rhs)) {\n+        Objects.requireNonNull(obj, \"lhs\");\n+        Objects.requireNonNull(obj2, \"rhs\");\n+        Class<?> clazz2 = obj.getClass();\n+        if (!clazz2.isInstance(obj2)) {\n             throw new ClassCastException();\n         }\n         final CompareToBuilder compareToBuilder = new CompareToBuilder();\n-        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);\n-        while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {\n-            lhsClazz = lhsClazz.getSuperclass();\n-            reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);\n+        reflectionAppend(obj, obj2, clazz2, compareToBuilder, b, array);\n+        while (clazz2.getSuperclass() != null && clazz2 != clazz) {\n+            clazz2 = clazz2.getSuperclass();\n+            reflectionAppend(obj, obj2, clazz2, compareToBuilder, b, array);\n         }\n         return compareToBuilder.toComparison();\n     }\n     \n-    private static void reflectionAppend(final Object lhs, final Object rhs, final Class<?> clazz, final CompareToBuilder builder, final boolean useTransients, final String[] excludeFields) {\n-        final Field[] fields = clazz.getDeclaredFields();\n-        AccessibleObject.setAccessible(fields, true);\n-        for (int i = 0; i < fields.length && builder.comparison == 0; ++i) {\n-            final Field f = fields[i];\n-            if (!ArrayUtils.contains((Object[])excludeFields, (Object)f.getName()) && !f.getName().contains(\"$\") && (useTransients || !Modifier.isTransient(f.getModifiers())) && !Modifier.isStatic(f.getModifiers())) {\n+    private static void reflectionAppend(final Object obj, final Object obj2, final Class<?> clazz, final CompareToBuilder compareToBuilder, final boolean b, final String[] array) {\n+        final Field[] declaredFields = clazz.getDeclaredFields();\n+        AccessibleObject.setAccessible(declaredFields, true);\n+        for (int n = 0; n < declaredFields.length && compareToBuilder.comparison == 0; ++n) {\n+            final Field field = declaredFields[n];\n+            if (!ArrayUtils.contains((Object[])array, (Object)field.getName()) && !field.getName().contains(\"$\") && (b || !Modifier.isTransient(field.getModifiers())) && !Modifier.isStatic(field.getModifiers())) {\n                 try {\n-                    builder.append(f.get(lhs), f.get(rhs));\n+                    compareToBuilder.append(field.get(obj), field.get(obj2));\n                 }\n-                catch (final IllegalAccessException e) {\n+                catch (final IllegalAccessException ex) {\n                     throw new InternalError(\"Unexpected IllegalAccessException\");\n                 }\n             }\n         }\n     }\n     \n-    public CompareToBuilder appendSuper(final int superCompareTo) {\n+    public CompareToBuilder appendSuper(final int comparison) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        this.comparison = superCompareTo;\n+        this.comparison = comparison;\n         return this;\n     }\n     \n-    public CompareToBuilder append(final Object lhs, final Object rhs) {\n-        return this.append(lhs, rhs, null);\n+    public CompareToBuilder append(final Object o, final Object o2) {\n+        return this.append(o, o2, null);\n     }\n     \n-    public CompareToBuilder append(final Object lhs, final Object rhs, final Comparator<?> comparator) {\n+    public CompareToBuilder append(final Object o, final Object o2, final Comparator<?> comparator) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (o == o2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (o == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (o2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.getClass().isArray()) {\n-            this.appendArray(lhs, rhs, comparator);\n+        if (o.getClass().isArray()) {\n+            this.appendArray(o, o2, comparator);\n         }\n         else if (comparator == null) {\n-            final Comparable<Object> comparable = (Comparable)lhs;\n-            this.comparison = comparable.compareTo(rhs);\n+            this.comparison = ((Comparable)o).compareTo(o2);\n         }\n         else {\n-            final Comparator<Object> comparator2 = (Comparator<Object>)comparator;\n-            this.comparison = comparator2.compare(lhs, rhs);\n+            this.comparison = comparator.compare(o, o2);\n         }\n         return this;\n     }\n     \n-    private void appendArray(final Object lhs, final Object rhs, final Comparator<?> comparator) {\n-        if (lhs instanceof long[]) {\n-            this.append((long[])lhs, (long[])rhs);\n+    private void appendArray(final Object o, final Object o2, final Comparator<?> comparator) {\n+        if (o instanceof long[]) {\n+            this.append((long[])o, (long[])o2);\n         }\n-        else if (lhs instanceof int[]) {\n-            this.append((int[])lhs, (int[])rhs);\n+        else if (o instanceof int[]) {\n+            this.append((int[])o, (int[])o2);\n         }\n-        else if (lhs instanceof short[]) {\n-            this.append((short[])lhs, (short[])rhs);\n+        else if (o instanceof short[]) {\n+            this.append((short[])o, (short[])o2);\n         }\n-        else if (lhs instanceof char[]) {\n-            this.append((char[])lhs, (char[])rhs);\n+        else if (o instanceof char[]) {\n+            this.append((char[])o, (char[])o2);\n         }\n-        else if (lhs instanceof byte[]) {\n-            this.append((byte[])lhs, (byte[])rhs);\n+        else if (o instanceof byte[]) {\n+            this.append((byte[])o, (byte[])o2);\n         }\n-        else if (lhs instanceof double[]) {\n-            this.append((double[])lhs, (double[])rhs);\n+        else if (o instanceof double[]) {\n+            this.append((double[])o, (double[])o2);\n         }\n-        else if (lhs instanceof float[]) {\n-            this.append((float[])lhs, (float[])rhs);\n+        else if (o instanceof float[]) {\n+            this.append((float[])o, (float[])o2);\n         }\n-        else if (lhs instanceof boolean[]) {\n-            this.append((boolean[])lhs, (boolean[])rhs);\n+        else if (o instanceof boolean[]) {\n+            this.append((boolean[])o, (boolean[])o2);\n         }\n         else {\n-            this.append((Object[])lhs, (Object[])rhs, comparator);\n+            this.append((Object[])o, (Object[])o2, comparator);\n         }\n     }\n     \n-    public CompareToBuilder append(final long lhs, final long rhs) {\n+    public CompareToBuilder append(final long x, final long y) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        this.comparison = Long.compare(lhs, rhs);\n+        this.comparison = Long.compare(x, y);\n         return this;\n     }\n     \n-    public CompareToBuilder append(final int lhs, final int rhs) {\n+    public CompareToBuilder append(final int x, final int y) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        this.comparison = Integer.compare(lhs, rhs);\n+        this.comparison = Integer.compare(x, y);\n         return this;\n     }\n     \n-    public CompareToBuilder append(final short lhs, final short rhs) {\n+    public CompareToBuilder append(final short x, final short y) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        this.comparison = Short.compare(lhs, rhs);\n+        this.comparison = Short.compare(x, y);\n         return this;\n     }\n     \n-    public CompareToBuilder append(final char lhs, final char rhs) {\n+    public CompareToBuilder append(final char x, final char y) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        this.comparison = Character.compare(lhs, rhs);\n+        this.comparison = Character.compare(x, y);\n         return this;\n     }\n     \n-    public CompareToBuilder append(final byte lhs, final byte rhs) {\n+    public CompareToBuilder append(final byte x, final byte y) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        this.comparison = Byte.compare(lhs, rhs);\n+        this.comparison = Byte.compare(x, y);\n         return this;\n     }\n     \n-    public CompareToBuilder append(final double lhs, final double rhs) {\n+    public CompareToBuilder append(final double d1, final double d2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        this.comparison = Double.compare(lhs, rhs);\n+        this.comparison = Double.compare(d1, d2);\n         return this;\n     }\n     \n-    public CompareToBuilder append(final float lhs, final float rhs) {\n+    public CompareToBuilder append(final float f1, final float f2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        this.comparison = Float.compare(lhs, rhs);\n+        this.comparison = Float.compare(f1, f2);\n         return this;\n     }\n     \n-    public CompareToBuilder append(final boolean lhs, final boolean rhs) {\n+    public CompareToBuilder append(final boolean b, final boolean b2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (b == b2) {\n             return this;\n         }\n-        if (lhs) {\n+        if (b) {\n             this.comparison = 1;\n         }\n         else {\n             this.comparison = -1;\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final Object[] lhs, final Object[] rhs) {\n-        return this.append(lhs, rhs, null);\n+    public CompareToBuilder append(final Object[] array, final Object[] array2) {\n+        return this.append(array, array2, null);\n     }\n     \n-    public CompareToBuilder append(final Object[] lhs, final Object[] rhs, final Comparator<?> comparator) {\n+    public CompareToBuilder append(final Object[] array, final Object[] array2, final Comparator<?> comparator) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i], comparator);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n], comparator);\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final long[] lhs, final long[] rhs) {\n+    public CompareToBuilder append(final long[] array, final long[] array2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final int[] lhs, final int[] rhs) {\n+    public CompareToBuilder append(final int[] array, final int[] array2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final short[] lhs, final short[] rhs) {\n+    public CompareToBuilder append(final short[] array, final short[] array2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final char[] lhs, final char[] rhs) {\n+    public CompareToBuilder append(final char[] array, final char[] array2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final byte[] lhs, final byte[] rhs) {\n+    public CompareToBuilder append(final byte[] array, final byte[] array2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final double[] lhs, final double[] rhs) {\n+    public CompareToBuilder append(final double[] array, final double[] array2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final float[] lhs, final float[] rhs) {\n+    public CompareToBuilder append(final float[] array, final float[] array2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public CompareToBuilder append(final boolean[] lhs, final boolean[] rhs) {\n+    public CompareToBuilder append(final boolean[] array, final boolean[] array2) {\n         if (this.comparison != 0) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null) {\n+        if (array == null) {\n             this.comparison = -1;\n             return this;\n         }\n-        if (rhs == null) {\n+        if (array2 == null) {\n             this.comparison = 1;\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n-            this.comparison = ((lhs.length < rhs.length) ? -1 : 1);\n+        if (array.length != array2.length) {\n+            this.comparison = ((array.length < array2.length) ? -1 : 1);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.comparison == 0; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.comparison == 0; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n     public int toComparison() {\n         return this.comparison;\n     }\n"}]}
