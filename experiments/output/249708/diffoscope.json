{"diffoscope-json-version": 1, "source1": "first/DefaultLogger.class", "source2": "second/DefaultLogger.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,74 +26,67 @@\n         this(outputStream, AbstractAutomaticBean.OutputStreamOptions.valueOf(outputStreamOptions.name()));\n     }\n     \n     public DefaultLogger(final OutputStream outputStream, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions) {\n         this(outputStream, outputStreamOptions, outputStream, AbstractAutomaticBean.OutputStreamOptions.NONE);\n     }\n     \n-    public DefaultLogger(final OutputStream infoStream, final AbstractAutomaticBean.OutputStreamOptions infoStreamOptions, final OutputStream errorStream, final AbstractAutomaticBean.OutputStreamOptions errorStreamOptions) {\n-        this(infoStream, infoStreamOptions, errorStream, errorStreamOptions, (AuditEventFormatter)new AuditEventDefaultFormatter());\n+    public DefaultLogger(final OutputStream outputStream, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions, final OutputStream outputStream2, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions2) {\n+        this(outputStream, outputStreamOptions, outputStream2, outputStreamOptions2, (AuditEventFormatter)new AuditEventDefaultFormatter());\n     }\n     \n-    public DefaultLogger(final OutputStream infoStream, final AbstractAutomaticBean.OutputStreamOptions infoStreamOptions, final OutputStream errorStream, final AbstractAutomaticBean.OutputStreamOptions errorStreamOptions, final AuditEventFormatter messageFormatter) {\n-        if (infoStreamOptions == null) {\n+    public DefaultLogger(final OutputStream out, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions, final OutputStream out2, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions2, final AuditEventFormatter formatter) {\n+        if (outputStreamOptions == null) {\n             throw new IllegalArgumentException(\"Parameter infoStreamOptions can not be null\");\n         }\n-        this.closeInfo = (infoStreamOptions == AbstractAutomaticBean.OutputStreamOptions.CLOSE);\n-        if (errorStreamOptions == null) {\n+        this.closeInfo = (outputStreamOptions == AbstractAutomaticBean.OutputStreamOptions.CLOSE);\n+        if (outputStreamOptions2 == null) {\n             throw new IllegalArgumentException(\"Parameter errorStreamOptions can not be null\");\n         }\n-        this.closeError = (errorStreamOptions == AbstractAutomaticBean.OutputStreamOptions.CLOSE);\n-        final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);\n-        this.infoWriter = new PrintWriter(infoStreamWriter);\n-        if (infoStream == errorStream) {\n+        this.closeError = (outputStreamOptions2 == AbstractAutomaticBean.OutputStreamOptions.CLOSE);\n+        this.infoWriter = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n+        if (out == out2) {\n             this.errorWriter = this.infoWriter;\n         }\n         else {\n-            final Writer errorStreamWriter = new OutputStreamWriter(errorStream, StandardCharsets.UTF_8);\n-            this.errorWriter = new PrintWriter(errorStreamWriter);\n+            this.errorWriter = new PrintWriter(new OutputStreamWriter(out2, StandardCharsets.UTF_8));\n         }\n-        this.formatter = messageFormatter;\n+        this.formatter = formatter;\n     }\n     \n     protected void finishLocalSetup() {\n     }\n     \n-    public void addError(final AuditEvent event) {\n-        final SeverityLevel severityLevel = event.getSeverityLevel();\n-        if (severityLevel != SeverityLevel.IGNORE) {\n-            final String errorMessage = this.formatter.format(event);\n-            this.errorWriter.println(errorMessage);\n+    public void addError(final AuditEvent auditEvent) {\n+        if (auditEvent.getSeverityLevel() != SeverityLevel.IGNORE) {\n+            this.errorWriter.println(this.formatter.format(auditEvent));\n         }\n     }\n     \n-    public void addException(final AuditEvent event, final Throwable throwable) {\n+    public void addException(final AuditEvent auditEvent, final Throwable t) {\n         synchronized (this.errorWriter) {\n-            final LocalizedMessage exceptionMessage = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)DefaultLogger.class, \"DefaultLogger.addException\", new Object[] { event.getFileName() });\n-            this.errorWriter.println(exceptionMessage.getMessage());\n-            throwable.printStackTrace(this.errorWriter);\n+            this.errorWriter.println(new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)DefaultLogger.class, \"DefaultLogger.addException\", new Object[] { auditEvent.getFileName() }).getMessage());\n+            t.printStackTrace(this.errorWriter);\n         }\n     }\n     \n-    public void auditStarted(final AuditEvent event) {\n-        final LocalizedMessage auditStartMessage = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)DefaultLogger.class, \"DefaultLogger.auditStarted\", new Object[0]);\n-        this.infoWriter.println(auditStartMessage.getMessage());\n+    public void auditStarted(final AuditEvent auditEvent) {\n+        this.infoWriter.println(new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)DefaultLogger.class, \"DefaultLogger.auditStarted\", new Object[0]).getMessage());\n         this.infoWriter.flush();\n     }\n     \n-    public void auditFinished(final AuditEvent event) {\n-        final LocalizedMessage auditFinishMessage = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)DefaultLogger.class, \"DefaultLogger.auditFinished\", new Object[0]);\n-        this.infoWriter.println(auditFinishMessage.getMessage());\n+    public void auditFinished(final AuditEvent auditEvent) {\n+        this.infoWriter.println(new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)DefaultLogger.class, \"DefaultLogger.auditFinished\", new Object[0]).getMessage());\n         this.closeStreams();\n     }\n     \n-    public void fileStarted(final AuditEvent event) {\n+    public void fileStarted(final AuditEvent auditEvent) {\n     }\n     \n-    public void fileFinished(final AuditEvent event) {\n+    public void fileFinished(final AuditEvent auditEvent) {\n         this.infoWriter.flush();\n     }\n     \n     private void closeStreams() {\n         this.infoWriter.flush();\n         if (this.closeInfo) {\n             this.infoWriter.close();\n"}]}
