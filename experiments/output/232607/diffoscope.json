{"diffoscope-json-version": 1, "source1": "first/BaseConfiguration.class", "source2": "second/BaseConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,45 +13,44 @@\n {\n     private Map<String, Object> store;\n     \n     public BaseConfiguration() {\n         this.store = new LinkedHashMap<String, Object>();\n     }\n     \n-    protected void addPropertyDirect(final String key, final Object value) {\n-        final Object previousValue = this.getPropertyInternal(key);\n-        if (previousValue == null) {\n-            this.store.put(key, value);\n-        }\n-        else if (previousValue instanceof List) {\n-            final List<Object> valueList = (List)previousValue;\n-            valueList.add(value);\n+    protected void addPropertyDirect(final String s, final Object o) {\n+        final Object propertyInternal = this.getPropertyInternal(s);\n+        if (propertyInternal == null) {\n+            this.store.put(s, o);\n+        }\n+        else if (propertyInternal instanceof List) {\n+            ((List<Object>)propertyInternal).add(o);\n         }\n         else {\n-            final List<Object> list = new ArrayList<Object>();\n-            list.add(previousValue);\n-            list.add(value);\n-            this.store.put(key, list);\n+            final ArrayList list = new ArrayList();\n+            list.add(propertyInternal);\n+            list.add(o);\n+            this.store.put(s, list);\n         }\n     }\n     \n-    protected Object getPropertyInternal(final String key) {\n-        return this.store.get(key);\n+    protected Object getPropertyInternal(final String s) {\n+        return this.store.get(s);\n     }\n     \n     protected boolean isEmptyInternal() {\n         return this.store.isEmpty();\n     }\n     \n-    protected boolean containsKeyInternal(final String key) {\n-        return this.store.containsKey(key);\n+    protected boolean containsKeyInternal(final String s) {\n+        return this.store.containsKey(s);\n     }\n     \n-    protected void clearPropertyDirect(final String key) {\n-        this.store.remove(key);\n+    protected void clearPropertyDirect(final String s) {\n+        this.store.remove(s);\n     }\n     \n     protected void clearInternal() {\n         this.store.clear();\n     }\n     \n     protected int sizeInternal() {\n@@ -60,28 +59,26 @@\n     \n     protected Iterator<String> getKeysInternal() {\n         return this.store.keySet().iterator();\n     }\n     \n     public Object clone() {\n         try {\n-            final BaseConfiguration copy = (BaseConfiguration)super.clone();\n-            this.cloneStore(copy);\n-            copy.cloneInterpolator((AbstractConfiguration)this);\n-            return copy;\n-        }\n-        catch (final CloneNotSupportedException cex) {\n-            throw new ConfigurationRuntimeException((Throwable)cex);\n+            final BaseConfiguration baseConfiguration = (BaseConfiguration)super.clone();\n+            this.cloneStore(baseConfiguration);\n+            baseConfiguration.cloneInterpolator((AbstractConfiguration)this);\n+            return baseConfiguration;\n+        }\n+        catch (final CloneNotSupportedException ex) {\n+            throw new ConfigurationRuntimeException((Throwable)ex);\n         }\n     }\n     \n-    private void cloneStore(final BaseConfiguration copy) throws CloneNotSupportedException {\n-        final Map<String, Object> clonedStore = (Map)ConfigurationUtils.clone((Object)this.store);\n-        copy.store = clonedStore;\n-        for (final Map.Entry<String, Object> e : this.store.entrySet()) {\n-            if (e.getValue() instanceof Collection) {\n-                final Collection<String> strList = (Collection<String>)e.getValue();\n-                copy.store.put(e.getKey(), new ArrayList((Collection<?>)strList));\n+    private void cloneStore(final BaseConfiguration baseConfiguration) throws CloneNotSupportedException {\n+        baseConfiguration.store = (Map)ConfigurationUtils.clone((Object)this.store);\n+        for (final Map.Entry entry : this.store.entrySet()) {\n+            if (entry.getValue() instanceof Collection) {\n+                baseConfiguration.store.put((String)entry.getKey(), new ArrayList((Collection<?>)entry.getValue()));\n             }\n         }\n     }\n }\n"}]}
