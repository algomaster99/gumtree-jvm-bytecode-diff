{"diffoscope-json-version": 1, "source1": "first/JavaVersion.class", "source2": "second/JavaVersion.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,34 +1,34 @@\n \n package org.apache.commons.lang3;\n \n import org.apache.commons.lang3.math.NumberUtils;\n \n public enum JavaVersion\n {\n-    JAVA_0_9(1.5f, \"0.9\"), \n-    JAVA_1_1(1.1f, \"1.1\"), \n-    JAVA_1_2(1.2f, \"1.2\"), \n-    JAVA_1_3(1.3f, \"1.3\"), \n-    JAVA_1_4(1.4f, \"1.4\"), \n-    JAVA_1_5(1.5f, \"1.5\"), \n-    JAVA_1_6(1.6f, \"1.6\"), \n-    JAVA_1_7(1.7f, \"1.7\"), \n-    JAVA_1_8(1.8f, \"1.8\"), \n+    JAVA_0_9(\"JAVA_0_9\", 0, 1.5f, \"0.9\"), \n+    JAVA_1_1(\"JAVA_1_1\", 1, 1.1f, \"1.1\"), \n+    JAVA_1_2(\"JAVA_1_2\", 2, 1.2f, \"1.2\"), \n+    JAVA_1_3(\"JAVA_1_3\", 3, 1.3f, \"1.3\"), \n+    JAVA_1_4(\"JAVA_1_4\", 4, 1.4f, \"1.4\"), \n+    JAVA_1_5(\"JAVA_1_5\", 5, 1.5f, \"1.5\"), \n+    JAVA_1_6(\"JAVA_1_6\", 6, 1.6f, \"1.6\"), \n+    JAVA_1_7(\"JAVA_1_7\", 7, 1.7f, \"1.7\"), \n+    JAVA_1_8(\"JAVA_1_8\", 8, 1.8f, \"1.8\"), \n     @Deprecated\n-    JAVA_1_9(9.0f, \"9\"), \n-    JAVA_9(9.0f, \"9\"), \n-    JAVA_10(10.0f, \"10\"), \n-    JAVA_11(11.0f, \"11\"), \n-    JAVA_RECENT(maxVersion(), Float.toString(maxVersion()));\n+    JAVA_1_9(\"JAVA_1_9\", 9, 9.0f, \"9\"), \n+    JAVA_9(\"JAVA_9\", 10, 9.0f, \"9\"), \n+    JAVA_10(\"JAVA_10\", 11, 10.0f, \"10\"), \n+    JAVA_11(\"JAVA_11\", 12, 11.0f, \"11\"), \n+    JAVA_RECENT(\"JAVA_RECENT\", 13, maxVersion(), Float.toString(maxVersion()));\n     \n     private final float value;\n     private final String name;\n     \n-    private JavaVersion(final float value, final String name) {\n+    private JavaVersion(final String name2, final int ordinal, final float value, final String name) {\n         this.value = value;\n         this.name = name;\n     }\n     \n     public boolean atLeast(final JavaVersion requiredVersion) {\n         return this.value >= requiredVersion.value;\n     }\n@@ -107,12 +107,12 @@\n     private static float toFloatVersion(final String value) {\n         final int defaultReturnValue = -1;\n         if (!value.contains(\".\")) {\n             return NumberUtils.toFloat(value, -1.0f);\n         }\n         final String[] toParse = value.split(\"\\\\.\");\n         if (toParse.length >= 2) {\n-            return NumberUtils.toFloat(toParse[0] + '.' + toParse[1], -1.0f);\n+            return NumberUtils.toFloat(String.valueOf(toParse[0]) + '.' + toParse[1], -1.0f);\n         }\n         return -1.0f;\n     }\n }\n"}]}
