{"diffoscope-json-version": 1, "source1": "first/ReadAheadInputStream.class", "source2": "second/ReadAheadInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,418 +1,418 @@\n-  SHA-256 checksum a4cab742bbd7bbf8c9c744faae917c6cebeedfb043bdacc393b30ab1bd9b771d\n+  SHA-256 checksum 41ffab2738dc9fbae5e6c26a6210adbad79c1b337ab301340a70f06caa235ee2\n   Compiled from \"ReadAheadInputStream.java\"\n public class org.apache.commons.io.input.ReadAheadInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #105                        // org/apache/commons/io/input/ReadAheadInputStream\n-  super_class: #32                        // java/io/InputStream\n+  this_class: #26                         // org/apache/commons/io/input/ReadAheadInputStream\n+  super_class: #35                        // java/io/InputStream\n   interfaces: 0, fields: 17, methods: 21, attributes: 3\n Constant pool:\n-    #1 = Class              #205          // org/apache/commons/io/IOUtils\n-    #2 = InvokeDynamic      #0:#210       // #0:newThread:()Ljava/util/concurrent/ThreadFactory;\n-    #3 = Methodref          #211.#212     // java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\n-    #4 = Class              #213          // java/lang/Thread\n-    #5 = String             #214          // commons-io-read-ahead\n-    #6 = Methodref          #4.#215       // java/lang/Thread.\"<init>\":(Ljava/lang/Runnable;Ljava/lang/String;)V\n-    #7 = Methodref          #4.#216       // java/lang/Thread.setDaemon:(Z)V\n-    #8 = Methodref          #105.#217     // org/apache/commons/io/input/ReadAheadInputStream.newExecutorService:()Ljava/util/concurrent/ExecutorService;\n-    #9 = Methodref          #105.#218     // org/apache/commons/io/input/ReadAheadInputStream.\"<init>\":(Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n-   #10 = Methodref          #32.#219      // java/io/InputStream.\"<init>\":()V\n-   #11 = Class              #220          // java/util/concurrent/locks/ReentrantLock\n-   #12 = Methodref          #11.#219      // java/util/concurrent/locks/ReentrantLock.\"<init>\":()V\n-   #13 = Fieldref           #105.#221     // org/apache/commons/io/input/ReadAheadInputStream.stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-   #14 = Class              #222          // java/util/concurrent/atomic/AtomicBoolean\n-   #15 = Methodref          #14.#223      // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-   #16 = Fieldref           #105.#224     // org/apache/commons/io/input/ReadAheadInputStream.isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #17 = Methodref          #11.#225      // java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;\n-   #18 = Fieldref           #105.#226     // org/apache/commons/io/input/ReadAheadInputStream.asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n-   #19 = Class              #227          // java/lang/IllegalArgumentException\n-   #20 = Class              #228          // java/lang/StringBuilder\n-   #21 = Methodref          #20.#219      // java/lang/StringBuilder.\"<init>\":()V\n-   #22 = String             #229          // bufferSizeInBytes should be greater than 0, but the value is\n-   #23 = Methodref          #20.#230      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #24 = Methodref          #20.#231      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #25 = Methodref          #20.#232      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #26 = Methodref          #19.#233      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #27 = String             #131          // executorService\n-   #28 = Methodref          #234.#235     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #29 = Class              #236          // java/util/concurrent/ExecutorService\n-   #30 = Fieldref           #105.#237     // org/apache/commons/io/input/ReadAheadInputStream.executorService:Ljava/util/concurrent/ExecutorService;\n-   #31 = String             #152          // inputStream\n-   #32 = Class              #238          // java/io/InputStream\n-   #33 = Fieldref           #105.#239     // org/apache/commons/io/input/ReadAheadInputStream.underlyingInputStream:Ljava/io/InputStream;\n-   #34 = Fieldref           #105.#240     // org/apache/commons/io/input/ReadAheadInputStream.shutdownExecutorService:Z\n-   #35 = Methodref          #241.#242     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #36 = Fieldref           #105.#243     // org/apache/commons/io/input/ReadAheadInputStream.activeBuffer:Ljava/nio/ByteBuffer;\n-   #37 = Fieldref           #105.#244     // org/apache/commons/io/input/ReadAheadInputStream.readAheadBuffer:Ljava/nio/ByteBuffer;\n-   #38 = Methodref          #241.#245     // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-   #39 = Methodref          #11.#246      // java/util/concurrent/locks/ReentrantLock.lock:()V\n-   #40 = Class              #247          // java/lang/Integer\n-   #41 = Long               2147483647l\n-   #43 = Methodref          #241.#248     // java/nio/ByteBuffer.remaining:()I\n-   #44 = Methodref          #249.#250     // java/lang/Math.min:(JJ)J\n-   #45 = Methodref          #11.#251      // java/util/concurrent/locks/ReentrantLock.unlock:()V\n-   #46 = Fieldref           #105.#252     // org/apache/commons/io/input/ReadAheadInputStream.readAborted:Z\n-   #47 = Fieldref           #105.#253     // org/apache/commons/io/input/ReadAheadInputStream.readException:Ljava/lang/Throwable;\n-   #48 = Class              #254          // java/io/IOException\n-   #49 = Methodref          #48.#255      // java/io/IOException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #50 = Fieldref           #105.#256     // org/apache/commons/io/input/ReadAheadInputStream.isClosed:Z\n-   #51 = Fieldref           #105.#257     // org/apache/commons/io/input/ReadAheadInputStream.isReading:Z\n-   #52 = Fieldref           #105.#258     // org/apache/commons/io/input/ReadAheadInputStream.isUnderlyingInputStreamBeingClosed:Z\n-   #53 = InterfaceMethodref #29.#259      // java/util/concurrent/ExecutorService.shutdownNow:()Ljava/util/List;\n-   #54 = Class              #260          // java/lang/Long\n-   #55 = Long               9223372036854775807l\n-   #57 = Fieldref           #261.#262     // java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;\n-   #58 = InterfaceMethodref #29.#263      // java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z\n-   #59 = Methodref          #32.#264      // java/io/InputStream.close:()V\n-   #60 = Class              #265          // java/lang/InterruptedException\n-   #61 = Class              #266          // java/io/InterruptedIOException\n-   #62 = Methodref          #60.#267      // java/lang/InterruptedException.getMessage:()Ljava/lang/String;\n-   #63 = Methodref          #61.#233      // java/io/InterruptedIOException.\"<init>\":(Ljava/lang/String;)V\n-   #64 = Methodref          #61.#268      // java/io/InterruptedIOException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-   #65 = Methodref          #241.#269     // java/nio/ByteBuffer.hasRemaining:()Z\n-   #66 = Fieldref           #105.#270     // org/apache/commons/io/input/ReadAheadInputStream.endOfStream:Z\n-   #67 = Methodref          #241.#271     // java/nio/ByteBuffer.get:()B\n-   #68 = Fieldref           #105.#272     // org/apache/commons/io/input/ReadAheadInputStream.oneByte:Ljava/lang/ThreadLocal;\n-   #69 = Methodref          #273.#274     // java/lang/ThreadLocal.get:()Ljava/lang/Object;\n-   #70 = Class              #175          // \"[B\"\n-   #71 = Methodref          #105.#275     // org/apache/commons/io/input/ReadAheadInputStream.read:([BII)I\n-   #72 = Class              #276          // java/lang/IndexOutOfBoundsException\n-   #73 = Methodref          #72.#219      // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n-   #74 = Methodref          #105.#277     // org/apache/commons/io/input/ReadAheadInputStream.waitForAsyncReadComplete:()V\n-   #75 = Methodref          #105.#278     // org/apache/commons/io/input/ReadAheadInputStream.readAsync:()V\n-   #76 = Methodref          #105.#279     // org/apache/commons/io/input/ReadAheadInputStream.isEndOfStream:()Z\n-   #77 = Methodref          #105.#280     // org/apache/commons/io/input/ReadAheadInputStream.swapBuffers:()V\n-   #78 = Methodref          #249.#281     // java/lang/Math.min:(II)I\n-   #79 = Methodref          #241.#282     // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-   #80 = Methodref          #241.#283     // java/nio/ByteBuffer.array:()[B\n-   #81 = Fieldref           #105.#284     // org/apache/commons/io/input/ReadAheadInputStream.readInProgress:Z\n-   #82 = Methodref          #105.#285     // org/apache/commons/io/input/ReadAheadInputStream.checkReadException:()V\n-   #83 = Methodref          #241.#286     // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n-   #84 = InvokeDynamic      #1:#289       // #1:run:(Lorg/apache/commons/io/input/ReadAheadInputStream;[B)Ljava/lang/Runnable;\n-   #85 = InterfaceMethodref #29.#290      // java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V\n-   #86 = InterfaceMethodref #291.#292     // java/util/concurrent/locks/Condition.signalAll:()V\n-   #87 = Methodref          #241.#293     // java/nio/ByteBuffer.position:()I\n-   #88 = Methodref          #105.#294     // org/apache/commons/io/input/ReadAheadInputStream.skipInternal:(J)J\n-   #89 = Fieldref           #105.#295     // org/apache/commons/io/input/ReadAheadInputStream.$assertionsDisabled:Z\n-   #90 = Methodref          #11.#296      // java/util/concurrent/locks/ReentrantLock.isLocked:()Z\n-   #91 = Class              #297          // java/lang/AssertionError\n-   #92 = Methodref          #91.#219      // java/lang/AssertionError.\"<init>\":()V\n-   #93 = Methodref          #105.#298     // org/apache/commons/io/input/ReadAheadInputStream.available:()I\n-   #94 = Methodref          #32.#299      // java/io/InputStream.skip:(J)J\n-   #95 = Methodref          #14.#300      // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n-   #96 = InterfaceMethodref #291.#301     // java/util/concurrent/locks/Condition.await:()V\n-   #97 = Methodref          #32.#275      // java/io/InputStream.read:([BII)I\n-   #98 = Methodref          #14.#302      // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-   #99 = Methodref          #241.#303     // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n-  #100 = Class              #304          // java/io/EOFException\n-  #101 = Methodref          #105.#305     // org/apache/commons/io/input/ReadAheadInputStream.signalAsyncReadComplete:()V\n-  #102 = Methodref          #105.#306     // org/apache/commons/io/input/ReadAheadInputStream.closeUnderlyingInputStreamIfNecessary:()V\n-  #103 = Class              #307          // java/lang/Throwable\n-  #104 = Class              #308          // java/lang/Error\n-  #105 = Class              #309          // org/apache/commons/io/input/ReadAheadInputStream\n-  #106 = Methodref          #310.#311     // java/lang/Class.desiredAssertionStatus:()Z\n-  #107 = InvokeDynamic      #2:#315       // #2:get:()Ljava/util/function/Supplier;\n-  #108 = Methodref          #273.#316     // java/lang/ThreadLocal.withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;\n-  #109 = Utf8               oneByte\n-  #110 = Utf8               Ljava/lang/ThreadLocal;\n-  #111 = Utf8               Signature\n-  #112 = Utf8               Ljava/lang/ThreadLocal<[B>;\n-  #113 = Utf8               stateChangeLock\n-  #114 = Utf8               Ljava/util/concurrent/locks/ReentrantLock;\n-  #115 = Utf8               activeBuffer\n-  #116 = Utf8               Ljava/nio/ByteBuffer;\n-  #117 = Utf8               readAheadBuffer\n-  #118 = Utf8               endOfStream\n-  #119 = Utf8               Z\n-  #120 = Utf8               readInProgress\n-  #121 = Utf8               readAborted\n-  #122 = Utf8               readException\n-  #123 = Utf8               Ljava/lang/Throwable;\n-  #124 = Utf8               isClosed\n-  #125 = Utf8               isUnderlyingInputStreamBeingClosed\n-  #126 = Utf8               isReading\n-  #127 = Utf8               isWaiting\n-  #128 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n-  #129 = Utf8               underlyingInputStream\n-  #130 = Utf8               Ljava/io/InputStream;\n-  #131 = Utf8               executorService\n-  #132 = Utf8               Ljava/util/concurrent/ExecutorService;\n-  #133 = Utf8               shutdownExecutorService\n-  #134 = Utf8               asyncReadComplete\n-  #135 = Utf8               Ljava/util/concurrent/locks/Condition;\n-  #136 = Utf8               $assertionsDisabled\n-  #137 = Utf8               newExecutorService\n-  #138 = Utf8               ()Ljava/util/concurrent/ExecutorService;\n-  #139 = Utf8               Code\n-  #140 = Utf8               LineNumberTable\n-  #141 = Utf8               newThread\n-  #142 = Utf8               (Ljava/lang/Runnable;)Ljava/lang/Thread;\n-  #143 = Utf8               LocalVariableTable\n-  #144 = Utf8               r\n-  #145 = Utf8               Ljava/lang/Runnable;\n-  #146 = Utf8               thread\n-  #147 = Utf8               Ljava/lang/Thread;\n-  #148 = Utf8               <init>\n-  #149 = Utf8               (Ljava/io/InputStream;I)V\n-  #150 = Utf8               this\n-  #151 = Utf8               Lorg/apache/commons/io/input/ReadAheadInputStream;\n-  #152 = Utf8               inputStream\n-  #153 = Utf8               bufferSizeInBytes\n-  #154 = Utf8               I\n-  #155 = Utf8               (Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;)V\n-  #156 = Utf8               (Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n-  #157 = Utf8               StackMapTable\n-  #158 = Utf8               available\n-  #159 = Utf8               ()I\n-  #160 = Utf8               Exceptions\n-  #161 = Utf8               checkReadException\n-  #162 = Utf8               ()V\n-  #163 = Utf8               close\n-  #164 = Utf8               iio\n-  #165 = Utf8               Ljava/io/InterruptedIOException;\n-  #166 = Utf8               e\n-  #167 = Utf8               Ljava/lang/InterruptedException;\n-  #168 = Utf8               isSafeToCloseUnderlyingInputStream\n-  #169 = Utf8               closeUnderlyingInputStreamIfNecessary\n-  #170 = Utf8               needToCloseUnderlyingInputStream\n-  #171 = Utf8               isEndOfStream\n-  #172 = Utf8               ()Z\n-  #173 = Utf8               read\n-  #174 = Utf8               oneByteArray\n-  #175 = Utf8               [B\n-  #176 = Utf8               ([BII)I\n-  #177 = Utf8               b\n-  #178 = Utf8               offset\n-  #179 = Utf8               len\n-  #180 = Utf8               readAsync\n-  #181 = Utf8               arr\n-  #182 = Utf8               signalAsyncReadComplete\n-  #183 = Utf8               skip\n-  #184 = Utf8               (J)J\n-  #185 = Utf8               skipped\n-  #186 = Utf8               J\n-  #187 = Utf8               n\n-  #188 = Utf8               skipInternal\n-  #189 = Utf8               toSkip\n-  #190 = Utf8               skippedBytes\n-  #191 = Utf8               skippedFromInputStream\n-  #192 = Utf8               swapBuffers\n-  #193 = Utf8               temp\n-  #194 = Utf8               waitForAsyncReadComplete\n-  #195 = Utf8               lambda$readAsync$1\n-  #196 = Utf8               ([B)V\n-  #197 = Utf8               ex\n-  #198 = Utf8               off\n-  #199 = Utf8               exception\n-  #200 = Utf8               lambda$static$0\n-  #201 = Utf8               ()[B\n-  #202 = Utf8               <clinit>\n-  #203 = Utf8               SourceFile\n-  #204 = Utf8               ReadAheadInputStream.java\n-  #205 = Utf8               org/apache/commons/io/IOUtils\n-  #206 = Utf8               BootstrapMethods\n-  #207 = MethodHandle       6:#317        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #208 = MethodType         #142          //  (Ljava/lang/Runnable;)Ljava/lang/Thread;\n-  #209 = MethodHandle       6:#318        // REF_invokeStatic org/apache/commons/io/input/ReadAheadInputStream.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;\n-  #210 = NameAndType        #141:#319     // newThread:()Ljava/util/concurrent/ThreadFactory;\n-  #211 = Class              #320          // java/util/concurrent/Executors\n-  #212 = NameAndType        #321:#322     // newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\n-  #213 = Utf8               java/lang/Thread\n-  #214 = Utf8               commons-io-read-ahead\n-  #215 = NameAndType        #148:#323     // \"<init>\":(Ljava/lang/Runnable;Ljava/lang/String;)V\n-  #216 = NameAndType        #324:#325     // setDaemon:(Z)V\n-  #217 = NameAndType        #137:#138     // newExecutorService:()Ljava/util/concurrent/ExecutorService;\n-  #218 = NameAndType        #148:#156     // \"<init>\":(Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n-  #219 = NameAndType        #148:#162     // \"<init>\":()V\n-  #220 = Utf8               java/util/concurrent/locks/ReentrantLock\n-  #221 = NameAndType        #113:#114     // stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-  #222 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n-  #223 = NameAndType        #148:#325     // \"<init>\":(Z)V\n-  #224 = NameAndType        #127:#128     // isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n-  #225 = NameAndType        #326:#327     // newCondition:()Ljava/util/concurrent/locks/Condition;\n-  #226 = NameAndType        #134:#135     // asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n-  #227 = Utf8               java/lang/IllegalArgumentException\n-  #228 = Utf8               java/lang/StringBuilder\n-  #229 = Utf8               bufferSizeInBytes should be greater than 0, but the value is\n-  #230 = NameAndType        #328:#329     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #231 = NameAndType        #328:#330     // append:(I)Ljava/lang/StringBuilder;\n-  #232 = NameAndType        #331:#332     // toString:()Ljava/lang/String;\n-  #233 = NameAndType        #148:#333     // \"<init>\":(Ljava/lang/String;)V\n-  #234 = Class              #334          // java/util/Objects\n-  #235 = NameAndType        #335:#336     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #236 = Utf8               java/util/concurrent/ExecutorService\n-  #237 = NameAndType        #131:#132     // executorService:Ljava/util/concurrent/ExecutorService;\n-  #238 = Utf8               java/io/InputStream\n-  #239 = NameAndType        #129:#130     // underlyingInputStream:Ljava/io/InputStream;\n-  #240 = NameAndType        #133:#119     // shutdownExecutorService:Z\n-  #241 = Class              #337          // java/nio/ByteBuffer\n-  #242 = NameAndType        #338:#339     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #243 = NameAndType        #115:#116     // activeBuffer:Ljava/nio/ByteBuffer;\n-  #244 = NameAndType        #117:#116     // readAheadBuffer:Ljava/nio/ByteBuffer;\n-  #245 = NameAndType        #340:#341     // flip:()Ljava/nio/ByteBuffer;\n-  #246 = NameAndType        #342:#162     // lock:()V\n-  #247 = Utf8               java/lang/Integer\n-  #248 = NameAndType        #343:#159     // remaining:()I\n-  #249 = Class              #344          // java/lang/Math\n-  #250 = NameAndType        #345:#346     // min:(JJ)J\n-  #251 = NameAndType        #347:#162     // unlock:()V\n-  #252 = NameAndType        #121:#119     // readAborted:Z\n-  #253 = NameAndType        #122:#123     // readException:Ljava/lang/Throwable;\n-  #254 = Utf8               java/io/IOException\n-  #255 = NameAndType        #148:#348     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #256 = NameAndType        #124:#119     // isClosed:Z\n-  #257 = NameAndType        #126:#119     // isReading:Z\n-  #258 = NameAndType        #125:#119     // isUnderlyingInputStreamBeingClosed:Z\n-  #259 = NameAndType        #349:#350     // shutdownNow:()Ljava/util/List;\n-  #260 = Utf8               java/lang/Long\n-  #261 = Class              #351          // java/util/concurrent/TimeUnit\n-  #262 = NameAndType        #352:#353     // SECONDS:Ljava/util/concurrent/TimeUnit;\n-  #263 = NameAndType        #354:#355     // awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z\n-  #264 = NameAndType        #163:#162     // close:()V\n-  #265 = Utf8               java/lang/InterruptedException\n-  #266 = Utf8               java/io/InterruptedIOException\n-  #267 = NameAndType        #356:#332     // getMessage:()Ljava/lang/String;\n-  #268 = NameAndType        #357:#358     // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #269 = NameAndType        #359:#172     // hasRemaining:()Z\n-  #270 = NameAndType        #118:#119     // endOfStream:Z\n-  #271 = NameAndType        #360:#361     // get:()B\n-  #272 = NameAndType        #109:#110     // oneByte:Ljava/lang/ThreadLocal;\n-  #273 = Class              #362          // java/lang/ThreadLocal\n-  #274 = NameAndType        #360:#363     // get:()Ljava/lang/Object;\n-  #275 = NameAndType        #173:#176     // read:([BII)I\n-  #276 = Utf8               java/lang/IndexOutOfBoundsException\n-  #277 = NameAndType        #194:#162     // waitForAsyncReadComplete:()V\n-  #278 = NameAndType        #180:#162     // readAsync:()V\n-  #279 = NameAndType        #171:#172     // isEndOfStream:()Z\n-  #280 = NameAndType        #192:#162     // swapBuffers:()V\n-  #281 = NameAndType        #345:#364     // min:(II)I\n-  #282 = NameAndType        #360:#365     // get:([BII)Ljava/nio/ByteBuffer;\n-  #283 = NameAndType        #366:#201     // array:()[B\n-  #284 = NameAndType        #120:#119     // readInProgress:Z\n-  #285 = NameAndType        #161:#162     // checkReadException:()V\n-  #286 = NameAndType        #367:#339     // position:(I)Ljava/nio/ByteBuffer;\n-  #287 = MethodType         #162          //  ()V\n-  #288 = MethodHandle       7:#368        // REF_invokeSpecial org/apache/commons/io/input/ReadAheadInputStream.lambda$readAsync$1:([B)V\n-  #289 = NameAndType        #369:#370     // run:(Lorg/apache/commons/io/input/ReadAheadInputStream;[B)Ljava/lang/Runnable;\n-  #290 = NameAndType        #371:#372     // execute:(Ljava/lang/Runnable;)V\n-  #291 = Class              #373          // java/util/concurrent/locks/Condition\n-  #292 = NameAndType        #374:#162     // signalAll:()V\n-  #293 = NameAndType        #367:#159     // position:()I\n-  #294 = NameAndType        #188:#184     // skipInternal:(J)J\n-  #295 = NameAndType        #136:#119     // $assertionsDisabled:Z\n-  #296 = NameAndType        #375:#172     // isLocked:()Z\n-  #297 = Utf8               java/lang/AssertionError\n-  #298 = NameAndType        #158:#159     // available:()I\n-  #299 = NameAndType        #183:#184     // skip:(J)J\n-  #300 = NameAndType        #376:#325     // set:(Z)V\n-  #301 = NameAndType        #377:#162     // await:()V\n-  #302 = NameAndType        #360:#172     // get:()Z\n-  #303 = NameAndType        #378:#339     // limit:(I)Ljava/nio/ByteBuffer;\n+    #1 = Class              #2            // org/apache/commons/io/IOUtils\n+    #2 = Utf8               org/apache/commons/io/IOUtils\n+    #3 = InvokeDynamic      #0:#4         // #0:newThread:()Ljava/util/concurrent/ThreadFactory;\n+    #4 = NameAndType        #5:#6         // newThread:()Ljava/util/concurrent/ThreadFactory;\n+    #5 = Utf8               newThread\n+    #6 = Utf8               ()Ljava/util/concurrent/ThreadFactory;\n+    #7 = Methodref          #8.#9         // java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\n+    #8 = Class              #10           // java/util/concurrent/Executors\n+    #9 = NameAndType        #11:#12       // newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\n+   #10 = Utf8               java/util/concurrent/Executors\n+   #11 = Utf8               newSingleThreadExecutor\n+   #12 = Utf8               (Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\n+   #13 = Class              #14           // java/lang/Thread\n+   #14 = Utf8               java/lang/Thread\n+   #15 = String             #16           // commons-io-read-ahead\n+   #16 = Utf8               commons-io-read-ahead\n+   #17 = Methodref          #13.#18       // java/lang/Thread.\"<init>\":(Ljava/lang/Runnable;Ljava/lang/String;)V\n+   #18 = NameAndType        #19:#20       // \"<init>\":(Ljava/lang/Runnable;Ljava/lang/String;)V\n+   #19 = Utf8               <init>\n+   #20 = Utf8               (Ljava/lang/Runnable;Ljava/lang/String;)V\n+   #21 = Methodref          #13.#22       // java/lang/Thread.setDaemon:(Z)V\n+   #22 = NameAndType        #23:#24       // setDaemon:(Z)V\n+   #23 = Utf8               setDaemon\n+   #24 = Utf8               (Z)V\n+   #25 = Methodref          #26.#27       // org/apache/commons/io/input/ReadAheadInputStream.newExecutorService:()Ljava/util/concurrent/ExecutorService;\n+   #26 = Class              #28           // org/apache/commons/io/input/ReadAheadInputStream\n+   #27 = NameAndType        #29:#30       // newExecutorService:()Ljava/util/concurrent/ExecutorService;\n+   #28 = Utf8               org/apache/commons/io/input/ReadAheadInputStream\n+   #29 = Utf8               newExecutorService\n+   #30 = Utf8               ()Ljava/util/concurrent/ExecutorService;\n+   #31 = Methodref          #26.#32       // org/apache/commons/io/input/ReadAheadInputStream.\"<init>\":(Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n+   #32 = NameAndType        #19:#33       // \"<init>\":(Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n+   #33 = Utf8               (Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n+   #34 = Methodref          #35.#36       // java/io/InputStream.\"<init>\":()V\n+   #35 = Class              #37           // java/io/InputStream\n+   #36 = NameAndType        #19:#38       // \"<init>\":()V\n+   #37 = Utf8               java/io/InputStream\n+   #38 = Utf8               ()V\n+   #39 = Class              #40           // java/util/concurrent/locks/ReentrantLock\n+   #40 = Utf8               java/util/concurrent/locks/ReentrantLock\n+   #41 = Methodref          #39.#36       // java/util/concurrent/locks/ReentrantLock.\"<init>\":()V\n+   #42 = Fieldref           #26.#43       // org/apache/commons/io/input/ReadAheadInputStream.stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+   #43 = NameAndType        #44:#45       // stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+   #44 = Utf8               stateChangeLock\n+   #45 = Utf8               Ljava/util/concurrent/locks/ReentrantLock;\n+   #46 = Class              #47           // java/util/concurrent/atomic/AtomicBoolean\n+   #47 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n+   #48 = Methodref          #46.#49       // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+   #49 = NameAndType        #19:#24       // \"<init>\":(Z)V\n+   #50 = Fieldref           #26.#51       // org/apache/commons/io/input/ReadAheadInputStream.isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #51 = NameAndType        #52:#53       // isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #52 = Utf8               isWaiting\n+   #53 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #54 = Methodref          #39.#55       // java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;\n+   #55 = NameAndType        #56:#57       // newCondition:()Ljava/util/concurrent/locks/Condition;\n+   #56 = Utf8               newCondition\n+   #57 = Utf8               ()Ljava/util/concurrent/locks/Condition;\n+   #58 = Fieldref           #26.#59       // org/apache/commons/io/input/ReadAheadInputStream.asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n+   #59 = NameAndType        #60:#61       // asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n+   #60 = Utf8               asyncReadComplete\n+   #61 = Utf8               Ljava/util/concurrent/locks/Condition;\n+   #62 = Class              #63           // java/lang/IllegalArgumentException\n+   #63 = Utf8               java/lang/IllegalArgumentException\n+   #64 = Class              #65           // java/lang/StringBuilder\n+   #65 = Utf8               java/lang/StringBuilder\n+   #66 = Methodref          #64.#36       // java/lang/StringBuilder.\"<init>\":()V\n+   #67 = String             #68           // bufferSizeInBytes should be greater than 0, but the value is\n+   #68 = Utf8               bufferSizeInBytes should be greater than 0, but the value is\n+   #69 = Methodref          #64.#70       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #70 = NameAndType        #71:#72       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #71 = Utf8               append\n+   #72 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #73 = Methodref          #64.#74       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #74 = NameAndType        #71:#75       // append:(I)Ljava/lang/StringBuilder;\n+   #75 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #76 = Methodref          #64.#77       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #77 = NameAndType        #78:#79       // toString:()Ljava/lang/String;\n+   #78 = Utf8               toString\n+   #79 = Utf8               ()Ljava/lang/String;\n+   #80 = Methodref          #62.#81       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #81 = NameAndType        #19:#82       // \"<init>\":(Ljava/lang/String;)V\n+   #82 = Utf8               (Ljava/lang/String;)V\n+   #83 = String             #84           // executorService\n+   #84 = Utf8               executorService\n+   #85 = Methodref          #86.#87       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #86 = Class              #88           // java/util/Objects\n+   #87 = NameAndType        #89:#90       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #88 = Utf8               java/util/Objects\n+   #89 = Utf8               requireNonNull\n+   #90 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #91 = Class              #92           // java/util/concurrent/ExecutorService\n+   #92 = Utf8               java/util/concurrent/ExecutorService\n+   #93 = Fieldref           #26.#94       // org/apache/commons/io/input/ReadAheadInputStream.executorService:Ljava/util/concurrent/ExecutorService;\n+   #94 = NameAndType        #84:#95       // executorService:Ljava/util/concurrent/ExecutorService;\n+   #95 = Utf8               Ljava/util/concurrent/ExecutorService;\n+   #96 = String             #97           // inputStream\n+   #97 = Utf8               inputStream\n+   #98 = Fieldref           #26.#99       // org/apache/commons/io/input/ReadAheadInputStream.underlyingInputStream:Ljava/io/InputStream;\n+   #99 = NameAndType        #100:#101     // underlyingInputStream:Ljava/io/InputStream;\n+  #100 = Utf8               underlyingInputStream\n+  #101 = Utf8               Ljava/io/InputStream;\n+  #102 = Fieldref           #26.#103      // org/apache/commons/io/input/ReadAheadInputStream.shutdownExecutorService:Z\n+  #103 = NameAndType        #104:#105     // shutdownExecutorService:Z\n+  #104 = Utf8               shutdownExecutorService\n+  #105 = Utf8               Z\n+  #106 = Methodref          #107.#108     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+  #107 = Class              #109          // java/nio/ByteBuffer\n+  #108 = NameAndType        #110:#111     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #109 = Utf8               java/nio/ByteBuffer\n+  #110 = Utf8               allocate\n+  #111 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #112 = Fieldref           #26.#113      // org/apache/commons/io/input/ReadAheadInputStream.activeBuffer:Ljava/nio/ByteBuffer;\n+  #113 = NameAndType        #114:#115     // activeBuffer:Ljava/nio/ByteBuffer;\n+  #114 = Utf8               activeBuffer\n+  #115 = Utf8               Ljava/nio/ByteBuffer;\n+  #116 = Fieldref           #26.#117      // org/apache/commons/io/input/ReadAheadInputStream.readAheadBuffer:Ljava/nio/ByteBuffer;\n+  #117 = NameAndType        #118:#115     // readAheadBuffer:Ljava/nio/ByteBuffer;\n+  #118 = Utf8               readAheadBuffer\n+  #119 = Methodref          #107.#120     // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+  #120 = NameAndType        #121:#122     // flip:()Ljava/nio/ByteBuffer;\n+  #121 = Utf8               flip\n+  #122 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #123 = Methodref          #39.#124      // java/util/concurrent/locks/ReentrantLock.lock:()V\n+  #124 = NameAndType        #125:#38      // lock:()V\n+  #125 = Utf8               lock\n+  #126 = Class              #127          // java/lang/Integer\n+  #127 = Utf8               java/lang/Integer\n+  #128 = Long               2147483647l\n+  #130 = Methodref          #107.#131     // java/nio/ByteBuffer.remaining:()I\n+  #131 = NameAndType        #132:#133     // remaining:()I\n+  #132 = Utf8               remaining\n+  #133 = Utf8               ()I\n+  #134 = Methodref          #135.#136     // java/lang/Math.min:(JJ)J\n+  #135 = Class              #137          // java/lang/Math\n+  #136 = NameAndType        #138:#139     // min:(JJ)J\n+  #137 = Utf8               java/lang/Math\n+  #138 = Utf8               min\n+  #139 = Utf8               (JJ)J\n+  #140 = Methodref          #39.#141      // java/util/concurrent/locks/ReentrantLock.unlock:()V\n+  #141 = NameAndType        #142:#38      // unlock:()V\n+  #142 = Utf8               unlock\n+  #143 = Fieldref           #26.#144      // org/apache/commons/io/input/ReadAheadInputStream.readAborted:Z\n+  #144 = NameAndType        #145:#105     // readAborted:Z\n+  #145 = Utf8               readAborted\n+  #146 = Fieldref           #26.#147      // org/apache/commons/io/input/ReadAheadInputStream.readException:Ljava/lang/Throwable;\n+  #147 = NameAndType        #148:#149     // readException:Ljava/lang/Throwable;\n+  #148 = Utf8               readException\n+  #149 = Utf8               Ljava/lang/Throwable;\n+  #150 = Class              #151          // java/io/IOException\n+  #151 = Utf8               java/io/IOException\n+  #152 = Methodref          #150.#153     // java/io/IOException.\"<init>\":(Ljava/lang/Throwable;)V\n+  #153 = NameAndType        #19:#154      // \"<init>\":(Ljava/lang/Throwable;)V\n+  #154 = Utf8               (Ljava/lang/Throwable;)V\n+  #155 = Fieldref           #26.#156      // org/apache/commons/io/input/ReadAheadInputStream.isClosed:Z\n+  #156 = NameAndType        #157:#105     // isClosed:Z\n+  #157 = Utf8               isClosed\n+  #158 = Fieldref           #26.#159      // org/apache/commons/io/input/ReadAheadInputStream.isReading:Z\n+  #159 = NameAndType        #160:#105     // isReading:Z\n+  #160 = Utf8               isReading\n+  #161 = Fieldref           #26.#162      // org/apache/commons/io/input/ReadAheadInputStream.isUnderlyingInputStreamBeingClosed:Z\n+  #162 = NameAndType        #163:#105     // isUnderlyingInputStreamBeingClosed:Z\n+  #163 = Utf8               isUnderlyingInputStreamBeingClosed\n+  #164 = InterfaceMethodref #91.#165      // java/util/concurrent/ExecutorService.shutdownNow:()Ljava/util/List;\n+  #165 = NameAndType        #166:#167     // shutdownNow:()Ljava/util/List;\n+  #166 = Utf8               shutdownNow\n+  #167 = Utf8               ()Ljava/util/List;\n+  #168 = Class              #169          // java/lang/Long\n+  #169 = Utf8               java/lang/Long\n+  #170 = Long               9223372036854775807l\n+  #172 = Fieldref           #173.#174     // java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;\n+  #173 = Class              #175          // java/util/concurrent/TimeUnit\n+  #174 = NameAndType        #176:#177     // SECONDS:Ljava/util/concurrent/TimeUnit;\n+  #175 = Utf8               java/util/concurrent/TimeUnit\n+  #176 = Utf8               SECONDS\n+  #177 = Utf8               Ljava/util/concurrent/TimeUnit;\n+  #178 = InterfaceMethodref #91.#179      // java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z\n+  #179 = NameAndType        #180:#181     // awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z\n+  #180 = Utf8               awaitTermination\n+  #181 = Utf8               (JLjava/util/concurrent/TimeUnit;)Z\n+  #182 = Methodref          #35.#183      // java/io/InputStream.close:()V\n+  #183 = NameAndType        #184:#38      // close:()V\n+  #184 = Utf8               close\n+  #185 = Class              #186          // java/lang/InterruptedException\n+  #186 = Utf8               java/lang/InterruptedException\n+  #187 = Class              #188          // java/io/InterruptedIOException\n+  #188 = Utf8               java/io/InterruptedIOException\n+  #189 = Methodref          #185.#190     // java/lang/InterruptedException.getMessage:()Ljava/lang/String;\n+  #190 = NameAndType        #191:#79      // getMessage:()Ljava/lang/String;\n+  #191 = Utf8               getMessage\n+  #192 = Methodref          #187.#81      // java/io/InterruptedIOException.\"<init>\":(Ljava/lang/String;)V\n+  #193 = Methodref          #187.#194     // java/io/InterruptedIOException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #194 = NameAndType        #195:#196     // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #195 = Utf8               initCause\n+  #196 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #197 = Methodref          #107.#198     // java/nio/ByteBuffer.hasRemaining:()Z\n+  #198 = NameAndType        #199:#200     // hasRemaining:()Z\n+  #199 = Utf8               hasRemaining\n+  #200 = Utf8               ()Z\n+  #201 = Fieldref           #26.#202      // org/apache/commons/io/input/ReadAheadInputStream.endOfStream:Z\n+  #202 = NameAndType        #203:#105     // endOfStream:Z\n+  #203 = Utf8               endOfStream\n+  #204 = Methodref          #107.#205     // java/nio/ByteBuffer.get:()B\n+  #205 = NameAndType        #206:#207     // get:()B\n+  #206 = Utf8               get\n+  #207 = Utf8               ()B\n+  #208 = Fieldref           #26.#209      // org/apache/commons/io/input/ReadAheadInputStream.oneByte:Ljava/lang/ThreadLocal;\n+  #209 = NameAndType        #210:#211     // oneByte:Ljava/lang/ThreadLocal;\n+  #210 = Utf8               oneByte\n+  #211 = Utf8               Ljava/lang/ThreadLocal;\n+  #212 = Methodref          #213.#214     // java/lang/ThreadLocal.get:()Ljava/lang/Object;\n+  #213 = Class              #215          // java/lang/ThreadLocal\n+  #214 = NameAndType        #206:#216     // get:()Ljava/lang/Object;\n+  #215 = Utf8               java/lang/ThreadLocal\n+  #216 = Utf8               ()Ljava/lang/Object;\n+  #217 = Class              #218          // \"[B\"\n+  #218 = Utf8               [B\n+  #219 = Methodref          #26.#220      // org/apache/commons/io/input/ReadAheadInputStream.read:([BII)I\n+  #220 = NameAndType        #221:#222     // read:([BII)I\n+  #221 = Utf8               read\n+  #222 = Utf8               ([BII)I\n+  #223 = Class              #224          // java/lang/IndexOutOfBoundsException\n+  #224 = Utf8               java/lang/IndexOutOfBoundsException\n+  #225 = Methodref          #223.#36      // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+  #226 = Methodref          #26.#227      // org/apache/commons/io/input/ReadAheadInputStream.waitForAsyncReadComplete:()V\n+  #227 = NameAndType        #228:#38      // waitForAsyncReadComplete:()V\n+  #228 = Utf8               waitForAsyncReadComplete\n+  #229 = Methodref          #26.#230      // org/apache/commons/io/input/ReadAheadInputStream.readAsync:()V\n+  #230 = NameAndType        #231:#38      // readAsync:()V\n+  #231 = Utf8               readAsync\n+  #232 = Methodref          #26.#233      // org/apache/commons/io/input/ReadAheadInputStream.isEndOfStream:()Z\n+  #233 = NameAndType        #234:#200     // isEndOfStream:()Z\n+  #234 = Utf8               isEndOfStream\n+  #235 = Methodref          #26.#236      // org/apache/commons/io/input/ReadAheadInputStream.swapBuffers:()V\n+  #236 = NameAndType        #237:#38      // swapBuffers:()V\n+  #237 = Utf8               swapBuffers\n+  #238 = Methodref          #135.#239     // java/lang/Math.min:(II)I\n+  #239 = NameAndType        #138:#240     // min:(II)I\n+  #240 = Utf8               (II)I\n+  #241 = Methodref          #107.#242     // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #242 = NameAndType        #206:#243     // get:([BII)Ljava/nio/ByteBuffer;\n+  #243 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #244 = Methodref          #107.#245     // java/nio/ByteBuffer.array:()[B\n+  #245 = NameAndType        #246:#247     // array:()[B\n+  #246 = Utf8               array\n+  #247 = Utf8               ()[B\n+  #248 = Fieldref           #26.#249      // org/apache/commons/io/input/ReadAheadInputStream.readInProgress:Z\n+  #249 = NameAndType        #250:#105     // readInProgress:Z\n+  #250 = Utf8               readInProgress\n+  #251 = Methodref          #26.#252      // org/apache/commons/io/input/ReadAheadInputStream.checkReadException:()V\n+  #252 = NameAndType        #253:#38      // checkReadException:()V\n+  #253 = Utf8               checkReadException\n+  #254 = Methodref          #107.#255     // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+  #255 = NameAndType        #256:#111     // position:(I)Ljava/nio/ByteBuffer;\n+  #256 = Utf8               position\n+  #257 = InvokeDynamic      #1:#258       // #1:run:(Lorg/apache/commons/io/input/ReadAheadInputStream;[B)Ljava/lang/Runnable;\n+  #258 = NameAndType        #259:#260     // run:(Lorg/apache/commons/io/input/ReadAheadInputStream;[B)Ljava/lang/Runnable;\n+  #259 = Utf8               run\n+  #260 = Utf8               (Lorg/apache/commons/io/input/ReadAheadInputStream;[B)Ljava/lang/Runnable;\n+  #261 = InterfaceMethodref #91.#262      // java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V\n+  #262 = NameAndType        #263:#264     // execute:(Ljava/lang/Runnable;)V\n+  #263 = Utf8               execute\n+  #264 = Utf8               (Ljava/lang/Runnable;)V\n+  #265 = InterfaceMethodref #266.#267     // java/util/concurrent/locks/Condition.signalAll:()V\n+  #266 = Class              #268          // java/util/concurrent/locks/Condition\n+  #267 = NameAndType        #269:#38      // signalAll:()V\n+  #268 = Utf8               java/util/concurrent/locks/Condition\n+  #269 = Utf8               signalAll\n+  #270 = Methodref          #107.#271     // java/nio/ByteBuffer.position:()I\n+  #271 = NameAndType        #256:#133     // position:()I\n+  #272 = Methodref          #26.#273      // org/apache/commons/io/input/ReadAheadInputStream.skipInternal:(J)J\n+  #273 = NameAndType        #274:#275     // skipInternal:(J)J\n+  #274 = Utf8               skipInternal\n+  #275 = Utf8               (J)J\n+  #276 = Fieldref           #26.#277      // org/apache/commons/io/input/ReadAheadInputStream.$assertionsDisabled:Z\n+  #277 = NameAndType        #278:#105     // $assertionsDisabled:Z\n+  #278 = Utf8               $assertionsDisabled\n+  #279 = Methodref          #39.#280      // java/util/concurrent/locks/ReentrantLock.isLocked:()Z\n+  #280 = NameAndType        #281:#200     // isLocked:()Z\n+  #281 = Utf8               isLocked\n+  #282 = Class              #283          // java/lang/AssertionError\n+  #283 = Utf8               java/lang/AssertionError\n+  #284 = Methodref          #282.#36      // java/lang/AssertionError.\"<init>\":()V\n+  #285 = Methodref          #26.#286      // org/apache/commons/io/input/ReadAheadInputStream.available:()I\n+  #286 = NameAndType        #287:#133     // available:()I\n+  #287 = Utf8               available\n+  #288 = Methodref          #35.#289      // java/io/InputStream.skip:(J)J\n+  #289 = NameAndType        #290:#275     // skip:(J)J\n+  #290 = Utf8               skip\n+  #291 = Methodref          #46.#292      // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+  #292 = NameAndType        #293:#24      // set:(Z)V\n+  #293 = Utf8               set\n+  #294 = InterfaceMethodref #266.#295     // java/util/concurrent/locks/Condition.await:()V\n+  #295 = NameAndType        #296:#38      // await:()V\n+  #296 = Utf8               await\n+  #297 = Methodref          #35.#220      // java/io/InputStream.read:([BII)I\n+  #298 = Methodref          #46.#299      // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+  #299 = NameAndType        #206:#200     // get:()Z\n+  #300 = Methodref          #107.#301     // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+  #301 = NameAndType        #302:#111     // limit:(I)Ljava/nio/ByteBuffer;\n+  #302 = Utf8               limit\n+  #303 = Class              #304          // java/io/EOFException\n   #304 = Utf8               java/io/EOFException\n-  #305 = NameAndType        #182:#162     // signalAsyncReadComplete:()V\n-  #306 = NameAndType        #169:#162     // closeUnderlyingInputStreamIfNecessary:()V\n-  #307 = Utf8               java/lang/Throwable\n-  #308 = Utf8               java/lang/Error\n-  #309 = Utf8               org/apache/commons/io/input/ReadAheadInputStream\n-  #310 = Class              #379          // java/lang/Class\n-  #311 = NameAndType        #380:#172     // desiredAssertionStatus:()Z\n-  #312 = MethodType         #363          //  ()Ljava/lang/Object;\n-  #313 = MethodHandle       6:#381        // REF_invokeStatic org/apache/commons/io/input/ReadAheadInputStream.lambda$static$0:()[B\n-  #314 = MethodType         #201          //  ()[B\n-  #315 = NameAndType        #360:#382     // get:()Ljava/util/function/Supplier;\n-  #316 = NameAndType        #383:#384     // withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;\n-  #317 = Methodref          #385.#386     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #318 = Methodref          #105.#387     // org/apache/commons/io/input/ReadAheadInputStream.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;\n-  #319 = Utf8               ()Ljava/util/concurrent/ThreadFactory;\n-  #320 = Utf8               java/util/concurrent/Executors\n-  #321 = Utf8               newSingleThreadExecutor\n-  #322 = Utf8               (Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\n-  #323 = Utf8               (Ljava/lang/Runnable;Ljava/lang/String;)V\n-  #324 = Utf8               setDaemon\n-  #325 = Utf8               (Z)V\n-  #326 = Utf8               newCondition\n-  #327 = Utf8               ()Ljava/util/concurrent/locks/Condition;\n-  #328 = Utf8               append\n-  #329 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #330 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #331 = Utf8               toString\n-  #332 = Utf8               ()Ljava/lang/String;\n-  #333 = Utf8               (Ljava/lang/String;)V\n-  #334 = Utf8               java/util/Objects\n-  #335 = Utf8               requireNonNull\n-  #336 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #337 = Utf8               java/nio/ByteBuffer\n-  #338 = Utf8               allocate\n-  #339 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #340 = Utf8               flip\n-  #341 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #342 = Utf8               lock\n-  #343 = Utf8               remaining\n-  #344 = Utf8               java/lang/Math\n-  #345 = Utf8               min\n-  #346 = Utf8               (JJ)J\n-  #347 = Utf8               unlock\n-  #348 = Utf8               (Ljava/lang/Throwable;)V\n-  #349 = Utf8               shutdownNow\n-  #350 = Utf8               ()Ljava/util/List;\n-  #351 = Utf8               java/util/concurrent/TimeUnit\n-  #352 = Utf8               SECONDS\n-  #353 = Utf8               Ljava/util/concurrent/TimeUnit;\n-  #354 = Utf8               awaitTermination\n-  #355 = Utf8               (JLjava/util/concurrent/TimeUnit;)Z\n-  #356 = Utf8               getMessage\n-  #357 = Utf8               initCause\n-  #358 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #359 = Utf8               hasRemaining\n-  #360 = Utf8               get\n-  #361 = Utf8               ()B\n-  #362 = Utf8               java/lang/ThreadLocal\n-  #363 = Utf8               ()Ljava/lang/Object;\n-  #364 = Utf8               (II)I\n-  #365 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #366 = Utf8               array\n-  #367 = Utf8               position\n-  #368 = Methodref          #105.#388     // org/apache/commons/io/input/ReadAheadInputStream.lambda$readAsync$1:([B)V\n-  #369 = Utf8               run\n-  #370 = Utf8               (Lorg/apache/commons/io/input/ReadAheadInputStream;[B)Ljava/lang/Runnable;\n-  #371 = Utf8               execute\n-  #372 = Utf8               (Ljava/lang/Runnable;)V\n-  #373 = Utf8               java/util/concurrent/locks/Condition\n-  #374 = Utf8               signalAll\n-  #375 = Utf8               isLocked\n-  #376 = Utf8               set\n-  #377 = Utf8               await\n-  #378 = Utf8               limit\n-  #379 = Utf8               java/lang/Class\n-  #380 = Utf8               desiredAssertionStatus\n-  #381 = Methodref          #105.#389     // org/apache/commons/io/input/ReadAheadInputStream.lambda$static$0:()[B\n-  #382 = Utf8               ()Ljava/util/function/Supplier;\n-  #383 = Utf8               withInitial\n-  #384 = Utf8               (Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;\n-  #385 = Class              #390          // java/lang/invoke/LambdaMetafactory\n-  #386 = NameAndType        #391:#395     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #387 = NameAndType        #141:#142     // newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;\n-  #388 = NameAndType        #195:#196     // lambda$readAsync$1:([B)V\n-  #389 = NameAndType        #200:#201     // lambda$static$0:()[B\n-  #390 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #391 = Utf8               metafactory\n-  #392 = Class              #397          // java/lang/invoke/MethodHandles$Lookup\n-  #393 = Utf8               Lookup\n-  #394 = Utf8               InnerClasses\n-  #395 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #396 = Class              #398          // java/lang/invoke/MethodHandles\n-  #397 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #398 = Utf8               java/lang/invoke/MethodHandles\n+  #305 = Methodref          #26.#306      // org/apache/commons/io/input/ReadAheadInputStream.signalAsyncReadComplete:()V\n+  #306 = NameAndType        #307:#38      // signalAsyncReadComplete:()V\n+  #307 = Utf8               signalAsyncReadComplete\n+  #308 = Methodref          #26.#309      // org/apache/commons/io/input/ReadAheadInputStream.closeUnderlyingInputStreamIfNecessary:()V\n+  #309 = NameAndType        #310:#38      // closeUnderlyingInputStreamIfNecessary:()V\n+  #310 = Utf8               closeUnderlyingInputStreamIfNecessary\n+  #311 = Class              #312          // java/lang/Throwable\n+  #312 = Utf8               java/lang/Throwable\n+  #313 = Class              #314          // java/lang/Error\n+  #314 = Utf8               java/lang/Error\n+  #315 = Methodref          #316.#317     // java/lang/Class.desiredAssertionStatus:()Z\n+  #316 = Class              #318          // java/lang/Class\n+  #317 = NameAndType        #319:#200     // desiredAssertionStatus:()Z\n+  #318 = Utf8               java/lang/Class\n+  #319 = Utf8               desiredAssertionStatus\n+  #320 = InvokeDynamic      #2:#321       // #2:get:()Ljava/util/function/Supplier;\n+  #321 = NameAndType        #206:#322     // get:()Ljava/util/function/Supplier;\n+  #322 = Utf8               ()Ljava/util/function/Supplier;\n+  #323 = Methodref          #213.#324     // java/lang/ThreadLocal.withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;\n+  #324 = NameAndType        #325:#326     // withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;\n+  #325 = Utf8               withInitial\n+  #326 = Utf8               (Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;\n+  #327 = Utf8               Signature\n+  #328 = Utf8               Ljava/lang/ThreadLocal<[B>;\n+  #329 = Utf8               Code\n+  #330 = Utf8               LineNumberTable\n+  #331 = Utf8               (Ljava/lang/Runnable;)Ljava/lang/Thread;\n+  #332 = Utf8               LocalVariableTable\n+  #333 = Utf8               r\n+  #334 = Utf8               Ljava/lang/Runnable;\n+  #335 = Utf8               thread\n+  #336 = Utf8               Ljava/lang/Thread;\n+  #337 = Utf8               (Ljava/io/InputStream;I)V\n+  #338 = Utf8               this\n+  #339 = Utf8               Lorg/apache/commons/io/input/ReadAheadInputStream;\n+  #340 = Utf8               bufferSizeInBytes\n+  #341 = Utf8               I\n+  #342 = Utf8               (Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;)V\n+  #343 = Utf8               StackMapTable\n+  #344 = Utf8               Exceptions\n+  #345 = Utf8               iio\n+  #346 = Utf8               Ljava/io/InterruptedIOException;\n+  #347 = Utf8               e\n+  #348 = Utf8               Ljava/lang/InterruptedException;\n+  #349 = Utf8               isSafeToCloseUnderlyingInputStream\n+  #350 = Utf8               needToCloseUnderlyingInputStream\n+  #351 = Utf8               oneByteArray\n+  #352 = Utf8               b\n+  #353 = Utf8               offset\n+  #354 = Utf8               len\n+  #355 = Utf8               arr\n+  #356 = Utf8               skipped\n+  #357 = Utf8               J\n+  #358 = Utf8               n\n+  #359 = Utf8               toSkip\n+  #360 = Utf8               skippedBytes\n+  #361 = Utf8               skippedFromInputStream\n+  #362 = Utf8               temp\n+  #363 = Utf8               lambda$readAsync$1\n+  #364 = Utf8               ([B)V\n+  #365 = Utf8               ex\n+  #366 = Utf8               off\n+  #367 = Utf8               exception\n+  #368 = Utf8               lambda$static$0\n+  #369 = Utf8               <clinit>\n+  #370 = Utf8               SourceFile\n+  #371 = Utf8               ReadAheadInputStream.java\n+  #372 = Utf8               BootstrapMethods\n+  #373 = MethodHandle       6:#374        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #374 = Methodref          #375.#376     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #375 = Class              #377          // java/lang/invoke/LambdaMetafactory\n+  #376 = NameAndType        #378:#379     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #377 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #378 = Utf8               metafactory\n+  #379 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #380 = MethodType         #331          //  (Ljava/lang/Runnable;)Ljava/lang/Thread;\n+  #381 = MethodHandle       6:#382        // REF_invokeStatic org/apache/commons/io/input/ReadAheadInputStream.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;\n+  #382 = Methodref          #26.#383      // org/apache/commons/io/input/ReadAheadInputStream.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;\n+  #383 = NameAndType        #5:#331       // newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;\n+  #384 = MethodType         #38           //  ()V\n+  #385 = MethodHandle       7:#386        // REF_invokeSpecial org/apache/commons/io/input/ReadAheadInputStream.lambda$readAsync$1:([B)V\n+  #386 = Methodref          #26.#387      // org/apache/commons/io/input/ReadAheadInputStream.lambda$readAsync$1:([B)V\n+  #387 = NameAndType        #363:#364     // lambda$readAsync$1:([B)V\n+  #388 = MethodType         #216          //  ()Ljava/lang/Object;\n+  #389 = MethodHandle       6:#390        // REF_invokeStatic org/apache/commons/io/input/ReadAheadInputStream.lambda$static$0:()[B\n+  #390 = Methodref          #26.#391      // org/apache/commons/io/input/ReadAheadInputStream.lambda$static$0:()[B\n+  #391 = NameAndType        #368:#247     // lambda$static$0:()[B\n+  #392 = MethodType         #247          //  ()[B\n+  #393 = Utf8               InnerClasses\n+  #394 = Class              #395          // java/lang/invoke/MethodHandles$Lookup\n+  #395 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #396 = Class              #397          // java/lang/invoke/MethodHandles\n+  #397 = Utf8               java/lang/invoke/MethodHandles\n+  #398 = Utf8               Lookup\n {\n   private static final java.lang.ThreadLocal<byte[]> oneByte;\n     descriptor: Ljava/lang/ThreadLocal;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n-    Signature: #112                         // Ljava/lang/ThreadLocal<[B>;\n+    Signature: #328                         // Ljava/lang/ThreadLocal<[B>;\n \n   private final java.util.concurrent.locks.ReentrantLock stateChangeLock;\n     descriptor: Ljava/util/concurrent/locks/ReentrantLock;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private java.nio.ByteBuffer activeBuffer;\n     descriptor: Ljava/nio/ByteBuffer;\n@@ -475,34 +475,34 @@\n     flags: (0x1018) ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC\n \n   private static java.util.concurrent.ExecutorService newExecutorService();\n     descriptor: ()Ljava/util/concurrent/ExecutorService;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: invokedynamic #2,  0              // InvokeDynamic #0:newThread:()Ljava/util/concurrent/ThreadFactory;\n-         5: invokestatic  #3                  // Method java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\n+         0: invokedynamic #3,  0              // InvokeDynamic #0:newThread:()Ljava/util/concurrent/ThreadFactory;\n+         5: invokestatic  #7                  // Method java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;\n          8: areturn\n       LineNumberTable:\n         line 54: 0\n \n   private static java.lang.Thread newThread(java.lang.Runnable);\n     descriptor: (Ljava/lang/Runnable;)Ljava/lang/Thread;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n-         0: new           #4                  // class java/lang/Thread\n+         0: new           #13                 // class java/lang/Thread\n          3: dup\n          4: aload_0\n-         5: ldc           #5                  // String commons-io-read-ahead\n-         7: invokespecial #6                  // Method java/lang/Thread.\"<init>\":(Ljava/lang/Runnable;Ljava/lang/String;)V\n+         5: ldc           #15                 // String commons-io-read-ahead\n+         7: invokespecial #17                 // Method java/lang/Thread.\"<init>\":(Ljava/lang/Runnable;Ljava/lang/String;)V\n         10: astore_1\n         11: aload_1\n         12: iconst_1\n-        13: invokevirtual #7                  // Method java/lang/Thread.setDaemon:(Z)V\n+        13: invokevirtual #21                 // Method java/lang/Thread.setDaemon:(Z)V\n         16: aload_1\n         17: areturn\n       LineNumberTable:\n         line 64: 0\n         line 65: 11\n         line 66: 16\n       LocalVariableTable:\n@@ -514,17 +514,17 @@\n     descriptor: (Ljava/io/InputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iload_2\n-         3: invokestatic  #8                  // Method newExecutorService:()Ljava/util/concurrent/ExecutorService;\n+         3: invokestatic  #25                 // Method newExecutorService:()Ljava/util/concurrent/ExecutorService;\n          6: iconst_1\n-         7: invokespecial #9                  // Method \"<init>\":(Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n+         7: invokespecial #31                 // Method \"<init>\":(Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n         10: return\n       LineNumberTable:\n         line 122: 0\n         line 123: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/io/input/ReadAheadInputStream;\n@@ -537,15 +537,15 @@\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: aload_3\n          4: iconst_0\n-         5: invokespecial #9                  // Method \"<init>\":(Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n+         5: invokespecial #31                 // Method \"<init>\":(Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n          8: return\n       LineNumberTable:\n         line 134: 0\n         line 135: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/io/input/ReadAheadInputStream;\n@@ -555,75 +555,75 @@\n \n   private org.apache.commons.io.input.ReadAheadInputStream(java.io.InputStream, int, java.util.concurrent.ExecutorService, boolean);\n     descriptor: (Ljava/io/InputStream;ILjava/util/concurrent/ExecutorService;Z)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=5\n          0: aload_0\n-         1: invokespecial #10                 // Method java/io/InputStream.\"<init>\":()V\n+         1: invokespecial #34                 // Method java/io/InputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #11                 // class java/util/concurrent/locks/ReentrantLock\n+         5: new           #39                 // class java/util/concurrent/locks/ReentrantLock\n          8: dup\n-         9: invokespecial #12                 // Method java/util/concurrent/locks/ReentrantLock.\"<init>\":()V\n-        12: putfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+         9: invokespecial #41                 // Method java/util/concurrent/locks/ReentrantLock.\"<init>\":()V\n+        12: putfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n         15: aload_0\n-        16: new           #14                 // class java/util/concurrent/atomic/AtomicBoolean\n+        16: new           #46                 // class java/util/concurrent/atomic/AtomicBoolean\n         19: dup\n         20: iconst_0\n-        21: invokespecial #15                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-        24: putfield      #16                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        21: invokespecial #48                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+        24: putfield      #50                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n         27: aload_0\n         28: aload_0\n-        29: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        32: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;\n-        35: putfield      #18                 // Field asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n+        29: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        32: invokevirtual #54                 // Method java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;\n+        35: putfield      #58                 // Field asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n         38: iload_2\n         39: ifgt          69\n-        42: new           #19                 // class java/lang/IllegalArgumentException\n+        42: new           #62                 // class java/lang/IllegalArgumentException\n         45: dup\n-        46: new           #20                 // class java/lang/StringBuilder\n+        46: new           #64                 // class java/lang/StringBuilder\n         49: dup\n-        50: invokespecial #21                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        53: ldc           #22                 // String bufferSizeInBytes should be greater than 0, but the value is\n-        55: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        50: invokespecial #66                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        53: ldc           #67                 // String bufferSizeInBytes should be greater than 0, but the value is\n+        55: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         58: iload_2\n-        59: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        62: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        65: invokespecial #26                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        59: invokevirtual #73                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        62: invokevirtual #76                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        65: invokespecial #80                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         68: athrow\n         69: aload_0\n         70: aload_3\n-        71: ldc           #27                 // String executorService\n-        73: invokestatic  #28                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        76: checkcast     #29                 // class java/util/concurrent/ExecutorService\n-        79: putfield      #30                 // Field executorService:Ljava/util/concurrent/ExecutorService;\n+        71: ldc           #83                 // String executorService\n+        73: invokestatic  #85                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        76: checkcast     #91                 // class java/util/concurrent/ExecutorService\n+        79: putfield      #93                 // Field executorService:Ljava/util/concurrent/ExecutorService;\n         82: aload_0\n         83: aload_1\n-        84: ldc           #31                 // String inputStream\n-        86: invokestatic  #28                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        89: checkcast     #32                 // class java/io/InputStream\n-        92: putfield      #33                 // Field underlyingInputStream:Ljava/io/InputStream;\n+        84: ldc           #96                 // String inputStream\n+        86: invokestatic  #85                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        89: checkcast     #35                 // class java/io/InputStream\n+        92: putfield      #98                 // Field underlyingInputStream:Ljava/io/InputStream;\n         95: aload_0\n         96: iload         4\n-        98: putfield      #34                 // Field shutdownExecutorService:Z\n+        98: putfield      #102                // Field shutdownExecutorService:Z\n        101: aload_0\n        102: iload_2\n-       103: invokestatic  #35                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-       106: putfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n+       103: invokestatic  #106                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+       106: putfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n        109: aload_0\n        110: iload_2\n-       111: invokestatic  #35                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-       114: putfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+       111: invokestatic  #106                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+       114: putfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n        117: aload_0\n-       118: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-       121: invokevirtual #38                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+       118: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+       121: invokevirtual #119                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n        124: pop\n        125: aload_0\n-       126: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-       129: invokevirtual #38                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+       126: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+       129: invokevirtual #119                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n        132: pop\n        133: return\n       LineNumberTable:\n         line 146: 0\n         line 69: 4\n         line 105: 15\n         line 113: 27\n@@ -652,38 +652,38 @@\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-         4: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n-         7: ldc2_w        #41                 // long 2147483647l\n+         1: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+         4: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+         7: ldc2_w        #128                // long 2147483647l\n         10: aload_0\n-        11: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-        14: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I\n+        11: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        14: invokevirtual #130                // Method java/nio/ByteBuffer.remaining:()I\n         17: i2l\n         18: aload_0\n-        19: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-        22: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I\n+        19: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        22: invokevirtual #130                // Method java/nio/ByteBuffer.remaining:()I\n         25: i2l\n         26: ladd\n-        27: invokestatic  #44                 // Method java/lang/Math.min:(JJ)J\n+        27: invokestatic  #134                // Method java/lang/Math.min:(JJ)J\n         30: l2i\n         31: istore_1\n         32: aload_0\n-        33: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        36: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        33: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        36: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         39: iload_1\n         40: ireturn\n         41: astore_2\n         42: aload_0\n-        43: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        46: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        43: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        46: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         49: aload_2\n         50: athrow\n       Exception table:\n          from    to  target type\n              7    32    41   any\n       LineNumberTable:\n         line 162: 0\n@@ -703,29 +703,29 @@\n \n   private void checkReadException() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #46                 // Field readAborted:Z\n+         1: getfield      #143                // Field readAborted:Z\n          4: ifeq          37\n          7: aload_0\n-         8: getfield      #47                 // Field readException:Ljava/lang/Throwable;\n-        11: instanceof    #48                 // class java/io/IOException\n+         8: getfield      #146                // Field readException:Ljava/lang/Throwable;\n+        11: instanceof    #150                // class java/io/IOException\n         14: ifeq          25\n         17: aload_0\n-        18: getfield      #47                 // Field readException:Ljava/lang/Throwable;\n-        21: checkcast     #48                 // class java/io/IOException\n+        18: getfield      #146                // Field readException:Ljava/lang/Throwable;\n+        21: checkcast     #150                // class java/io/IOException\n         24: athrow\n-        25: new           #48                 // class java/io/IOException\n+        25: new           #150                // class java/io/IOException\n         28: dup\n         29: aload_0\n-        30: getfield      #47                 // Field readException:Ljava/lang/Throwable;\n-        33: invokespecial #49                 // Method java/io/IOException.\"<init>\":(Ljava/lang/Throwable;)V\n+        30: getfield      #146                // Field readException:Ljava/lang/Throwable;\n+        33: invokespecial #152                // Method java/io/IOException.\"<init>\":(Ljava/lang/Throwable;)V\n         36: athrow\n         37: return\n       LineNumberTable:\n         line 172: 0\n         line 173: 7\n         line 174: 17\n         line 176: 25\n@@ -743,82 +743,82 @@\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=1\n          0: iconst_0\n          1: istore_1\n          2: aload_0\n-         3: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-         6: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+         3: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+         6: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n          9: aload_0\n-        10: getfield      #50                 // Field isClosed:Z\n+        10: getfield      #155                // Field isClosed:Z\n         13: ifeq          24\n         16: aload_0\n-        17: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        20: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        17: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        20: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         23: return\n         24: aload_0\n         25: iconst_1\n-        26: putfield      #50                 // Field isClosed:Z\n+        26: putfield      #155                // Field isClosed:Z\n         29: aload_0\n-        30: getfield      #51                 // Field isReading:Z\n+        30: getfield      #158                // Field isReading:Z\n         33: ifne          43\n         36: iconst_1\n         37: istore_1\n         38: aload_0\n         39: iconst_1\n-        40: putfield      #52                 // Field isUnderlyingInputStreamBeingClosed:Z\n+        40: putfield      #161                // Field isUnderlyingInputStreamBeingClosed:Z\n         43: aload_0\n-        44: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        47: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        44: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        47: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         50: goto          63\n         53: astore_2\n         54: aload_0\n-        55: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        58: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        55: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        58: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         61: aload_2\n         62: athrow\n         63: aload_0\n-        64: getfield      #34                 // Field shutdownExecutorService:Z\n+        64: getfield      #102                // Field shutdownExecutorService:Z\n         67: ifeq          147\n         70: aload_0\n-        71: getfield      #30                 // Field executorService:Ljava/util/concurrent/ExecutorService;\n-        74: invokeinterface #53,  1           // InterfaceMethod java/util/concurrent/ExecutorService.shutdownNow:()Ljava/util/List;\n+        71: getfield      #93                 // Field executorService:Ljava/util/concurrent/ExecutorService;\n+        74: invokeinterface #164,  1          // InterfaceMethod java/util/concurrent/ExecutorService.shutdownNow:()Ljava/util/List;\n         79: pop\n         80: aload_0\n-        81: getfield      #30                 // Field executorService:Ljava/util/concurrent/ExecutorService;\n-        84: ldc2_w        #55                 // long 9223372036854775807l\n-        87: getstatic     #57                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;\n-        90: invokeinterface #58,  4           // InterfaceMethod java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z\n+        81: getfield      #93                 // Field executorService:Ljava/util/concurrent/ExecutorService;\n+        84: ldc2_w        #170                // long 9223372036854775807l\n+        87: getstatic     #172                // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;\n+        90: invokeinterface #178,  4          // InterfaceMethod java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z\n         95: pop\n         96: iload_1\n         97: ifeq          147\n        100: aload_0\n-       101: getfield      #33                 // Field underlyingInputStream:Ljava/io/InputStream;\n-       104: invokevirtual #59                 // Method java/io/InputStream.close:()V\n+       101: getfield      #98                 // Field underlyingInputStream:Ljava/io/InputStream;\n+       104: invokevirtual #182                // Method java/io/InputStream.close:()V\n        107: goto          147\n        110: astore_2\n-       111: new           #61                 // class java/io/InterruptedIOException\n+       111: new           #187                // class java/io/InterruptedIOException\n        114: dup\n        115: aload_2\n-       116: invokevirtual #62                 // Method java/lang/InterruptedException.getMessage:()Ljava/lang/String;\n-       119: invokespecial #63                 // Method java/io/InterruptedIOException.\"<init>\":(Ljava/lang/String;)V\n+       116: invokevirtual #189                // Method java/lang/InterruptedException.getMessage:()Ljava/lang/String;\n+       119: invokespecial #192                // Method java/io/InterruptedIOException.\"<init>\":(Ljava/lang/String;)V\n        122: astore_3\n        123: aload_3\n        124: aload_2\n-       125: invokevirtual #64                 // Method java/io/InterruptedIOException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+       125: invokevirtual #193                // Method java/io/InterruptedIOException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n        128: pop\n        129: aload_3\n        130: athrow\n        131: astore        4\n        133: iload_1\n        134: ifeq          144\n        137: aload_0\n-       138: getfield      #33                 // Field underlyingInputStream:Ljava/io/InputStream;\n-       141: invokevirtual #59                 // Method java/io/InputStream.close:()V\n+       138: getfield      #98                 // Field underlyingInputStream:Ljava/io/InputStream;\n+       141: invokevirtual #182                // Method java/io/InputStream.close:()V\n        144: aload         4\n        146: athrow\n        147: return\n       Exception table:\n          from    to  target type\n              9    16    53   any\n             24    43    53   any\n@@ -882,42 +882,42 @@\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=1\n          0: iconst_0\n          1: istore_1\n          2: aload_0\n-         3: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-         6: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+         3: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+         6: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n          9: aload_0\n         10: iconst_0\n-        11: putfield      #51                 // Field isReading:Z\n+        11: putfield      #158                // Field isReading:Z\n         14: aload_0\n-        15: getfield      #50                 // Field isClosed:Z\n+        15: getfield      #155                // Field isClosed:Z\n         18: ifeq          30\n         21: aload_0\n-        22: getfield      #52                 // Field isUnderlyingInputStreamBeingClosed:Z\n+        22: getfield      #161                // Field isUnderlyingInputStreamBeingClosed:Z\n         25: ifne          30\n         28: iconst_1\n         29: istore_1\n         30: aload_0\n-        31: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        34: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        31: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        34: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         37: goto          50\n         40: astore_2\n         41: aload_0\n-        42: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        45: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        42: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        45: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         48: aload_2\n         49: athrow\n         50: iload_1\n         51: ifeq          65\n         54: aload_0\n-        55: getfield      #33                 // Field underlyingInputStream:Ljava/io/InputStream;\n-        58: invokevirtual #59                 // Method java/io/InputStream.close:()V\n+        55: getfield      #98                 // Field underlyingInputStream:Ljava/io/InputStream;\n+        58: invokevirtual #182                // Method java/io/InputStream.close:()V\n         61: goto          65\n         64: astore_2\n         65: return\n       Exception table:\n          from    to  target type\n              9    30    40   any\n             54    61    64   Class java/io/IOException\n@@ -953,23 +953,23 @@\n \n   private boolean isEndOfStream();\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #65                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+         1: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #197                // Method java/nio/ByteBuffer.hasRemaining:()Z\n          7: ifne          31\n         10: aload_0\n-        11: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-        14: invokevirtual #65                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        11: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        14: invokevirtual #197                // Method java/nio/ByteBuffer.hasRemaining:()Z\n         17: ifne          31\n         20: aload_0\n-        21: getfield      #66                 // Field endOfStream:Z\n+        21: getfield      #201                // Field endOfStream:Z\n         24: ifeq          31\n         27: iconst_1\n         28: goto          32\n         31: iconst_0\n         32: ireturn\n       LineNumberTable:\n         line 237: 0\n@@ -983,32 +983,32 @@\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #65                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+         1: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #197                // Method java/nio/ByteBuffer.hasRemaining:()Z\n          7: ifeq          22\n         10: aload_0\n-        11: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-        14: invokevirtual #67                 // Method java/nio/ByteBuffer.get:()B\n+        11: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        14: invokevirtual #204                // Method java/nio/ByteBuffer.get:()B\n         17: sipush        255\n         20: iand\n         21: ireturn\n-        22: getstatic     #68                 // Field oneByte:Ljava/lang/ThreadLocal;\n-        25: invokevirtual #69                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;\n-        28: checkcast     #70                 // class \"[B\"\n+        22: getstatic     #208                // Field oneByte:Ljava/lang/ThreadLocal;\n+        25: invokevirtual #212                // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;\n+        28: checkcast     #217                // class \"[B\"\n         31: astore_1\n         32: aload_0\n         33: aload_1\n         34: iconst_0\n         35: iconst_1\n-        36: invokevirtual #71                 // Method read:([BII)I\n+        36: invokevirtual #219                // Method read:([BII)I\n         39: iconst_m1\n         40: if_icmpne     47\n         43: iconst_m1\n         44: goto          54\n         47: aload_1\n         48: iconst_0\n         49: baload\n@@ -1045,75 +1045,75 @@\n          5: iflt          16\n          8: iload_3\n          9: aload_1\n         10: arraylength\n         11: iload_2\n         12: isub\n         13: if_icmple     24\n-        16: new           #72                 // class java/lang/IndexOutOfBoundsException\n+        16: new           #223                // class java/lang/IndexOutOfBoundsException\n         19: dup\n-        20: invokespecial #73                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        20: invokespecial #225                // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         23: athrow\n         24: iload_3\n         25: ifne          30\n         28: iconst_0\n         29: ireturn\n         30: aload_0\n-        31: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-        34: invokevirtual #65                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        31: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        34: invokevirtual #197                // Method java/nio/ByteBuffer.hasRemaining:()Z\n         37: ifne          119\n         40: aload_0\n-        41: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        44: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+        41: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        44: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n         47: aload_0\n-        48: invokespecial #74                 // Method waitForAsyncReadComplete:()V\n+        48: invokespecial #226                // Method waitForAsyncReadComplete:()V\n         51: aload_0\n-        52: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-        55: invokevirtual #65                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        52: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        55: invokevirtual #197                // Method java/nio/ByteBuffer.hasRemaining:()Z\n         58: ifne          89\n         61: aload_0\n-        62: invokespecial #75                 // Method readAsync:()V\n+        62: invokespecial #229                // Method readAsync:()V\n         65: aload_0\n-        66: invokespecial #74                 // Method waitForAsyncReadComplete:()V\n+        66: invokespecial #226                // Method waitForAsyncReadComplete:()V\n         69: aload_0\n-        70: invokespecial #76                 // Method isEndOfStream:()Z\n+        70: invokespecial #232                // Method isEndOfStream:()Z\n         73: ifeq          89\n         76: iconst_m1\n         77: istore        4\n         79: aload_0\n-        80: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        83: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        80: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        83: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         86: iload         4\n         88: ireturn\n         89: aload_0\n-        90: invokespecial #77                 // Method swapBuffers:()V\n+        90: invokespecial #235                // Method swapBuffers:()V\n         93: aload_0\n-        94: invokespecial #75                 // Method readAsync:()V\n+        94: invokespecial #229                // Method readAsync:()V\n         97: aload_0\n-        98: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       101: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        98: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       101: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n        104: goto          119\n        107: astore        5\n        109: aload_0\n-       110: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       113: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+       110: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       113: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n        116: aload         5\n        118: athrow\n        119: iload_3\n        120: aload_0\n-       121: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-       124: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I\n-       127: invokestatic  #78                 // Method java/lang/Math.min:(II)I\n+       121: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+       124: invokevirtual #130                // Method java/nio/ByteBuffer.remaining:()I\n+       127: invokestatic  #238                // Method java/lang/Math.min:(II)I\n        130: istore_3\n        131: aload_0\n-       132: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n+       132: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n        135: aload_1\n        136: iload_2\n        137: iload_3\n-       138: invokevirtual #79                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+       138: invokevirtual #241                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n        141: pop\n        142: iload_3\n        143: ireturn\n       Exception table:\n          from    to  target type\n             47    79   107   any\n             89    97   107   any\n@@ -1161,60 +1161,60 @@\n \n   private void readAsync() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-         4: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+         1: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+         4: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n          7: aload_0\n-         8: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-        11: invokevirtual #80                 // Method java/nio/ByteBuffer.array:()[B\n+         8: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        11: invokevirtual #244                // Method java/nio/ByteBuffer.array:()[B\n         14: astore_1\n         15: aload_0\n-        16: getfield      #66                 // Field endOfStream:Z\n+        16: getfield      #201                // Field endOfStream:Z\n         19: ifne          29\n         22: aload_0\n-        23: getfield      #81                 // Field readInProgress:Z\n+        23: getfield      #248                // Field readInProgress:Z\n         26: ifeq          37\n         29: aload_0\n-        30: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        33: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        30: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        33: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         36: return\n         37: aload_0\n-        38: invokespecial #82                 // Method checkReadException:()V\n+        38: invokespecial #251                // Method checkReadException:()V\n         41: aload_0\n-        42: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        42: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n         45: iconst_0\n-        46: invokevirtual #83                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+        46: invokevirtual #254                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n         49: pop\n         50: aload_0\n-        51: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-        54: invokevirtual #38                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        51: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        54: invokevirtual #119                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         57: pop\n         58: aload_0\n         59: iconst_1\n-        60: putfield      #81                 // Field readInProgress:Z\n+        60: putfield      #248                // Field readInProgress:Z\n         63: aload_0\n-        64: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        67: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        64: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        67: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         70: goto          83\n         73: astore_2\n         74: aload_0\n-        75: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        78: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        75: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        78: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         81: aload_2\n         82: athrow\n         83: aload_0\n-        84: getfield      #30                 // Field executorService:Ljava/util/concurrent/ExecutorService;\n+        84: getfield      #93                 // Field executorService:Ljava/util/concurrent/ExecutorService;\n         87: aload_0\n         88: aload_1\n-        89: invokedynamic #84,  0             // InvokeDynamic #1:run:(Lorg/apache/commons/io/input/ReadAheadInputStream;[B)Ljava/lang/Runnable;\n-        94: invokeinterface #85,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V\n+        89: invokedynamic #257,  0            // InvokeDynamic #1:run:(Lorg/apache/commons/io/input/ReadAheadInputStream;[B)Ljava/lang/Runnable;\n+        94: invokeinterface #261,  2          // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V\n         99: return\n       Exception table:\n          from    to  target type\n              7    29    73   any\n             37    63    73   any\n       LineNumberTable:\n         line 288: 0\n@@ -1254,27 +1254,27 @@\n \n   private void signalAsyncReadComplete();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-         4: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+         1: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+         4: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n          7: aload_0\n-         8: getfield      #18                 // Field asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n-        11: invokeinterface #86,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V\n+         8: getfield      #58                 // Field asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n+        11: invokeinterface #265,  1          // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V\n         16: aload_0\n-        17: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        20: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        17: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        20: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         23: goto          36\n         26: astore_1\n         27: aload_0\n-        28: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        31: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        28: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        31: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         34: aload_1\n         35: athrow\n         36: return\n       Exception table:\n          from    to  target type\n              7    16    26   any\n       LineNumberTable:\n@@ -1302,46 +1302,46 @@\n          1: lconst_0\n          2: lcmp\n          3: ifgt          8\n          6: lconst_0\n          7: lreturn\n          8: lload_1\n          9: aload_0\n-        10: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-        13: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I\n+        10: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        13: invokevirtual #130                // Method java/nio/ByteBuffer.remaining:()I\n         16: i2l\n         17: lcmp\n         18: ifgt          41\n         21: aload_0\n-        22: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        22: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n         25: lload_1\n         26: l2i\n         27: aload_0\n-        28: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-        31: invokevirtual #87                 // Method java/nio/ByteBuffer.position:()I\n+        28: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        31: invokevirtual #270                // Method java/nio/ByteBuffer.position:()I\n         34: iadd\n-        35: invokevirtual #83                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+        35: invokevirtual #254                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n         38: pop\n         39: lload_1\n         40: lreturn\n         41: aload_0\n-        42: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        45: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+        42: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        45: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n         48: aload_0\n         49: lload_1\n-        50: invokespecial #88                 // Method skipInternal:(J)J\n+        50: invokespecial #272                // Method skipInternal:(J)J\n         53: lstore_3\n         54: aload_0\n-        55: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        58: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        55: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        58: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         61: goto          76\n         64: astore        5\n         66: aload_0\n-        67: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        70: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        67: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        70: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         73: aload         5\n         75: athrow\n         76: lload_3\n         77: lreturn\n       Exception table:\n          from    to  target type\n             48    54    64   any\n@@ -1377,111 +1377,111 @@\n       throws java.io.IOException\n \n   private long skipInternal(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=8, args_size=2\n-         0: getstatic     #89                 // Field $assertionsDisabled:Z\n+         0: getstatic     #276                // Field $assertionsDisabled:Z\n          3: ifne          24\n          6: aload_0\n-         7: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        10: invokevirtual #90                 // Method java/util/concurrent/locks/ReentrantLock.isLocked:()Z\n+         7: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        10: invokevirtual #279                // Method java/util/concurrent/locks/ReentrantLock.isLocked:()Z\n         13: ifne          24\n-        16: new           #91                 // class java/lang/AssertionError\n+        16: new           #282                // class java/lang/AssertionError\n         19: dup\n-        20: invokespecial #92                 // Method java/lang/AssertionError.\"<init>\":()V\n+        20: invokespecial #284                // Method java/lang/AssertionError.\"<init>\":()V\n         23: athrow\n         24: aload_0\n-        25: invokespecial #74                 // Method waitForAsyncReadComplete:()V\n+        25: invokespecial #226                // Method waitForAsyncReadComplete:()V\n         28: aload_0\n-        29: invokespecial #76                 // Method isEndOfStream:()Z\n+        29: invokespecial #232                // Method isEndOfStream:()Z\n         32: ifeq          37\n         35: lconst_0\n         36: lreturn\n         37: aload_0\n-        38: invokevirtual #93                 // Method available:()I\n+        38: invokevirtual #285                // Method available:()I\n         41: i2l\n         42: lload_1\n         43: lcmp\n         44: iflt          122\n         47: lload_1\n         48: l2i\n         49: istore_3\n         50: iload_3\n         51: aload_0\n-        52: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-        55: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I\n+        52: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        55: invokevirtual #130                // Method java/nio/ByteBuffer.remaining:()I\n         58: isub\n         59: istore_3\n-        60: getstatic     #89                 // Field $assertionsDisabled:Z\n+        60: getstatic     #276                // Field $assertionsDisabled:Z\n         63: ifne          78\n         66: iload_3\n         67: ifgt          78\n-        70: new           #91                 // class java/lang/AssertionError\n+        70: new           #282                // class java/lang/AssertionError\n         73: dup\n-        74: invokespecial #92                 // Method java/lang/AssertionError.\"<init>\":()V\n+        74: invokespecial #284                // Method java/lang/AssertionError.\"<init>\":()V\n         77: athrow\n         78: aload_0\n-        79: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        79: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n         82: iconst_0\n-        83: invokevirtual #83                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+        83: invokevirtual #254                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n         86: pop\n         87: aload_0\n-        88: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-        91: invokevirtual #38                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        88: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+        91: invokevirtual #119                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         94: pop\n         95: aload_0\n-        96: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        96: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n         99: iload_3\n        100: aload_0\n-       101: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-       104: invokevirtual #87                 // Method java/nio/ByteBuffer.position:()I\n+       101: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+       104: invokevirtual #270                // Method java/nio/ByteBuffer.position:()I\n        107: iadd\n-       108: invokevirtual #83                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+       108: invokevirtual #254                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n        111: pop\n        112: aload_0\n-       113: invokespecial #77                 // Method swapBuffers:()V\n+       113: invokespecial #235                // Method swapBuffers:()V\n        116: aload_0\n-       117: invokespecial #75                 // Method readAsync:()V\n+       117: invokespecial #229                // Method readAsync:()V\n        120: lload_1\n        121: lreturn\n        122: aload_0\n-       123: invokevirtual #93                 // Method available:()I\n+       123: invokevirtual #285                // Method available:()I\n        126: istore_3\n        127: lload_1\n        128: iload_3\n        129: i2l\n        130: lsub\n        131: lstore        4\n        133: aload_0\n-       134: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n+       134: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n        137: iconst_0\n-       138: invokevirtual #83                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+       138: invokevirtual #254                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n        141: pop\n        142: aload_0\n-       143: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n-       146: invokevirtual #38                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+       143: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n+       146: invokevirtual #119                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n        149: pop\n        150: aload_0\n-       151: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+       151: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n        154: iconst_0\n-       155: invokevirtual #83                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+       155: invokevirtual #254                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n        158: pop\n        159: aload_0\n-       160: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-       163: invokevirtual #38                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+       160: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+       163: invokevirtual #119                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n        166: pop\n        167: aload_0\n-       168: getfield      #33                 // Field underlyingInputStream:Ljava/io/InputStream;\n+       168: getfield      #98                 // Field underlyingInputStream:Ljava/io/InputStream;\n        171: lload         4\n-       173: invokevirtual #94                 // Method java/io/InputStream.skip:(J)J\n+       173: invokevirtual #288                // Method java/io/InputStream.skip:(J)J\n        176: lstore        6\n        178: aload_0\n-       179: invokespecial #75                 // Method readAsync:()V\n+       179: invokespecial #229                // Method readAsync:()V\n        182: iload_3\n        183: i2l\n        184: lload         6\n        186: ladd\n        187: lreturn\n       LineNumberTable:\n         line 403: 0\n@@ -1528,23 +1528,23 @@\n \n   private void swapBuffers();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n+         1: getfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n          4: astore_1\n          5: aload_0\n          6: aload_0\n-         7: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n-        10: putfield      #36                 // Field activeBuffer:Ljava/nio/ByteBuffer;\n+         7: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        10: putfield      #112                // Field activeBuffer:Ljava/nio/ByteBuffer;\n         13: aload_0\n         14: aload_1\n-        15: putfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+        15: putfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n         18: return\n       LineNumberTable:\n         line 437: 0\n         line 438: 5\n         line 439: 13\n         line 440: 18\n       LocalVariableTable:\n@@ -1554,60 +1554,60 @@\n \n   private void waitForAsyncReadComplete() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=4, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-         4: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+         1: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+         4: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n          7: aload_0\n-         8: getfield      #16                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         8: getfield      #50                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n         11: iconst_1\n-        12: invokevirtual #95                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+        12: invokevirtual #291                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n         15: aload_0\n-        16: getfield      #81                 // Field readInProgress:Z\n+        16: getfield      #248                // Field readInProgress:Z\n         19: ifeq          34\n         22: aload_0\n-        23: getfield      #18                 // Field asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n-        26: invokeinterface #96,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V\n+        23: getfield      #58                 // Field asyncReadComplete:Ljava/util/concurrent/locks/Condition;\n+        26: invokeinterface #294,  1          // InterfaceMethod java/util/concurrent/locks/Condition.await:()V\n         31: goto          15\n         34: aload_0\n-        35: getfield      #16                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        35: getfield      #50                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n         38: iconst_0\n-        39: invokevirtual #95                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+        39: invokevirtual #291                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n         42: aload_0\n-        43: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        46: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        43: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        46: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         49: goto          91\n         52: astore_1\n-        53: new           #61                 // class java/io/InterruptedIOException\n+        53: new           #187                // class java/io/InterruptedIOException\n         56: dup\n         57: aload_1\n-        58: invokevirtual #62                 // Method java/lang/InterruptedException.getMessage:()Ljava/lang/String;\n-        61: invokespecial #63                 // Method java/io/InterruptedIOException.\"<init>\":(Ljava/lang/String;)V\n+        58: invokevirtual #189                // Method java/lang/InterruptedException.getMessage:()Ljava/lang/String;\n+        61: invokespecial #192                // Method java/io/InterruptedIOException.\"<init>\":(Ljava/lang/String;)V\n         64: astore_2\n         65: aload_2\n         66: aload_1\n-        67: invokevirtual #64                 // Method java/io/InterruptedIOException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+        67: invokevirtual #193                // Method java/io/InterruptedIOException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n         70: pop\n         71: aload_2\n         72: athrow\n         73: astore_3\n         74: aload_0\n-        75: getfield      #16                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        75: getfield      #50                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n         78: iconst_0\n-        79: invokevirtual #95                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+        79: invokevirtual #291                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n         82: aload_0\n-        83: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        86: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        83: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        86: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         89: aload_3\n         90: athrow\n         91: aload_0\n-        92: invokespecial #82                 // Method checkReadException:()V\n+        92: invokespecial #251                // Method checkReadException:()V\n         95: return\n       Exception table:\n          from    to  target type\n              7    34    52   Class java/lang/InterruptedException\n              7    34    73   any\n             52    74    73   any\n       LineNumberTable:\n@@ -1645,54 +1645,54 @@\n \n   private void lambda$readAsync$1(byte[]);\n     descriptor: ([B)V\n     flags: (0x1002) ACC_PRIVATE, ACC_SYNTHETIC\n     Code:\n       stack=4, locals=10, args_size=2\n          0: aload_0\n-         1: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-         4: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+         1: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+         4: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n          7: aload_0\n-         8: getfield      #50                 // Field isClosed:Z\n+         8: getfield      #155                // Field isClosed:Z\n         11: ifeq          27\n         14: aload_0\n         15: iconst_0\n-        16: putfield      #81                 // Field readInProgress:Z\n+        16: putfield      #248                // Field readInProgress:Z\n         19: aload_0\n-        20: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        23: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        20: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        23: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         26: return\n         27: aload_0\n         28: iconst_1\n-        29: putfield      #51                 // Field isReading:Z\n+        29: putfield      #158                // Field isReading:Z\n         32: aload_0\n-        33: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        36: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        33: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        36: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         39: goto          52\n         42: astore_2\n         43: aload_0\n-        44: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-        47: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+        44: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+        47: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n         50: aload_2\n         51: athrow\n         52: iconst_0\n         53: istore_2\n         54: iconst_0\n         55: istore_3\n         56: aload_1\n         57: arraylength\n         58: istore        4\n         60: aconst_null\n         61: astore        5\n         63: aload_0\n-        64: getfield      #33                 // Field underlyingInputStream:Ljava/io/InputStream;\n+        64: getfield      #98                 // Field underlyingInputStream:Ljava/io/InputStream;\n         67: aload_1\n         68: iload_3\n         69: iload         4\n-        71: invokevirtual #97                 // Method java/io/InputStream.read:([BII)I\n+        71: invokevirtual #297                // Method java/io/InputStream.read:([BII)I\n         74: istore_2\n         75: iload_2\n         76: ifgt          82\n         79: goto          107\n         82: iload_3\n         83: iload_2\n         84: iadd\n@@ -1700,155 +1700,155 @@\n         86: iload         4\n         88: iload_2\n         89: isub\n         90: istore        4\n         92: iload         4\n         94: ifle          107\n         97: aload_0\n-        98: getfield      #16                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n-       101: invokevirtual #98                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+        98: getfield      #50                 // Field isWaiting:Ljava/util/concurrent/atomic/AtomicBoolean;\n+       101: invokevirtual #298                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n        104: ifeq          63\n        107: aload_0\n-       108: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       111: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+       108: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       111: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n        114: aload_0\n-       115: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+       115: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n        118: iload_3\n-       119: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       119: invokevirtual #300                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n        122: pop\n        123: iload_2\n        124: iflt          135\n        127: aload         5\n-       129: instanceof    #100                // class java/io/EOFException\n+       129: instanceof    #303                // class java/io/EOFException\n        132: ifeq          143\n        135: aload_0\n        136: iconst_1\n-       137: putfield      #66                 // Field endOfStream:Z\n+       137: putfield      #201                // Field endOfStream:Z\n        140: goto          159\n        143: aload         5\n        145: ifnull        159\n        148: aload_0\n        149: iconst_1\n-       150: putfield      #46                 // Field readAborted:Z\n+       150: putfield      #143                // Field readAborted:Z\n        153: aload_0\n        154: aload         5\n-       156: putfield      #47                 // Field readException:Ljava/lang/Throwable;\n+       156: putfield      #146                // Field readException:Ljava/lang/Throwable;\n        159: aload_0\n        160: iconst_0\n-       161: putfield      #81                 // Field readInProgress:Z\n+       161: putfield      #248                // Field readInProgress:Z\n        164: aload_0\n-       165: invokespecial #101                // Method signalAsyncReadComplete:()V\n+       165: invokespecial #305                // Method signalAsyncReadComplete:()V\n        168: aload_0\n-       169: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       172: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+       169: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       172: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n        175: goto          190\n        178: astore        6\n        180: aload_0\n-       181: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       184: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+       181: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       184: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n        187: aload         6\n        189: athrow\n        190: aload_0\n-       191: invokespecial #102                // Method closeUnderlyingInputStreamIfNecessary:()V\n+       191: invokespecial #308                // Method closeUnderlyingInputStreamIfNecessary:()V\n        194: goto          399\n        197: astore        6\n        199: aload         6\n        201: astore        5\n        203: aload         6\n-       205: instanceof    #104                // class java/lang/Error\n+       205: instanceof    #313                // class java/lang/Error\n        208: ifeq          217\n        211: aload         6\n-       213: checkcast     #104                // class java/lang/Error\n+       213: checkcast     #313                // class java/lang/Error\n        216: athrow\n        217: aload_0\n-       218: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       221: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+       218: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       221: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n        224: aload_0\n-       225: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+       225: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n        228: iload_3\n-       229: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       229: invokevirtual #300                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n        232: pop\n        233: iload_2\n        234: iflt          245\n        237: aload         5\n-       239: instanceof    #100                // class java/io/EOFException\n+       239: instanceof    #303                // class java/io/EOFException\n        242: ifeq          253\n        245: aload_0\n        246: iconst_1\n-       247: putfield      #66                 // Field endOfStream:Z\n+       247: putfield      #201                // Field endOfStream:Z\n        250: goto          269\n        253: aload         5\n        255: ifnull        269\n        258: aload_0\n        259: iconst_1\n-       260: putfield      #46                 // Field readAborted:Z\n+       260: putfield      #143                // Field readAborted:Z\n        263: aload_0\n        264: aload         5\n-       266: putfield      #47                 // Field readException:Ljava/lang/Throwable;\n+       266: putfield      #146                // Field readException:Ljava/lang/Throwable;\n        269: aload_0\n        270: iconst_0\n-       271: putfield      #81                 // Field readInProgress:Z\n+       271: putfield      #248                // Field readInProgress:Z\n        274: aload_0\n-       275: invokespecial #101                // Method signalAsyncReadComplete:()V\n+       275: invokespecial #305                // Method signalAsyncReadComplete:()V\n        278: aload_0\n-       279: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       282: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+       279: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       282: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n        285: goto          300\n        288: astore        7\n        290: aload_0\n-       291: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       294: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+       291: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       294: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n        297: aload         7\n        299: athrow\n        300: aload_0\n-       301: invokespecial #102                // Method closeUnderlyingInputStreamIfNecessary:()V\n+       301: invokespecial #308                // Method closeUnderlyingInputStreamIfNecessary:()V\n        304: goto          399\n        307: astore        8\n        309: aload_0\n-       310: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       313: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n+       310: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       313: invokevirtual #123                // Method java/util/concurrent/locks/ReentrantLock.lock:()V\n        316: aload_0\n-       317: getfield      #37                 // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n+       317: getfield      #116                // Field readAheadBuffer:Ljava/nio/ByteBuffer;\n        320: iload_3\n-       321: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       321: invokevirtual #300                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n        324: pop\n        325: iload_2\n        326: iflt          337\n        329: aload         5\n-       331: instanceof    #100                // class java/io/EOFException\n+       331: instanceof    #303                // class java/io/EOFException\n        334: ifeq          345\n        337: aload_0\n        338: iconst_1\n-       339: putfield      #66                 // Field endOfStream:Z\n+       339: putfield      #201                // Field endOfStream:Z\n        342: goto          361\n        345: aload         5\n        347: ifnull        361\n        350: aload_0\n        351: iconst_1\n-       352: putfield      #46                 // Field readAborted:Z\n+       352: putfield      #143                // Field readAborted:Z\n        355: aload_0\n        356: aload         5\n-       358: putfield      #47                 // Field readException:Ljava/lang/Throwable;\n+       358: putfield      #146                // Field readException:Ljava/lang/Throwable;\n        361: aload_0\n        362: iconst_0\n-       363: putfield      #81                 // Field readInProgress:Z\n+       363: putfield      #248                // Field readInProgress:Z\n        366: aload_0\n-       367: invokespecial #101                // Method signalAsyncReadComplete:()V\n+       367: invokespecial #305                // Method signalAsyncReadComplete:()V\n        370: aload_0\n-       371: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       374: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+       371: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       374: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n        377: goto          392\n        380: astore        9\n        382: aload_0\n-       383: getfield      #13                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n-       386: invokevirtual #45                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n+       383: getfield      #42                 // Field stateChangeLock:Ljava/util/concurrent/locks/ReentrantLock;\n+       386: invokevirtual #140                // Method java/util/concurrent/locks/ReentrantLock.unlock:()V\n        389: aload         9\n        391: athrow\n        392: aload_0\n-       393: invokespecial #102                // Method closeUnderlyingInputStreamIfNecessary:()V\n+       393: invokespecial #308                // Method closeUnderlyingInputStreamIfNecessary:()V\n        396: aload         8\n        398: athrow\n        399: return\n       Exception table:\n          from    to  target type\n              7    19    42   any\n             27    32    42   any\n@@ -1992,45 +1992,45 @@\n         line 46: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: ldc           #105                // class org/apache/commons/io/input/ReadAheadInputStream\n-         2: invokevirtual #106                // Method java/lang/Class.desiredAssertionStatus:()Z\n+         0: ldc           #26                 // class org/apache/commons/io/input/ReadAheadInputStream\n+         2: invokevirtual #315                // Method java/lang/Class.desiredAssertionStatus:()Z\n          5: ifne          12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n-        13: putstatic     #89                 // Field $assertionsDisabled:Z\n-        16: invokedynamic #107,  0            // InvokeDynamic #2:get:()Ljava/util/function/Supplier;\n-        21: invokestatic  #108                // Method java/lang/ThreadLocal.withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;\n-        24: putstatic     #68                 // Field oneByte:Ljava/lang/ThreadLocal;\n+        13: putstatic     #276                // Field $assertionsDisabled:Z\n+        16: invokedynamic #320,  0            // InvokeDynamic #2:get:()Ljava/util/function/Supplier;\n+        21: invokestatic  #323                // Method java/lang/ThreadLocal.withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;\n+        24: putstatic     #208                // Field oneByte:Ljava/lang/ThreadLocal;\n         27: return\n       LineNumberTable:\n         line 44: 0\n         line 46: 16\n       StackMapTable: number_of_entries = 2\n         frame_type = 12 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n }\n SourceFile: \"ReadAheadInputStream.java\"\n-InnerClasses:\n-  public static final #393= #392 of #396; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #207 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #373 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #208 (Ljava/lang/Runnable;)Ljava/lang/Thread;\n-      #209 REF_invokeStatic org/apache/commons/io/input/ReadAheadInputStream.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;\n-      #208 (Ljava/lang/Runnable;)Ljava/lang/Thread;\n-  1: #207 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #380 (Ljava/lang/Runnable;)Ljava/lang/Thread;\n+      #381 REF_invokeStatic org/apache/commons/io/input/ReadAheadInputStream.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;\n+      #380 (Ljava/lang/Runnable;)Ljava/lang/Thread;\n+  1: #373 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #287 ()V\n-      #288 REF_invokeSpecial org/apache/commons/io/input/ReadAheadInputStream.lambda$readAsync$1:([B)V\n-      #287 ()V\n-  2: #207 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #384 ()V\n+      #385 REF_invokeSpecial org/apache/commons/io/input/ReadAheadInputStream.lambda$readAsync$1:([B)V\n+      #384 ()V\n+  2: #373 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #312 ()Ljava/lang/Object;\n-      #313 REF_invokeStatic org/apache/commons/io/input/ReadAheadInputStream.lambda$static$0:()[B\n-      #314 ()[B\n+      #388 ()Ljava/lang/Object;\n+      #389 REF_invokeStatic org/apache/commons/io/input/ReadAheadInputStream.lambda$static$0:()[B\n+      #392 ()[B\n+InnerClasses:\n+  public static final #398= #394 of #396; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
