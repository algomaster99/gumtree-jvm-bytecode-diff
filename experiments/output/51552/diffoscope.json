{"diffoscope-json-version": 1, "source1": "first/BlockLZ4CompressorOutputStream.class", "source2": "second/BlockLZ4CompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -171,99 +171,95 @@\n             pairLengths += p.length();\n             if (pairLengths >= 65536) {\n                 break;\n             }\n         }\n         for (int size = this.pairs.size(), i = pairsToKeep; i < size; ++i) {\n             final BlockLZ4CompressorOutputStream.Pair p2 = (BlockLZ4CompressorOutputStream.Pair)this.pairs.peekFirst();\n-            if (!BlockLZ4CompressorOutputStream.Pair.access$300(p2)) {\n+            if (!BlockLZ4CompressorOutputStream.Pair.access$0(p2)) {\n                 break;\n             }\n             this.pairs.removeFirst();\n         }\n     }\n     \n     private void writeFinalLiteralBlock() throws IOException {\n         this.rewriteLastPairs();\n         for (final BlockLZ4CompressorOutputStream.Pair p : this.pairs) {\n-            if (!BlockLZ4CompressorOutputStream.Pair.access$300(p)) {\n+            if (!BlockLZ4CompressorOutputStream.Pair.access$0(p)) {\n                 p.writeTo(this.os);\n             }\n         }\n         this.pairs.clear();\n     }\n     \n     private void writeWritablePairs(final int lengthOfBlocksAfterLastPair) throws IOException {\n         int unwrittenLength = lengthOfBlocksAfterLastPair;\n         final Iterator<BlockLZ4CompressorOutputStream.Pair> it = this.pairs.descendingIterator();\n         while (it.hasNext()) {\n             final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)it.next();\n-            if (BlockLZ4CompressorOutputStream.Pair.access$300(p)) {\n+            if (BlockLZ4CompressorOutputStream.Pair.access$0(p)) {\n                 break;\n             }\n             unwrittenLength += p.length();\n         }\n-        final Iterator<BlockLZ4CompressorOutputStream.Pair> iterator = this.pairs.iterator();\n-        while (iterator.hasNext()) {\n-            final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)iterator.next();\n-            if (BlockLZ4CompressorOutputStream.Pair.access$300(p)) {\n+        for (final BlockLZ4CompressorOutputStream.Pair p2 : this.pairs) {\n+            if (BlockLZ4CompressorOutputStream.Pair.access$0(p2)) {\n                 continue;\n             }\n-            unwrittenLength -= p.length();\n-            if (!p.canBeWritten(unwrittenLength)) {\n+            unwrittenLength -= p2.length();\n+            if (!p2.canBeWritten(unwrittenLength)) {\n                 break;\n             }\n-            p.writeTo(this.os);\n+            p2.writeTo(this.os);\n         }\n     }\n     \n     private void rewriteLastPairs() {\n         final LinkedList<BlockLZ4CompressorOutputStream.Pair> lastPairs = new LinkedList<BlockLZ4CompressorOutputStream.Pair>();\n         final LinkedList<Integer> pairLength = new LinkedList<Integer>();\n         int offset = 0;\n         final Iterator<BlockLZ4CompressorOutputStream.Pair> it = this.pairs.descendingIterator();\n         while (it.hasNext()) {\n             final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)it.next();\n-            if (BlockLZ4CompressorOutputStream.Pair.access$300(p)) {\n+            if (BlockLZ4CompressorOutputStream.Pair.access$0(p)) {\n                 break;\n             }\n             final int len = p.length();\n             pairLength.addFirst(Integer.valueOf(len));\n             lastPairs.addFirst(p);\n             offset += len;\n             if (offset >= 12) {\n                 break;\n             }\n         }\n-        final Iterator<Object> iterator = lastPairs.iterator();\n-        while (iterator.hasNext()) {\n-            final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)iterator.next();\n-            this.pairs.remove(p);\n+        for (final BlockLZ4CompressorOutputStream.Pair p2 : lastPairs) {\n+            this.pairs.remove(p2);\n         }\n         final int lastPairsSize = lastPairs.size();\n         int toExpand = 0;\n         for (int i = 1; i < lastPairsSize; ++i) {\n             toExpand += Integer.valueOf(pairLength.get(i));\n         }\n         final BlockLZ4CompressorOutputStream.Pair replacement = new BlockLZ4CompressorOutputStream.Pair();\n         if (toExpand > 0) {\n-            BlockLZ4CompressorOutputStream.Pair.access$400(replacement, this.expand(toExpand, toExpand));\n+            BlockLZ4CompressorOutputStream.Pair.access$1(replacement, this.expand(toExpand, toExpand));\n         }\n         final BlockLZ4CompressorOutputStream.Pair splitCandidate = (BlockLZ4CompressorOutputStream.Pair)lastPairs.get(0);\n         final int stillNeeded = 12 - toExpand;\n-        final int brLen = splitCandidate.hasBackReference() ? BlockLZ4CompressorOutputStream.Pair.access$500(splitCandidate) : 0;\n+        final int brLen = splitCandidate.hasBackReference() ? BlockLZ4CompressorOutputStream.Pair.access$2(splitCandidate) : 0;\n         if (splitCandidate.hasBackReference() && brLen >= 4 + stillNeeded) {\n-            BlockLZ4CompressorOutputStream.Pair.access$400(replacement, this.expand(toExpand + stillNeeded, stillNeeded));\n-            this.pairs.add(BlockLZ4CompressorOutputStream.Pair.access$600(splitCandidate, brLen - stillNeeded));\n+            BlockLZ4CompressorOutputStream.Pair.access$1(replacement, this.expand(toExpand + stillNeeded, stillNeeded));\n+            this.pairs.add(BlockLZ4CompressorOutputStream.Pair.access$3(splitCandidate, brLen - stillNeeded));\n         }\n         else {\n             if (splitCandidate.hasBackReference()) {\n-                BlockLZ4CompressorOutputStream.Pair.access$400(replacement, this.expand(toExpand + brLen, brLen));\n+                BlockLZ4CompressorOutputStream.Pair.access$1(replacement, this.expand(toExpand + brLen, brLen));\n             }\n-            BlockLZ4CompressorOutputStream.Pair.access$700(splitCandidate, replacement);\n+            BlockLZ4CompressorOutputStream.Pair.access$4(splitCandidate, replacement);\n         }\n         this.pairs.add(replacement);\n     }\n     \n     public static Parameters.Builder createParameterBuilder() {\n         final int maxLen = 65535;\n         return Parameters.builder(65536).withMinBackReferenceLength(4).withMaxBackReferenceLength(maxLen).withMaxOffset(maxLen).withMaxLiteralLength(maxLen);\n"}]}
