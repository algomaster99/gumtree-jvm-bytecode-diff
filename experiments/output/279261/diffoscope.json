{"diffoscope-json-version": 1, "source1": "first/X000A_NTFS.class", "source2": "second/X000A_NTFS.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,47 +18,47 @@\n     \n     public X000A_NTFS() {\n         this.modifyTime = ZipEightByteInteger.ZERO;\n         this.accessTime = ZipEightByteInteger.ZERO;\n         this.createTime = ZipEightByteInteger.ZERO;\n     }\n     \n-    private static ZipEightByteInteger dateToZip(final Date d) {\n-        if (d == null) {\n+    private static ZipEightByteInteger dateToZip(final Date date) {\n+        if (date == null) {\n             return null;\n         }\n-        return new ZipEightByteInteger(TimeUtils.toNtfsTime(d));\n+        return new ZipEightByteInteger(TimeUtils.toNtfsTime(date));\n     }\n     \n-    private static ZipEightByteInteger fileTimeToZip(final FileTime time) {\n-        if (time == null) {\n+    private static ZipEightByteInteger fileTimeToZip(final FileTime fileTime) {\n+        if (fileTime == null) {\n             return null;\n         }\n-        return new ZipEightByteInteger(TimeUtils.toNtfsTime(time));\n+        return new ZipEightByteInteger(TimeUtils.toNtfsTime(fileTime));\n     }\n     \n-    private static Date zipToDate(final ZipEightByteInteger z) {\n-        if (z == null || ZipEightByteInteger.ZERO.equals((Object)z)) {\n+    private static Date zipToDate(final ZipEightByteInteger zipEightByteInteger) {\n+        if (zipEightByteInteger == null || ZipEightByteInteger.ZERO.equals((Object)zipEightByteInteger)) {\n             return null;\n         }\n-        return TimeUtils.ntfsTimeToDate(z.getLongValue());\n+        return TimeUtils.ntfsTimeToDate(zipEightByteInteger.getLongValue());\n     }\n     \n-    private static FileTime zipToFileTime(final ZipEightByteInteger z) {\n-        if (z == null || ZipEightByteInteger.ZERO.equals((Object)z)) {\n+    private static FileTime zipToFileTime(final ZipEightByteInteger zipEightByteInteger) {\n+        if (zipEightByteInteger == null || ZipEightByteInteger.ZERO.equals((Object)zipEightByteInteger)) {\n             return null;\n         }\n-        return TimeUtils.ntfsTimeToFileTime(z.getLongValue());\n+        return TimeUtils.ntfsTimeToFileTime(zipEightByteInteger.getLongValue());\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n         if (o instanceof X000A_NTFS) {\n-            final X000A_NTFS xf = (X000A_NTFS)o;\n-            return Objects.equals(this.modifyTime, xf.modifyTime) && Objects.equals(this.accessTime, xf.accessTime) && Objects.equals(this.createTime, xf.createTime);\n+            final X000A_NTFS x000A_NTFS = (X000A_NTFS)o;\n+            return Objects.equals(this.modifyTime, x000A_NTFS.modifyTime) && Objects.equals(this.accessTime, x000A_NTFS.accessTime) && Objects.equals(this.createTime, x000A_NTFS.createTime);\n         }\n         return false;\n     }\n     \n     public FileTime getAccessFileTime() {\n         return zipToFileTime(this.accessTime);\n     }\n@@ -92,26 +92,26 @@\n     }\n     \n     public ZipShort getHeaderId() {\n         return X000A_NTFS.HEADER_ID;\n     }\n     \n     public byte[] getLocalFileDataData() {\n-        final byte[] data = new byte[this.getLocalFileDataLength().getValue()];\n-        int pos = 4;\n-        System.arraycopy(X000A_NTFS.TIME_ATTR_TAG.getBytes(), 0, data, pos, 2);\n-        pos += 2;\n-        System.arraycopy(X000A_NTFS.TIME_ATTR_SIZE.getBytes(), 0, data, pos, 2);\n-        pos += 2;\n-        System.arraycopy(this.modifyTime.getBytes(), 0, data, pos, 8);\n-        pos += 8;\n-        System.arraycopy(this.accessTime.getBytes(), 0, data, pos, 8);\n-        pos += 8;\n-        System.arraycopy(this.createTime.getBytes(), 0, data, pos, 8);\n-        return data;\n+        final byte[] array = new byte[this.getLocalFileDataLength().getValue()];\n+        int n = 4;\n+        System.arraycopy(X000A_NTFS.TIME_ATTR_TAG.getBytes(), 0, array, n, 2);\n+        n += 2;\n+        System.arraycopy(X000A_NTFS.TIME_ATTR_SIZE.getBytes(), 0, array, n, 2);\n+        n += 2;\n+        System.arraycopy(this.modifyTime.getBytes(), 0, array, n, 8);\n+        n += 8;\n+        System.arraycopy(this.accessTime.getBytes(), 0, array, n, 8);\n+        n += 8;\n+        System.arraycopy(this.createTime.getBytes(), 0, array, n, 8);\n+        return array;\n     }\n     \n     public ZipShort getLocalFileDataLength() {\n         return new ZipShort(32);\n     }\n     \n     public FileTime getModifyFileTime() {\n@@ -124,106 +124,101 @@\n     \n     public ZipEightByteInteger getModifyTime() {\n         return this.modifyTime;\n     }\n     \n     @Override\n     public int hashCode() {\n-        int hc = -123;\n+        int n = -123;\n         if (this.modifyTime != null) {\n-            hc ^= this.modifyTime.hashCode();\n+            n ^= this.modifyTime.hashCode();\n         }\n         if (this.accessTime != null) {\n-            hc ^= Integer.rotateLeft(this.accessTime.hashCode(), 11);\n+            n ^= Integer.rotateLeft(this.accessTime.hashCode(), 11);\n         }\n         if (this.createTime != null) {\n-            hc ^= Integer.rotateLeft(this.createTime.hashCode(), 22);\n+            n ^= Integer.rotateLeft(this.createTime.hashCode(), 22);\n         }\n-        return hc;\n+        return n;\n     }\n     \n-    public void parseFromCentralDirectoryData(final byte[] buffer, final int offset, final int length) throws ZipException {\n+    public void parseFromCentralDirectoryData(final byte[] array, final int n, final int n2) throws ZipException {\n         this.reset();\n-        this.parseFromLocalFileData(buffer, offset, length);\n+        this.parseFromLocalFileData(array, n, n2);\n     }\n     \n-    public void parseFromLocalFileData(final byte[] data, int offset, final int length) throws ZipException {\n-        ZipShort size;\n-        for (final int len = offset + length, offset += 4; offset + 4 <= len; offset += 2 + size.getValue()) {\n-            final ZipShort tag = new ZipShort(data, offset);\n-            offset += 2;\n-            if (tag.equals((Object)X000A_NTFS.TIME_ATTR_TAG)) {\n-                this.readTimeAttr(data, offset, len - offset);\n+    public void parseFromLocalFileData(final byte[] array, int n, final int n2) throws ZipException {\n+        for (final int n3 = n + n2, n += 4; n + 4 <= n3; n += 2 + new ZipShort(array, n).getValue()) {\n+            final ZipShort zipShort = new ZipShort(array, n);\n+            n += 2;\n+            if (zipShort.equals((Object)X000A_NTFS.TIME_ATTR_TAG)) {\n+                this.readTimeAttr(array, n, n3 - n);\n                 break;\n             }\n-            size = new ZipShort(data, offset);\n         }\n     }\n     \n-    private void readTimeAttr(final byte[] data, int offset, final int length) {\n-        if (length >= 26) {\n-            final ZipShort tagValueLength = new ZipShort(data, offset);\n-            if (X000A_NTFS.TIME_ATTR_SIZE.equals((Object)tagValueLength)) {\n-                offset += 2;\n-                this.modifyTime = new ZipEightByteInteger(data, offset);\n-                offset += 8;\n-                this.accessTime = new ZipEightByteInteger(data, offset);\n-                offset += 8;\n-                this.createTime = new ZipEightByteInteger(data, offset);\n-            }\n+    private void readTimeAttr(final byte[] array, int n, final int n2) {\n+        if (n2 >= 26 && X000A_NTFS.TIME_ATTR_SIZE.equals((Object)new ZipShort(array, n))) {\n+            n += 2;\n+            this.modifyTime = new ZipEightByteInteger(array, n);\n+            n += 8;\n+            this.accessTime = new ZipEightByteInteger(array, n);\n+            n += 8;\n+            this.createTime = new ZipEightByteInteger(array, n);\n         }\n     }\n     \n     private void reset() {\n         this.modifyTime = ZipEightByteInteger.ZERO;\n         this.accessTime = ZipEightByteInteger.ZERO;\n         this.createTime = ZipEightByteInteger.ZERO;\n     }\n     \n-    public void setAccessFileTime(final FileTime time) {\n-        this.setAccessTime(fileTimeToZip(time));\n+    public void setAccessFileTime(final FileTime fileTime) {\n+        this.setAccessTime(fileTimeToZip(fileTime));\n     }\n     \n-    public void setAccessJavaTime(final Date d) {\n-        this.setAccessTime(dateToZip(d));\n+    public void setAccessJavaTime(final Date date) {\n+        this.setAccessTime(dateToZip(date));\n     }\n     \n-    public void setAccessTime(final ZipEightByteInteger t) {\n-        this.accessTime = ((t == null) ? ZipEightByteInteger.ZERO : t);\n+    public void setAccessTime(final ZipEightByteInteger zipEightByteInteger) {\n+        this.accessTime = ((zipEightByteInteger == null) ? ZipEightByteInteger.ZERO : zipEightByteInteger);\n     }\n     \n-    public void setCreateFileTime(final FileTime time) {\n-        this.setCreateTime(fileTimeToZip(time));\n+    public void setCreateFileTime(final FileTime fileTime) {\n+        this.setCreateTime(fileTimeToZip(fileTime));\n     }\n     \n-    public void setCreateJavaTime(final Date d) {\n-        this.setCreateTime(dateToZip(d));\n+    public void setCreateJavaTime(final Date date) {\n+        this.setCreateTime(dateToZip(date));\n     }\n     \n-    public void setCreateTime(final ZipEightByteInteger t) {\n-        this.createTime = ((t == null) ? ZipEightByteInteger.ZERO : t);\n+    public void setCreateTime(final ZipEightByteInteger zipEightByteInteger) {\n+        this.createTime = ((zipEightByteInteger == null) ? ZipEightByteInteger.ZERO : zipEightByteInteger);\n     }\n     \n-    public void setModifyFileTime(final FileTime time) {\n-        this.setModifyTime(fileTimeToZip(time));\n+    public void setModifyFileTime(final FileTime fileTime) {\n+        this.setModifyTime(fileTimeToZip(fileTime));\n     }\n     \n-    public void setModifyJavaTime(final Date d) {\n-        this.setModifyTime(dateToZip(d));\n+    public void setModifyJavaTime(final Date date) {\n+        this.setModifyTime(dateToZip(date));\n     }\n     \n-    public void setModifyTime(final ZipEightByteInteger t) {\n-        this.modifyTime = ((t == null) ? ZipEightByteInteger.ZERO : t);\n+    public void setModifyTime(final ZipEightByteInteger zipEightByteInteger) {\n+        this.modifyTime = ((zipEightByteInteger == null) ? ZipEightByteInteger.ZERO : zipEightByteInteger);\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"0x000A Zip Extra Field:\").append(\" Modify:[\").append(this.getModifyFileTime()).append(\"] \").append(\" Access:[\").append(this.getAccessFileTime()).append(\"] \").append(\" Create:[\").append(this.getCreateFileTime()).append(\"] \");\n-        return buf.toString();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"0x000A Zip Extra Field:\").append(\" Modify:[\").append(this.getModifyFileTime()).append(\"] \").append(\" Access:[\").append(this.getAccessFileTime()).append(\"] \").append(\" Create:[\").append(this.getCreateFileTime()).append(\"] \");\n+        return sb.toString();\n     }\n     \n     static {\n         HEADER_ID = new ZipShort(10);\n         TIME_ATTR_TAG = new ZipShort(1);\n         TIME_ATTR_SIZE = new ZipShort(24);\n     }\n"}]}
