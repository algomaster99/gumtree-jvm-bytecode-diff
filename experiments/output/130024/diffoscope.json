{"diffoscope-json-version": 1, "source1": "first/WriterOutputStream.class", "source2": "second/WriterOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,256 +1,256 @@\n-  SHA-256 checksum bcac3ede03beef34cdf68b3e5a1911022c9f7356126a9684f24c899082cf2750\n+  SHA-256 checksum d71a212c9fcc6cdf3e79b6ab2219d03050486ba4971d72284fab2f571a4b32f2\n   Compiled from \"WriterOutputStream.java\"\n public class org.apache.commons.io.output.WriterOutputStream extends java.io.OutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/io/output/WriterOutputStream\n-  super_class: #8                         // java/io/OutputStream\n+  super_class: #3                         // java/io/OutputStream\n   interfaces: 0, fields: 6, methods: 15, attributes: 1\n Constant pool:\n     #1 = Class              #2            // org/apache/commons/io/output/WriterOutputStream\n     #2 = Utf8               org/apache/commons/io/output/WriterOutputStream\n-    #3 = Methodref          #1.#4         // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n-    #4 = NameAndType        #5:#6         // \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n-    #5 = Utf8               <init>\n-    #6 = Utf8               (Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n-    #7 = Methodref          #8.#9         // java/io/OutputStream.\"<init>\":()V\n-    #8 = Class              #10           // java/io/OutputStream\n-    #9 = NameAndType        #5:#11        // \"<init>\":()V\n-   #10 = Utf8               java/io/OutputStream\n-   #11 = Utf8               ()V\n-   #12 = Methodref          #13.#14       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #13 = Class              #15           // java/nio/ByteBuffer\n-   #14 = NameAndType        #16:#17       // allocate:(I)Ljava/nio/ByteBuffer;\n-   #15 = Utf8               java/nio/ByteBuffer\n-   #16 = Utf8               allocate\n-   #17 = Utf8               (I)Ljava/nio/ByteBuffer;\n-   #18 = Fieldref           #1.#19        // org/apache/commons/io/output/WriterOutputStream.decoderIn:Ljava/nio/ByteBuffer;\n-   #19 = NameAndType        #20:#21       // decoderIn:Ljava/nio/ByteBuffer;\n-   #20 = Utf8               decoderIn\n-   #21 = Utf8               Ljava/nio/ByteBuffer;\n-   #22 = Methodref          #23.#24       // java/nio/charset/CharsetDecoder.charset:()Ljava/nio/charset/Charset;\n-   #23 = Class              #25           // java/nio/charset/CharsetDecoder\n-   #24 = NameAndType        #26:#27       // charset:()Ljava/nio/charset/Charset;\n-   #25 = Utf8               java/nio/charset/CharsetDecoder\n-   #26 = Utf8               charset\n-   #27 = Utf8               ()Ljava/nio/charset/Charset;\n-   #28 = Methodref          #1.#29        // org/apache/commons/io/output/WriterOutputStream.checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n-   #29 = NameAndType        #30:#31       // checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n-   #30 = Utf8               checkIbmJdkWithBrokenUTF16\n-   #31 = Utf8               (Ljava/nio/charset/Charset;)V\n-   #32 = Fieldref           #1.#33        // org/apache/commons/io/output/WriterOutputStream.writer:Ljava/io/Writer;\n-   #33 = NameAndType        #34:#35       // writer:Ljava/io/Writer;\n-   #34 = Utf8               writer\n-   #35 = Utf8               Ljava/io/Writer;\n-   #36 = Fieldref           #1.#37        // org/apache/commons/io/output/WriterOutputStream.decoder:Ljava/nio/charset/CharsetDecoder;\n-   #37 = NameAndType        #38:#39       // decoder:Ljava/nio/charset/CharsetDecoder;\n-   #38 = Utf8               decoder\n-   #39 = Utf8               Ljava/nio/charset/CharsetDecoder;\n-   #40 = Fieldref           #1.#41        // org/apache/commons/io/output/WriterOutputStream.writeImmediately:Z\n-   #41 = NameAndType        #42:#43       // writeImmediately:Z\n-   #42 = Utf8               writeImmediately\n-   #43 = Utf8               Z\n-   #44 = Methodref          #45.#46       // java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n-   #45 = Class              #47           // java/nio/CharBuffer\n-   #46 = NameAndType        #16:#48       // allocate:(I)Ljava/nio/CharBuffer;\n-   #47 = Utf8               java/nio/CharBuffer\n-   #48 = Utf8               (I)Ljava/nio/CharBuffer;\n-   #49 = Fieldref           #1.#50        // org/apache/commons/io/output/WriterOutputStream.decoderOut:Ljava/nio/CharBuffer;\n-   #50 = NameAndType        #51:#52       // decoderOut:Ljava/nio/CharBuffer;\n-   #51 = Utf8               decoderOut\n-   #52 = Utf8               Ljava/nio/CharBuffer;\n-   #53 = Methodref          #54.#55       // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-   #54 = Class              #56           // java/nio/charset/Charset\n-   #55 = NameAndType        #57:#58       // newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-   #56 = Utf8               java/nio/charset/Charset\n-   #57 = Utf8               newDecoder\n-   #58 = Utf8               ()Ljava/nio/charset/CharsetDecoder;\n-   #59 = Fieldref           #60.#61       // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-   #60 = Class              #62           // java/nio/charset/CodingErrorAction\n-   #61 = NameAndType        #63:#64       // REPLACE:Ljava/nio/charset/CodingErrorAction;\n-   #62 = Utf8               java/nio/charset/CodingErrorAction\n-   #63 = Utf8               REPLACE\n-   #64 = Utf8               Ljava/nio/charset/CodingErrorAction;\n-   #65 = Methodref          #23.#66       // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #66 = NameAndType        #67:#68       // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #67 = Utf8               onMalformedInput\n-   #68 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #69 = Methodref          #23.#70       // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #70 = NameAndType        #71:#68       // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #71 = Utf8               onUnmappableCharacter\n-   #72 = String             #73           // ?\n-   #73 = Utf8               ?\n-   #74 = Methodref          #23.#75       // java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-   #75 = NameAndType        #76:#77       // replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-   #76 = Utf8               replaceWith\n-   #77 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-   #78 = Methodref          #1.#79        // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n-   #79 = NameAndType        #5:#80        // \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n-   #80 = Utf8               (Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n-   #81 = Methodref          #54.#82       // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #82 = NameAndType        #83:#84       // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #83 = Utf8               forName\n-   #84 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #85 = Methodref          #1.#86        // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n-   #86 = NameAndType        #5:#87        // \"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n-   #87 = Utf8               (Ljava/io/Writer;Ljava/lang/String;IZ)V\n-   #88 = Methodref          #54.#89       // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-   #89 = NameAndType        #90:#27       // defaultCharset:()Ljava/nio/charset/Charset;\n-   #90 = Utf8               defaultCharset\n-   #91 = Methodref          #13.#92       // java/nio/ByteBuffer.remaining:()I\n-   #92 = NameAndType        #93:#94       // remaining:()I\n-   #93 = Utf8               remaining\n-   #94 = Utf8               ()I\n-   #95 = Methodref          #96.#97       // java/lang/Math.min:(II)I\n-   #96 = Class              #98           // java/lang/Math\n-   #97 = NameAndType        #99:#100      // min:(II)I\n-   #98 = Utf8               java/lang/Math\n-   #99 = Utf8               min\n-  #100 = Utf8               (II)I\n-  #101 = Methodref          #13.#102      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-  #102 = NameAndType        #103:#104     // put:([BII)Ljava/nio/ByteBuffer;\n-  #103 = Utf8               put\n-  #104 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #105 = Methodref          #1.#106       // org/apache/commons/io/output/WriterOutputStream.processInput:(Z)V\n-  #106 = NameAndType        #107:#108     // processInput:(Z)V\n-  #107 = Utf8               processInput\n-  #108 = Utf8               (Z)V\n-  #109 = Methodref          #1.#110       // org/apache/commons/io/output/WriterOutputStream.flushOutput:()V\n-  #110 = NameAndType        #111:#11      // flushOutput:()V\n-  #111 = Utf8               flushOutput\n-  #112 = Methodref          #1.#113       // org/apache/commons/io/output/WriterOutputStream.write:([BII)V\n-  #113 = NameAndType        #114:#115     // write:([BII)V\n-  #114 = Utf8               write\n-  #115 = Utf8               ([BII)V\n-  #116 = Methodref          #117.#118     // java/io/Writer.flush:()V\n-  #117 = Class              #119          // java/io/Writer\n-  #118 = NameAndType        #120:#11      // flush:()V\n-  #119 = Utf8               java/io/Writer\n-  #120 = Utf8               flush\n-  #121 = Methodref          #117.#122     // java/io/Writer.close:()V\n-  #122 = NameAndType        #123:#11      // close:()V\n-  #123 = Utf8               close\n-  #124 = Methodref          #13.#125      // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-  #125 = NameAndType        #126:#127     // flip:()Ljava/nio/ByteBuffer;\n-  #126 = Utf8               flip\n-  #127 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #128 = Methodref          #23.#129      // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #129 = NameAndType        #130:#131     // decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #130 = Utf8               decode\n-  #131 = Utf8               (Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #132 = Methodref          #133.#134     // java/nio/charset/CoderResult.isOverflow:()Z\n-  #133 = Class              #135          // java/nio/charset/CoderResult\n-  #134 = NameAndType        #136:#137     // isOverflow:()Z\n-  #135 = Utf8               java/nio/charset/CoderResult\n-  #136 = Utf8               isOverflow\n-  #137 = Utf8               ()Z\n-  #138 = Methodref          #133.#139     // java/nio/charset/CoderResult.isUnderflow:()Z\n-  #139 = NameAndType        #140:#137     // isUnderflow:()Z\n-  #140 = Utf8               isUnderflow\n-  #141 = Class              #142          // java/io/IOException\n-  #142 = Utf8               java/io/IOException\n-  #143 = String             #144          // Unexpected coder result\n-  #144 = Utf8               Unexpected coder result\n-  #145 = Methodref          #141.#146     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #146 = NameAndType        #5:#147       // \"<init>\":(Ljava/lang/String;)V\n-  #147 = Utf8               (Ljava/lang/String;)V\n-  #148 = Methodref          #13.#149      // java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n-  #149 = NameAndType        #150:#127     // compact:()Ljava/nio/ByteBuffer;\n-  #150 = Utf8               compact\n-  #151 = Methodref          #45.#152      // java/nio/CharBuffer.position:()I\n-  #152 = NameAndType        #153:#94      // position:()I\n-  #153 = Utf8               position\n-  #154 = Methodref          #45.#155      // java/nio/CharBuffer.array:()[C\n-  #155 = NameAndType        #156:#157     // array:()[C\n-  #156 = Utf8               array\n-  #157 = Utf8               ()[C\n-  #158 = Methodref          #117.#159     // java/io/Writer.write:([CII)V\n-  #159 = NameAndType        #114:#160     // write:([CII)V\n-  #160 = Utf8               ([CII)V\n-  #161 = Methodref          #45.#162      // java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n-  #162 = NameAndType        #163:#164     // rewind:()Ljava/nio/CharBuffer;\n-  #163 = Utf8               rewind\n-  #164 = Utf8               ()Ljava/nio/CharBuffer;\n-  #165 = String             #166          // UTF-16\n-  #166 = Utf8               UTF-16\n-  #167 = Methodref          #54.#168      // java/nio/charset/Charset.name:()Ljava/lang/String;\n-  #168 = NameAndType        #169:#170     // name:()Ljava/lang/String;\n-  #169 = Utf8               name\n-  #170 = Utf8               ()Ljava/lang/String;\n-  #171 = Methodref          #172.#173     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #172 = Class              #174          // java/lang/String\n-  #173 = NameAndType        #175:#176     // equals:(Ljava/lang/Object;)Z\n-  #174 = Utf8               java/lang/String\n-  #175 = Utf8               equals\n-  #176 = Utf8               (Ljava/lang/Object;)Z\n-  #177 = String             #178          // v\u00e9s\n-  #178 = Utf8               v\u00e9s\n-  #179 = Methodref          #172.#180     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-  #180 = NameAndType        #181:#182     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #181 = Utf8               getBytes\n-  #182 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #183 = Methodref          #172.#184     // java/lang/String.length:()I\n-  #184 = NameAndType        #185:#94      // length:()I\n-  #185 = Utf8               length\n-  #186 = Methodref          #13.#187      // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-  #187 = NameAndType        #103:#188     // put:(B)Ljava/nio/ByteBuffer;\n-  #188 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #189 = Class              #190          // java/lang/IllegalArgumentException\n-  #190 = Utf8               java/lang/IllegalArgumentException\n-  #191 = Class              #192          // java/lang/UnsupportedOperationException\n-  #192 = Utf8               java/lang/UnsupportedOperationException\n-  #193 = String             #194          // UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n-  #194 = Utf8               UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n-  #195 = Methodref          #191.#146     // java/lang/UnsupportedOperationException.\"<init>\":(Ljava/lang/String;)V\n-  #196 = Methodref          #45.#197      // java/nio/CharBuffer.toString:()Ljava/lang/String;\n-  #197 = NameAndType        #198:#170     // toString:()Ljava/lang/String;\n-  #198 = Utf8               toString\n-  #199 = Utf8               BUFFER_SIZE\n-  #200 = Utf8               I\n-  #201 = Utf8               ConstantValue\n-  #202 = Integer            1024\n-  #203 = Utf8               (Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;)V\n-  #204 = Utf8               Code\n-  #205 = Utf8               LineNumberTable\n-  #206 = Utf8               LocalVariableTable\n-  #207 = Utf8               this\n-  #208 = Utf8               Lorg/apache/commons/io/output/WriterOutputStream;\n-  #209 = Utf8               bufferSize\n-  #210 = Utf8               Ljava/nio/charset/Charset;\n-  #211 = Utf8               (Ljava/io/Writer;Ljava/nio/charset/Charset;)V\n-  #212 = Utf8               charsetName\n-  #213 = Utf8               Ljava/lang/String;\n-  #214 = Utf8               (Ljava/io/Writer;Ljava/lang/String;)V\n-  #215 = Utf8               (Ljava/io/Writer;)V\n-  #216 = Utf8               Deprecated\n-  #217 = Utf8               RuntimeVisibleAnnotations\n-  #218 = Utf8               Ljava/lang/Deprecated;\n-  #219 = Utf8               c\n-  #220 = Utf8               b\n-  #221 = Utf8               [B\n-  #222 = Utf8               off\n-  #223 = Utf8               len\n-  #224 = Utf8               StackMapTable\n-  #225 = Utf8               Exceptions\n-  #226 = Utf8               ([B)V\n-  #227 = Utf8               (I)V\n-  #228 = Utf8               endOfInput\n-  #229 = Utf8               coderResult\n-  #230 = Utf8               Ljava/nio/charset/CoderResult;\n-  #231 = Utf8               e\n-  #232 = Utf8               Ljava/lang/IllegalArgumentException;\n-  #233 = Utf8               i\n-  #234 = Utf8               TEST_STRING_2\n-  #235 = Utf8               bytes\n-  #236 = Utf8               charsetDecoder2\n-  #237 = Utf8               bb2\n-  #238 = Utf8               cb2\n-  #239 = Class              #221          // \"[B\"\n+    #3 = Class              #4            // java/io/OutputStream\n+    #4 = Utf8               java/io/OutputStream\n+    #5 = Utf8               BUFFER_SIZE\n+    #6 = Utf8               I\n+    #7 = Utf8               ConstantValue\n+    #8 = Integer            1024\n+    #9 = Utf8               writer\n+   #10 = Utf8               Ljava/io/Writer;\n+   #11 = Utf8               decoder\n+   #12 = Utf8               Ljava/nio/charset/CharsetDecoder;\n+   #13 = Utf8               writeImmediately\n+   #14 = Utf8               Z\n+   #15 = Utf8               decoderIn\n+   #16 = Utf8               Ljava/nio/ByteBuffer;\n+   #17 = Utf8               decoderOut\n+   #18 = Utf8               Ljava/nio/CharBuffer;\n+   #19 = Utf8               <init>\n+   #20 = Utf8               (Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;)V\n+   #21 = Utf8               Code\n+   #22 = Methodref          #1.#23        // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n+   #23 = NameAndType        #19:#24       // \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n+   #24 = Utf8               (Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n+   #25 = Utf8               LineNumberTable\n+   #26 = Utf8               LocalVariableTable\n+   #27 = Utf8               this\n+   #28 = Utf8               Lorg/apache/commons/io/output/WriterOutputStream;\n+   #29 = Methodref          #3.#30        // java/io/OutputStream.\"<init>\":()V\n+   #30 = NameAndType        #19:#31       // \"<init>\":()V\n+   #31 = Utf8               ()V\n+   #32 = Methodref          #33.#35       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #33 = Class              #34           // java/nio/ByteBuffer\n+   #34 = Utf8               java/nio/ByteBuffer\n+   #35 = NameAndType        #36:#37       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #36 = Utf8               allocate\n+   #37 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #38 = Fieldref           #1.#39        // org/apache/commons/io/output/WriterOutputStream.decoderIn:Ljava/nio/ByteBuffer;\n+   #39 = NameAndType        #15:#16       // decoderIn:Ljava/nio/ByteBuffer;\n+   #40 = Methodref          #41.#43       // java/nio/charset/CharsetDecoder.charset:()Ljava/nio/charset/Charset;\n+   #41 = Class              #42           // java/nio/charset/CharsetDecoder\n+   #42 = Utf8               java/nio/charset/CharsetDecoder\n+   #43 = NameAndType        #44:#45       // charset:()Ljava/nio/charset/Charset;\n+   #44 = Utf8               charset\n+   #45 = Utf8               ()Ljava/nio/charset/Charset;\n+   #46 = Methodref          #1.#47        // org/apache/commons/io/output/WriterOutputStream.checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n+   #47 = NameAndType        #48:#49       // checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n+   #48 = Utf8               checkIbmJdkWithBrokenUTF16\n+   #49 = Utf8               (Ljava/nio/charset/Charset;)V\n+   #50 = Fieldref           #1.#51        // org/apache/commons/io/output/WriterOutputStream.writer:Ljava/io/Writer;\n+   #51 = NameAndType        #9:#10        // writer:Ljava/io/Writer;\n+   #52 = Fieldref           #1.#53        // org/apache/commons/io/output/WriterOutputStream.decoder:Ljava/nio/charset/CharsetDecoder;\n+   #53 = NameAndType        #11:#12       // decoder:Ljava/nio/charset/CharsetDecoder;\n+   #54 = Fieldref           #1.#55        // org/apache/commons/io/output/WriterOutputStream.writeImmediately:Z\n+   #55 = NameAndType        #13:#14       // writeImmediately:Z\n+   #56 = Methodref          #57.#59       // java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n+   #57 = Class              #58           // java/nio/CharBuffer\n+   #58 = Utf8               java/nio/CharBuffer\n+   #59 = NameAndType        #36:#60       // allocate:(I)Ljava/nio/CharBuffer;\n+   #60 = Utf8               (I)Ljava/nio/CharBuffer;\n+   #61 = Fieldref           #1.#62        // org/apache/commons/io/output/WriterOutputStream.decoderOut:Ljava/nio/CharBuffer;\n+   #62 = NameAndType        #17:#18       // decoderOut:Ljava/nio/CharBuffer;\n+   #63 = Utf8               bufferSize\n+   #64 = Utf8               (Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n+   #65 = Methodref          #66.#68       // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+   #66 = Class              #67           // java/nio/charset/Charset\n+   #67 = Utf8               java/nio/charset/Charset\n+   #68 = NameAndType        #69:#70       // newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+   #69 = Utf8               newDecoder\n+   #70 = Utf8               ()Ljava/nio/charset/CharsetDecoder;\n+   #71 = Fieldref           #72.#74       // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+   #72 = Class              #73           // java/nio/charset/CodingErrorAction\n+   #73 = Utf8               java/nio/charset/CodingErrorAction\n+   #74 = NameAndType        #75:#76       // REPLACE:Ljava/nio/charset/CodingErrorAction;\n+   #75 = Utf8               REPLACE\n+   #76 = Utf8               Ljava/nio/charset/CodingErrorAction;\n+   #77 = Methodref          #41.#78       // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #78 = NameAndType        #79:#80       // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #79 = Utf8               onMalformedInput\n+   #80 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #81 = Methodref          #41.#82       // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #82 = NameAndType        #83:#80       // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #83 = Utf8               onUnmappableCharacter\n+   #84 = String             #85           // ?\n+   #85 = Utf8               ?\n+   #86 = Methodref          #41.#87       // java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+   #87 = NameAndType        #88:#89       // replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+   #88 = Utf8               replaceWith\n+   #89 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+   #90 = Utf8               Ljava/nio/charset/Charset;\n+   #91 = Utf8               (Ljava/io/Writer;Ljava/nio/charset/Charset;)V\n+   #92 = Methodref          #1.#93        // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n+   #93 = NameAndType        #19:#64       // \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n+   #94 = Utf8               (Ljava/io/Writer;Ljava/lang/String;IZ)V\n+   #95 = Methodref          #66.#96       // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #96 = NameAndType        #97:#98       // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #97 = Utf8               forName\n+   #98 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #99 = Utf8               charsetName\n+  #100 = Utf8               Ljava/lang/String;\n+  #101 = Utf8               (Ljava/io/Writer;Ljava/lang/String;)V\n+  #102 = Methodref          #1.#103       // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n+  #103 = NameAndType        #19:#94       // \"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n+  #104 = Utf8               (Ljava/io/Writer;)V\n+  #105 = Utf8               Deprecated\n+  #106 = Utf8               RuntimeVisibleAnnotations\n+  #107 = Utf8               Ljava/lang/Deprecated;\n+  #108 = Methodref          #66.#109      // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+  #109 = NameAndType        #110:#45      // defaultCharset:()Ljava/nio/charset/Charset;\n+  #110 = Utf8               defaultCharset\n+  #111 = Utf8               write\n+  #112 = Utf8               ([BII)V\n+  #113 = Utf8               Exceptions\n+  #114 = Class              #115          // java/io/IOException\n+  #115 = Utf8               java/io/IOException\n+  #116 = Methodref          #33.#117      // java/nio/ByteBuffer.remaining:()I\n+  #117 = NameAndType        #118:#119     // remaining:()I\n+  #118 = Utf8               remaining\n+  #119 = Utf8               ()I\n+  #120 = Methodref          #121.#123     // java/lang/Math.min:(II)I\n+  #121 = Class              #122          // java/lang/Math\n+  #122 = Utf8               java/lang/Math\n+  #123 = NameAndType        #124:#125     // min:(II)I\n+  #124 = Utf8               min\n+  #125 = Utf8               (II)I\n+  #126 = Methodref          #33.#127      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+  #127 = NameAndType        #128:#129     // put:([BII)Ljava/nio/ByteBuffer;\n+  #128 = Utf8               put\n+  #129 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #130 = Methodref          #1.#131       // org/apache/commons/io/output/WriterOutputStream.processInput:(Z)V\n+  #131 = NameAndType        #132:#133     // processInput:(Z)V\n+  #132 = Utf8               processInput\n+  #133 = Utf8               (Z)V\n+  #134 = Methodref          #1.#135       // org/apache/commons/io/output/WriterOutputStream.flushOutput:()V\n+  #135 = NameAndType        #136:#31      // flushOutput:()V\n+  #136 = Utf8               flushOutput\n+  #137 = Utf8               b\n+  #138 = Utf8               [B\n+  #139 = Utf8               off\n+  #140 = Utf8               len\n+  #141 = Utf8               c\n+  #142 = Utf8               StackMapTable\n+  #143 = Utf8               ([B)V\n+  #144 = Methodref          #1.#145       // org/apache/commons/io/output/WriterOutputStream.write:([BII)V\n+  #145 = NameAndType        #111:#112     // write:([BII)V\n+  #146 = Utf8               (I)V\n+  #147 = Utf8               flush\n+  #148 = Methodref          #149.#151     // java/io/Writer.flush:()V\n+  #149 = Class              #150          // java/io/Writer\n+  #150 = Utf8               java/io/Writer\n+  #151 = NameAndType        #147:#31      // flush:()V\n+  #152 = Utf8               close\n+  #153 = Methodref          #149.#154     // java/io/Writer.close:()V\n+  #154 = NameAndType        #152:#31      // close:()V\n+  #155 = Methodref          #33.#156      // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+  #156 = NameAndType        #157:#158     // flip:()Ljava/nio/ByteBuffer;\n+  #157 = Utf8               flip\n+  #158 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #159 = Methodref          #41.#160      // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #160 = NameAndType        #161:#162     // decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #161 = Utf8               decode\n+  #162 = Utf8               (Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #163 = Methodref          #164.#166     // java/nio/charset/CoderResult.isOverflow:()Z\n+  #164 = Class              #165          // java/nio/charset/CoderResult\n+  #165 = Utf8               java/nio/charset/CoderResult\n+  #166 = NameAndType        #167:#168     // isOverflow:()Z\n+  #167 = Utf8               isOverflow\n+  #168 = Utf8               ()Z\n+  #169 = Methodref          #164.#170     // java/nio/charset/CoderResult.isUnderflow:()Z\n+  #170 = NameAndType        #171:#168     // isUnderflow:()Z\n+  #171 = Utf8               isUnderflow\n+  #172 = String             #173          // Unexpected coder result\n+  #173 = Utf8               Unexpected coder result\n+  #174 = Methodref          #114.#175     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #175 = NameAndType        #19:#176      // \"<init>\":(Ljava/lang/String;)V\n+  #176 = Utf8               (Ljava/lang/String;)V\n+  #177 = Methodref          #33.#178      // java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n+  #178 = NameAndType        #179:#158     // compact:()Ljava/nio/ByteBuffer;\n+  #179 = Utf8               compact\n+  #180 = Utf8               endOfInput\n+  #181 = Utf8               coderResult\n+  #182 = Utf8               Ljava/nio/charset/CoderResult;\n+  #183 = Methodref          #57.#184      // java/nio/CharBuffer.position:()I\n+  #184 = NameAndType        #185:#119     // position:()I\n+  #185 = Utf8               position\n+  #186 = Methodref          #57.#187      // java/nio/CharBuffer.array:()[C\n+  #187 = NameAndType        #188:#189     // array:()[C\n+  #188 = Utf8               array\n+  #189 = Utf8               ()[C\n+  #190 = Methodref          #149.#191     // java/io/Writer.write:([CII)V\n+  #191 = NameAndType        #111:#192     // write:([CII)V\n+  #192 = Utf8               ([CII)V\n+  #193 = Methodref          #57.#194      // java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n+  #194 = NameAndType        #195:#196     // rewind:()Ljava/nio/CharBuffer;\n+  #195 = Utf8               rewind\n+  #196 = Utf8               ()Ljava/nio/CharBuffer;\n+  #197 = String             #198          // UTF-16\n+  #198 = Utf8               UTF-16\n+  #199 = Methodref          #66.#200      // java/nio/charset/Charset.name:()Ljava/lang/String;\n+  #200 = NameAndType        #201:#202     // name:()Ljava/lang/String;\n+  #201 = Utf8               name\n+  #202 = Utf8               ()Ljava/lang/String;\n+  #203 = Methodref          #204.#206     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #204 = Class              #205          // java/lang/String\n+  #205 = Utf8               java/lang/String\n+  #206 = NameAndType        #207:#208     // equals:(Ljava/lang/Object;)Z\n+  #207 = Utf8               equals\n+  #208 = Utf8               (Ljava/lang/Object;)Z\n+  #209 = String             #210          // v\u00e9s\n+  #210 = Utf8               v\u00e9s\n+  #211 = Methodref          #204.#212     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+  #212 = NameAndType        #213:#214     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #213 = Utf8               getBytes\n+  #214 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #215 = Methodref          #204.#216     // java/lang/String.length:()I\n+  #216 = NameAndType        #217:#119     // length:()I\n+  #217 = Utf8               length\n+  #218 = Methodref          #33.#219      // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+  #219 = NameAndType        #128:#220     // put:(B)Ljava/nio/ByteBuffer;\n+  #220 = Utf8               (B)Ljava/nio/ByteBuffer;\n+  #221 = Class              #222          // java/lang/UnsupportedOperationException\n+  #222 = Utf8               java/lang/UnsupportedOperationException\n+  #223 = String             #224          // UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n+  #224 = Utf8               UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n+  #225 = Methodref          #221.#175     // java/lang/UnsupportedOperationException.\"<init>\":(Ljava/lang/String;)V\n+  #226 = Methodref          #57.#227      // java/nio/CharBuffer.toString:()Ljava/lang/String;\n+  #227 = NameAndType        #228:#202     // toString:()Ljava/lang/String;\n+  #228 = Utf8               toString\n+  #229 = Class              #230          // java/lang/IllegalArgumentException\n+  #230 = Utf8               java/lang/IllegalArgumentException\n+  #231 = Utf8               TEST_STRING_2\n+  #232 = Utf8               bytes\n+  #233 = Utf8               charsetDecoder2\n+  #234 = Utf8               bb2\n+  #235 = Utf8               cb2\n+  #236 = Utf8               i\n+  #237 = Utf8               e\n+  #238 = Utf8               Ljava/lang/IllegalArgumentException;\n+  #239 = Class              #138          // \"[B\"\n   #240 = Utf8               SourceFile\n   #241 = Utf8               WriterOutputStream.java\n {\n   private static final int BUFFER_SIZE = 1024;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 1024\n@@ -281,15 +281,15 @@\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: sipush        1024\n          6: iconst_0\n-         7: invokespecial #3                  // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n+         7: invokespecial #22                 // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n         10: return\n       LineNumberTable:\n         line 104: 0\n         line 105: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n@@ -298,38 +298,38 @@\n \n   public org.apache.commons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.CharsetDecoder, int, boolean);\n     descriptor: (Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=5, args_size=5\n          0: aload_0\n-         1: invokespecial #7                  // Method java/io/OutputStream.\"<init>\":()V\n+         1: invokespecial #29                 // Method java/io/OutputStream.\"<init>\":()V\n          4: aload_0\n          5: sipush        128\n-         8: invokestatic  #12                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        11: putfield      #18                 // Field decoderIn:Ljava/nio/ByteBuffer;\n+         8: invokestatic  #32                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        11: putfield      #38                 // Field decoderIn:Ljava/nio/ByteBuffer;\n         14: aload_2\n-        15: invokevirtual #22                 // Method java/nio/charset/CharsetDecoder.charset:()Ljava/nio/charset/Charset;\n-        18: invokestatic  #28                 // Method checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n+        15: invokevirtual #40                 // Method java/nio/charset/CharsetDecoder.charset:()Ljava/nio/charset/Charset;\n+        18: invokestatic  #46                 // Method checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n         21: aload_0\n         22: aload_1\n-        23: putfield      #32                 // Field writer:Ljava/io/Writer;\n+        23: putfield      #50                 // Field writer:Ljava/io/Writer;\n         26: aload_0\n         27: aload_2\n-        28: putfield      #36                 // Field decoder:Ljava/nio/charset/CharsetDecoder;\n+        28: putfield      #52                 // Field decoder:Ljava/nio/charset/CharsetDecoder;\n         31: aload_0\n         32: iload         4\n-        34: putfield      #40                 // Field writeImmediately:Z\n+        34: putfield      #54                 // Field writeImmediately:Z\n         37: aload_0\n         38: iload_3\n-        39: invokestatic  #44                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n-        42: putfield      #49                 // Field decoderOut:Ljava/nio/CharBuffer;\n+        39: invokestatic  #56                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n+        42: putfield      #61                 // Field decoderOut:Ljava/nio/CharBuffer;\n         45: return\n       LineNumberTable:\n-        line 121: 0\n+        line 120: 0\n         line 85: 4\n         line 122: 14\n         line 123: 21\n         line 124: 26\n         line 125: 31\n         line 126: 37\n         line 127: 45\n@@ -345,32 +345,33 @@\n     descriptor: (Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=5, args_size=5\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: invokevirtual #53                 // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-         6: getstatic     #59                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-         9: invokevirtual #65                 // Method java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-        12: getstatic     #59                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-        15: invokevirtual #69                 // Method java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-        18: ldc           #72                 // String ?\n-        20: invokevirtual #74                 // Method java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+         3: invokevirtual #65                 // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+         6: getstatic     #71                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+         9: invokevirtual #77                 // Method java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+        12: getstatic     #71                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+        15: invokevirtual #81                 // Method java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+        18: ldc           #84                 // String ?\n+        20: invokevirtual #86                 // Method java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n         23: iload_3\n         24: iload         4\n-        26: invokespecial #3                  // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n+        26: invokespecial #22                 // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n         29: return\n       LineNumberTable:\n         line 143: 0\n-        line 144: 3\n-        line 145: 9\n-        line 146: 15\n-        line 147: 20\n-        line 143: 26\n+        line 144: 2\n+        line 145: 6\n+        line 146: 12\n+        line 147: 18\n+        line 148: 23\n+        line 149: 24\n         line 150: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      30     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n             0      30     1 writer   Ljava/io/Writer;\n             0      30     2 charset   Ljava/nio/charset/Charset;\n             0      30     3 bufferSize   I\n@@ -382,15 +383,15 @@\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: sipush        1024\n          6: iconst_0\n-         7: invokespecial #78                 // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n+         7: invokespecial #92                 // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n         10: return\n       LineNumberTable:\n         line 161: 0\n         line 162: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n@@ -401,18 +402,18 @@\n     descriptor: (Ljava/io/Writer;Ljava/lang/String;IZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=5, args_size=5\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: invokestatic  #81                 // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+         3: invokestatic  #95                 // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n          6: iload_3\n          7: iload         4\n-         9: invokespecial #78                 // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n+         9: invokespecial #92                 // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n         12: return\n       LineNumberTable:\n         line 178: 0\n         line 179: 12\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n@@ -427,251 +428,253 @@\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: sipush        1024\n          6: iconst_0\n-         7: invokespecial #85                 // Method \"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n+         7: invokespecial #102                // Method \"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n         10: return\n       LineNumberTable:\n         line 190: 0\n         line 191: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n             0      11     1 writer   Ljava/io/Writer;\n             0      11     2 charsetName   Ljava/lang/String;\n \n   public org.apache.commons.io.output.WriterOutputStream(java.io.Writer);\n     descriptor: (Ljava/io/Writer;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Deprecated: true\n+    RuntimeVisibleAnnotations:\n+      0: #107()\n+        java.lang.Deprecated\n     Code:\n       stack=5, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #88                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+         2: invokestatic  #108                // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n          5: sipush        1024\n          8: iconst_0\n-         9: invokespecial #78                 // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n+         9: invokespecial #92                 // Method \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n         12: return\n       LineNumberTable:\n         line 203: 0\n         line 204: 12\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n             0      13     1 writer   Ljava/io/Writer;\n-    Deprecated: true\n-    RuntimeVisibleAnnotations:\n-      0: #218()\n-        java.lang.Deprecated\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=5, args_size=4\n-         0: iload_3\n-         1: ifle          47\n-         4: iload_3\n-         5: aload_0\n-         6: getfield      #18                 // Field decoderIn:Ljava/nio/ByteBuffer;\n-         9: invokevirtual #91                 // Method java/nio/ByteBuffer.remaining:()I\n-        12: invokestatic  #95                 // Method java/lang/Math.min:(II)I\n-        15: istore        4\n-        17: aload_0\n-        18: getfield      #18                 // Field decoderIn:Ljava/nio/ByteBuffer;\n-        21: aload_1\n-        22: iload_2\n-        23: iload         4\n-        25: invokevirtual #101                // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-        28: pop\n-        29: aload_0\n-        30: iconst_0\n-        31: invokespecial #105                // Method processInput:(Z)V\n-        34: iload_3\n-        35: iload         4\n-        37: isub\n-        38: istore_3\n-        39: iload_2\n-        40: iload         4\n-        42: iadd\n-        43: istore_2\n-        44: goto          0\n+         0: goto          43\n+         3: iload_3\n+         4: aload_0\n+         5: getfield      #38                 // Field decoderIn:Ljava/nio/ByteBuffer;\n+         8: invokevirtual #116                // Method java/nio/ByteBuffer.remaining:()I\n+        11: invokestatic  #120                // Method java/lang/Math.min:(II)I\n+        14: istore        4\n+        16: aload_0\n+        17: getfield      #38                 // Field decoderIn:Ljava/nio/ByteBuffer;\n+        20: aload_1\n+        21: iload_2\n+        22: iload         4\n+        24: invokevirtual #126                // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+        27: pop\n+        28: aload_0\n+        29: iconst_0\n+        30: invokespecial #130                // Method processInput:(Z)V\n+        33: iload_3\n+        34: iload         4\n+        36: isub\n+        37: istore_3\n+        38: iload_2\n+        39: iload         4\n+        41: iadd\n+        42: istore_2\n+        43: iload_3\n+        44: ifgt          3\n         47: aload_0\n-        48: getfield      #40                 // Field writeImmediately:Z\n+        48: getfield      #54                 // Field writeImmediately:Z\n         51: ifeq          58\n         54: aload_0\n-        55: invokespecial #109                // Method flushOutput:()V\n+        55: invokespecial #134                // Method flushOutput:()V\n         58: return\n       LineNumberTable:\n         line 216: 0\n-        line 217: 4\n-        line 218: 17\n-        line 219: 29\n-        line 220: 34\n-        line 221: 39\n-        line 222: 44\n+        line 217: 3\n+        line 218: 16\n+        line 219: 28\n+        line 220: 33\n+        line 221: 38\n+        line 216: 43\n         line 223: 47\n         line 224: 54\n         line 226: 58\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           17      27     4     c   I\n             0      59     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n             0      59     1     b   [B\n             0      59     2   off   I\n             0      59     3   len   I\n+           16      27     4     c   I\n       StackMapTable: number_of_entries = 3\n-        frame_type = 0 /* same */\n-        frame_type = 46 /* same */\n-        frame_type = 10 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 3 /* same */\n+        frame_type = 39 /* same */\n+        frame_type = 14 /* same */\n \n   public void write(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #112                // Method write:([BII)V\n+         5: invokevirtual #144                // Method write:([BII)V\n          8: return\n       LineNumberTable:\n         line 236: 0\n         line 237: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n             0       9     1     b   [B\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=2, args_size=2\n          0: aload_0\n          1: iconst_1\n          2: newarray       byte\n          4: dup\n          5: iconst_0\n          6: iload_1\n          7: i2b\n          8: bastore\n          9: iconst_0\n         10: iconst_1\n-        11: invokevirtual #112                // Method write:([BII)V\n+        11: invokevirtual #144                // Method write:([BII)V\n         14: return\n       LineNumberTable:\n         line 247: 0\n         line 248: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n             0      15     1     b   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #109                // Method flushOutput:()V\n+         1: invokespecial #134                // Method flushOutput:()V\n          4: aload_0\n-         5: getfield      #32                 // Field writer:Ljava/io/Writer;\n-         8: invokevirtual #116                // Method java/io/Writer.flush:()V\n+         5: getfield      #50                 // Field writer:Ljava/io/Writer;\n+         8: invokevirtual #148                // Method java/io/Writer.flush:()V\n         11: return\n       LineNumberTable:\n         line 258: 0\n         line 259: 4\n         line 260: 11\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: invokespecial #105                // Method processInput:(Z)V\n+         2: invokespecial #130                // Method processInput:(Z)V\n          5: aload_0\n-         6: invokespecial #109                // Method flushOutput:()V\n+         6: invokespecial #134                // Method flushOutput:()V\n          9: aload_0\n-        10: getfield      #32                 // Field writer:Ljava/io/Writer;\n-        13: invokevirtual #121                // Method java/io/Writer.close:()V\n+        10: getfield      #50                 // Field writer:Ljava/io/Writer;\n+        13: invokevirtual #153                // Method java/io/Writer.close:()V\n         16: return\n       LineNumberTable:\n         line 270: 0\n         line 271: 5\n         line 272: 9\n         line 273: 16\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      17     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void processInput(boolean) throws java.io.IOException;\n     descriptor: (Z)V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #18                 // Field decoderIn:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #124                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+         1: getfield      #38                 // Field decoderIn:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #155                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n          7: pop\n          8: aload_0\n-         9: getfield      #36                 // Field decoder:Ljava/nio/charset/CharsetDecoder;\n+         9: getfield      #52                 // Field decoder:Ljava/nio/charset/CharsetDecoder;\n         12: aload_0\n-        13: getfield      #18                 // Field decoderIn:Ljava/nio/ByteBuffer;\n+        13: getfield      #38                 // Field decoderIn:Ljava/nio/ByteBuffer;\n         16: aload_0\n-        17: getfield      #49                 // Field decoderOut:Ljava/nio/CharBuffer;\n+        17: getfield      #61                 // Field decoderOut:Ljava/nio/CharBuffer;\n         20: iload_1\n-        21: invokevirtual #128                // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n+        21: invokevirtual #159                // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n         24: astore_2\n         25: aload_2\n-        26: invokevirtual #132                // Method java/nio/charset/CoderResult.isOverflow:()Z\n+        26: invokevirtual #163                // Method java/nio/charset/CoderResult.isOverflow:()Z\n         29: ifeq          39\n         32: aload_0\n-        33: invokespecial #109                // Method flushOutput:()V\n+        33: invokespecial #134                // Method flushOutput:()V\n         36: goto          8\n         39: aload_2\n-        40: invokevirtual #138                // Method java/nio/charset/CoderResult.isUnderflow:()Z\n+        40: invokevirtual #169                // Method java/nio/charset/CoderResult.isUnderflow:()Z\n         43: ifeq          49\n         46: goto          59\n-        49: new           #141                // class java/io/IOException\n+        49: new           #114                // class java/io/IOException\n         52: dup\n-        53: ldc           #143                // String Unexpected coder result\n-        55: invokespecial #145                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        53: ldc           #172                // String Unexpected coder result\n+        55: invokespecial #174                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         58: athrow\n         59: aload_0\n-        60: getfield      #18                 // Field decoderIn:Ljava/nio/ByteBuffer;\n-        63: invokevirtual #148                // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n+        60: getfield      #38                 // Field decoderIn:Ljava/nio/ByteBuffer;\n+        63: invokevirtual #177                // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n         66: pop\n         67: return\n       LineNumberTable:\n         line 283: 0\n         line 286: 8\n         line 287: 25\n         line 288: 32\n-        line 289: 39\n+        line 289: 36\n         line 290: 46\n         line 294: 49\n         line 298: 59\n         line 299: 67\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      68     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n@@ -680,188 +683,185 @@\n       StackMapTable: number_of_entries = 4\n         frame_type = 8 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 30\n           locals = [ class java/nio/charset/CoderResult ]\n         frame_type = 9 /* same */\n         frame_type = 9 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void flushOutput() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #49                 // Field decoderOut:Ljava/nio/CharBuffer;\n-         4: invokevirtual #151                // Method java/nio/CharBuffer.position:()I\n+         1: getfield      #61                 // Field decoderOut:Ljava/nio/CharBuffer;\n+         4: invokevirtual #183                // Method java/nio/CharBuffer.position:()I\n          7: ifle          40\n         10: aload_0\n-        11: getfield      #32                 // Field writer:Ljava/io/Writer;\n+        11: getfield      #50                 // Field writer:Ljava/io/Writer;\n         14: aload_0\n-        15: getfield      #49                 // Field decoderOut:Ljava/nio/CharBuffer;\n-        18: invokevirtual #154                // Method java/nio/CharBuffer.array:()[C\n+        15: getfield      #61                 // Field decoderOut:Ljava/nio/CharBuffer;\n+        18: invokevirtual #186                // Method java/nio/CharBuffer.array:()[C\n         21: iconst_0\n         22: aload_0\n-        23: getfield      #49                 // Field decoderOut:Ljava/nio/CharBuffer;\n-        26: invokevirtual #151                // Method java/nio/CharBuffer.position:()I\n-        29: invokevirtual #158                // Method java/io/Writer.write:([CII)V\n+        23: getfield      #61                 // Field decoderOut:Ljava/nio/CharBuffer;\n+        26: invokevirtual #183                // Method java/nio/CharBuffer.position:()I\n+        29: invokevirtual #190                // Method java/io/Writer.write:([CII)V\n         32: aload_0\n-        33: getfield      #49                 // Field decoderOut:Ljava/nio/CharBuffer;\n-        36: invokevirtual #161                // Method java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n+        33: getfield      #61                 // Field decoderOut:Ljava/nio/CharBuffer;\n+        36: invokevirtual #193                // Method java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n         39: pop\n         40: return\n       LineNumberTable:\n         line 307: 0\n         line 308: 10\n         line 309: 32\n         line 311: 40\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      41     0  this   Lorg/apache/commons/io/output/WriterOutputStream;\n       StackMapTable: number_of_entries = 1\n         frame_type = 40 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private static void checkIbmJdkWithBrokenUTF16(java.nio.charset.Charset);\n     descriptor: (Ljava/nio/charset/Charset;)V\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=6, locals=9, args_size=1\n-         0: ldc           #165                // String UTF-16\n+         0: ldc           #197                // String UTF-16\n          2: aload_0\n-         3: invokevirtual #167                // Method java/nio/charset/Charset.name:()Ljava/lang/String;\n-         6: invokevirtual #171                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+         3: invokevirtual #199                // Method java/nio/charset/Charset.name:()Ljava/lang/String;\n+         6: invokevirtual #203                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n          9: ifne          13\n         12: return\n-        13: ldc           #177                // String v\u00e9s\n+        13: ldc           #209                // String v\u00e9s\n         15: astore_1\n-        16: ldc           #177                // String v\u00e9s\n+        16: ldc           #209                // String v\u00e9s\n         18: aload_0\n-        19: invokevirtual #179                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+        19: invokevirtual #211                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         22: astore_2\n         23: aload_0\n-        24: invokevirtual #53                 // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+        24: invokevirtual #65                 // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n         27: astore_3\n         28: bipush        16\n-        30: invokestatic  #12                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        30: invokestatic  #32                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         33: astore        4\n-        35: ldc           #177                // String v\u00e9s\n-        37: invokevirtual #183                // Method java/lang/String.length:()I\n-        40: invokestatic  #44                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n+        35: ldc           #209                // String v\u00e9s\n+        37: invokevirtual #215                // Method java/lang/String.length:()I\n+        40: invokestatic  #56                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n         43: astore        5\n         45: aload_2\n         46: arraylength\n         47: istore        6\n         49: iconst_0\n         50: istore        7\n-        52: iload         7\n-        54: iload         6\n-        56: if_icmpge     125\n-        59: aload         4\n-        61: aload_2\n-        62: iload         7\n-        64: baload\n-        65: invokevirtual #186                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-        68: pop\n-        69: aload         4\n-        71: invokevirtual #124                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-        74: pop\n-        75: aload_3\n-        76: aload         4\n-        78: aload         5\n-        80: iload         7\n-        82: iload         6\n-        84: iconst_1\n-        85: isub\n-        86: if_icmpne     93\n-        89: iconst_1\n-        90: goto          94\n-        93: iconst_0\n-        94: invokevirtual #128                // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n-        97: pop\n-        98: goto          113\n-       101: astore        8\n-       103: new           #191                // class java/lang/UnsupportedOperationException\n-       106: dup\n-       107: ldc           #193                // String UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n-       109: invokespecial #195                // Method java/lang/UnsupportedOperationException.\"<init>\":(Ljava/lang/String;)V\n-       112: athrow\n-       113: aload         4\n-       115: invokevirtual #148                // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n-       118: pop\n-       119: iinc          7, 1\n-       122: goto          52\n+        52: goto          118\n+        55: aload         4\n+        57: aload_2\n+        58: iload         7\n+        60: baload\n+        61: invokevirtual #218                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+        64: pop\n+        65: aload         4\n+        67: invokevirtual #155                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        70: pop\n+        71: aload_3\n+        72: aload         4\n+        74: aload         5\n+        76: iload         7\n+        78: iload         6\n+        80: iconst_1\n+        81: isub\n+        82: if_icmpne     89\n+        85: iconst_1\n+        86: goto          90\n+        89: iconst_0\n+        90: invokevirtual #159                // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n+        93: pop\n+        94: goto          109\n+        97: astore        8\n+        99: new           #221                // class java/lang/UnsupportedOperationException\n+       102: dup\n+       103: ldc           #223                // String UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n+       105: invokespecial #225                // Method java/lang/UnsupportedOperationException.\"<init>\":(Ljava/lang/String;)V\n+       108: athrow\n+       109: aload         4\n+       111: invokevirtual #177                // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n+       114: pop\n+       115: iinc          7, 1\n+       118: iload         7\n+       120: iload         6\n+       122: if_icmplt     55\n        125: aload         5\n-       127: invokevirtual #161                // Method java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n+       127: invokevirtual #193                // Method java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n        130: pop\n-       131: ldc           #177                // String v\u00e9s\n+       131: ldc           #209                // String v\u00e9s\n        133: aload         5\n-       135: invokevirtual #196                // Method java/nio/CharBuffer.toString:()Ljava/lang/String;\n-       138: invokevirtual #171                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       135: invokevirtual #226                // Method java/nio/CharBuffer.toString:()Ljava/lang/String;\n+       138: invokevirtual #203                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n        141: ifne          154\n-       144: new           #191                // class java/lang/UnsupportedOperationException\n+       144: new           #221                // class java/lang/UnsupportedOperationException\n        147: dup\n-       148: ldc           #193                // String UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n-       150: invokespecial #195                // Method java/lang/UnsupportedOperationException.\"<init>\":(Ljava/lang/String;)V\n+       148: ldc           #223                // String UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n+       150: invokespecial #225                // Method java/lang/UnsupportedOperationException.\"<init>\":(Ljava/lang/String;)V\n        153: athrow\n        154: return\n       Exception table:\n          from    to  target type\n-            75    98   101   Class java/lang/IllegalArgumentException\n+            71    94    97   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 319: 0\n         line 320: 12\n         line 322: 13\n         line 323: 16\n         line 325: 23\n         line 326: 28\n         line 327: 35\n         line 328: 45\n         line 329: 49\n-        line 330: 59\n-        line 331: 69\n-        line 333: 75\n-        line 337: 98\n-        line 334: 101\n-        line 335: 103\n-        line 338: 113\n-        line 329: 119\n+        line 330: 55\n+        line 331: 65\n+        line 333: 71\n+        line 334: 94\n+        line 335: 99\n+        line 338: 109\n+        line 329: 115\n         line 340: 125\n         line 341: 131\n         line 342: 144\n         line 346: 154\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-          103      10     8     e   Ljava/lang/IllegalArgumentException;\n-           52      73     7     i   I\n             0     155     0 charset   Ljava/nio/charset/Charset;\n            16     139     1 TEST_STRING_2   Ljava/lang/String;\n            23     132     2 bytes   [B\n            28     127     3 charsetDecoder2   Ljava/nio/charset/CharsetDecoder;\n            35     120     4   bb2   Ljava/nio/ByteBuffer;\n            45     110     5   cb2   Ljava/nio/CharBuffer;\n            49     106     6   len   I\n+           52      73     7     i   I\n+           99      10     8     e   Ljava/lang/IllegalArgumentException;\n       StackMapTable: number_of_entries = 8\n         frame_type = 13 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 38\n+          offset_delta = 41\n           locals = [ class java/nio/charset/Charset, class java/lang/String, class \"[B\", class java/nio/charset/CharsetDecoder, class java/nio/ByteBuffer, class java/nio/CharBuffer, int, int ]\n           stack = []\n         frame_type = 255 /* full_frame */\n-          offset_delta = 40\n+          offset_delta = 33\n           locals = [ class java/nio/charset/Charset, class java/lang/String, class \"[B\", class java/nio/charset/CharsetDecoder, class java/nio/ByteBuffer, class java/nio/CharBuffer, int, int ]\n           stack = [ class java/nio/charset/CharsetDecoder, class java/nio/ByteBuffer, class java/nio/CharBuffer ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class java/nio/charset/Charset, class java/lang/String, class \"[B\", class java/nio/charset/CharsetDecoder, class java/nio/ByteBuffer, class java/nio/CharBuffer, int, int ]\n           stack = [ class java/nio/charset/CharsetDecoder, class java/nio/ByteBuffer, class java/nio/CharBuffer, int ]\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 11 /* same */\n+        frame_type = 8 /* same */\n         frame_type = 250 /* chop */\n-          offset_delta = 11\n-        frame_type = 28 /* same */\n+          offset_delta = 35\n }\n SourceFile: \"WriterOutputStream.java\"\n"}]}
