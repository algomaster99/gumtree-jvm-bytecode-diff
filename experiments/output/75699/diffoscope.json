{"diffoscope-json-version": 1, "source1": "first/ClassLoaderObjectInputStream.class", "source2": "second/ClassLoaderObjectInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,19 +25,19 @@\n         catch (final ClassNotFoundException cnfe) {\n             return super.resolveClass(objectStreamClass);\n         }\n     }\n     \n     @Override\n     protected Class<?> resolveProxyClass(final String[] interfaces) throws IOException, ClassNotFoundException {\n-        final Class<?>[] interfaceClasses = new Class[interfaces.length];\n+        final Class[] interfaceClasses = new Class[interfaces.length];\n         for (int i = 0; i < interfaces.length; ++i) {\n             interfaceClasses[i] = Class.forName(interfaces[i], false, this.classLoader);\n         }\n         try {\n-            return Proxy.getProxyClass(this.classLoader, interfaceClasses);\n+            return Proxy.getProxyClass(this.classLoader, (Class<?>[])interfaceClasses);\n         }\n         catch (final IllegalArgumentException e) {\n             return super.resolveProxyClass(interfaces);\n         }\n     }\n }\n"}]}
