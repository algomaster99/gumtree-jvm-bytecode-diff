{"diffoscope-json-version": 1, "source1": "first/XMLBeanDeclaration$NodeData.class", "source2": "second/XMLBeanDeclaration$NodeData.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,35 +19,35 @@\n         this.nodeHandler = nodeHandler;\n     }\n     \n     String nodeName() {\n         return this.nodeHandler.nodeName(this.node);\n     }\n     \n-    String escapedNodeName(final HierarchicalConfiguration<?> config) {\n-        return config.getExpressionEngine().nodeKey(this.node, \"\", this.nodeHandler);\n+    String escapedNodeName(final HierarchicalConfiguration<?> hierarchicalConfiguration) {\n+        return hierarchicalConfiguration.getExpressionEngine().nodeKey(this.node, \"\", this.nodeHandler);\n     }\n     \n     List<NodeData<T>> getChildren() {\n         return this.wrapInNodeData(this.nodeHandler.getChildren(this.node));\n     }\n     \n-    List<NodeData<T>> getChildren(final String name) {\n-        return this.wrapInNodeData(this.nodeHandler.getChildren(this.node, name));\n+    List<NodeData<T>> getChildren(final String s) {\n+        return this.wrapInNodeData(this.nodeHandler.getChildren(this.node, s));\n     }\n     \n     Set<String> getAttributes() {\n         return this.nodeHandler.getAttributes(this.node);\n     }\n     \n-    Object getAttribute(final String key) {\n-        return this.nodeHandler.getAttributeValue(this.node, key);\n+    Object getAttribute(final String s) {\n+        return this.nodeHandler.getAttributeValue(this.node, s);\n     }\n     \n-    boolean matchesConfigRootNode(final HierarchicalConfiguration<?> config) {\n-        return config.getNodeModel().getNodeHandler().getRootNode().equals(this.node);\n+    boolean matchesConfigRootNode(final HierarchicalConfiguration<?> hierarchicalConfiguration) {\n+        return hierarchicalConfiguration.getNodeModel().getNodeHandler().getRootNode().equals(this.node);\n     }\n     \n-    List<NodeData<T>> wrapInNodeData(final List<T> nodes) {\n-        return nodes.stream().map((Function<? super Object, ?>)this::lambda$wrapInNodeData$0).collect((Collector<? super Object, ?, List<NodeData<T>>>)Collectors.toList());\n+    List<NodeData<T>> wrapInNodeData(final List<T> list) {\n+        return list.stream().map((Function<? super Object, ?>)this::lambda$wrapInNodeData$0).collect((Collector<? super Object, ?, List<NodeData<T>>>)Collectors.toList());\n     }\n }\n"}]}
