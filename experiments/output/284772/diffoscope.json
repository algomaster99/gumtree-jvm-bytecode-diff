{"diffoscope-json-version": 1, "source1": "first/InstConstraintVisitor.class", "source2": "second/InstConstraintVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -372,15 +372,15 @@\n             }\n             if (this.stack().peek() == Type.NULL) {\n                 return;\n             }\n             if (!(this.stack().peek() instanceof ReferenceType)) {\n                 this.constraintViolated((Instruction)returnInstruction, \"Reference type expected on top of stack, but is: '\" + this.stack().peek() + \"'.\");\n             }\n-            this.referenceTypeIsInitialized(returnInstruction, (ReferenceType)(ReferenceType)this.stack().peek());\n+            this.referenceTypeIsInitialized((Instruction)returnInstruction, (ReferenceType)this.stack().peek());\n         }\n         else if (!((Type)obj).equals((Object)this.stack().peek())) {\n             this.constraintViolated((Instruction)returnInstruction, \"Current method has return type of '\" + this.mg.getType() + \"' expecting a '\" + obj + \"' on top of the stack. But stack top is a '\" + this.stack().peek() + \"'.\");\n         }\n     }\n     \n     public void visitAALOAD(final AALOAD aaload) {\n@@ -416,15 +416,15 @@\n         }\n     }\n     \n     public void visitARETURN(final ARETURN areturn) {\n         if (!(this.stack().peek() instanceof ReferenceType)) {\n             this.constraintViolated((Instruction)areturn, \"The 'objectref' at the stack top is not of a ReferenceType but of type '\" + this.stack().peek() + \"'.\");\n         }\n-        this.referenceTypeIsInitialized(areturn, (ReferenceType)(ReferenceType)this.stack().peek());\n+        this.referenceTypeIsInitialized((Instruction)areturn, (ReferenceType)this.stack().peek());\n     }\n     \n     public void visitARRAYLENGTH(final ARRAYLENGTH arraylength) {\n         this.arrayrefOfArrayType((Instruction)arraylength, this.stack().peek(0));\n     }\n     \n     public void visitASTORE(final ASTORE astore) {\n@@ -1129,22 +1129,22 @@\n         }\n     }\n     \n     public void visitIFNONNULL(final IFNONNULL ifnonnull) {\n         if (!(this.stack().peek() instanceof ReferenceType)) {\n             this.constraintViolated((Instruction)ifnonnull, \"The value at the stack top is not of a ReferenceType, but of type '\" + this.stack().peek() + \"'.\");\n         }\n-        this.referenceTypeIsInitialized(ifnonnull, (ReferenceType)(ReferenceType)this.stack().peek());\n+        this.referenceTypeIsInitialized((Instruction)ifnonnull, (ReferenceType)this.stack().peek());\n     }\n     \n     public void visitIFNULL(final IFNULL ifnull) {\n         if (!(this.stack().peek() instanceof ReferenceType)) {\n             this.constraintViolated((Instruction)ifnull, \"The value at the stack top is not of a ReferenceType, but of type '\" + this.stack().peek() + \"'.\");\n         }\n-        this.referenceTypeIsInitialized(ifnull, (ReferenceType)(ReferenceType)this.stack().peek());\n+        this.referenceTypeIsInitialized((Instruction)ifnull, (ReferenceType)this.stack().peek());\n     }\n     \n     public void visitIINC(final IINC iinc) {\n         if (this.locals().maxLocals() <= ((iinc.getType(this.cpg).getSize() == 1) ? iinc.getIndex() : (iinc.getIndex() + 1))) {\n             this.constraintViolated((Instruction)iinc, \"The 'index' is not a valid index into the local variable array.\");\n         }\n         this.indexOfInt((Instruction)iinc, this.locals().get(iinc.getIndex()));\n"}]}
