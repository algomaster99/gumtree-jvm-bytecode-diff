{"diffoscope-json-version": 1, "source1": "first/HexDump.class", "source2": "second/HexDump.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,77 +11,77 @@\n public class HexDump\n {\n     @Deprecated\n     public static final String EOL;\n     private static final char[] HEX_CODES;\n     private static final int[] SHIFTS;\n     \n-    public static void dump(final byte[] data, final Appendable appendable) throws IOException {\n-        dump(data, 0L, appendable, 0, data.length);\n+    public static void dump(final byte[] array, final Appendable appendable) throws IOException {\n+        dump(array, 0L, appendable, 0, array.length);\n     }\n     \n-    public static void dump(final byte[] data, final long offset, final Appendable appendable, final int index, final int length) throws IOException, ArrayIndexOutOfBoundsException {\n-        Objects.requireNonNull(appendable, \"appendable\");\n-        if (index < 0 || index >= data.length) {\n-            throw new ArrayIndexOutOfBoundsException(\"illegal index: \" + index + \" into array of length \" + data.length);\n-        }\n-        long display_offset = offset + index;\n-        final StringBuilder buffer = new StringBuilder(74);\n-        if (length < 0 || index + length > data.length) {\n-            throw new ArrayIndexOutOfBoundsException(String.format(\"Range [%s, %<s + %s) out of bounds for length %s\", Integer.valueOf(index), Integer.valueOf(length), Integer.valueOf(data.length)));\n-        }\n-        for (int endIndex = index + length, j = index; j < endIndex; j += 16) {\n-            int chars_read = endIndex - j;\n-            if (chars_read > 16) {\n-                chars_read = 16;\n+    public static void dump(final byte[] array, final long n, final Appendable obj, final int n2, final int i) throws IOException, ArrayIndexOutOfBoundsException {\n+        Objects.requireNonNull(obj, \"appendable\");\n+        if (n2 < 0 || n2 >= array.length) {\n+            throw new ArrayIndexOutOfBoundsException(\"illegal index: \" + n2 + \" into array of length \" + array.length);\n+        }\n+        long n3 = n + n2;\n+        final StringBuilder sb = new StringBuilder(74);\n+        if (i < 0 || n2 + i > array.length) {\n+            throw new ArrayIndexOutOfBoundsException(String.format(\"Range [%s, %<s + %s) out of bounds for length %s\", Integer.valueOf(n2), Integer.valueOf(i), Integer.valueOf(array.length)));\n+        }\n+        for (int n4 = n2 + i, j = n2; j < n4; j += 16) {\n+            int n5 = n4 - j;\n+            if (n5 > 16) {\n+                n5 = 16;\n             }\n-            dump(buffer, display_offset).append(' ');\n+            dump(sb, n3).append(' ');\n             for (int k = 0; k < 16; ++k) {\n-                if (k < chars_read) {\n-                    dump(buffer, data[k + j]);\n+                if (k < n5) {\n+                    dump(sb, array[k + j]);\n                 }\n                 else {\n-                    buffer.append(\"  \");\n+                    sb.append(\"  \");\n                 }\n-                buffer.append(' ');\n+                sb.append(' ');\n             }\n-            for (int k = 0; k < chars_read; ++k) {\n-                if (data[k + j] >= 32 && data[k + j] < 127) {\n-                    buffer.append((char)data[k + j]);\n+            for (int l = 0; l < n5; ++l) {\n+                if (array[l + j] >= 32 && array[l + j] < 127) {\n+                    sb.append((char)array[l + j]);\n                 }\n                 else {\n-                    buffer.append('.');\n+                    sb.append('.');\n                 }\n             }\n-            buffer.append(System.lineSeparator());\n-            appendable.append(buffer);\n-            buffer.setLength();\n-            display_offset += chars_read;\n+            sb.append(System.lineSeparator());\n+            obj.append(sb);\n+            sb.setLength();\n+            n3 += n5;\n         }\n     }\n     \n-    public static void dump(final byte[] data, final long offset, final OutputStream stream, final int index) throws IOException, ArrayIndexOutOfBoundsException {\n-        Objects.requireNonNull(stream, \"stream\");\n-        try (final OutputStreamWriter out = new OutputStreamWriter((OutputStream)CloseShieldOutputStream.wrap(stream), Charset.defaultCharset())) {\n-            dump(data, offset, out, index, data.length - index);\n+    public static void dump(final byte[] array, final long n, final OutputStream obj, final int n2) throws IOException, ArrayIndexOutOfBoundsException {\n+        Objects.requireNonNull(obj, \"stream\");\n+        try (final OutputStreamWriter outputStreamWriter = new OutputStreamWriter((OutputStream)CloseShieldOutputStream.wrap(obj), Charset.defaultCharset())) {\n+            dump(array, n, outputStreamWriter, n2, array.length - n2);\n         }\n     }\n     \n-    private static StringBuilder dump(final StringBuilder _cbuffer, final byte value) {\n-        for (int j = 0; j < 2; ++j) {\n-            _cbuffer.append(HexDump.HEX_CODES[value >> HexDump.SHIFTS[j + 6] & 0xF]);\n+    private static StringBuilder dump(final StringBuilder sb, final byte b) {\n+        for (int i = 0; i < 2; ++i) {\n+            sb.append(HexDump.HEX_CODES[b >> HexDump.SHIFTS[i + 6] & 0xF]);\n         }\n-        return _cbuffer;\n+        return sb;\n     }\n     \n-    private static StringBuilder dump(final StringBuilder _lbuffer, final long value) {\n-        for (int j = 0; j < 8; ++j) {\n-            _lbuffer.append(HexDump.HEX_CODES[(int)(value >> HexDump.SHIFTS[j]) & 0xF]);\n+    private static StringBuilder dump(final StringBuilder sb, final long n) {\n+        for (int i = 0; i < 8; ++i) {\n+            sb.append(HexDump.HEX_CODES[(int)(n >> HexDump.SHIFTS[i]) & 0xF]);\n         }\n-        return _lbuffer;\n+        return sb;\n     }\n     \n     static {\n         EOL = System.lineSeparator();\n         HEX_CODES = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n         SHIFTS = new int[] { 28, 24, 20, 16, 12, 8, 4, 0 };\n     }\n"}]}
