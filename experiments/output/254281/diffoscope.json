{"diffoscope-json-version": 1, "source1": "first/MatchRatingApproachEncoder.class", "source2": "second/MatchRatingApproachEncoder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,178 +18,160 @@\n     private static final int SEVEN = 7;\n     private static final int ELEVEN = 11;\n     private static final int TWELVE = 12;\n     private static final String PLAIN_ASCII = \"AaEeIiOoUuAaEeIiOoUuYyAaEeIiOoUuYyAaOoNnAaEeIiOoUuYyAaCcOoUu\";\n     private static final String UNICODE = \"\\u00c0\\u00e0\\u00c8\\u00e8\\u00cc\\u00ec\\u00d2\\u00f2\\u00d9\\u00f9\\u00c1\\u00e1\\u00c9\\u00e9\\u00cd\\u00ed\\u00d3\\u00f3\\u00da\\u00fa\\u00dd\\u00fd\\u00c2\\u00e2\\u00ca\\u00ea\\u00ce\\u00ee\\u00d4\\u00f4\\u00db\\u00fb\\u0176\\u0177\\u00c3\\u00e3\\u00d5\\u00f5\\u00d1\\u00f1\\u00c4\\u00e4\\u00cb\\u00eb\\u00cf\\u00ef\\u00d6\\u00f6\\u00dc\\u00fc\\u0178\\u00ff\\u00c5\\u00e5\\u00c7\\u00e7\\u0150\\u0151\\u0170\\u0171\";\n     private static final String[] DOUBLE_CONSONANT;\n     \n-    String cleanName(final String name) {\n-        String upperName = name.toUpperCase(Locale.ENGLISH);\n-        final String[] array;\n-        final String[] charsToTrim = array = new String[] { \"\\\\-\", \"[&]\", \"\\\\'\", \"\\\\.\", \"[\\\\,]\" };\n-        for (final String str : array) {\n-            upperName = upperName.replaceAll(str, \"\");\n-        }\n-        upperName = this.removeAccents(upperName);\n-        upperName = upperName.replaceAll(\"\\\\s+\", \"\");\n-        return upperName;\n+    String cleanName(final String s) {\n+        String s2 = s.toUpperCase(Locale.ENGLISH);\n+        final String[] array = { \"\\\\-\", \"[&]\", \"\\\\'\", \"\\\\.\", \"[\\\\,]\" };\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            s2 = s2.replaceAll(array[i], \"\");\n+        }\n+        return this.removeAccents(s2).replaceAll(\"\\\\s+\", \"\");\n     }\n     \n-    public final Object encode(final Object pObject) throws EncoderException {\n-        if (!(pObject instanceof String)) {\n+    public final Object encode(final Object o) throws EncoderException {\n+        if (!(o instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\");\n         }\n-        return this.encode((String)pObject);\n+        return this.encode((String)o);\n     }\n     \n-    public final String encode(String name) {\n-        if (name == null || \"\".equalsIgnoreCase(name) || \" \".equalsIgnoreCase(name) || name.length() == 1) {\n+    public final String encode(String s) {\n+        if (s == null || \"\".equalsIgnoreCase(s) || \" \".equalsIgnoreCase(s) || s.length() == 1) {\n             return \"\";\n         }\n-        name = this.cleanName(name);\n-        name = this.removeVowels(name);\n-        name = this.removeDoubleConsonants(name);\n-        name = this.getFirst3Last3(name);\n-        return name;\n+        s = this.cleanName(s);\n+        s = this.removeVowels(s);\n+        s = this.removeDoubleConsonants(s);\n+        s = this.getFirst3Last3(s);\n+        return s;\n     }\n     \n-    String getFirst3Last3(final String name) {\n-        final int nameLength = name.length();\n-        if (nameLength > 6) {\n-            final String firstThree = name.substring(0, 3);\n-            final String lastThree = name.substring(nameLength - 3, nameLength);\n-            return firstThree + lastThree;\n+    String getFirst3Last3(final String s) {\n+        final int length = s.length();\n+        if (length > 6) {\n+            return s.substring(0, 3) + s.substring(length - 3, length);\n         }\n-        return name;\n+        return s;\n     }\n     \n-    int getMinRating(final int sumLength) {\n-        int minRating = 0;\n-        if (sumLength <= 4) {\n-            minRating = 5;\n+    int getMinRating(final int n) {\n+        int n2;\n+        if (n <= 4) {\n+            n2 = 5;\n         }\n-        else if (sumLength <= 7) {\n-            minRating = 4;\n+        else if (n <= 7) {\n+            n2 = 4;\n         }\n-        else if (sumLength <= 11) {\n-            minRating = 3;\n+        else if (n <= 11) {\n+            n2 = 3;\n         }\n-        else if (sumLength == 12) {\n-            minRating = 2;\n+        else if (n == 12) {\n+            n2 = 2;\n         }\n         else {\n-            minRating = 1;\n+            n2 = 1;\n         }\n-        return minRating;\n+        return n2;\n     }\n     \n-    public boolean isEncodeEquals(String name1, String name2) {\n-        if (name1 == null || \"\".equalsIgnoreCase(name1) || \" \".equalsIgnoreCase(name1)) {\n+    public boolean isEncodeEquals(String s, String anotherString) {\n+        if (s == null || \"\".equalsIgnoreCase(s) || \" \".equalsIgnoreCase(s)) {\n             return false;\n         }\n-        if (name2 == null || \"\".equalsIgnoreCase(name2) || \" \".equalsIgnoreCase(name2)) {\n+        if (anotherString == null || \"\".equalsIgnoreCase(anotherString) || \" \".equalsIgnoreCase(anotherString)) {\n             return false;\n         }\n-        if (name1.length() == 1 || name2.length() == 1) {\n+        if (s.length() == 1 || anotherString.length() == 1) {\n             return false;\n         }\n-        if (name1.equalsIgnoreCase(name2)) {\n+        if (s.equalsIgnoreCase(anotherString)) {\n             return true;\n         }\n-        name1 = this.cleanName(name1);\n-        name2 = this.cleanName(name2);\n-        name1 = this.removeVowels(name1);\n-        name2 = this.removeVowels(name2);\n-        name1 = this.removeDoubleConsonants(name1);\n-        name2 = this.removeDoubleConsonants(name2);\n-        name1 = this.getFirst3Last3(name1);\n-        name2 = this.getFirst3Last3(name2);\n-        if (Math.abs(name1.length() - name2.length()) >= 3) {\n-            return false;\n-        }\n-        final int sumLength = Math.abs(name1.length() + name2.length());\n-        int minRating = 0;\n-        minRating = this.getMinRating(sumLength);\n-        final int count = this.leftToRightThenRightToLeftProcessing(name1, name2);\n-        return count >= minRating;\n-    }\n-    \n-    boolean isVowel(final String letter) {\n-        return letter.equalsIgnoreCase(\"E\") || letter.equalsIgnoreCase(\"A\") || letter.equalsIgnoreCase(\"O\") || letter.equalsIgnoreCase(\"I\") || letter.equalsIgnoreCase(\"U\");\n-    }\n-    \n-    int leftToRightThenRightToLeftProcessing(final String name1, final String name2) {\n-        final char[] name1Char = name1.toCharArray();\n-        final char[] name2Char = name2.toCharArray();\n-        final int name1Size = name1.length() - 1;\n-        final int name2Size = name2.length() - 1;\n-        String name1LtRStart = \"\";\n-        String name1LtREnd = \"\";\n-        String name2RtLStart = \"\";\n-        String name2RtLEnd = \"\";\n-        for (int i = 0; i < name1Char.length && i <= name2Size; ++i) {\n-            name1LtRStart = name1.substring(i, i + 1);\n-            name1LtREnd = name1.substring(name1Size - i, name1Size - i + 1);\n-            name2RtLStart = name2.substring(i, i + 1);\n-            name2RtLEnd = name2.substring(name2Size - i, name2Size - i + 1);\n-            if (name1LtRStart.equals(name2RtLStart)) {\n-                name2Char[i] = (name1Char[i] = ' ');\n+        s = this.cleanName(s);\n+        anotherString = this.cleanName(anotherString);\n+        s = this.removeVowels(s);\n+        anotherString = this.removeVowels(anotherString);\n+        s = this.removeDoubleConsonants(s);\n+        anotherString = this.removeDoubleConsonants(anotherString);\n+        s = this.getFirst3Last3(s);\n+        anotherString = this.getFirst3Last3(anotherString);\n+        return Math.abs(s.length() - anotherString.length()) < 3 && this.leftToRightThenRightToLeftProcessing(s, anotherString) >= this.getMinRating(Math.abs(s.length() + anotherString.length()));\n+    }\n+    \n+    boolean isVowel(final String s) {\n+        return s.equalsIgnoreCase(\"E\") || s.equalsIgnoreCase(\"A\") || s.equalsIgnoreCase(\"O\") || s.equalsIgnoreCase(\"I\") || s.equalsIgnoreCase(\"U\");\n+    }\n+    \n+    int leftToRightThenRightToLeftProcessing(final String s, final String s2) {\n+        final char[] charArray = s.toCharArray();\n+        final char[] charArray2 = s2.toCharArray();\n+        final int n = s.length() - 1;\n+        for (int n2 = s2.length() - 1, n3 = 0; n3 < charArray.length && n3 <= n2; ++n3) {\n+            final String substring = s.substring(n3, n3 + 1);\n+            final String substring2 = s.substring(n - n3, n - n3 + 1);\n+            final String substring3 = s2.substring(n3, n3 + 1);\n+            final String substring4 = s2.substring(n2 - n3, n2 - n3 + 1);\n+            if (substring.equals(substring3)) {\n+                charArray2[n3] = (charArray[n3] = ' ');\n             }\n-            if (name1LtREnd.equals(name2RtLEnd)) {\n-                name2Char[name2Size - i] = (name1Char[name1Size - i] = ' ');\n+            if (substring2.equals(substring4)) {\n+                charArray2[n2 - n3] = (charArray[n - n3] = ' ');\n             }\n         }\n-        final String strA = new String(name1Char).replaceAll(\"\\\\s+\", \"\");\n-        final String strB = new String(name2Char).replaceAll(\"\\\\s+\", \"\");\n-        if (strA.length() > strB.length()) {\n-            return Math.abs(6 - strA.length());\n+        final String replaceAll = new String(charArray).replaceAll(\"\\\\s+\", \"\");\n+        final String replaceAll2 = new String(charArray2).replaceAll(\"\\\\s+\", \"\");\n+        if (replaceAll.length() > replaceAll2.length()) {\n+            return Math.abs(6 - replaceAll.length());\n         }\n-        return Math.abs(6 - strB.length());\n+        return Math.abs(6 - replaceAll2.length());\n     }\n     \n-    String removeAccents(final String accentedWord) {\n-        if (accentedWord == null) {\n+    String removeAccents(final String s) {\n+        if (s == null) {\n             return null;\n         }\n         final StringBuilder sb = new StringBuilder();\n-        for (int n = accentedWord.length(), i = 0; i < n; ++i) {\n-            final char c = accentedWord.charAt(i);\n-            final int pos = \"\\u00c0\\u00e0\\u00c8\\u00e8\\u00cc\\u00ec\\u00d2\\u00f2\\u00d9\\u00f9\\u00c1\\u00e1\\u00c9\\u00e9\\u00cd\\u00ed\\u00d3\\u00f3\\u00da\\u00fa\\u00dd\\u00fd\\u00c2\\u00e2\\u00ca\\u00ea\\u00ce\\u00ee\\u00d4\\u00f4\\u00db\\u00fb\\u0176\\u0177\\u00c3\\u00e3\\u00d5\\u00f5\\u00d1\\u00f1\\u00c4\\u00e4\\u00cb\\u00eb\\u00cf\\u00ef\\u00d6\\u00f6\\u00dc\\u00fc\\u0178\\u00ff\\u00c5\\u00e5\\u00c7\\u00e7\\u0150\\u0151\\u0170\\u0171\".indexOf(c);\n-            if (pos > -1) {\n-                sb.append(\"AaEeIiOoUuAaEeIiOoUuYyAaEeIiOoUuYyAaOoNnAaEeIiOoUuYyAaCcOoUu\".charAt(pos));\n+        for (int length = s.length(), i = 0; i < length; ++i) {\n+            final char char1 = s.charAt(i);\n+            final int index = \"\\u00c0\\u00e0\\u00c8\\u00e8\\u00cc\\u00ec\\u00d2\\u00f2\\u00d9\\u00f9\\u00c1\\u00e1\\u00c9\\u00e9\\u00cd\\u00ed\\u00d3\\u00f3\\u00da\\u00fa\\u00dd\\u00fd\\u00c2\\u00e2\\u00ca\\u00ea\\u00ce\\u00ee\\u00d4\\u00f4\\u00db\\u00fb\\u0176\\u0177\\u00c3\\u00e3\\u00d5\\u00f5\\u00d1\\u00f1\\u00c4\\u00e4\\u00cb\\u00eb\\u00cf\\u00ef\\u00d6\\u00f6\\u00dc\\u00fc\\u0178\\u00ff\\u00c5\\u00e5\\u00c7\\u00e7\\u0150\\u0151\\u0170\\u0171\".indexOf(char1);\n+            if (index > -1) {\n+                sb.append(\"AaEeIiOoUuAaEeIiOoUuYyAaEeIiOoUuYyAaOoNnAaEeIiOoUuYyAaCcOoUu\".charAt(index));\n             }\n             else {\n-                sb.append(c);\n+                sb.append(char1);\n             }\n         }\n         return sb.toString();\n     }\n     \n-    String removeDoubleConsonants(final String name) {\n-        String replacedName = name.toUpperCase(Locale.ENGLISH);\n-        for (final String dc : MatchRatingApproachEncoder.DOUBLE_CONSONANT) {\n-            if (replacedName.contains(dc)) {\n-                final String singleLetter = dc.substring(0, 1);\n-                replacedName = replacedName.replace(dc, singleLetter);\n+    String removeDoubleConsonants(final String s) {\n+        String s2 = s.toUpperCase(Locale.ENGLISH);\n+        for (final String s3 : MatchRatingApproachEncoder.DOUBLE_CONSONANT) {\n+            if (s2.contains(s3)) {\n+                s2 = s2.replace(s3, s3.substring(0, 1));\n             }\n         }\n-        return replacedName;\n+        return s2;\n     }\n     \n-    String removeVowels(String name) {\n-        final String firstLetter = name.substring(0, 1);\n-        name = name.replaceAll(\"A\", \"\");\n-        name = name.replaceAll(\"E\", \"\");\n-        name = name.replaceAll(\"I\", \"\");\n-        name = name.replaceAll(\"O\", \"\");\n-        name = name.replaceAll(\"U\", \"\");\n-        name = name.replaceAll(\"\\\\s{2,}\\\\b\", \" \");\n-        if (this.isVowel(firstLetter)) {\n-            return firstLetter + name;\n+    String removeVowels(String str) {\n+        final String substring = str.substring(0, 1);\n+        str = str.replaceAll(\"A\", \"\");\n+        str = str.replaceAll(\"E\", \"\");\n+        str = str.replaceAll(\"I\", \"\");\n+        str = str.replaceAll(\"O\", \"\");\n+        str = str.replaceAll(\"U\", \"\");\n+        str = str.replaceAll(\"\\\\s{2,}\\\\b\", \" \");\n+        if (this.isVowel(substring)) {\n+            return substring + str;\n         }\n-        return name;\n+        return str;\n     }\n     \n     static {\n         DOUBLE_CONSONANT = new String[] { \"BB\", \"CC\", \"DD\", \"FF\", \"GG\", \"HH\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"PP\", \"QQ\", \"RR\", \"SS\", \"TT\", \"VV\", \"WW\", \"XX\", \"YY\", \"ZZ\" };\n     }\n }\n"}]}
