{"diffoscope-json-version": 1, "source1": "first/BCELifier.class", "source2": "second/BCELifier.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,33 +10,38 @@\n import org.apache.bcel.classfile.Field;\n import java.io.Writer;\n import java.io.OutputStreamWriter;\n import java.nio.charset.StandardCharsets;\n import org.apache.bcel.classfile.Utility;\n import org.apache.bcel.generic.ArrayType;\n import java.util.Locale;\n-import org.apache.bcel.Const;\n import org.apache.bcel.generic.Type;\n import java.io.OutputStream;\n import java.io.IOException;\n import org.apache.bcel.classfile.ClassParser;\n import org.apache.bcel.Repository;\n+import org.apache.bcel.Const;\n import org.apache.bcel.generic.ConstantPoolGen;\n import java.io.PrintWriter;\n import org.apache.bcel.classfile.JavaClass;\n import org.apache.bcel.classfile.EmptyVisitor;\n \n public class BCELifier extends EmptyVisitor\n {\n     private static final String BASE_PACKAGE;\n     private static final String CONSTANT_PREFIX;\n     private final JavaClass clazz;\n     private final PrintWriter printWriter;\n     private final ConstantPoolGen constantPoolGen;\n     \n+    static {\n+        BASE_PACKAGE = Const.class.getPackage().getName();\n+        CONSTANT_PREFIX = String.valueOf(Const.class.getSimpleName()) + \".\";\n+    }\n+    \n     static JavaClass getJavaClass(final String name) throws ClassNotFoundException, IOException {\n         JavaClass javaClass;\n         if ((javaClass = Repository.lookupClass(name)) == null) {\n             javaClass = new ClassParser(name).parse();\n         }\n         return javaClass;\n     }\n@@ -85,15 +90,15 @@\n                 else if (pow == 128 && location == BCELifier.FLAGS.METHOD) {\n                     buf.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_VARARGS | \");\n                 }\n                 else if (i < Const.ACCESS_NAMES_LENGTH) {\n                     buf.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_\").append(Const.getAccessName(i).toUpperCase(Locale.ENGLISH)).append(\" | \");\n                 }\n                 else {\n-                    buf.append(String.format(BCELifier.CONSTANT_PREFIX + \"ACC_BIT %x | \", Integer.valueOf(pow)));\n+                    buf.append(String.format(String.valueOf(BCELifier.CONSTANT_PREFIX) + \"ACC_BIT %x | \", Integer.valueOf(pow)));\n                 }\n             }\n         }\n         final String str = buf.toString();\n         return str.substring(0, str.length() - 3);\n     }\n     \n@@ -204,28 +209,30 @@\n         this.printWriter.println();\n         this.printWriter.println(\"public class \" + className + \"Creator {\");\n         this.printWriter.println(\"  private InstructionFactory _factory;\");\n         this.printWriter.println(\"  private ConstantPoolGen    _cp;\");\n         this.printWriter.println(\"  private ClassGen           _cg;\");\n         this.printWriter.println();\n         this.printWriter.println(\"  public \" + className + \"Creator() {\");\n-        this.printWriter.println(\"    _cg = new ClassGen(\\\"\" + (packageName.isEmpty() ? className : (packageName + \".\" + className)) + \"\\\", \\\"\" + superName + \"\\\", \\\"\" + clazz.getSourceFileName() + \"\\\", \" + printFlags(clazz.getAccessFlags(), BCELifier.FLAGS.CLASS) + \", new String[] { \" + inter + \" });\");\n+        this.printWriter.println(\"    _cg = new ClassGen(\\\"\" + (packageName.isEmpty() ? className : (String.valueOf(packageName) + \".\" + className)) + \"\\\", \\\"\" + superName + \"\\\", \" + \"\\\"\" + clazz.getSourceFileName() + \"\\\", \" + printFlags(clazz.getAccessFlags(), BCELifier.FLAGS.CLASS) + \", \" + \"new String[] { \" + inter + \" });\");\n         this.printWriter.println(\"    _cg.setMajor(\" + clazz.getMajor() + \");\");\n         this.printWriter.println(\"    _cg.setMinor(\" + clazz.getMinor() + \");\");\n         this.printWriter.println();\n         this.printWriter.println(\"    _cp = _cg.getConstantPool();\");\n         this.printWriter.println(\"    _factory = new InstructionFactory(_cg, _cp);\");\n         this.printWriter.println(\"  }\");\n         this.printWriter.println();\n         this.printCreate();\n         final Field[] fields = clazz.getFields();\n         if (fields.length > 0) {\n             this.printWriter.println(\"  private void createFields() {\");\n             this.printWriter.println(\"    FieldGen field;\");\n-            for (final Field field : fields) {\n+            Field[] array;\n+            for (int length = (array = fields).length, j = 0; j < length; ++j) {\n+                final Field field = array[j];\n                 field.accept((Visitor)this);\n             }\n             this.printWriter.println(\"  }\");\n             this.printWriter.println();\n         }\n         final Method[] methods = clazz.getMethods();\n         for (int i = 0; i < methods.length; ++i) {\n@@ -237,32 +244,28 @@\n         this.printMain();\n         this.printWriter.println(\"}\");\n     }\n     \n     public void visitMethod(final Method method) {\n         final MethodGen mg = new MethodGen(method, this.clazz.getClassName(), this.constantPoolGen);\n         this.printWriter.println(\"    InstructionList il = new InstructionList();\");\n-        this.printWriter.println(\"    MethodGen method = new MethodGen(\" + printFlags(method.getAccessFlags(), BCELifier.FLAGS.METHOD) + \", \" + printType(mg.getReturnType()) + \", \" + printArgumentTypes(mg.getArgumentTypes()) + \", new String[] { \" + Utility.printArray((Object[])mg.getArgumentNames(), false, true) + \" }, \\\"\" + method.getName() + \"\\\", \\\"\" + this.clazz.getClassName() + \"\\\", il, _cp);\");\n+        this.printWriter.println(\"    MethodGen method = new MethodGen(\" + printFlags(method.getAccessFlags(), BCELifier.FLAGS.METHOD) + \", \" + printType(mg.getReturnType()) + \", \" + printArgumentTypes(mg.getArgumentTypes()) + \", \" + \"new String[] { \" + Utility.printArray((Object[])mg.getArgumentNames(), false, true) + \" }, \\\"\" + method.getName() + \"\\\", \\\"\" + this.clazz.getClassName() + \"\\\", il, _cp);\");\n         final ExceptionTable exceptionTable = method.getExceptionTable();\n         if (exceptionTable != null) {\n-            final String[] exceptionNames2;\n-            final String[] exceptionNames = exceptionNames2 = exceptionTable.getExceptionNames();\n-            for (final String exceptionName : exceptionNames2) {\n+            final String[] exceptionNames = exceptionTable.getExceptionNames();\n+            String[] array;\n+            for (int length = (array = exceptionNames).length, i = 0; i < length; ++i) {\n+                final String exceptionName = array[i];\n                 this.printWriter.print(\"    method.addException(\\\"\");\n                 this.printWriter.print(exceptionName);\n                 this.printWriter.println(\"\\\");\");\n             }\n         }\n         this.printWriter.println();\n         final BCELFactory factory = new BCELFactory(mg, this.printWriter);\n         factory.start();\n         this.printWriter.println(\"    method.setMaxStack();\");\n         this.printWriter.println(\"    method.setMaxLocals();\");\n         this.printWriter.println(\"    _cg.addMethod(method.getMethod());\");\n         this.printWriter.println(\"    il.dispose();\");\n     }\n-    \n-    static {\n-        BASE_PACKAGE = Const.class.getPackage().getName();\n-        CONSTANT_PREFIX = Const.class.getSimpleName() + \".\";\n-    }\n }\n"}]}
