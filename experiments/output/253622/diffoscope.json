{"diffoscope-json-version": 1, "source1": "first/MethodCallHandler.class", "source2": "second/MethodCallHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,120 +4,115 @@\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class MethodCallHandler extends AbstractExpressionHandler\n {\n     private final IndentationCheck indentCheck;\n     \n-    public MethodCallHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, \"method call\", ast, parent);\n+    public MethodCallHandler(final IndentationCheck indentCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentCheck, \"method call\", detailAST, abstractExpressionHandler);\n         this.indentCheck = indentCheck;\n     }\n     \n     protected IndentLevel getIndentImpl() {\n         IndentLevel indentLevel;\n         if (this.getParent() instanceof MethodCallHandler) {\n-            final MethodCallHandler container = (MethodCallHandler)this.getParent();\n-            if (TokenUtil.areOnSameLine(container.getMainAst(), this.getMainAst()) || this.isChainedMethodCallWrapped() || areMethodsChained(container.getMainAst(), this.getMainAst())) {\n-                indentLevel = container.getIndent();\n+            final MethodCallHandler methodCallHandler = (MethodCallHandler)this.getParent();\n+            if (TokenUtil.areOnSameLine(methodCallHandler.getMainAst(), this.getMainAst()) || this.isChainedMethodCallWrapped() || areMethodsChained(methodCallHandler.getMainAst(), this.getMainAst())) {\n+                indentLevel = methodCallHandler.getIndent();\n             }\n             else {\n-                indentLevel = new IndentLevel(container.getIndent(), new int[] { this.getIndentCheck().getLineWrappingIndentation() });\n+                indentLevel = new IndentLevel(methodCallHandler.getIndent(), new int[] { this.getIndentCheck().getLineWrappingIndentation() });\n             }\n         }\n         else if (this.getMainAst().getFirstChild().getType() == 136) {\n             indentLevel = super.getIndentImpl();\n         }\n         else {\n-            final DetailAstSet astSet = new DetailAstSet(this.indentCheck);\n-            this.findSubtreeAst(astSet, this.getMainAst().getFirstChild(), true);\n-            final int firstCol = this.expandedTabsColumnNo(astSet.firstLine());\n+            final DetailAstSet set = new DetailAstSet(this.indentCheck);\n+            this.findSubtreeAst(set, this.getMainAst().getFirstChild(), true);\n+            final int expandedTabsColumnNo = this.expandedTabsColumnNo(set.firstLine());\n             final int lineStart = this.getLineStart(getFirstAst(this.getMainAst()));\n-            if (lineStart == firstCol) {\n+            if (lineStart == expandedTabsColumnNo) {\n                 indentLevel = super.getIndentImpl();\n             }\n             else {\n                 indentLevel = new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n     \n-    private static boolean areMethodsChained(final DetailAST ast1, final DetailAST ast2) {\n-        final DetailAST rparen = ast1.findFirstToken(77);\n-        return TokenUtil.areOnSameLine(rparen, ast2);\n+    private static boolean areMethodsChained(final DetailAST detailAST, final DetailAST detailAST2) {\n+        return TokenUtil.areOnSameLine(detailAST.findFirstToken(77), detailAST2);\n     }\n     \n     private boolean isChainedMethodCallWrapped() {\n-        boolean result = false;\n-        final DetailAST main = this.getMainAst();\n-        final DetailAST dot = main.getFirstChild();\n-        final DetailAST target = dot.getFirstChild();\n-        final DetailAST dot2 = target.getFirstChild();\n-        final DetailAST target2 = dot2.getFirstChild();\n-        if (dot2.getType() == 59 && target2.getType() == 27) {\n-            result = true;\n-        }\n-        return result;\n-    }\n-    \n-    private static DetailAST getFirstAst(final DetailAST ast) {\n-        DetailAST astNode;\n-        for (astNode = ast.getFirstChild(); astNode.getType() == 59; astNode = astNode.getFirstChild()) {}\n-        return astNode;\n+        boolean b = false;\n+        final DetailAST firstChild = this.getMainAst().getFirstChild().getFirstChild().getFirstChild();\n+        final DetailAST firstChild2 = firstChild.getFirstChild();\n+        if (firstChild.getType() == 59 && firstChild2.getType() == 27) {\n+            b = true;\n+        }\n+        return b;\n+    }\n+    \n+    private static DetailAST getFirstAst(final DetailAST detailAST) {\n+        DetailAST detailAST2;\n+        for (detailAST2 = detailAST.getFirstChild(); detailAST2.getType() == 59; detailAST2 = detailAST2.getFirstChild()) {}\n+        return detailAST2;\n     }\n     \n     private DetailAST getMethodIdentAst() {\n-        DetailAST ast = this.getMainAst();\n-        if (ast.getType() != 42) {\n-            ast = ast.getFirstChild();\n-            if (ast.getType() == 59) {\n-                ast = ast.getLastChild();\n+        DetailAST detailAST = this.getMainAst();\n+        if (detailAST.getType() != 42) {\n+            detailAST = detailAST.getFirstChild();\n+            if (detailAST.getType() == 59) {\n+                detailAST = detailAST.getLastChild();\n             }\n         }\n-        return ast;\n+        return detailAST;\n     }\n     \n-    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler child) {\n-        final DetailAST ident = this.getMethodIdentAst();\n-        final DetailAST rparen = this.getMainAst().findFirstToken(77);\n-        IndentLevel suggestedLevel = new IndentLevel(this.getLineStart(ident));\n-        if (!TokenUtil.areOnSameLine(child.getMainAst().getFirstChild(), ident)) {\n-            suggestedLevel = new IndentLevel(suggestedLevel, new int[] { this.getBasicOffset(), this.getIndentCheck().getLineWrappingIndentation() });\n+    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler abstractExpressionHandler) {\n+        final DetailAST methodIdentAst = this.getMethodIdentAst();\n+        final DetailAST firstToken = this.getMainAst().findFirstToken(77);\n+        IndentLevel addAcceptable = new IndentLevel(this.getLineStart(methodIdentAst));\n+        if (!TokenUtil.areOnSameLine(abstractExpressionHandler.getMainAst().getFirstChild(), methodIdentAst)) {\n+            addAcceptable = new IndentLevel(addAcceptable, new int[] { this.getBasicOffset(), this.getIndentCheck().getLineWrappingIndentation() });\n         }\n-        if (this.getLineStart(rparen) == rparen.getColumnNo()) {\n-            suggestedLevel = IndentLevel.addAcceptable(suggestedLevel, new IndentLevel(this.getParent().getSuggestedChildIndent((AbstractExpressionHandler)this), new int[] { this.getIndentCheck().getLineWrappingIndentation() }));\n+        if (this.getLineStart(firstToken) == firstToken.getColumnNo()) {\n+            addAcceptable = IndentLevel.addAcceptable(addAcceptable, new IndentLevel(this.getParent().getSuggestedChildIndent((AbstractExpressionHandler)this), new int[] { this.getIndentCheck().getLineWrappingIndentation() }));\n         }\n-        return suggestedLevel;\n+        return addAcceptable;\n     }\n     \n     public void checkIndentation() {\n-        DetailAST lparen = null;\n+        DetailAST detailAST = null;\n         if (this.getMainAst().getType() == 27) {\n-            final DetailAST exprNode = this.getMainAst().getParent();\n-            if (exprNode.getParent().getType() == 7) {\n+            if (this.getMainAst().getParent().getParent().getType() == 7) {\n                 this.checkExpressionSubtree(this.getMainAst().getFirstChild(), this.getIndent(), false, false);\n-                lparen = this.getMainAst();\n+                detailAST = this.getMainAst();\n             }\n         }\n         else {\n-            lparen = this.getMainAst().getFirstChild();\n+            detailAST = this.getMainAst().getFirstChild();\n         }\n-        if (lparen != null) {\n-            final DetailAST rparen = this.getMainAst().findFirstToken(77);\n-            this.checkLeftParen(lparen);\n-            if (!TokenUtil.areOnSameLine(rparen, lparen)) {\n+        if (detailAST != null) {\n+            final DetailAST firstToken = this.getMainAst().findFirstToken(77);\n+            this.checkLeftParen(detailAST);\n+            if (!TokenUtil.areOnSameLine(firstToken, detailAST)) {\n                 this.checkExpressionSubtree(this.getMainAst().findFirstToken(34), new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() }), false, true);\n-                this.checkRightParen(lparen, rparen);\n+                this.checkRightParen(detailAST, firstToken);\n                 this.checkWrappingIndentation(this.getMainAst(), getCallLastNode(this.getMainAst()));\n             }\n         }\n     }\n     \n     protected boolean shouldIncreaseIndent() {\n         return false;\n     }\n     \n-    private static DetailAST getCallLastNode(final DetailAST firstNode) {\n-        return firstNode.getLastChild();\n+    private static DetailAST getCallLastNode(final DetailAST detailAST) {\n+        return detailAST.getLastChild();\n     }\n }\n"}]}
