{"diffoscope-json-version": 1, "source1": "first/LZWInputStream.class", "source2": "second/LZWInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -75,39 +75,39 @@\n     \n     protected abstract int addEntry(final int p0, final byte p1) throws IOException;\n     \n     protected void setClearCode(final int n) {\n         this.clearCode = 1 << n - 1;\n     }\n     \n-    protected void initializeTables(final int i, final int n) throws MemoryLimitException {\n-        if (i <= 0) {\n-            throw new IllegalArgumentException(\"maxCodeSize is \" + i + \", must be bigger than 0\");\n+    protected void initializeTables(final int n, final int n2) throws MemoryLimitException {\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\"maxCodeSize is \" + n + \", must be bigger than 0\");\n         }\n-        if (n > -1) {\n-            final long n2 = (1 << i) * 6L >> 10;\n-            if (n2 > n) {\n-                throw new MemoryLimitException(n2, n);\n+        if (n2 > -1) {\n+            final long n3 = (1 << n) * 6L >> 10;\n+            if (n3 > n2) {\n+                throw new MemoryLimitException(n3, n2);\n             }\n         }\n-        this.initializeTables(i);\n+        this.initializeTables(n);\n     }\n     \n-    protected void initializeTables(final int i) {\n-        if (i <= 0) {\n-            throw new IllegalArgumentException(\"maxCodeSize is \" + i + \", must be bigger than 0\");\n+    protected void initializeTables(final int n) {\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\"maxCodeSize is \" + n + \", must be bigger than 0\");\n         }\n-        final int outputStackLocation = 1 << i;\n+        final int outputStackLocation = 1 << n;\n         this.prefixes = new int[outputStackLocation];\n         this.characters = new byte[outputStackLocation];\n         this.outputStack = new byte[outputStackLocation];\n         this.outputStackLocation = outputStackLocation;\n-        for (int j = 0; j < 256; ++j) {\n-            this.prefixes[j] = -1;\n-            this.characters[j] = (byte)j;\n+        for (int i = 0; i < 256; ++i) {\n+            this.prefixes[i] = -1;\n+            this.characters[i] = (byte)i;\n         }\n     }\n     \n     protected int readNextCode() throws IOException {\n         if (this.codeSize > 31) {\n             throw new IllegalArgumentException(\"Code size must not be bigger than 31\");\n         }\n"}]}
