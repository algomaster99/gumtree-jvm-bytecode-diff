{"diffoscope-json-version": 1, "source1": "first/JsonWriteFeature.class", "source2": "second/JsonWriteFeature.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,35 +2,37 @@\n package com.fasterxml.jackson.core.json;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.FormatFeature;\n \n public enum JsonWriteFeature implements FormatFeature\n {\n-    QUOTE_FIELD_NAMES(true, JsonGenerator.Feature.QUOTE_FIELD_NAMES), \n-    WRITE_NAN_AS_STRINGS(true, JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS), \n-    WRITE_NUMBERS_AS_STRINGS(false, JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS), \n-    ESCAPE_NON_ASCII(false, JsonGenerator.Feature.ESCAPE_NON_ASCII), \n-    WRITE_HEX_UPPER_CASE(true, JsonGenerator.Feature.WRITE_HEX_UPPER_CASE);\n+    QUOTE_FIELD_NAMES(\"QUOTE_FIELD_NAMES\", 0, true, JsonGenerator.Feature.QUOTE_FIELD_NAMES), \n+    WRITE_NAN_AS_STRINGS(\"WRITE_NAN_AS_STRINGS\", 1, true, JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS), \n+    WRITE_NUMBERS_AS_STRINGS(\"WRITE_NUMBERS_AS_STRINGS\", 2, false, JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS), \n+    ESCAPE_NON_ASCII(\"ESCAPE_NON_ASCII\", 3, false, JsonGenerator.Feature.ESCAPE_NON_ASCII), \n+    WRITE_HEX_UPPER_CASE(\"WRITE_HEX_UPPER_CASE\", 4, true, JsonGenerator.Feature.WRITE_HEX_UPPER_CASE);\n     \n     private final boolean _defaultState;\n     private final int _mask;\n     private final JsonGenerator.Feature _mappedFeature;\n     \n     public static int collectDefaults() {\n         int flags = 0;\n-        for (final JsonWriteFeature f : values()) {\n+        JsonWriteFeature[] values;\n+        for (int length = (values = values()).length, i = 0; i < length; ++i) {\n+            final JsonWriteFeature f = values[i];\n             if (f.enabledByDefault()) {\n                 flags |= f.getMask();\n             }\n         }\n         return flags;\n     }\n     \n-    private JsonWriteFeature(final boolean defaultState, final JsonGenerator.Feature mapTo) {\n+    private JsonWriteFeature(final String name, final int ordinal, final boolean defaultState, final JsonGenerator.Feature mapTo) {\n         this._defaultState = defaultState;\n         this._mask = 1 << this.ordinal();\n         this._mappedFeature = mapTo;\n     }\n     \n     public boolean enabledByDefault() {\n         return this._defaultState;\n"}]}
