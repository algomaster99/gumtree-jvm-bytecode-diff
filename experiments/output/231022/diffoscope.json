{"diffoscope-json-version": 1, "source1": "first/AnnotationsAttribute$ElementValue.class", "source2": "second/AnnotationsAttribute$ElementValue.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,82 +16,81 @@\n     public ElementValue(final int tag, final Object value) {\n         this.constant_value_index = -1;\n         this.tag = tag;\n         this.value = value;\n     }\n     \n     public List<Object> getClassFileEntries() {\n-        final List<Object> entries = new ArrayList<Object>(1);\n+        final ArrayList list = new ArrayList(1);\n         if (this.value instanceof CPNameAndType) {\n-            entries.add(((CPNameAndType)this.value).name);\n-            entries.add(((CPNameAndType)this.value).descriptor);\n+            list.add(((CPNameAndType)this.value).name);\n+            list.add(((CPNameAndType)this.value).descriptor);\n         }\n         else if (this.value instanceof ClassFileEntry) {\n-            entries.add(this.value);\n+            list.add(this.value);\n         }\n         else if (this.value instanceof ElementValue[]) {\n-            final ElementValue[] array;\n-            final ElementValue[] values = array = (ElementValue[])this.value;\n-            for (final ElementValue value2 : array) {\n-                entries.addAll(value2.getClassFileEntries());\n+            final ElementValue[] array = (ElementValue[])this.value;\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                list.addAll(array[i].getClassFileEntries());\n             }\n         }\n         else if (this.value instanceof AnnotationsAttribute.Annotation) {\n-            entries.addAll(((AnnotationsAttribute.Annotation)this.value).getClassFileEntries());\n+            list.addAll(((AnnotationsAttribute.Annotation)this.value).getClassFileEntries());\n         }\n-        return entries;\n+        return list;\n     }\n     \n-    public void resolve(final ClassConstantPool pool) {\n+    public void resolve(final ClassConstantPool classConstantPool) {\n         if (this.value instanceof CPConstant) {\n-            ((CPConstant)this.value).resolve(pool);\n-            this.constant_value_index = pool.indexOf((ClassFileEntry)(CPConstant)this.value);\n+            ((CPConstant)this.value).resolve(classConstantPool);\n+            this.constant_value_index = classConstantPool.indexOf((ClassFileEntry)(CPConstant)this.value);\n         }\n         else if (this.value instanceof CPClass) {\n-            ((CPClass)this.value).resolve(pool);\n-            this.constant_value_index = pool.indexOf((ClassFileEntry)(CPClass)this.value);\n+            ((CPClass)this.value).resolve(classConstantPool);\n+            this.constant_value_index = classConstantPool.indexOf((ClassFileEntry)(CPClass)this.value);\n         }\n         else if (this.value instanceof CPUTF8) {\n-            ((CPUTF8)this.value).resolve(pool);\n-            this.constant_value_index = pool.indexOf((ClassFileEntry)(CPUTF8)this.value);\n+            ((CPUTF8)this.value).resolve(classConstantPool);\n+            this.constant_value_index = classConstantPool.indexOf((ClassFileEntry)(CPUTF8)this.value);\n         }\n         else if (this.value instanceof CPNameAndType) {\n-            ((CPNameAndType)this.value).resolve(pool);\n+            ((CPNameAndType)this.value).resolve(classConstantPool);\n         }\n         else if (this.value instanceof AnnotationsAttribute.Annotation) {\n-            ((AnnotationsAttribute.Annotation)this.value).resolve(pool);\n+            ((AnnotationsAttribute.Annotation)this.value).resolve(classConstantPool);\n         }\n         else if (this.value instanceof ElementValue[]) {\n-            final ElementValue[] array;\n-            final ElementValue[] nestedValues = array = (ElementValue[])this.value;\n-            for (final ElementValue nestedValue : array) {\n-                nestedValue.resolve(pool);\n+            final ElementValue[] array = (ElementValue[])this.value;\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                array[i].resolve(classConstantPool);\n             }\n         }\n     }\n     \n-    public void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeByte(this.tag);\n+    public void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(this.tag);\n         if (this.constant_value_index != -1) {\n-            dos.writeShort(this.constant_value_index);\n+            dataOutputStream.writeShort(this.constant_value_index);\n         }\n         else if (this.value instanceof CPNameAndType) {\n-            ((CPNameAndType)this.value).writeBody(dos);\n+            ((CPNameAndType)this.value).writeBody(dataOutputStream);\n         }\n         else if (this.value instanceof AnnotationsAttribute.Annotation) {\n-            ((AnnotationsAttribute.Annotation)this.value).writeBody(dos);\n+            ((AnnotationsAttribute.Annotation)this.value).writeBody(dataOutputStream);\n         }\n         else {\n             if (!(this.value instanceof ElementValue[])) {\n                 throw new Error(\"\");\n             }\n-            final ElementValue[] nestedValues = (ElementValue[])this.value;\n-            dos.writeShort(nestedValues.length);\n-            for (final ElementValue nestedValue : nestedValues) {\n-                nestedValue.writeBody(dos);\n+            final ElementValue[] array = (ElementValue[])this.value;\n+            dataOutputStream.writeShort(array.length);\n+            final ElementValue[] array2 = array;\n+            for (int length = array2.length, i = 0; i < length; ++i) {\n+                array2[i].writeBody(dataOutputStream);\n             }\n         }\n     }\n     \n     public int getLength() {\n         switch (this.tag) {\n             case 66:\n@@ -106,21 +105,20 @@\n             case 115: {\n                 return 3;\n             }\n             case 101: {\n                 return 5;\n             }\n             case 91: {\n-                int length = 3;\n-                final ElementValue[] array;\n-                final ElementValue[] nestedValues = array = (ElementValue[])this.value;\n-                for (final ElementValue nestedValue : array) {\n-                    length += nestedValue.getLength();\n+                int n = 3;\n+                final ElementValue[] array = (ElementValue[])this.value;\n+                for (int length = array.length, i = 0; i < length; ++i) {\n+                    n += array[i].getLength();\n                 }\n-                return length;\n+                return n;\n             }\n             case 64: {\n                 return 1 + ((AnnotationsAttribute.Annotation)this.value).getLength();\n             }\n             default: {\n                 return 0;\n             }\n"}]}
