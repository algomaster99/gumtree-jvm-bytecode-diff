{"diffoscope-json-version": 1, "source1": "first/CombinedBeanDeclaration.class", "source2": "second/CombinedBeanDeclaration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,13 @@\n \n package org.apache.commons.configuration2.beanutils;\n \n import java.util.Iterator;\n+import java.util.function.BiConsumer;\n+import java.util.function.Supplier;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Collections;\n import java.util.Map;\n import java.util.function.Predicate;\n import java.util.Objects;\n import java.util.function.Function;\n@@ -13,51 +15,52 @@\n import java.util.Arrays;\n import java.util.ArrayList;\n \n public class CombinedBeanDeclaration implements BeanDeclaration\n {\n     private final ArrayList<BeanDeclaration> childDeclarations;\n     \n-    public CombinedBeanDeclaration(final BeanDeclaration... decl) {\n-        this.childDeclarations = new ArrayList<BeanDeclaration>(Arrays.asList(decl));\n+    public CombinedBeanDeclaration(final BeanDeclaration... a) {\n+        this.childDeclarations = new ArrayList<BeanDeclaration>(Arrays.asList(a));\n     }\n     \n     public String getBeanFactoryName() {\n         return this.findFirst((Function<? super BeanDeclaration, ? extends String>)BeanDeclaration::getBeanFactoryName);\n     }\n     \n-    private <T> T findFirst(final Function<? super BeanDeclaration, ? extends T> mapper) {\n-        return this.childDeclarations.stream().map((Function<? super Object, ? extends T>)mapper).filter(Objects::nonNull).findFirst().orElse(null);\n+    private <T> T findFirst(final Function<? super BeanDeclaration, ? extends T> function) {\n+        return this.childDeclarations.stream().map((Function<? super Object, ? extends T>)function).filter(Objects::nonNull).findFirst().orElse(null);\n     }\n     \n     public Object getBeanFactoryParameter() {\n         return this.findFirst((Function<? super BeanDeclaration, ?>)BeanDeclaration::getBeanFactoryParameter);\n     }\n     \n     public String getBeanClassName() {\n         return this.findFirst((Function<? super BeanDeclaration, ? extends String>)BeanDeclaration::getBeanClassName);\n     }\n     \n     public Map<String, Object> getBeanProperties() {\n         return this.get(BeanDeclaration::getBeanProperties);\n     }\n     \n-    private Map<String, Object> get(final Function<? super BeanDeclaration, ? extends Map<String, Object>> mapper) {\n-        final ArrayList<BeanDeclaration> temp = (ArrayList)this.childDeclarations.clone();\n-        Collections.reverse(temp);\n-        return temp.stream().map((Function<? super Object, ?>)mapper).filter(Objects::nonNull).collect(HashMap::new, HashMap::putAll, HashMap::putAll);\n+    private Map<String, Object> get(final Function<? super BeanDeclaration, ? extends Map<String, Object>> function) {\n+        final ArrayList list = (ArrayList)this.childDeclarations.clone();\n+        Collections.reverse(list);\n+        return (Map)list.stream().map(function).filter(Objects::nonNull).collect(HashMap::new, HashMap::putAll, HashMap::putAll);\n     }\n     \n     public Map<String, Object> getNestedBeanDeclarations() {\n         return this.get(BeanDeclaration::getNestedBeanDeclarations);\n     }\n     \n     public Collection<ConstructorArg> getConstructorArgs() {\n-        for (final BeanDeclaration d : this.childDeclarations) {\n-            final Collection<ConstructorArg> args = d.getConstructorArgs();\n-            if (args != null && !args.isEmpty()) {\n-                return args;\n+        final Iterator<BeanDeclaration> iterator = this.childDeclarations.iterator();\n+        while (iterator.hasNext()) {\n+            final Collection constructorArgs = ((BeanDeclaration)iterator.next()).getConstructorArgs();\n+            if (constructorArgs != null && !constructorArgs.isEmpty()) {\n+                return constructorArgs;\n             }\n         }\n         return (Collection<ConstructorArg>)Collections.emptyList();\n     }\n }\n"}]}
