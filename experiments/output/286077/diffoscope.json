{"diffoscope-json-version": 1, "source1": "first/Hex.class", "source2": "second/Hex.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,89 +1,89 @@\n-  SHA-256 checksum 043b4389896cd5a16e0662e9cee415966bdcca2bf80ce2a2d2c14e8156c40345\n+  SHA-256 checksum 1be6cef1ce7579b3a2cff6fabdc635d44dac93f96ed5c59a4b40ea4a21d2a72e\n   Compiled from \"Hex.java\"\n public class org.apache.commons.codec.binary.Hex implements org.apache.commons.codec.BinaryEncoder,org.apache.commons.codec.BinaryDecoder\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #63                         // org/apache/commons/codec/binary/Hex\n   super_class: #64                        // java/lang/Object\n   interfaces: 2, fields: 5, methods: 31, attributes: 1\n Constant pool:\n-    #1 = Class              #122          // org/apache/commons/codec/CharEncoding\n-    #2 = Methodref          #63.#123      // org/apache/commons/codec/binary/Hex.decodeHex:([C[BI)I\n-    #3 = Class              #124          // org/apache/commons/codec/DecoderException\n-    #4 = String             #125          // Odd number of characters.\n-    #5 = Methodref          #3.#126       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n-    #6 = String             #127          // Output array is not large enough to accommodate decoded data.\n-    #7 = Methodref          #63.#128      // org/apache/commons/codec/binary/Hex.toDigit:(CI)I\n-    #8 = Methodref          #18.#129      // java/lang/String.toCharArray:()[C\n-    #9 = Methodref          #63.#130      // org/apache/commons/codec/binary/Hex.decodeHex:([C)[B\n-   #10 = Methodref          #63.#131      // org/apache/commons/codec/binary/Hex.encodeHex:([BZ)[C\n-   #11 = Fieldref           #63.#132      // org/apache/commons/codec/binary/Hex.DIGITS_LOWER:[C\n-   #12 = Fieldref           #63.#133      // org/apache/commons/codec/binary/Hex.DIGITS_UPPER:[C\n-   #13 = Methodref          #63.#134      // org/apache/commons/codec/binary/Hex.encodeHex:([B[C)[C\n-   #14 = Methodref          #63.#135      // org/apache/commons/codec/binary/Hex.encodeHex:([BII[C[CI)V\n-   #15 = Methodref          #63.#136      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n-   #16 = Methodref          #63.#137      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n-   #17 = Methodref          #63.#138      // org/apache/commons/codec/binary/Hex.toByteArray:(Ljava/nio/ByteBuffer;)[B\n-   #18 = Class              #139          // java/lang/String\n-   #19 = Methodref          #63.#140      // org/apache/commons/codec/binary/Hex.encodeHex:([B)[C\n-   #20 = Methodref          #18.#141      // java/lang/String.\"<init>\":([C)V\n-   #21 = Methodref          #63.#142      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;)[C\n-   #22 = Methodref          #46.#143      // java/nio/ByteBuffer.remaining:()I\n-   #23 = Methodref          #46.#144      // java/nio/ByteBuffer.hasArray:()Z\n-   #24 = Methodref          #46.#145      // java/nio/ByteBuffer.array:()[B\n-   #25 = Methodref          #46.#146      // java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;\n-   #26 = Methodref          #46.#147      // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n-   #27 = Methodref          #148.#149     // java/lang/Character.digit:(CI)I\n-   #28 = Class              #150          // java/lang/StringBuilder\n-   #29 = Methodref          #28.#151      // java/lang/StringBuilder.\"<init>\":()V\n-   #30 = String             #152          // Illegal hexadecimal character\n-   #31 = Methodref          #28.#153      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #32 = Methodref          #28.#154      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #33 = String             #155          //  at index\n-   #34 = Methodref          #28.#156      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #35 = Methodref          #28.#157      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #36 = Methodref          #64.#151      // java/lang/Object.\"<init>\":()V\n-   #37 = Fieldref           #63.#158      // org/apache/commons/codec/binary/Hex.DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n-   #38 = Fieldref           #63.#159      // org/apache/commons/codec/binary/Hex.charset:Ljava/nio/charset/Charset;\n-   #39 = Methodref          #160.#161     // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #40 = Methodref          #63.#162      // org/apache/commons/codec/binary/Hex.\"<init>\":(Ljava/nio/charset/Charset;)V\n-   #41 = Methodref          #63.#163      // org/apache/commons/codec/binary/Hex.getCharset:()Ljava/nio/charset/Charset;\n-   #42 = Methodref          #18.#164      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-   #43 = Methodref          #63.#165      // org/apache/commons/codec/binary/Hex.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #44 = Class              #166          // \"[B\"\n-   #45 = Methodref          #63.#167      // org/apache/commons/codec/binary/Hex.decode:([B)[B\n-   #46 = Class              #168          // java/nio/ByteBuffer\n-   #47 = Methodref          #63.#169      // org/apache/commons/codec/binary/Hex.decode:(Ljava/nio/ByteBuffer;)[B\n+    #1 = Class              #120          // org/apache/commons/codec/CharEncoding\n+    #2 = Methodref          #63.#121      // org/apache/commons/codec/binary/Hex.decodeHex:([C[BI)I\n+    #3 = Class              #122          // org/apache/commons/codec/DecoderException\n+    #4 = String             #123          // Odd number of characters.\n+    #5 = Methodref          #3.#124       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+    #6 = String             #125          // Output array is not large enough to accommodate decoded data.\n+    #7 = Methodref          #63.#126      // org/apache/commons/codec/binary/Hex.toDigit:(CI)I\n+    #8 = Methodref          #18.#127      // java/lang/String.toCharArray:()[C\n+    #9 = Methodref          #63.#128      // org/apache/commons/codec/binary/Hex.decodeHex:([C)[B\n+   #10 = Methodref          #63.#129      // org/apache/commons/codec/binary/Hex.encodeHex:([BZ)[C\n+   #11 = Fieldref           #63.#130      // org/apache/commons/codec/binary/Hex.DIGITS_LOWER:[C\n+   #12 = Fieldref           #63.#131      // org/apache/commons/codec/binary/Hex.DIGITS_UPPER:[C\n+   #13 = Methodref          #63.#132      // org/apache/commons/codec/binary/Hex.encodeHex:([B[C)[C\n+   #14 = Methodref          #63.#133      // org/apache/commons/codec/binary/Hex.encodeHex:([BII[C[CI)V\n+   #15 = Methodref          #63.#134      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n+   #16 = Methodref          #63.#135      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n+   #17 = Methodref          #63.#136      // org/apache/commons/codec/binary/Hex.toByteArray:(Ljava/nio/ByteBuffer;)[B\n+   #18 = Class              #137          // java/lang/String\n+   #19 = Methodref          #63.#138      // org/apache/commons/codec/binary/Hex.encodeHex:([B)[C\n+   #20 = Methodref          #18.#139      // java/lang/String.\"<init>\":([C)V\n+   #21 = Methodref          #63.#140      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;)[C\n+   #22 = Methodref          #46.#141      // java/nio/ByteBuffer.remaining:()I\n+   #23 = Methodref          #46.#142      // java/nio/ByteBuffer.hasArray:()Z\n+   #24 = Methodref          #46.#143      // java/nio/ByteBuffer.array:()[B\n+   #25 = Methodref          #46.#144      // java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;\n+   #26 = Methodref          #46.#145      // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+   #27 = Methodref          #146.#147     // java/lang/Character.digit:(CI)I\n+   #28 = Class              #148          // java/lang/StringBuilder\n+   #29 = Methodref          #28.#149      // java/lang/StringBuilder.\"<init>\":()V\n+   #30 = String             #150          // Illegal hexadecimal character\n+   #31 = Methodref          #28.#151      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #32 = Methodref          #28.#152      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #33 = String             #153          //  at index\n+   #34 = Methodref          #28.#154      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #35 = Methodref          #28.#155      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #36 = Methodref          #64.#149      // java/lang/Object.\"<init>\":()V\n+   #37 = Fieldref           #63.#156      // org/apache/commons/codec/binary/Hex.DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n+   #38 = Fieldref           #63.#157      // org/apache/commons/codec/binary/Hex.charset:Ljava/nio/charset/Charset;\n+   #39 = Methodref          #158.#159     // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #40 = Methodref          #63.#160      // org/apache/commons/codec/binary/Hex.\"<init>\":(Ljava/nio/charset/Charset;)V\n+   #41 = Methodref          #63.#161      // org/apache/commons/codec/binary/Hex.getCharset:()Ljava/nio/charset/Charset;\n+   #42 = Methodref          #18.#162      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+   #43 = Methodref          #63.#163      // org/apache/commons/codec/binary/Hex.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #44 = Class              #164          // \"[B\"\n+   #45 = Methodref          #63.#165      // org/apache/commons/codec/binary/Hex.decode:([B)[B\n+   #46 = Class              #166          // java/nio/ByteBuffer\n+   #47 = Methodref          #63.#167      // org/apache/commons/codec/binary/Hex.decode:(Ljava/nio/ByteBuffer;)[B\n    #48 = Class              #74           // \"[C\"\n-   #49 = Class              #170          // java/lang/ClassCastException\n-   #50 = Methodref          #49.#171      // java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n-   #51 = Methodref          #3.#172       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #52 = Methodref          #63.#173      // org/apache/commons/codec/binary/Hex.encodeHexString:([B)Ljava/lang/String;\n-   #53 = Methodref          #18.#174      // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #54 = Methodref          #63.#175      // org/apache/commons/codec/binary/Hex.encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n-   #55 = Class              #176          // org/apache/commons/codec/EncoderException\n-   #56 = Methodref          #55.#172      // org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #57 = Methodref          #160.#177     // java/nio/charset/Charset.name:()Ljava/lang/String;\n-   #58 = Methodref          #64.#157      // java/lang/Object.toString:()Ljava/lang/String;\n-   #59 = String             #178          // [charsetName=\n-   #60 = Methodref          #28.#179      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #61 = String             #180          // ]\n-   #62 = Fieldref           #181.#182     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-   #63 = Class              #183          // org/apache/commons/codec/binary/Hex\n-   #64 = Class              #184          // java/lang/Object\n-   #65 = Class              #185          // org/apache/commons/codec/BinaryEncoder\n-   #66 = Class              #186          // org/apache/commons/codec/BinaryDecoder\n+   #49 = Class              #168          // java/lang/ClassCastException\n+   #50 = Methodref          #49.#169      // java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n+   #51 = Methodref          #3.#170       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #52 = Methodref          #63.#171      // org/apache/commons/codec/binary/Hex.encodeHexString:([B)Ljava/lang/String;\n+   #53 = Methodref          #18.#172      // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #54 = Methodref          #63.#173      // org/apache/commons/codec/binary/Hex.encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n+   #55 = Class              #174          // org/apache/commons/codec/EncoderException\n+   #56 = Methodref          #55.#170      // org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #57 = Methodref          #158.#175     // java/nio/charset/Charset.name:()Ljava/lang/String;\n+   #58 = Methodref          #64.#155      // java/lang/Object.toString:()Ljava/lang/String;\n+   #59 = String             #176          // [charsetName=\n+   #60 = Methodref          #28.#177      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #61 = String             #178          // ]\n+   #62 = Fieldref           #179.#180     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+   #63 = Class              #181          // org/apache/commons/codec/binary/Hex\n+   #64 = Class              #182          // java/lang/Object\n+   #65 = Class              #183          // org/apache/commons/codec/BinaryEncoder\n+   #66 = Class              #184          // org/apache/commons/codec/BinaryDecoder\n    #67 = Utf8               DEFAULT_CHARSET\n    #68 = Utf8               Ljava/nio/charset/Charset;\n    #69 = Utf8               DEFAULT_CHARSET_NAME\n    #70 = Utf8               Ljava/lang/String;\n    #71 = Utf8               ConstantValue\n-   #72 = String             #187          // UTF-8\n+   #72 = String             #185          // UTF-8\n    #73 = Utf8               DIGITS_LOWER\n    #74 = Utf8               [C\n    #75 = Utf8               DIGITS_UPPER\n    #76 = Utf8               charset\n    #77 = Utf8               decodeHex\n    #78 = Utf8               ([C)[B\n    #79 = Utf8               Code\n@@ -97,139 +97,137 @@\n    #87 = Utf8               ([BZ)[C\n    #88 = Utf8               ([B[C)[C\n    #89 = Utf8               ([BIIZ)[C\n    #90 = Utf8               ([BIIZ[CI)V\n    #91 = Utf8               ([BII[C[CI)V\n    #92 = Utf8               (Ljava/nio/ByteBuffer;)[C\n    #93 = Utf8               (Ljava/nio/ByteBuffer;Z)[C\n-   #94 = Class              #168          // java/nio/ByteBuffer\n-   #95 = Utf8               (Ljava/nio/ByteBuffer;[C)[C\n-   #96 = Utf8               encodeHexString\n-   #97 = Utf8               ([B)Ljava/lang/String;\n-   #98 = Utf8               ([BZ)Ljava/lang/String;\n-   #99 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/lang/String;\n-  #100 = Utf8               (Ljava/nio/ByteBuffer;Z)Ljava/lang/String;\n-  #101 = Utf8               toByteArray\n-  #102 = Utf8               (Ljava/nio/ByteBuffer;)[B\n-  #103 = Utf8               toDigit\n-  #104 = Utf8               (CI)I\n-  #105 = Utf8               <init>\n-  #106 = Utf8               ()V\n-  #107 = Utf8               (Ljava/nio/charset/Charset;)V\n-  #108 = Utf8               (Ljava/lang/String;)V\n-  #109 = Utf8               decode\n-  #110 = Utf8               ([B)[B\n-  #111 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #112 = Class              #170          // java/lang/ClassCastException\n-  #113 = Utf8               encode\n-  #114 = Utf8               getCharset\n-  #115 = Utf8               ()Ljava/nio/charset/Charset;\n-  #116 = Utf8               getCharsetName\n-  #117 = Utf8               ()Ljava/lang/String;\n-  #118 = Utf8               toString\n-  #119 = Utf8               <clinit>\n-  #120 = Utf8               SourceFile\n-  #121 = Utf8               Hex.java\n-  #122 = Utf8               org/apache/commons/codec/CharEncoding\n-  #123 = NameAndType        #77:#82       // decodeHex:([C[BI)I\n-  #124 = Utf8               org/apache/commons/codec/DecoderException\n-  #125 = Utf8               Odd number of characters.\n-  #126 = NameAndType        #105:#108     // \"<init>\":(Ljava/lang/String;)V\n-  #127 = Utf8               Output array is not large enough to accommodate decoded data.\n-  #128 = NameAndType        #103:#104     // toDigit:(CI)I\n-  #129 = NameAndType        #188:#189     // toCharArray:()[C\n-  #130 = NameAndType        #77:#78       // decodeHex:([C)[B\n-  #131 = NameAndType        #85:#87       // encodeHex:([BZ)[C\n-  #132 = NameAndType        #73:#74       // DIGITS_LOWER:[C\n-  #133 = NameAndType        #75:#74       // DIGITS_UPPER:[C\n-  #134 = NameAndType        #85:#88       // encodeHex:([B[C)[C\n-  #135 = NameAndType        #85:#91       // encodeHex:([BII[C[CI)V\n-  #136 = NameAndType        #85:#93       // encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n-  #137 = NameAndType        #85:#95       // encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n-  #138 = NameAndType        #101:#102     // toByteArray:(Ljava/nio/ByteBuffer;)[B\n-  #139 = Utf8               java/lang/String\n-  #140 = NameAndType        #85:#86       // encodeHex:([B)[C\n-  #141 = NameAndType        #105:#190     // \"<init>\":([C)V\n-  #142 = NameAndType        #85:#92       // encodeHex:(Ljava/nio/ByteBuffer;)[C\n-  #143 = NameAndType        #191:#192     // remaining:()I\n-  #144 = NameAndType        #193:#194     // hasArray:()Z\n-  #145 = NameAndType        #195:#196     // array:()[B\n-  #146 = NameAndType        #197:#198     // position:(I)Ljava/nio/Buffer;\n-  #147 = NameAndType        #199:#200     // get:([B)Ljava/nio/ByteBuffer;\n-  #148 = Class              #201          // java/lang/Character\n-  #149 = NameAndType        #202:#104     // digit:(CI)I\n-  #150 = Utf8               java/lang/StringBuilder\n-  #151 = NameAndType        #105:#106     // \"<init>\":()V\n-  #152 = Utf8               Illegal hexadecimal character\n-  #153 = NameAndType        #203:#204     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #154 = NameAndType        #203:#205     // append:(C)Ljava/lang/StringBuilder;\n-  #155 = Utf8                at index\n-  #156 = NameAndType        #203:#206     // append:(I)Ljava/lang/StringBuilder;\n-  #157 = NameAndType        #118:#117     // toString:()Ljava/lang/String;\n-  #158 = NameAndType        #67:#68       // DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n-  #159 = NameAndType        #76:#68       // charset:Ljava/nio/charset/Charset;\n-  #160 = Class              #207          // java/nio/charset/Charset\n-  #161 = NameAndType        #208:#209     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #162 = NameAndType        #105:#107     // \"<init>\":(Ljava/nio/charset/Charset;)V\n-  #163 = NameAndType        #114:#115     // getCharset:()Ljava/nio/charset/Charset;\n-  #164 = NameAndType        #105:#210     // \"<init>\":([BLjava/nio/charset/Charset;)V\n-  #165 = NameAndType        #109:#111     // decode:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #166 = Utf8               [B\n-  #167 = NameAndType        #109:#110     // decode:([B)[B\n-  #168 = Utf8               java/nio/ByteBuffer\n-  #169 = NameAndType        #109:#102     // decode:(Ljava/nio/ByteBuffer;)[B\n-  #170 = Utf8               java/lang/ClassCastException\n-  #171 = NameAndType        #211:#117     // getMessage:()Ljava/lang/String;\n-  #172 = NameAndType        #105:#212     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #173 = NameAndType        #96:#97       // encodeHexString:([B)Ljava/lang/String;\n-  #174 = NameAndType        #213:#214     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #175 = NameAndType        #96:#99       // encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n-  #176 = Utf8               org/apache/commons/codec/EncoderException\n-  #177 = NameAndType        #215:#117     // name:()Ljava/lang/String;\n-  #178 = Utf8               [charsetName=\n-  #179 = NameAndType        #203:#216     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #180 = Utf8               ]\n-  #181 = Class              #217          // java/nio/charset/StandardCharsets\n-  #182 = NameAndType        #218:#68      // UTF_8:Ljava/nio/charset/Charset;\n-  #183 = Utf8               org/apache/commons/codec/binary/Hex\n-  #184 = Utf8               java/lang/Object\n-  #185 = Utf8               org/apache/commons/codec/BinaryEncoder\n-  #186 = Utf8               org/apache/commons/codec/BinaryDecoder\n-  #187 = Utf8               UTF-8\n-  #188 = Utf8               toCharArray\n-  #189 = Utf8               ()[C\n-  #190 = Utf8               ([C)V\n-  #191 = Utf8               remaining\n-  #192 = Utf8               ()I\n-  #193 = Utf8               hasArray\n-  #194 = Utf8               ()Z\n-  #195 = Utf8               array\n-  #196 = Utf8               ()[B\n-  #197 = Utf8               position\n-  #198 = Utf8               (I)Ljava/nio/Buffer;\n-  #199 = Utf8               get\n-  #200 = Utf8               ([B)Ljava/nio/ByteBuffer;\n-  #201 = Utf8               java/lang/Character\n-  #202 = Utf8               digit\n-  #203 = Utf8               append\n-  #204 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #205 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #206 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #207 = Utf8               java/nio/charset/Charset\n-  #208 = Utf8               forName\n-  #209 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #210 = Utf8               ([BLjava/nio/charset/Charset;)V\n-  #211 = Utf8               getMessage\n-  #212 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #213 = Utf8               getBytes\n-  #214 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #215 = Utf8               name\n-  #216 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #217 = Utf8               java/nio/charset/StandardCharsets\n-  #218 = Utf8               UTF_8\n+   #94 = Utf8               (Ljava/nio/ByteBuffer;[C)[C\n+   #95 = Utf8               encodeHexString\n+   #96 = Utf8               ([B)Ljava/lang/String;\n+   #97 = Utf8               ([BZ)Ljava/lang/String;\n+   #98 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/lang/String;\n+   #99 = Utf8               (Ljava/nio/ByteBuffer;Z)Ljava/lang/String;\n+  #100 = Utf8               toByteArray\n+  #101 = Utf8               (Ljava/nio/ByteBuffer;)[B\n+  #102 = Utf8               toDigit\n+  #103 = Utf8               (CI)I\n+  #104 = Utf8               <init>\n+  #105 = Utf8               ()V\n+  #106 = Utf8               (Ljava/nio/charset/Charset;)V\n+  #107 = Utf8               (Ljava/lang/String;)V\n+  #108 = Utf8               decode\n+  #109 = Utf8               ([B)[B\n+  #110 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #111 = Utf8               encode\n+  #112 = Utf8               getCharset\n+  #113 = Utf8               ()Ljava/nio/charset/Charset;\n+  #114 = Utf8               getCharsetName\n+  #115 = Utf8               ()Ljava/lang/String;\n+  #116 = Utf8               toString\n+  #117 = Utf8               <clinit>\n+  #118 = Utf8               SourceFile\n+  #119 = Utf8               Hex.java\n+  #120 = Utf8               org/apache/commons/codec/CharEncoding\n+  #121 = NameAndType        #77:#82       // decodeHex:([C[BI)I\n+  #122 = Utf8               org/apache/commons/codec/DecoderException\n+  #123 = Utf8               Odd number of characters.\n+  #124 = NameAndType        #104:#107     // \"<init>\":(Ljava/lang/String;)V\n+  #125 = Utf8               Output array is not large enough to accommodate decoded data.\n+  #126 = NameAndType        #102:#103     // toDigit:(CI)I\n+  #127 = NameAndType        #186:#187     // toCharArray:()[C\n+  #128 = NameAndType        #77:#78       // decodeHex:([C)[B\n+  #129 = NameAndType        #85:#87       // encodeHex:([BZ)[C\n+  #130 = NameAndType        #73:#74       // DIGITS_LOWER:[C\n+  #131 = NameAndType        #75:#74       // DIGITS_UPPER:[C\n+  #132 = NameAndType        #85:#88       // encodeHex:([B[C)[C\n+  #133 = NameAndType        #85:#91       // encodeHex:([BII[C[CI)V\n+  #134 = NameAndType        #85:#93       // encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n+  #135 = NameAndType        #85:#94       // encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n+  #136 = NameAndType        #100:#101     // toByteArray:(Ljava/nio/ByteBuffer;)[B\n+  #137 = Utf8               java/lang/String\n+  #138 = NameAndType        #85:#86       // encodeHex:([B)[C\n+  #139 = NameAndType        #104:#188     // \"<init>\":([C)V\n+  #140 = NameAndType        #85:#92       // encodeHex:(Ljava/nio/ByteBuffer;)[C\n+  #141 = NameAndType        #189:#190     // remaining:()I\n+  #142 = NameAndType        #191:#192     // hasArray:()Z\n+  #143 = NameAndType        #193:#194     // array:()[B\n+  #144 = NameAndType        #195:#196     // position:(I)Ljava/nio/Buffer;\n+  #145 = NameAndType        #197:#198     // get:([B)Ljava/nio/ByteBuffer;\n+  #146 = Class              #199          // java/lang/Character\n+  #147 = NameAndType        #200:#103     // digit:(CI)I\n+  #148 = Utf8               java/lang/StringBuilder\n+  #149 = NameAndType        #104:#105     // \"<init>\":()V\n+  #150 = Utf8               Illegal hexadecimal character\n+  #151 = NameAndType        #201:#202     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #152 = NameAndType        #201:#203     // append:(C)Ljava/lang/StringBuilder;\n+  #153 = Utf8                at index\n+  #154 = NameAndType        #201:#204     // append:(I)Ljava/lang/StringBuilder;\n+  #155 = NameAndType        #116:#115     // toString:()Ljava/lang/String;\n+  #156 = NameAndType        #67:#68       // DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n+  #157 = NameAndType        #76:#68       // charset:Ljava/nio/charset/Charset;\n+  #158 = Class              #205          // java/nio/charset/Charset\n+  #159 = NameAndType        #206:#207     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #160 = NameAndType        #104:#106     // \"<init>\":(Ljava/nio/charset/Charset;)V\n+  #161 = NameAndType        #112:#113     // getCharset:()Ljava/nio/charset/Charset;\n+  #162 = NameAndType        #104:#208     // \"<init>\":([BLjava/nio/charset/Charset;)V\n+  #163 = NameAndType        #108:#110     // decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #164 = Utf8               [B\n+  #165 = NameAndType        #108:#109     // decode:([B)[B\n+  #166 = Utf8               java/nio/ByteBuffer\n+  #167 = NameAndType        #108:#101     // decode:(Ljava/nio/ByteBuffer;)[B\n+  #168 = Utf8               java/lang/ClassCastException\n+  #169 = NameAndType        #209:#115     // getMessage:()Ljava/lang/String;\n+  #170 = NameAndType        #104:#210     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #171 = NameAndType        #95:#96       // encodeHexString:([B)Ljava/lang/String;\n+  #172 = NameAndType        #211:#212     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #173 = NameAndType        #95:#98       // encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n+  #174 = Utf8               org/apache/commons/codec/EncoderException\n+  #175 = NameAndType        #213:#115     // name:()Ljava/lang/String;\n+  #176 = Utf8               [charsetName=\n+  #177 = NameAndType        #201:#214     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #178 = Utf8               ]\n+  #179 = Class              #215          // java/nio/charset/StandardCharsets\n+  #180 = NameAndType        #216:#68      // UTF_8:Ljava/nio/charset/Charset;\n+  #181 = Utf8               org/apache/commons/codec/binary/Hex\n+  #182 = Utf8               java/lang/Object\n+  #183 = Utf8               org/apache/commons/codec/BinaryEncoder\n+  #184 = Utf8               org/apache/commons/codec/BinaryDecoder\n+  #185 = Utf8               UTF-8\n+  #186 = Utf8               toCharArray\n+  #187 = Utf8               ()[C\n+  #188 = Utf8               ([C)V\n+  #189 = Utf8               remaining\n+  #190 = Utf8               ()I\n+  #191 = Utf8               hasArray\n+  #192 = Utf8               ()Z\n+  #193 = Utf8               array\n+  #194 = Utf8               ()[B\n+  #195 = Utf8               position\n+  #196 = Utf8               (I)Ljava/nio/Buffer;\n+  #197 = Utf8               get\n+  #198 = Utf8               ([B)Ljava/nio/ByteBuffer;\n+  #199 = Utf8               java/lang/Character\n+  #200 = Utf8               digit\n+  #201 = Utf8               append\n+  #202 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #203 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #204 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #205 = Utf8               java/nio/charset/Charset\n+  #206 = Utf8               forName\n+  #207 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #208 = Utf8               ([BLjava/nio/charset/Charset;)V\n+  #209 = Utf8               getMessage\n+  #210 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #211 = Utf8               getBytes\n+  #212 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #213 = Utf8               name\n+  #214 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #215 = Utf8               java/nio/charset/StandardCharsets\n+  #216 = Utf8               UTF_8\n {\n   public static final java.nio.charset.Charset DEFAULT_CHARSET;\n     descriptor: Ljava/nio/charset/Charset;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final java.lang.String DEFAULT_CHARSET_NAME = \"UTF-8\";\n     descriptor: Ljava/lang/String;\n@@ -862,60 +860,58 @@\n          8: aload_1\n          9: checkcast     #18                 // class java/lang/String\n         12: invokevirtual #8                  // Method java/lang/String.toCharArray:()[C\n         15: invokevirtual #43                 // Method decode:(Ljava/lang/Object;)Ljava/lang/Object;\n         18: areturn\n         19: aload_1\n         20: instanceof    #44                 // class \"[B\"\n-        23: ifeq          38\n+        23: ifeq          35\n         26: aload_0\n         27: aload_1\n         28: checkcast     #44                 // class \"[B\"\n-        31: checkcast     #44                 // class \"[B\"\n-        34: invokevirtual #45                 // Method decode:([B)[B\n-        37: areturn\n-        38: aload_1\n-        39: instanceof    #46                 // class java/nio/ByteBuffer\n-        42: ifeq          54\n-        45: aload_0\n-        46: aload_1\n-        47: checkcast     #46                 // class java/nio/ByteBuffer\n-        50: invokevirtual #47                 // Method decode:(Ljava/nio/ByteBuffer;)[B\n-        53: areturn\n-        54: aload_1\n-        55: checkcast     #48                 // class \"[C\"\n-        58: checkcast     #48                 // class \"[C\"\n-        61: invokestatic  #9                  // Method decodeHex:([C)[B\n-        64: areturn\n-        65: astore_2\n-        66: new           #3                  // class org/apache/commons/codec/DecoderException\n-        69: dup\n-        70: aload_2\n-        71: invokevirtual #50                 // Method java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n-        74: aload_2\n-        75: invokespecial #51                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-        78: athrow\n+        31: invokevirtual #45                 // Method decode:([B)[B\n+        34: areturn\n+        35: aload_1\n+        36: instanceof    #46                 // class java/nio/ByteBuffer\n+        39: ifeq          51\n+        42: aload_0\n+        43: aload_1\n+        44: checkcast     #46                 // class java/nio/ByteBuffer\n+        47: invokevirtual #47                 // Method decode:(Ljava/nio/ByteBuffer;)[B\n+        50: areturn\n+        51: aload_1\n+        52: checkcast     #48                 // class \"[C\"\n+        55: invokestatic  #9                  // Method decodeHex:([C)[B\n+        58: areturn\n+        59: astore_2\n+        60: new           #3                  // class org/apache/commons/codec/DecoderException\n+        63: dup\n+        64: aload_2\n+        65: invokevirtual #50                 // Method java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n+        68: aload_2\n+        69: invokespecial #51                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        72: athrow\n       Exception table:\n          from    to  target type\n-            54    64    65   Class java/lang/ClassCastException\n+            51    58    59   Class java/lang/ClassCastException\n       LineNumberTable:\n         line 452: 0\n         line 453: 7\n         line 455: 19\n         line 456: 26\n-        line 458: 38\n-        line 459: 45\n-        line 462: 54\n-        line 463: 65\n-        line 464: 66\n+        line 458: 35\n+        line 459: 42\n+        line 462: 51\n+        line 463: 59\n+        line 464: 60\n       StackMapTable: number_of_entries = 4\n         frame_type = 19 /* same */\n-        frame_type = 18 /* same */\n         frame_type = 15 /* same */\n-        frame_type = 74 /* same_locals_1_stack_item */\n+        frame_type = 15 /* same */\n+        frame_type = 71 /* same_locals_1_stack_item */\n           stack = [ class java/lang/ClassCastException ]\n     Exceptions:\n       throws org.apache.commons.codec.DecoderException\n \n   public byte[] encode(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0001) ACC_PUBLIC\n@@ -954,56 +950,55 @@\n          4: ifeq          22\n          7: aload_1\n          8: checkcast     #18                 // class java/lang/String\n         11: aload_0\n         12: invokevirtual #41                 // Method getCharset:()Ljava/nio/charset/Charset;\n         15: invokevirtual #53                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         18: astore_2\n-        19: goto          65\n+        19: goto          62\n         22: aload_1\n         23: instanceof    #46                 // class java/nio/ByteBuffer\n         26: ifeq          40\n         29: aload_1\n         30: checkcast     #46                 // class java/nio/ByteBuffer\n         33: invokestatic  #17                 // Method toByteArray:(Ljava/nio/ByteBuffer;)[B\n         36: astore_2\n-        37: goto          65\n+        37: goto          62\n         40: aload_1\n         41: checkcast     #44                 // class \"[B\"\n-        44: checkcast     #44                 // class \"[B\"\n-        47: astore_2\n-        48: goto          65\n-        51: astore_3\n-        52: new           #55                 // class org/apache/commons/codec/EncoderException\n-        55: dup\n-        56: aload_3\n-        57: invokevirtual #50                 // Method java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n-        60: aload_3\n-        61: invokespecial #56                 // Method org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-        64: athrow\n-        65: aload_2\n-        66: invokestatic  #19                 // Method encodeHex:([B)[C\n-        69: areturn\n+        44: astore_2\n+        45: goto          62\n+        48: astore_3\n+        49: new           #55                 // class org/apache/commons/codec/EncoderException\n+        52: dup\n+        53: aload_3\n+        54: invokevirtual #50                 // Method java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n+        57: aload_3\n+        58: invokespecial #56                 // Method org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        61: athrow\n+        62: aload_2\n+        63: invokestatic  #19                 // Method encodeHex:([B)[C\n+        66: areturn\n       Exception table:\n          from    to  target type\n-            40    48    51   Class java/lang/ClassCastException\n+            40    45    48   Class java/lang/ClassCastException\n       LineNumberTable:\n         line 524: 0\n         line 525: 7\n         line 526: 22\n         line 527: 29\n         line 530: 40\n-        line 533: 48\n-        line 531: 51\n-        line 532: 52\n-        line 535: 65\n+        line 533: 45\n+        line 531: 48\n+        line 532: 49\n+        line 535: 62\n       StackMapTable: number_of_entries = 4\n         frame_type = 22 /* same */\n         frame_type = 17 /* same */\n-        frame_type = 74 /* same_locals_1_stack_item */\n+        frame_type = 71 /* same_locals_1_stack_item */\n           stack = [ class java/lang/ClassCastException ]\n         frame_type = 252 /* append */\n           offset_delta = 13\n           locals = [ class \"[B\" ]\n     Exceptions:\n       throws org.apache.commons.codec.EncoderException\n \n"}]}
