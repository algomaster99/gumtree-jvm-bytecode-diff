{"diffoscope-json-version": 1, "source1": "first/UnsynchronizedByteArrayOutputStream.class", "source2": "second/UnsynchronizedByteArrayOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,59 +8,59 @@\n \n public final class UnsynchronizedByteArrayOutputStream extends AbstractByteArrayOutputStream\n {\n     public UnsynchronizedByteArrayOutputStream() {\n         this(1024);\n     }\n     \n-    public UnsynchronizedByteArrayOutputStream(final int size) {\n-        if (size < 0) {\n-            throw new IllegalArgumentException(\"Negative initial size: \" + size);\n+    public UnsynchronizedByteArrayOutputStream(final int i) {\n+        if (i < 0) {\n+            throw new IllegalArgumentException(\"Negative initial size: \" + i);\n         }\n-        this.needNewBuffer(size);\n+        this.needNewBuffer(i);\n     }\n     \n-    public void write(final byte[] b, final int off, final int len) {\n-        if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {\n-            throw new IndexOutOfBoundsException(String.format(\"offset=%,d, length=%,d\", Integer.valueOf(off), Integer.valueOf(len)));\n+    public void write(final byte[] array, final int i, final int j) {\n+        if (i < 0 || i > array.length || j < 0 || i + j > array.length || i + j < 0) {\n+            throw new IndexOutOfBoundsException(String.format(\"offset=%,d, length=%,d\", Integer.valueOf(i), Integer.valueOf(j)));\n         }\n-        if (len == 0) {\n+        if (j == 0) {\n             return;\n         }\n-        this.writeImpl(b, off, len);\n+        this.writeImpl(array, i, j);\n     }\n     \n-    public void write(final int b) {\n-        this.writeImpl(b);\n+    public void write(final int n) {\n+        this.writeImpl(n);\n     }\n     \n-    public int write(final InputStream in) throws IOException {\n-        return this.writeImpl(in);\n+    public int write(final InputStream inputStream) throws IOException {\n+        return this.writeImpl(inputStream);\n     }\n     \n     public int size() {\n         return this.count;\n     }\n     \n     public void reset() {\n         this.resetImpl();\n     }\n     \n-    public void writeTo(final OutputStream out) throws IOException {\n-        this.writeToImpl(out);\n+    public void writeTo(final OutputStream outputStream) throws IOException {\n+        this.writeToImpl(outputStream);\n     }\n     \n-    public static InputStream toBufferedInputStream(final InputStream input) throws IOException {\n-        return toBufferedInputStream(input, 1024);\n+    public static InputStream toBufferedInputStream(final InputStream inputStream) throws IOException {\n+        return toBufferedInputStream(inputStream, 1024);\n     }\n     \n-    public static InputStream toBufferedInputStream(final InputStream input, final int size) throws IOException {\n-        try (final UnsynchronizedByteArrayOutputStream output = new UnsynchronizedByteArrayOutputStream(size)) {\n-            output.write(input);\n-            return output.toInputStream();\n+    public static InputStream toBufferedInputStream(final InputStream inputStream, final int n) throws IOException {\n+        try (final UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream = new UnsynchronizedByteArrayOutputStream(n)) {\n+            unsynchronizedByteArrayOutputStream.write(inputStream);\n+            return unsynchronizedByteArrayOutputStream.toInputStream();\n         }\n     }\n     \n     public InputStream toInputStream() {\n         return this.toInputStream(UnsynchronizedByteArrayInputStream::new);\n     }\n     \n"}]}
