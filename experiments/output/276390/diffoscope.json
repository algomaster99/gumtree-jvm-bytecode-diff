{"diffoscope-json-version": 1, "source1": "first/MemberDefHandler.class", "source2": "second/MemberDefHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,58 +1,56 @@\n \n package com.puppycrawl.tools.checkstyle.checks.indentation;\n \n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class MemberDefHandler extends AbstractExpressionHandler\n {\n-    public MemberDefHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, \"member def\", ast, parent);\n+    public MemberDefHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, \"member def\", detailAST, abstractExpressionHandler);\n     }\n     \n     public void checkIndentation() {\n-        final DetailAST modifiersNode = this.getMainAst().findFirstToken(5);\n-        if (modifiersNode.hasChildren()) {\n+        if (this.getMainAst().findFirstToken(5).hasChildren()) {\n             this.checkModifiers();\n         }\n         else {\n             this.checkType();\n         }\n-        final DetailAST firstNode = this.getMainAst();\n-        final DetailAST lastNode = getVarDefStatementSemicolon(firstNode);\n-        if (lastNode != null && !isArrayDeclaration(firstNode)) {\n-            this.checkWrappingIndentation(firstNode, lastNode);\n+        final DetailAST mainAst = this.getMainAst();\n+        final DetailAST varDefStatementSemicolon = getVarDefStatementSemicolon(mainAst);\n+        if (varDefStatementSemicolon != null && !isArrayDeclaration(mainAst)) {\n+            this.checkWrappingIndentation(mainAst, varDefStatementSemicolon);\n         }\n     }\n     \n-    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler child) {\n+    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler abstractExpressionHandler) {\n         return this.getIndent();\n     }\n     \n     protected void checkModifiers() {\n-        final DetailAST modifier = this.getMainAst().findFirstToken(5);\n-        if (this.isOnStartOfLine(modifier) && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(modifier))) {\n-            this.logError(modifier, \"modifier\", this.expandedTabsColumnNo(modifier));\n+        final DetailAST firstToken = this.getMainAst().findFirstToken(5);\n+        if (this.isOnStartOfLine(firstToken) && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(firstToken))) {\n+            this.logError(firstToken, \"modifier\", this.expandedTabsColumnNo(firstToken));\n         }\n     }\n     \n     private void checkType() {\n-        final DetailAST type = this.getMainAst().findFirstToken(13);\n-        final DetailAST ident = AbstractExpressionHandler.getFirstToken(type);\n-        final int columnNo = this.expandedTabsColumnNo(ident);\n-        if (this.isOnStartOfLine(ident) && !this.getIndent().isAcceptable(columnNo)) {\n-            this.logError(ident, \"type\", columnNo);\n+        final DetailAST firstToken = AbstractExpressionHandler.getFirstToken(this.getMainAst().findFirstToken(13));\n+        final int expandedTabsColumnNo = this.expandedTabsColumnNo(firstToken);\n+        if (this.isOnStartOfLine(firstToken) && !this.getIndent().isAcceptable(expandedTabsColumnNo)) {\n+            this.logError(firstToken, \"type\", expandedTabsColumnNo);\n         }\n     }\n     \n-    private static boolean isArrayDeclaration(final DetailAST variableDef) {\n-        return variableDef.findFirstToken(13).findFirstToken(17) != null;\n+    private static boolean isArrayDeclaration(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(13).findFirstToken(17) != null;\n     }\n     \n-    private static DetailAST getVarDefStatementSemicolon(final DetailAST variableDef) {\n-        DetailAST lastNode = variableDef.getLastChild();\n-        if (lastNode.getType() != 45) {\n-            lastNode = variableDef.getNextSibling();\n+    private static DetailAST getVarDefStatementSemicolon(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getLastChild();\n+        if (detailAST2.getType() != 45) {\n+            detailAST2 = detailAST.getNextSibling();\n         }\n-        return lastNode;\n+        return detailAST2;\n     }\n }\n"}]}
