{"diffoscope-json-version": 1, "source1": "first/LZMA2Decoder.class", "source2": "second/LZMA2Decoder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,78 +12,75 @@\n \n class LZMA2Decoder extends CoderBase\n {\n     LZMA2Decoder() {\n         super(new Class[] { LZMA2Options.class, Number.class });\n     }\n     \n-    InputStream decode(final String archiveName, final InputStream in, final long uncompressedLength, final Coder coder, final byte[] password, final int maxMemoryLimitInKb) throws IOException {\n+    InputStream decode(final String s, final InputStream inputStream, final long n, final Coder coder, final byte[] array, final int n2) throws IOException {\n         try {\n             final int dictionarySize = this.getDictionarySize(coder);\n-            final int memoryUsageInKb = LZMA2InputStream.getMemoryUsage(dictionarySize);\n-            if (memoryUsageInKb > maxMemoryLimitInKb) {\n-                throw new MemoryLimitException((long)memoryUsageInKb, maxMemoryLimitInKb);\n+            final int memoryUsage = LZMA2InputStream.getMemoryUsage(dictionarySize);\n+            if (memoryUsage > n2) {\n+                throw new MemoryLimitException((long)memoryUsage, n2);\n             }\n-            return (InputStream)new LZMA2InputStream(in, dictionarySize);\n+            return (InputStream)new LZMA2InputStream(inputStream, dictionarySize);\n         }\n         catch (final IllegalArgumentException ex) {\n             throw new IOException(ex.getMessage());\n         }\n     }\n     \n-    OutputStream encode(final OutputStream out, final Object opts) throws IOException {\n-        final LZMA2Options options = this.getOptions(opts);\n-        final FinishableOutputStream wrapped = (FinishableOutputStream)new FinishableWrapperOutputStream(out);\n-        return (OutputStream)options.getOutputStream(wrapped);\n+    OutputStream encode(final OutputStream outputStream, final Object o) throws IOException {\n+        return (OutputStream)this.getOptions(o).getOutputStream((FinishableOutputStream)new FinishableWrapperOutputStream(outputStream));\n     }\n     \n-    byte[] getOptionsAsProperties(final Object opts) {\n-        final int dictSize = this.getDictSize(opts);\n-        final int lead = Integer.numberOfLeadingZeros(dictSize);\n-        final int secondBit = (dictSize >>> 30 - lead) - 2;\n-        return new byte[] { (byte)((19 - lead) * 2 + secondBit) };\n+    byte[] getOptionsAsProperties(final Object o) {\n+        final int dictSize = this.getDictSize(o);\n+        final int numberOfLeadingZeros = Integer.numberOfLeadingZeros(dictSize);\n+        return new byte[] { (byte)((19 - numberOfLeadingZeros) * 2 + ((dictSize >>> 30 - numberOfLeadingZeros) - 2)) };\n     }\n     \n-    Object getOptionsFromCoder(final Coder coder, final InputStream in) throws IOException {\n+    Object getOptionsFromCoder(final Coder coder, final InputStream inputStream) throws IOException {\n         return Integer.valueOf(this.getDictionarySize(coder));\n     }\n     \n-    private int getDictSize(final Object opts) {\n-        if (opts instanceof LZMA2Options) {\n-            return ((LZMA2Options)opts).getDictSize();\n+    private int getDictSize(final Object o) {\n+        if (o instanceof LZMA2Options) {\n+            return ((LZMA2Options)o).getDictSize();\n         }\n-        return this.numberOptionOrDefault(opts);\n+        return this.numberOptionOrDefault(o);\n     }\n     \n     private int getDictionarySize(final Coder coder) throws IOException {\n         if (coder.properties == null) {\n             throw new IOException(\"Missing LZMA2 properties\");\n         }\n         if (coder.properties.length < 1) {\n             throw new IOException(\"LZMA2 properties too short\");\n         }\n-        final int dictionarySizeBits = 0xFF & coder.properties[0];\n-        if ((dictionarySizeBits & 0xFFFFFFC0) != 0x0) {\n+        final int n = 0xFF & coder.properties[0];\n+        if ((n & 0xFFFFFFC0) != 0x0) {\n             throw new IOException(\"Unsupported LZMA2 property bits\");\n         }\n-        if (dictionarySizeBits > 40) {\n+        if (n > 40) {\n             throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n         }\n-        if (dictionarySizeBits == 40) {\n+        if (n == 40) {\n             return -1;\n         }\n-        return (0x2 | (dictionarySizeBits & 0x1)) << dictionarySizeBits / 2 + 11;\n+        return (0x2 | (n & 0x1)) << n / 2 + 11;\n     }\n     \n-    private LZMA2Options getOptions(final Object opts) throws IOException {\n-        if (opts instanceof LZMA2Options) {\n-            return (LZMA2Options)opts;\n+    private LZMA2Options getOptions(final Object o) throws IOException {\n+        if (o instanceof LZMA2Options) {\n+            return (LZMA2Options)o;\n         }\n-        final LZMA2Options options = new LZMA2Options();\n-        options.setDictSize(this.numberOptionOrDefault(opts));\n-        return options;\n+        final LZMA2Options lzma2Options = new LZMA2Options();\n+        lzma2Options.setDictSize(this.numberOptionOrDefault(o));\n+        return lzma2Options;\n     }\n     \n-    private int numberOptionOrDefault(final Object opts) {\n-        return numberOptionOrDefault(opts, 8388608);\n+    private int numberOptionOrDefault(final Object o) {\n+        return numberOptionOrDefault(o, 8388608);\n     }\n }\n"}]}
