{"diffoscope-json-version": 1, "source1": "first/FieldGen.class", "source2": "second/FieldGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,35 +17,41 @@\n \n public class FieldGen extends FieldGenOrMethodGen\n {\n     private Object value;\n     private static BCELComparator bcelComparator;\n     private List<FieldObserver> observers;\n     \n+    static {\n+        FieldGen.bcelComparator = (BCELComparator)new FieldGen.FieldGen$1();\n+    }\n+    \n     public FieldGen(final int access_flags, final Type type, final String name, final ConstantPoolGen cp) {\n         super(access_flags);\n         this.value = null;\n         this.setType(type);\n         this.setName(name);\n         this.setConstantPool(cp);\n     }\n     \n     public FieldGen(final Field field, final ConstantPoolGen cp) {\n         this(field.getAccessFlags(), Type.getType(field.getSignature()), field.getName(), cp);\n-        final Attribute[] attributes;\n-        final Attribute[] attrs = attributes = field.getAttributes();\n-        for (final Attribute attr : attributes) {\n+        final Attribute[] attrs = field.getAttributes();\n+        Attribute[] array;\n+        for (int length = (array = attrs).length, i = 0; i < length; ++i) {\n+            final Attribute attr = array[i];\n             if (attr instanceof ConstantValue) {\n                 this.setValue(((ConstantValue)attr).getConstantValueIndex());\n             }\n             else if (attr instanceof Annotations) {\n                 final Annotations runtimeAnnotations = (Annotations)attr;\n-                final AnnotationEntry[] annotationEntries2;\n-                final AnnotationEntry[] annotationEntries = annotationEntries2 = runtimeAnnotations.getAnnotationEntries();\n-                for (final AnnotationEntry element : annotationEntries2) {\n+                final AnnotationEntry[] annotationEntries = runtimeAnnotations.getAnnotationEntries();\n+                AnnotationEntry[] array2;\n+                for (int length2 = (array2 = annotationEntries).length, j = 0; j < length2; ++j) {\n+                    final AnnotationEntry element = array2[j];\n                     this.addAnnotationEntry(new AnnotationEntryGen(element, cp, false));\n                 }\n             }\n             else {\n                 this.addAttribute(attr);\n             }\n         }\n@@ -147,17 +153,18 @@\n             this.addAttribute((Attribute)new ConstantValue(super.getConstantPool().addUtf8(\"ConstantValue\"), 2, index, super.getConstantPool().getConstantPool()));\n         }\n         this.addAnnotationsAsAttribute(super.getConstantPool());\n         return new Field(super.getAccessFlags(), name_index, signature_index, this.getAttributes(), super.getConstantPool().getConstantPool());\n     }\n     \n     private void addAnnotationsAsAttribute(final ConstantPoolGen cp) {\n-        final Attribute[] annotationAttributes;\n-        final Attribute[] attrs = annotationAttributes = AnnotationEntryGen.getAnnotationAttributes(cp, super.getAnnotationEntries());\n-        for (final Attribute attr : annotationAttributes) {\n+        final Attribute[] attrs = AnnotationEntryGen.getAnnotationAttributes(cp, super.getAnnotationEntries());\n+        Attribute[] array;\n+        for (int length = (array = attrs).length, i = 0; i < length; ++i) {\n+            final Attribute attr = array[i];\n             this.addAttribute(attr);\n         }\n     }\n     \n     private int addConstant() {\n         switch (super.getType().getType()) {\n             case 4:\n@@ -215,15 +222,15 @@\n             return this.value.toString();\n         }\n         return null;\n     }\n     \n     public final String toString() {\n         String access = Utility.accessToString(super.getAccessFlags());\n-        access = (access.isEmpty() ? \"\" : (access + \" \"));\n+        access = (access.isEmpty() ? \"\" : (String.valueOf(access) + \" \"));\n         final String signature = super.getType().toString();\n         final String name = this.getName();\n         final StringBuilder buf = new StringBuilder(32);\n         buf.append(access).append(signature).append(\" \").append(name);\n         final String value = this.getInitValue();\n         if (value != null) {\n             buf.append(\" = \").append(value);\n@@ -248,12 +255,8 @@\n     public boolean equals(final Object obj) {\n         return FieldGen.bcelComparator.equals((Object)this, obj);\n     }\n     \n     public int hashCode() {\n         return FieldGen.bcelComparator.hashCode((Object)this);\n     }\n-    \n-    static {\n-        FieldGen.bcelComparator = (BCELComparator)new FieldGen.FieldGen$1();\n-    }\n }\n"}]}
