{"diffoscope-json-version": 1, "source1": "first/IOCase.class", "source2": "second/IOCase.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,25 +9,25 @@\n     INSENSITIVE(\"Insensitive\", false), \n     SYSTEM(\"System\", !FilenameUtils.isSystemWindows());\n     \n     private static final long serialVersionUID = -6343169151696340687L;\n     private final String name;\n     private final transient boolean sensitive;\n     \n-    public static IOCase forName(final String name) {\n+    public static IOCase forName(final String s) {\n         for (final IOCase ioCase : values()) {\n-            if (ioCase.getName().equals(name)) {\n+            if (ioCase.getName().equals(s)) {\n                 return ioCase;\n             }\n         }\n-        throw new IllegalArgumentException(\"Invalid IOCase name: \" + name);\n+        throw new IllegalArgumentException(\"Invalid IOCase name: \" + s);\n     }\n     \n-    private IOCase(final String name, final boolean sensitive) {\n-        this.name = name;\n+    private IOCase(final String name2, final boolean sensitive) {\n+        this.name = name2;\n         this.sensitive = sensitive;\n     }\n     \n     private Object readResolve() {\n         return forName(this.name);\n     }\n     \n@@ -35,49 +35,49 @@\n         return this.name;\n     }\n     \n     public boolean isCaseSensitive() {\n         return this.sensitive;\n     }\n     \n-    public int checkCompareTo(final String str1, final String str2) {\n-        Objects.requireNonNull(str1, \"str1\");\n-        Objects.requireNonNull(str2, \"str2\");\n-        return this.sensitive ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);\n+    public int checkCompareTo(final String obj, final String str) {\n+        Objects.requireNonNull(obj, \"str1\");\n+        Objects.requireNonNull(str, \"str2\");\n+        return this.sensitive ? obj.compareTo(str) : obj.compareToIgnoreCase(str);\n     }\n     \n-    public boolean checkEquals(final String str1, final String str2) {\n-        Objects.requireNonNull(str1, \"str1\");\n-        Objects.requireNonNull(str2, \"str2\");\n-        return this.sensitive ? str1.equals(str2) : str1.equalsIgnoreCase(str2);\n+    public boolean checkEquals(final String obj, final String anotherString) {\n+        Objects.requireNonNull(obj, \"str1\");\n+        Objects.requireNonNull(anotherString, \"str2\");\n+        return this.sensitive ? obj.equals(anotherString) : obj.equalsIgnoreCase(anotherString);\n     }\n     \n-    public boolean checkStartsWith(final String str, final String start) {\n-        return str.regionMatches(!this.sensitive, 0, start, 0, start.length());\n+    public boolean checkStartsWith(final String s, final String other) {\n+        return s.regionMatches(!this.sensitive, 0, other, 0, other.length());\n     }\n     \n-    public boolean checkEndsWith(final String str, final String end) {\n-        final int endLen = end.length();\n-        return str.regionMatches(!this.sensitive, str.length() - endLen, end, 0, endLen);\n+    public boolean checkEndsWith(final String s, final String other) {\n+        final int length = other.length();\n+        return s.regionMatches(!this.sensitive, s.length() - length, other, 0, length);\n     }\n     \n-    public int checkIndexOf(final String str, final int strStartIndex, final String search) {\n-        final int endIndex = str.length() - search.length();\n-        if (endIndex >= strStartIndex) {\n-            for (int i = strStartIndex; i <= endIndex; ++i) {\n-                if (this.checkRegionMatches(str, i, search)) {\n+    public int checkIndexOf(final String s, final int n, final String s2) {\n+        final int n2 = s.length() - s2.length();\n+        if (n2 >= n) {\n+            for (int i = n; i <= n2; ++i) {\n+                if (this.checkRegionMatches(s, i, s2)) {\n                     return i;\n                 }\n             }\n         }\n         return -1;\n     }\n     \n-    public boolean checkRegionMatches(final String str, final int strStartIndex, final String search) {\n-        return str.regionMatches(!this.sensitive, strStartIndex, search, 0, search.length());\n+    public boolean checkRegionMatches(final String s, final int toffset, final String other) {\n+        return s.regionMatches(!this.sensitive, toffset, other, 0, other.length());\n     }\n     \n     @Override\n     public String toString() {\n         return this.name;\n     }\n }\n"}]}
