{"diffoscope-json-version": 1, "source1": "first/ConfigurationInterpolator$DefaultStringConverter.class", "source2": "second/ConfigurationInterpolator$DefaultStringConverter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,34 +7,34 @@\n import java.util.function.Function;\n \n private static final class DefaultStringConverter implements Function<Object, String>\n {\n     static final DefaultStringConverter INSTANCE;\n     \n     @Override\n-    public String apply(final Object obj) {\n-        return Objects.toString(this.extractSimpleValue(obj), null);\n+    public String apply(final Object o) {\n+        return Objects.toString(this.extractSimpleValue(o), null);\n     }\n     \n-    private Object extractSimpleValue(final Object obj) {\n-        if (!(obj instanceof String)) {\n-            if (obj instanceof Iterable) {\n-                return this.nextOrNull(((Iterable)obj).iterator());\n+    private Object extractSimpleValue(final Object o) {\n+        if (!(o instanceof String)) {\n+            if (o instanceof Iterable) {\n+                return this.nextOrNull(((Iterable)o).iterator());\n             }\n-            if (obj instanceof Iterator) {\n-                return this.nextOrNull((Iterator)obj);\n+            if (o instanceof Iterator) {\n+                return this.nextOrNull((Iterator)o);\n             }\n-            if (obj.getClass().isArray()) {\n-                return (Array.getLength(obj) > 0) ? Array.get(obj, 0) : null;\n+            if (o.getClass().isArray()) {\n+                return (Array.getLength(o) > 0) ? Array.get(o, 0) : null;\n             }\n         }\n-        return obj;\n+        return o;\n     }\n     \n-    private <T> T nextOrNull(final Iterator<T> it) {\n-        return it.hasNext() ? it.next() : null;\n+    private <T> T nextOrNull(final Iterator<T> iterator) {\n+        return iterator.hasNext() ? iterator.next() : null;\n     }\n     \n     static {\n         DefaultStringConverter.INSTANCE = new DefaultStringConverter();\n     }\n }\n"}]}
