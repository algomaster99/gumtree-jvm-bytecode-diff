{"diffoscope-json-version": 1, "source1": "first/ReferenceType.class", "source2": "second/ReferenceType.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,94 +34,95 @@\n         if (this.equals((Object)Type.NULL)) {\n             return t;\n         }\n         if (t.equals((Object)Type.NULL) || this.equals((Object)t)) {\n             return this;\n         }\n         if (this instanceof ArrayType && t instanceof ArrayType) {\n-            final ArrayType arrType1 = (ArrayType)this;\n-            final ArrayType arrType2 = (ArrayType)t;\n-            if (arrType1.getDimensions() == arrType2.getDimensions() && arrType1.getBasicType() instanceof ObjectType && arrType2.getBasicType() instanceof ObjectType) {\n-                return (ReferenceType)new ArrayType((Type)((ObjectType)arrType1.getBasicType()).getFirstCommonSuperclass((ReferenceType)(ObjectType)arrType2.getBasicType()), arrType1.getDimensions());\n+            final ArrayType arrayType = (ArrayType)this;\n+            final ArrayType arrayType2 = (ArrayType)t;\n+            if (arrayType.getDimensions() == arrayType2.getDimensions() && arrayType.getBasicType() instanceof ObjectType && arrayType2.getBasicType() instanceof ObjectType) {\n+                return (ReferenceType)new ArrayType((Type)((ObjectType)arrayType.getBasicType()).getFirstCommonSuperclass((ReferenceType)(ObjectType)arrayType2.getBasicType()), arrayType.getDimensions());\n             }\n         }\n         if (this instanceof ArrayType || t instanceof ArrayType) {\n             return (ReferenceType)Type.OBJECT;\n         }\n         return this.getFirstCommonSuperclassInternal(t);\n     }\n     \n     private ReferenceType getFirstCommonSuperclassInternal(final ReferenceType t) throws ClassNotFoundException {\n         if ((this instanceof ObjectType && ((ObjectType)this).referencesInterfaceExact()) || (t instanceof ObjectType && ((ObjectType)t).referencesInterfaceExact())) {\n             return (ReferenceType)Type.OBJECT;\n         }\n-        final ObjectType thiz = (ObjectType)this;\n-        final ObjectType other = (ObjectType)t;\n-        final JavaClass[] thizSups = Repository.getSuperClasses(thiz.getClassName());\n-        final JavaClass[] otherSups = Repository.getSuperClasses(other.getClassName());\n-        if (thizSups == null || otherSups == null) {\n+        final ObjectType objectType = (ObjectType)this;\n+        final ObjectType objectType2 = (ObjectType)t;\n+        final JavaClass[] superClasses = Repository.getSuperClasses(objectType.getClassName());\n+        final JavaClass[] superClasses2 = Repository.getSuperClasses(objectType2.getClassName());\n+        if (superClasses == null || superClasses2 == null) {\n             return null;\n         }\n-        final JavaClass[] thisSups = new JavaClass[thizSups.length + 1];\n-        final JavaClass[] tSups = new JavaClass[otherSups.length + 1];\n-        System.arraycopy(thizSups, 0, thisSups, 1, thizSups.length);\n-        System.arraycopy(otherSups, 0, tSups, 1, otherSups.length);\n-        thisSups[0] = Repository.lookupClass(thiz.getClassName());\n-        tSups[0] = Repository.lookupClass(other.getClassName());\n-        for (final JavaClass tSup : tSups) {\n-            for (final JavaClass thisSup : thisSups) {\n-                if (thisSup.equals((Object)tSup)) {\n-                    return (ReferenceType)ObjectType.getInstance(thisSup.getClassName());\n+        final JavaClass[] array = new JavaClass[superClasses.length + 1];\n+        final JavaClass[] array2 = new JavaClass[superClasses2.length + 1];\n+        System.arraycopy(superClasses, 0, array, 1, superClasses.length);\n+        System.arraycopy(superClasses2, 0, array2, 1, superClasses2.length);\n+        array[0] = Repository.lookupClass(objectType.getClassName());\n+        array2[0] = Repository.lookupClass(objectType2.getClassName());\n+        for (final JavaClass javaClass : array2) {\n+            for (final JavaClass javaClass2 : array) {\n+                if (javaClass2.equals((Object)javaClass)) {\n+                    return (ReferenceType)ObjectType.getInstance(javaClass2.getClassName());\n                 }\n             }\n         }\n         return null;\n     }\n     \n     public boolean isAssignmentCompatibleWith(final Type t) throws ClassNotFoundException {\n         if (!(t instanceof ReferenceType)) {\n             return false;\n         }\n-        final ReferenceType T = (ReferenceType)t;\n+        final ReferenceType referenceType = (ReferenceType)t;\n         if (this.equals((Object)Type.NULL)) {\n             return true;\n         }\n         if (this instanceof ObjectType && ((ObjectType)this).referencesClassExact()) {\n-            if (T instanceof ObjectType && ((ObjectType)T).referencesClassExact() && (this.equals((Object)T) || Repository.instanceOf(((ObjectType)this).getClassName(), ((ObjectType)T).getClassName()))) {\n+            if (referenceType instanceof ObjectType && ((ObjectType)referenceType).referencesClassExact() && (this.equals((Object)referenceType) || Repository.instanceOf(((ObjectType)this).getClassName(), ((ObjectType)referenceType).getClassName()))) {\n                 return true;\n             }\n-            if (T instanceof ObjectType && ((ObjectType)T).referencesInterfaceExact() && Repository.implementationOf(((ObjectType)this).getClassName(), ((ObjectType)T).getClassName())) {\n+            if (referenceType instanceof ObjectType && ((ObjectType)referenceType).referencesInterfaceExact() && Repository.implementationOf(((ObjectType)this).getClassName(), ((ObjectType)referenceType).getClassName())) {\n                 return true;\n             }\n         }\n         if (this instanceof ObjectType && ((ObjectType)this).referencesInterfaceExact()) {\n-            if (T instanceof ObjectType && ((ObjectType)T).referencesClassExact() && T.equals((Object)Type.OBJECT)) {\n+            if (referenceType instanceof ObjectType && ((ObjectType)referenceType).referencesClassExact() && referenceType.equals((Object)Type.OBJECT)) {\n                 return true;\n             }\n-            if (T instanceof ObjectType && ((ObjectType)T).referencesInterfaceExact() && (this.equals((Object)T) || Repository.implementationOf(((ObjectType)this).getClassName(), ((ObjectType)T).getClassName()))) {\n+            if (referenceType instanceof ObjectType && ((ObjectType)referenceType).referencesInterfaceExact() && (this.equals((Object)referenceType) || Repository.implementationOf(((ObjectType)this).getClassName(), ((ObjectType)referenceType).getClassName()))) {\n                 return true;\n             }\n         }\n         if (this instanceof ArrayType) {\n-            if (T instanceof ObjectType && ((ObjectType)T).referencesClassExact() && T.equals((Object)Type.OBJECT)) {\n+            if (referenceType instanceof ObjectType && ((ObjectType)referenceType).referencesClassExact() && referenceType.equals((Object)Type.OBJECT)) {\n                 return true;\n             }\n-            if (T instanceof ArrayType) {\n-                final Type sc = ((ArrayType)this).getElementType();\n-                final Type tc = ((ArrayType)T).getElementType();\n-                if (sc instanceof BasicType && tc instanceof BasicType && sc.equals((Object)tc)) {\n+            if (referenceType instanceof ArrayType) {\n+                final Type elementType = ((ArrayType)this).getElementType();\n+                final Type elementType2 = ((ArrayType)referenceType).getElementType();\n+                if (elementType instanceof BasicType && elementType2 instanceof BasicType && elementType.equals((Object)elementType2)) {\n                     return true;\n                 }\n-                if (tc instanceof ReferenceType && sc instanceof ReferenceType && ((ReferenceType)sc).isAssignmentCompatibleWith(tc)) {\n+                if (elementType2 instanceof ReferenceType && elementType instanceof ReferenceType && ((ReferenceType)elementType).isAssignmentCompatibleWith(elementType2)) {\n                     return true;\n                 }\n             }\n-            if (T instanceof ObjectType && ((ObjectType)T).referencesInterfaceExact()) {\n-                for (final String element : Const.getInterfacesImplementedByArrays()) {\n-                    if (T.equals((Object)ObjectType.getInstance(element))) {\n+            if (referenceType instanceof ObjectType && ((ObjectType)referenceType).referencesInterfaceExact()) {\n+                final Iterator iterator = Const.getInterfacesImplementedByArrays().iterator();\n+                while (iterator.hasNext()) {\n+                    if (referenceType.equals((Object)ObjectType.getInstance((String)iterator.next()))) {\n                         return true;\n                     }\n                 }\n             }\n         }\n         return false;\n     }\n"}]}
