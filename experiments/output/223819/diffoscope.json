{"diffoscope-json-version": 1, "source1": "first/MissingJavadocTypeCheck.class", "source2": "second/MissingJavadocTypeCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,12 @@\n \n package com.puppycrawl.tools.checkstyle.checks.javadoc;\n \n import com.puppycrawl.tools.checkstyle.utils.AnnotationUtil;\n import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n-import com.puppycrawl.tools.checkstyle.api.TextBlock;\n-import com.puppycrawl.tools.checkstyle.api.FileContents;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.Set;\n import com.puppycrawl.tools.checkstyle.api.Scope;\n import com.puppycrawl.tools.checkstyle.StatelessCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n@@ -29,40 +27,35 @@\n         this.scope = scope;\n     }\n     \n     public void setExcludeScope(final Scope excludeScope) {\n         this.excludeScope = excludeScope;\n     }\n     \n-    public void setSkipAnnotations(final String... userAnnotations) {\n-        this.skipAnnotations = Set.of(userAnnotations);\n+    public void setSkipAnnotations(final String... elements) {\n+        this.skipAnnotations = Set.of(elements);\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getAcceptableTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 15, 14, 154, 157, 199 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (this.shouldCheck(ast)) {\n-            final FileContents contents = this.getFileContents();\n-            final int lineNo = ast.getLineNo();\n-            final TextBlock textBlock = contents.getJavadocBefore(lineNo);\n-            if (textBlock == null) {\n-                this.log(ast, \"javadoc.missing\", new Object[0]);\n-            }\n+    public void visitToken(final DetailAST detailAST) {\n+        if (this.shouldCheck(detailAST) && this.getFileContents().getJavadocBefore(detailAST.getLineNo()) == null) {\n+            this.log(detailAST, \"javadoc.missing\", new Object[0]);\n         }\n     }\n     \n-    private boolean shouldCheck(final DetailAST ast) {\n-        final Scope customScope = ScopeUtil.getScope(ast);\n-        final Scope surroundingScope = ScopeUtil.getSurroundingScope(ast);\n-        return customScope.isIn(this.scope) && (surroundingScope == null || surroundingScope.isIn(this.scope)) && (this.excludeScope == null || !customScope.isIn(this.excludeScope) || (surroundingScope != null && !surroundingScope.isIn(this.excludeScope))) && !AnnotationUtil.containsAnnotation(ast, (Set)this.skipAnnotations);\n+    private boolean shouldCheck(final DetailAST detailAST) {\n+        final Scope scope = ScopeUtil.getScope(detailAST);\n+        final Scope surroundingScope = ScopeUtil.getSurroundingScope(detailAST);\n+        return scope.isIn(this.scope) && (surroundingScope == null || surroundingScope.isIn(this.scope)) && (this.excludeScope == null || !scope.isIn(this.excludeScope) || (surroundingScope != null && !surroundingScope.isIn(this.excludeScope))) && !AnnotationUtil.containsAnnotation(detailAST, (Set)this.skipAnnotations);\n     }\n }\n"}]}
