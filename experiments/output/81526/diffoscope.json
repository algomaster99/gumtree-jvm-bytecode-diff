{"diffoscope-json-version": 1, "source1": "first/StreamCompressor.class", "source2": "second/StreamCompressor.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,202 +1,200 @@\n-  SHA-256 checksum f786ba6462e4f48226ba68184d7db15e768c8c363797fe297fb7d3a28bfac115\n+  SHA-256 checksum 4cef8671bf4ffd5d1cb614514cade2dbdd0f366d028687f1c08837dab3fc20fc\n   Compiled from \"StreamCompressor.java\"\n public abstract class org.apache.commons.compress.archivers.zip.StreamCompressor implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #11                         // org/apache/commons/compress/archivers/zip/StreamCompressor\n-  super_class: #2                         // java/lang/Object\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/StreamCompressor\n+  super_class: #3                         // java/lang/Object\n   interfaces: 1, fields: 9, methods: 22, attributes: 2\n Constant pool:\n-    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #4            // java/lang/Object\n-    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/StreamCompressor\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n+    #3 = Class              #4            // java/lang/Object\n     #4 = Utf8               java/lang/Object\n-    #5 = Utf8               <init>\n-    #6 = Utf8               ()V\n-    #7 = Class              #8            // java/util/zip/CRC32\n-    #8 = Utf8               java/util/zip/CRC32\n-    #9 = Methodref          #7.#3         // java/util/zip/CRC32.\"<init>\":()V\n-   #10 = Fieldref           #11.#12       // org/apache/commons/compress/archivers/zip/StreamCompressor.crc:Ljava/util/zip/CRC32;\n-   #11 = Class              #13           // org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #12 = NameAndType        #14:#15       // crc:Ljava/util/zip/CRC32;\n-   #13 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #14 = Utf8               crc\n-   #15 = Utf8               Ljava/util/zip/CRC32;\n-   #16 = Fieldref           #11.#17       // org/apache/commons/compress/archivers/zip/StreamCompressor.outputBuffer:[B\n-   #17 = NameAndType        #18:#19       // outputBuffer:[B\n-   #18 = Utf8               outputBuffer\n-   #19 = Utf8               [B\n-   #20 = Fieldref           #11.#21       // org/apache/commons/compress/archivers/zip/StreamCompressor.readerBuf:[B\n-   #21 = NameAndType        #22:#19       // readerBuf:[B\n-   #22 = Utf8               readerBuf\n-   #23 = Fieldref           #11.#24       // org/apache/commons/compress/archivers/zip/StreamCompressor.def:Ljava/util/zip/Deflater;\n-   #24 = NameAndType        #25:#26       // def:Ljava/util/zip/Deflater;\n-   #25 = Utf8               def\n-   #26 = Utf8               Ljava/util/zip/Deflater;\n-   #27 = Class              #28           // org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor\n-   #28 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor\n-   #29 = Methodref          #27.#30       // org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/io/OutputStream;)V\n-   #30 = NameAndType        #5:#31        // \"<init>\":(Ljava/util/zip/Deflater;Ljava/io/OutputStream;)V\n-   #31 = Utf8               (Ljava/util/zip/Deflater;Ljava/io/OutputStream;)V\n-   #32 = Class              #33           // java/util/zip/Deflater\n-   #33 = Utf8               java/util/zip/Deflater\n-   #34 = Methodref          #32.#35       // java/util/zip/Deflater.\"<init>\":(IZ)V\n-   #35 = NameAndType        #5:#36        // \"<init>\":(IZ)V\n-   #36 = Utf8               (IZ)V\n-   #37 = Methodref          #11.#38       // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #38 = NameAndType        #39:#40       // create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #39 = Utf8               create\n-   #40 = Utf8               (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #41 = Class              #42           // org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor\n-   #42 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor\n-   #43 = Methodref          #41.#44       // org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/io/DataOutput;)V\n-   #44 = NameAndType        #5:#45        // \"<init>\":(Ljava/util/zip/Deflater;Ljava/io/DataOutput;)V\n-   #45 = Utf8               (Ljava/util/zip/Deflater;Ljava/io/DataOutput;)V\n-   #46 = Class              #47           // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n-   #47 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n-   #48 = Methodref          #46.#49       // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n-   #49 = NameAndType        #5:#50        // \"<init>\":(Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n-   #50 = Utf8               (Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n-   #51 = Class              #52           // org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor\n-   #52 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor\n-   #53 = Methodref          #51.#54       // org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor.\"<init>\":(Ljava/util/zip/Deflater;Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)V\n-   #54 = NameAndType        #5:#55        // \"<init>\":(Ljava/util/zip/Deflater;Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)V\n-   #55 = Utf8               (Ljava/util/zip/Deflater;Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)V\n-   #56 = Methodref          #11.#57       // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #57 = NameAndType        #39:#58       // create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #58 = Utf8               (ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #59 = Methodref          #7.#60        // java/util/zip/CRC32.getValue:()J\n-   #60 = NameAndType        #61:#62       // getValue:()J\n-   #61 = Utf8               getValue\n-   #62 = Utf8               ()J\n-   #63 = Fieldref           #11.#64       // org/apache/commons/compress/archivers/zip/StreamCompressor.sourcePayloadLength:J\n-   #64 = NameAndType        #65:#66       // sourcePayloadLength:J\n-   #65 = Utf8               sourcePayloadLength\n-   #66 = Utf8               J\n-   #67 = Fieldref           #11.#68       // org/apache/commons/compress/archivers/zip/StreamCompressor.writtenToOutputStreamForLastEntry:J\n-   #68 = NameAndType        #69:#66       // writtenToOutputStreamForLastEntry:J\n-   #69 = Utf8               writtenToOutputStreamForLastEntry\n-   #70 = Fieldref           #11.#71       // org/apache/commons/compress/archivers/zip/StreamCompressor.totalWrittenToOutputStream:J\n-   #71 = NameAndType        #72:#66       // totalWrittenToOutputStream:J\n-   #72 = Utf8               totalWrittenToOutputStream\n-   #73 = Methodref          #11.#74       // org/apache/commons/compress/archivers/zip/StreamCompressor.reset:()V\n-   #74 = NameAndType        #75:#6        // reset:()V\n-   #75 = Utf8               reset\n-   #76 = Methodref          #77.#78       // java/io/InputStream.read:([BII)I\n-   #77 = Class              #79           // java/io/InputStream\n-   #78 = NameAndType        #80:#81       // read:([BII)I\n-   #79 = Utf8               java/io/InputStream\n-   #80 = Utf8               read\n-   #81 = Utf8               ([BII)I\n-   #82 = Methodref          #11.#83       // org/apache/commons/compress/archivers/zip/StreamCompressor.write:([BIII)J\n-   #83 = NameAndType        #84:#85       // write:([BIII)J\n-   #84 = Utf8               write\n-   #85 = Utf8               ([BIII)J\n-   #86 = Class              #87           // java/util/zip/ZipEntry\n-   #87 = Utf8               java/util/zip/ZipEntry\n-   #88 = Methodref          #11.#89       // org/apache/commons/compress/archivers/zip/StreamCompressor.flushDeflater:()V\n-   #89 = NameAndType        #90:#6        // flushDeflater:()V\n-   #90 = Utf8               flushDeflater\n-   #91 = Methodref          #7.#92        // java/util/zip/CRC32.update:([BII)V\n-   #92 = NameAndType        #93:#94       // update:([BII)V\n-   #93 = Utf8               update\n-   #94 = Utf8               ([BII)V\n-   #95 = Methodref          #11.#96       // org/apache/commons/compress/archivers/zip/StreamCompressor.writeDeflated:([BII)V\n-   #96 = NameAndType        #97:#94       // writeDeflated:([BII)V\n-   #97 = Utf8               writeDeflated\n-   #98 = Methodref          #11.#99       // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([BII)V\n-   #99 = NameAndType        #100:#94      // writeCounted:([BII)V\n-  #100 = Utf8               writeCounted\n-  #101 = Methodref          #7.#74        // java/util/zip/CRC32.reset:()V\n-  #102 = Methodref          #32.#74       // java/util/zip/Deflater.reset:()V\n-  #103 = Methodref          #32.#104      // java/util/zip/Deflater.end:()V\n-  #104 = NameAndType        #105:#6       // end:()V\n-  #105 = Utf8               end\n-  #106 = Methodref          #32.#107      // java/util/zip/Deflater.finish:()V\n-  #107 = NameAndType        #108:#6       // finish:()V\n-  #108 = Utf8               finish\n-  #109 = Methodref          #32.#110      // java/util/zip/Deflater.finished:()Z\n-  #110 = NameAndType        #111:#112     // finished:()Z\n-  #111 = Utf8               finished\n-  #112 = Utf8               ()Z\n-  #113 = Methodref          #11.#114      // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:()V\n-  #114 = NameAndType        #115:#6       // deflate:()V\n-  #115 = Utf8               deflate\n-  #116 = Methodref          #32.#117      // java/util/zip/Deflater.setInput:([BII)V\n-  #117 = NameAndType        #118:#94      // setInput:([BII)V\n-  #118 = Utf8               setInput\n-  #119 = Methodref          #11.#120      // org/apache/commons/compress/archivers/zip/StreamCompressor.deflateUntilInputIsNeeded:()V\n-  #120 = NameAndType        #121:#6       // deflateUntilInputIsNeeded:()V\n-  #121 = Utf8               deflateUntilInputIsNeeded\n-  #122 = Methodref          #32.#123      // java/util/zip/Deflater.needsInput:()Z\n-  #123 = NameAndType        #124:#112     // needsInput:()Z\n-  #124 = Utf8               needsInput\n-  #125 = Methodref          #32.#126      // java/util/zip/Deflater.deflate:([BII)I\n-  #126 = NameAndType        #115:#81      // deflate:([BII)I\n-  #127 = Methodref          #11.#128      // org/apache/commons/compress/archivers/zip/StreamCompressor.writeOut:([BII)V\n-  #128 = NameAndType        #129:#94      // writeOut:([BII)V\n-  #129 = Utf8               writeOut\n-  #130 = Class              #131          // java/io/Closeable\n-  #131 = Utf8               java/io/Closeable\n-  #132 = Utf8               DEFLATER_BLOCK_SIZE\n-  #133 = Utf8               I\n-  #134 = Utf8               ConstantValue\n-  #135 = Integer            8192\n-  #136 = Utf8               BUFFER_SIZE\n-  #137 = Integer            4096\n-  #138 = Utf8               (Ljava/util/zip/Deflater;)V\n-  #139 = Utf8               Code\n-  #140 = Utf8               LineNumberTable\n-  #141 = Utf8               LocalVariableTable\n-  #142 = Utf8               this\n-  #143 = Utf8               Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #144 = Utf8               deflater\n-  #145 = Utf8               os\n-  #146 = Utf8               Ljava/io/OutputStream;\n-  #147 = Utf8               (Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #148 = Utf8               (Ljava/io/DataOutput;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #149 = Utf8               Ljava/io/DataOutput;\n-  #150 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #151 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #152 = Utf8               compressionLevel\n-  #153 = Utf8               bs\n-  #154 = Utf8               Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n-  #155 = Utf8               (Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #156 = Utf8               getCrc32\n-  #157 = Utf8               getBytesRead\n-  #158 = Utf8               getBytesWrittenForLastEntry\n-  #159 = Utf8               getTotalBytesWritten\n-  #160 = Utf8               (Ljava/io/InputStream;I)V\n-  #161 = Utf8               source\n-  #162 = Utf8               Ljava/io/InputStream;\n-  #163 = Utf8               method\n-  #164 = Utf8               length\n-  #165 = Utf8               StackMapTable\n-  #166 = Utf8               Exceptions\n-  #167 = Class              #168          // java/io/IOException\n-  #168 = Utf8               java/io/IOException\n-  #169 = Utf8               b\n-  #170 = Utf8               offset\n-  #171 = Utf8               current\n-  #172 = Utf8               close\n-  #173 = Utf8               i\n-  #174 = Utf8               fullblocks\n-  #175 = Utf8               done\n-  #176 = Utf8               len\n-  #177 = Utf8               ([B)V\n-  #178 = Utf8               data\n-  #179 = Utf8               SourceFile\n-  #180 = Utf8               StreamCompressor.java\n-  #181 = Utf8               InnerClasses\n-  #182 = Utf8               OutputStreamCompressor\n-  #183 = Utf8               DataOutputCompressor\n-  #184 = Utf8               SeekableByteChannelCompressor\n-  #185 = Utf8               ScatterGatherBackingStoreCompressor\n+    #5 = Class              #6            // java/io/Closeable\n+    #6 = Utf8               java/io/Closeable\n+    #7 = Utf8               DEFLATER_BLOCK_SIZE\n+    #8 = Utf8               I\n+    #9 = Utf8               ConstantValue\n+   #10 = Integer            8192\n+   #11 = Utf8               def\n+   #12 = Utf8               Ljava/util/zip/Deflater;\n+   #13 = Utf8               crc\n+   #14 = Utf8               Ljava/util/zip/CRC32;\n+   #15 = Utf8               writtenToOutputStreamForLastEntry\n+   #16 = Utf8               J\n+   #17 = Utf8               sourcePayloadLength\n+   #18 = Utf8               totalWrittenToOutputStream\n+   #19 = Utf8               BUFFER_SIZE\n+   #20 = Integer            4096\n+   #21 = Utf8               outputBuffer\n+   #22 = Utf8               [B\n+   #23 = Utf8               readerBuf\n+   #24 = Utf8               <init>\n+   #25 = Utf8               (Ljava/util/zip/Deflater;)V\n+   #26 = Utf8               Code\n+   #27 = Methodref          #3.#28        // java/lang/Object.\"<init>\":()V\n+   #28 = NameAndType        #24:#29       // \"<init>\":()V\n+   #29 = Utf8               ()V\n+   #30 = Class              #31           // java/util/zip/CRC32\n+   #31 = Utf8               java/util/zip/CRC32\n+   #32 = Methodref          #30.#28       // java/util/zip/CRC32.\"<init>\":()V\n+   #33 = Fieldref           #1.#34        // org/apache/commons/compress/archivers/zip/StreamCompressor.crc:Ljava/util/zip/CRC32;\n+   #34 = NameAndType        #13:#14       // crc:Ljava/util/zip/CRC32;\n+   #35 = Fieldref           #1.#36        // org/apache/commons/compress/archivers/zip/StreamCompressor.outputBuffer:[B\n+   #36 = NameAndType        #21:#22       // outputBuffer:[B\n+   #37 = Fieldref           #1.#38        // org/apache/commons/compress/archivers/zip/StreamCompressor.readerBuf:[B\n+   #38 = NameAndType        #23:#22       // readerBuf:[B\n+   #39 = Fieldref           #1.#40        // org/apache/commons/compress/archivers/zip/StreamCompressor.def:Ljava/util/zip/Deflater;\n+   #40 = NameAndType        #11:#12       // def:Ljava/util/zip/Deflater;\n+   #41 = Utf8               LineNumberTable\n+   #42 = Utf8               LocalVariableTable\n+   #43 = Utf8               this\n+   #44 = Utf8               Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #45 = Utf8               deflater\n+   #46 = Utf8               create\n+   #47 = Utf8               (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #48 = Class              #49           // org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor\n+   #49 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor\n+   #50 = Methodref          #48.#51       // org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/io/OutputStream;)V\n+   #51 = NameAndType        #24:#52       // \"<init>\":(Ljava/util/zip/Deflater;Ljava/io/OutputStream;)V\n+   #52 = Utf8               (Ljava/util/zip/Deflater;Ljava/io/OutputStream;)V\n+   #53 = Utf8               os\n+   #54 = Utf8               Ljava/io/OutputStream;\n+   #55 = Utf8               (Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #56 = Class              #57           // java/util/zip/Deflater\n+   #57 = Utf8               java/util/zip/Deflater\n+   #58 = Methodref          #56.#59       // java/util/zip/Deflater.\"<init>\":(IZ)V\n+   #59 = NameAndType        #24:#60       // \"<init>\":(IZ)V\n+   #60 = Utf8               (IZ)V\n+   #61 = Methodref          #1.#62        // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #62 = NameAndType        #46:#47       // create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #63 = Utf8               (Ljava/io/DataOutput;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #64 = Class              #65           // org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor\n+   #65 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor\n+   #66 = Methodref          #64.#67       // org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/io/DataOutput;)V\n+   #67 = NameAndType        #24:#68       // \"<init>\":(Ljava/util/zip/Deflater;Ljava/io/DataOutput;)V\n+   #68 = Utf8               (Ljava/util/zip/Deflater;Ljava/io/DataOutput;)V\n+   #69 = Utf8               Ljava/io/DataOutput;\n+   #70 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #71 = Class              #72           // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+   #72 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+   #73 = Methodref          #71.#74       // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n+   #74 = NameAndType        #24:#75       // \"<init>\":(Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n+   #75 = Utf8               (Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n+   #76 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+   #77 = Utf8               (ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #78 = Class              #79           // org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor\n+   #79 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor\n+   #80 = Methodref          #78.#81       // org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor.\"<init>\":(Ljava/util/zip/Deflater;Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)V\n+   #81 = NameAndType        #24:#82       // \"<init>\":(Ljava/util/zip/Deflater;Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)V\n+   #82 = Utf8               (Ljava/util/zip/Deflater;Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)V\n+   #83 = Utf8               compressionLevel\n+   #84 = Utf8               bs\n+   #85 = Utf8               Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+   #86 = Utf8               (Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #87 = Methodref          #1.#88        // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #88 = NameAndType        #46:#77       // create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #89 = Utf8               getCrc32\n+   #90 = Utf8               ()J\n+   #91 = Methodref          #30.#92       // java/util/zip/CRC32.getValue:()J\n+   #92 = NameAndType        #93:#90       // getValue:()J\n+   #93 = Utf8               getValue\n+   #94 = Utf8               getBytesRead\n+   #95 = Fieldref           #1.#96        // org/apache/commons/compress/archivers/zip/StreamCompressor.sourcePayloadLength:J\n+   #96 = NameAndType        #17:#16       // sourcePayloadLength:J\n+   #97 = Utf8               getBytesWrittenForLastEntry\n+   #98 = Fieldref           #1.#99        // org/apache/commons/compress/archivers/zip/StreamCompressor.writtenToOutputStreamForLastEntry:J\n+   #99 = NameAndType        #15:#16       // writtenToOutputStreamForLastEntry:J\n+  #100 = Utf8               getTotalBytesWritten\n+  #101 = Fieldref           #1.#102       // org/apache/commons/compress/archivers/zip/StreamCompressor.totalWrittenToOutputStream:J\n+  #102 = NameAndType        #18:#16       // totalWrittenToOutputStream:J\n+  #103 = Utf8               deflate\n+  #104 = Utf8               (Ljava/io/InputStream;I)V\n+  #105 = Utf8               Exceptions\n+  #106 = Class              #107          // java/io/IOException\n+  #107 = Utf8               java/io/IOException\n+  #108 = Methodref          #1.#109       // org/apache/commons/compress/archivers/zip/StreamCompressor.reset:()V\n+  #109 = NameAndType        #110:#29      // reset:()V\n+  #110 = Utf8               reset\n+  #111 = Methodref          #1.#112       // org/apache/commons/compress/archivers/zip/StreamCompressor.write:([BIII)J\n+  #112 = NameAndType        #113:#114     // write:([BIII)J\n+  #113 = Utf8               write\n+  #114 = Utf8               ([BIII)J\n+  #115 = Methodref          #116.#118     // java/io/InputStream.read:([BII)I\n+  #116 = Class              #117          // java/io/InputStream\n+  #117 = Utf8               java/io/InputStream\n+  #118 = NameAndType        #119:#120     // read:([BII)I\n+  #119 = Utf8               read\n+  #120 = Utf8               ([BII)I\n+  #121 = Methodref          #1.#122       // org/apache/commons/compress/archivers/zip/StreamCompressor.flushDeflater:()V\n+  #122 = NameAndType        #123:#29      // flushDeflater:()V\n+  #123 = Utf8               flushDeflater\n+  #124 = Utf8               source\n+  #125 = Utf8               Ljava/io/InputStream;\n+  #126 = Utf8               method\n+  #127 = Utf8               length\n+  #128 = Utf8               StackMapTable\n+  #129 = Methodref          #30.#130      // java/util/zip/CRC32.update:([BII)V\n+  #130 = NameAndType        #131:#132     // update:([BII)V\n+  #131 = Utf8               update\n+  #132 = Utf8               ([BII)V\n+  #133 = Methodref          #1.#134       // org/apache/commons/compress/archivers/zip/StreamCompressor.writeDeflated:([BII)V\n+  #134 = NameAndType        #135:#132     // writeDeflated:([BII)V\n+  #135 = Utf8               writeDeflated\n+  #136 = Methodref          #1.#137       // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([BII)V\n+  #137 = NameAndType        #138:#132     // writeCounted:([BII)V\n+  #138 = Utf8               writeCounted\n+  #139 = Utf8               b\n+  #140 = Utf8               offset\n+  #141 = Utf8               current\n+  #142 = Methodref          #30.#109      // java/util/zip/CRC32.reset:()V\n+  #143 = Methodref          #56.#109      // java/util/zip/Deflater.reset:()V\n+  #144 = Utf8               close\n+  #145 = Methodref          #56.#146      // java/util/zip/Deflater.end:()V\n+  #146 = NameAndType        #147:#29      // end:()V\n+  #147 = Utf8               end\n+  #148 = Methodref          #56.#149      // java/util/zip/Deflater.finish:()V\n+  #149 = NameAndType        #150:#29      // finish:()V\n+  #150 = Utf8               finish\n+  #151 = Methodref          #1.#152       // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:()V\n+  #152 = NameAndType        #103:#29      // deflate:()V\n+  #153 = Methodref          #56.#154      // java/util/zip/Deflater.finished:()Z\n+  #154 = NameAndType        #155:#156     // finished:()Z\n+  #155 = Utf8               finished\n+  #156 = Utf8               ()Z\n+  #157 = Methodref          #56.#158      // java/util/zip/Deflater.setInput:([BII)V\n+  #158 = NameAndType        #159:#132     // setInput:([BII)V\n+  #159 = Utf8               setInput\n+  #160 = Methodref          #1.#161       // org/apache/commons/compress/archivers/zip/StreamCompressor.deflateUntilInputIsNeeded:()V\n+  #161 = NameAndType        #162:#29      // deflateUntilInputIsNeeded:()V\n+  #162 = Utf8               deflateUntilInputIsNeeded\n+  #163 = Utf8               fullblocks\n+  #164 = Utf8               i\n+  #165 = Utf8               done\n+  #166 = Methodref          #56.#167      // java/util/zip/Deflater.needsInput:()Z\n+  #167 = NameAndType        #168:#156     // needsInput:()Z\n+  #168 = Utf8               needsInput\n+  #169 = Methodref          #56.#170      // java/util/zip/Deflater.deflate:([BII)I\n+  #170 = NameAndType        #103:#120     // deflate:([BII)I\n+  #171 = Utf8               len\n+  #172 = Utf8               ([B)V\n+  #173 = Utf8               data\n+  #174 = Methodref          #1.#175       // org/apache/commons/compress/archivers/zip/StreamCompressor.writeOut:([BII)V\n+  #175 = NameAndType        #176:#132     // writeOut:([BII)V\n+  #176 = Utf8               writeOut\n+  #177 = Utf8               SourceFile\n+  #178 = Utf8               StreamCompressor.java\n+  #179 = Utf8               InnerClasses\n+  #180 = Utf8               DataOutputCompressor\n+  #181 = Utf8               OutputStreamCompressor\n+  #182 = Utf8               ScatterGatherBackingStoreCompressor\n+  #183 = Utf8               SeekableByteChannelCompressor\n {\n   private static final int DEFLATER_BLOCK_SIZE = 8192;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8192\n \n   private final java.util.zip.Deflater def;\n@@ -234,31 +232,31 @@\n \n   org.apache.commons.compress.archivers.zip.StreamCompressor(java.util.zip.Deflater);\n     descriptor: (Ljava/util/zip/Deflater;)V\n     flags: (0x0000)\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #27                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #7                  // class java/util/zip/CRC32\n+         5: new           #30                 // class java/util/zip/CRC32\n          8: dup\n-         9: invokespecial #9                  // Method java/util/zip/CRC32.\"<init>\":()V\n-        12: putfield      #10                 // Field crc:Ljava/util/zip/CRC32;\n+         9: invokespecial #32                 // Method java/util/zip/CRC32.\"<init>\":()V\n+        12: putfield      #33                 // Field crc:Ljava/util/zip/CRC32;\n         15: aload_0\n         16: sipush        4096\n         19: newarray       byte\n-        21: putfield      #16                 // Field outputBuffer:[B\n+        21: putfield      #35                 // Field outputBuffer:[B\n         24: aload_0\n         25: sipush        4096\n         28: newarray       byte\n-        30: putfield      #20                 // Field readerBuf:[B\n+        30: putfield      #37                 // Field readerBuf:[B\n         33: aload_0\n         34: aload_1\n-        35: putfield      #23                 // Field def:Ljava/util/zip/Deflater;\n+        35: putfield      #39                 // Field def:Ljava/util/zip/Deflater;\n         38: return\n       LineNumberTable:\n         line 63: 0\n         line 53: 4\n         line 60: 15\n         line 61: 24\n         line 64: 33\n@@ -269,98 +267,98 @@\n             0      39     1 deflater   Ljava/util/zip/Deflater;\n \n   static org.apache.commons.compress.archivers.zip.StreamCompressor create(java.io.OutputStream, java.util.zip.Deflater);\n     descriptor: (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=2\n-         0: new           #27                 // class org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor\n+         0: new           #48                 // class org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor\n          3: dup\n          4: aload_1\n          5: aload_0\n-         6: invokespecial #29                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/io/OutputStream;)V\n+         6: invokespecial #50                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/io/OutputStream;)V\n          9: areturn\n       LineNumberTable:\n         line 75: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0    os   Ljava/io/OutputStream;\n             0      10     1 deflater   Ljava/util/zip/Deflater;\n \n   static org.apache.commons.compress.archivers.zip.StreamCompressor create(java.io.OutputStream);\n     descriptor: (Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: new           #32                 // class java/util/zip/Deflater\n+         1: new           #56                 // class java/util/zip/Deflater\n          4: dup\n          5: iconst_m1\n          6: iconst_1\n-         7: invokespecial #34                 // Method java/util/zip/Deflater.\"<init>\":(IZ)V\n-        10: invokestatic  #37                 // Method create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+         7: invokespecial #58                 // Method java/util/zip/Deflater.\"<init>\":(IZ)V\n+        10: invokestatic  #61                 // Method create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n         13: areturn\n       LineNumberTable:\n         line 85: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      14     0    os   Ljava/io/OutputStream;\n \n   static org.apache.commons.compress.archivers.zip.StreamCompressor create(java.io.DataOutput, java.util.zip.Deflater);\n     descriptor: (Ljava/io/DataOutput;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=2\n-         0: new           #41                 // class org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor\n+         0: new           #64                 // class org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor\n          3: dup\n          4: aload_1\n          5: aload_0\n-         6: invokespecial #43                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/io/DataOutput;)V\n+         6: invokespecial #66                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/io/DataOutput;)V\n          9: areturn\n       LineNumberTable:\n         line 96: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0    os   Ljava/io/DataOutput;\n             0      10     1 deflater   Ljava/util/zip/Deflater;\n \n   static org.apache.commons.compress.archivers.zip.StreamCompressor create(java.nio.channels.SeekableByteChannel, java.util.zip.Deflater);\n     descriptor: (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=2\n-         0: new           #46                 // class org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+         0: new           #71                 // class org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n          3: dup\n          4: aload_1\n          5: aload_0\n-         6: invokespecial #48                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n+         6: invokespecial #73                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor.\"<init>\":(Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n          9: areturn\n       LineNumberTable:\n         line 108: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0    os   Ljava/nio/channels/SeekableByteChannel;\n             0      10     1 deflater   Ljava/util/zip/Deflater;\n \n   public static org.apache.commons.compress.archivers.zip.StreamCompressor create(int, org.apache.commons.compress.parallel.ScatterGatherBackingStore);\n     descriptor: (ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=2\n-         0: new           #32                 // class java/util/zip/Deflater\n+         0: new           #56                 // class java/util/zip/Deflater\n          3: dup\n          4: iload_0\n          5: iconst_1\n-         6: invokespecial #34                 // Method java/util/zip/Deflater.\"<init>\":(IZ)V\n+         6: invokespecial #58                 // Method java/util/zip/Deflater.\"<init>\":(IZ)V\n          9: astore_2\n-        10: new           #51                 // class org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor\n+        10: new           #78                 // class org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor\n         13: dup\n         14: aload_2\n         15: aload_1\n-        16: invokespecial #53                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor.\"<init>\":(Ljava/util/zip/Deflater;Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)V\n+        16: invokespecial #80                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor.\"<init>\":(Ljava/util/zip/Deflater;Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)V\n         19: areturn\n       LineNumberTable:\n         line 119: 0\n         line 120: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      20     0 compressionLevel   I\n@@ -370,179 +368,187 @@\n   public static org.apache.commons.compress.archivers.zip.StreamCompressor create(org.apache.commons.compress.parallel.ScatterGatherBackingStore);\n     descriptor: (Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: iconst_m1\n          1: aload_0\n-         2: invokestatic  #56                 // Method create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+         2: invokestatic  #87                 // Method create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n          5: areturn\n       LineNumberTable:\n         line 130: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0    bs   Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n \n   public long getCrc32();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field crc:Ljava/util/zip/CRC32;\n-         4: invokevirtual #59                 // Method java/util/zip/CRC32.getValue:()J\n+         1: getfield      #33                 // Field crc:Ljava/util/zip/CRC32;\n+         4: invokevirtual #91                 // Method java/util/zip/CRC32.getValue:()J\n          7: lreturn\n       LineNumberTable:\n         line 140: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n \n   public long getBytesRead();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #63                 // Field sourcePayloadLength:J\n+         1: getfield      #95                 // Field sourcePayloadLength:J\n          4: lreturn\n       LineNumberTable:\n         line 149: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n \n   public long getBytesWrittenForLastEntry();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #67                 // Field writtenToOutputStreamForLastEntry:J\n+         1: getfield      #98                 // Field writtenToOutputStreamForLastEntry:J\n          4: lreturn\n       LineNumberTable:\n         line 158: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n \n   public long getTotalBytesWritten();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #70                 // Field totalWrittenToOutputStream:J\n+         1: getfield      #101                // Field totalWrittenToOutputStream:J\n          4: lreturn\n       LineNumberTable:\n         line 167: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n \n   public void deflate(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=4, args_size=3\n          0: aload_0\n-         1: invokevirtual #73                 // Method reset:()V\n-         4: aload_1\n-         5: aload_0\n-         6: getfield      #20                 // Field readerBuf:[B\n-         9: iconst_0\n-        10: aload_0\n-        11: getfield      #20                 // Field readerBuf:[B\n-        14: arraylength\n-        15: invokevirtual #76                 // Method java/io/InputStream.read:([BII)I\n-        18: dup\n-        19: istore_3\n-        20: iflt          38\n-        23: aload_0\n-        24: aload_0\n-        25: getfield      #20                 // Field readerBuf:[B\n-        28: iconst_0\n-        29: iload_3\n-        30: iload_2\n-        31: invokevirtual #82                 // Method write:([BIII)J\n-        34: pop2\n-        35: goto          4\n+         1: invokevirtual #108                // Method reset:()V\n+         4: goto          19\n+         7: aload_0\n+         8: aload_0\n+         9: getfield      #37                 // Field readerBuf:[B\n+        12: iconst_0\n+        13: iload_3\n+        14: iload_2\n+        15: invokevirtual #111                // Method write:([BIII)J\n+        18: pop2\n+        19: aload_1\n+        20: aload_0\n+        21: getfield      #37                 // Field readerBuf:[B\n+        24: iconst_0\n+        25: aload_0\n+        26: getfield      #37                 // Field readerBuf:[B\n+        29: arraylength\n+        30: invokevirtual #115                // Method java/io/InputStream.read:([BII)I\n+        33: dup\n+        34: istore_3\n+        35: ifge          7\n         38: iload_2\n         39: bipush        8\n         41: if_icmpne     48\n         44: aload_0\n-        45: invokevirtual #88                 // Method flushDeflater:()V\n+        45: invokevirtual #121                // Method flushDeflater:()V\n         48: return\n       LineNumberTable:\n         line 180: 0\n         line 183: 4\n-        line 184: 23\n+        line 184: 7\n+        line 183: 19\n         line 186: 38\n         line 187: 44\n         line 189: 48\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      49     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n             0      49     1 source   Ljava/io/InputStream;\n             0      49     2 method   I\n-           20      29     3 length   I\n+            7      12     3 length   I\n+           35      14     3 length   I\n       StackMapTable: number_of_entries = 3\n-        frame_type = 4 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 33\n+          offset_delta = 7\n+          locals = [ int ]\n+        frame_type = 250 /* chop */\n+          offset_delta = 11\n+        frame_type = 252 /* append */\n+          offset_delta = 28\n           locals = [ int ]\n-        frame_type = 9 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   long write(byte[], int, int, int) throws java.io.IOException;\n     descriptor: ([BIII)J\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=7, args_size=5\n          0: aload_0\n-         1: getfield      #67                 // Field writtenToOutputStreamForLastEntry:J\n+         1: getfield      #98                 // Field writtenToOutputStreamForLastEntry:J\n          4: lstore        5\n          6: aload_0\n-         7: getfield      #10                 // Field crc:Ljava/util/zip/CRC32;\n+         7: getfield      #33                 // Field crc:Ljava/util/zip/CRC32;\n         10: aload_1\n         11: iload_2\n         12: iload_3\n-        13: invokevirtual #91                 // Method java/util/zip/CRC32.update:([BII)V\n+        13: invokevirtual #129                // Method java/util/zip/CRC32.update:([BII)V\n         16: iload         4\n         18: bipush        8\n         20: if_icmpne     33\n         23: aload_0\n         24: aload_1\n         25: iload_2\n         26: iload_3\n-        27: invokespecial #95                 // Method writeDeflated:([BII)V\n+        27: invokespecial #133                // Method writeDeflated:([BII)V\n         30: goto          40\n         33: aload_0\n         34: aload_1\n         35: iload_2\n         36: iload_3\n-        37: invokevirtual #98                 // Method writeCounted:([BII)V\n+        37: invokevirtual #136                // Method writeCounted:([BII)V\n         40: aload_0\n         41: dup\n-        42: getfield      #63                 // Field sourcePayloadLength:J\n+        42: getfield      #95                 // Field sourcePayloadLength:J\n         45: iload_3\n         46: i2l\n         47: ladd\n-        48: putfield      #63                 // Field sourcePayloadLength:J\n+        48: putfield      #95                 // Field sourcePayloadLength:J\n         51: aload_0\n-        52: getfield      #67                 // Field writtenToOutputStreamForLastEntry:J\n+        52: getfield      #98                 // Field writtenToOutputStreamForLastEntry:J\n         55: lload         5\n         57: lsub\n         58: lreturn\n       LineNumberTable:\n         line 202: 0\n         line 203: 6\n         line 204: 16\n         line 205: 23\n+        line 206: 30\n         line 207: 33\n         line 209: 40\n         line 210: 51\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      59     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n             0      59     1     b   [B\n@@ -551,327 +557,329 @@\n             0      59     4 method   I\n             6      53     5 current   J\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 33\n           locals = [ long ]\n         frame_type = 6 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   void reset();\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field crc:Ljava/util/zip/CRC32;\n-         4: invokevirtual #101                // Method java/util/zip/CRC32.reset:()V\n+         1: getfield      #33                 // Field crc:Ljava/util/zip/CRC32;\n+         4: invokevirtual #142                // Method java/util/zip/CRC32.reset:()V\n          7: aload_0\n-         8: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n-        11: invokevirtual #102                // Method java/util/zip/Deflater.reset:()V\n+         8: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n+        11: invokevirtual #143                // Method java/util/zip/Deflater.reset:()V\n         14: aload_0\n         15: lconst_0\n-        16: putfield      #63                 // Field sourcePayloadLength:J\n+        16: putfield      #95                 // Field sourcePayloadLength:J\n         19: aload_0\n         20: lconst_0\n-        21: putfield      #67                 // Field writtenToOutputStreamForLastEntry:J\n+        21: putfield      #98                 // Field writtenToOutputStreamForLastEntry:J\n         24: return\n       LineNumberTable:\n         line 215: 0\n         line 216: 7\n         line 217: 14\n         line 218: 19\n         line 219: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      25     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n-         4: invokevirtual #103                // Method java/util/zip/Deflater.end:()V\n+         1: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n+         4: invokevirtual #145                // Method java/util/zip/Deflater.end:()V\n          7: return\n       LineNumberTable:\n         line 223: 0\n         line 224: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-    Exceptions:\n-      throws java.io.IOException\n \n   void flushDeflater() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n-         4: invokevirtual #106                // Method java/util/zip/Deflater.finish:()V\n-         7: aload_0\n-         8: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n-        11: invokevirtual #109                // Method java/util/zip/Deflater.finished:()Z\n-        14: ifne          24\n-        17: aload_0\n-        18: invokevirtual #113                // Method deflate:()V\n-        21: goto          7\n+         1: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n+         4: invokevirtual #148                // Method java/util/zip/Deflater.finish:()V\n+         7: goto          14\n+        10: aload_0\n+        11: invokevirtual #151                // Method deflate:()V\n+        14: aload_0\n+        15: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n+        18: invokevirtual #153                // Method java/util/zip/Deflater.finished:()Z\n+        21: ifeq          10\n         24: return\n       LineNumberTable:\n         line 227: 0\n         line 228: 7\n-        line 229: 17\n+        line 229: 10\n+        line 228: 14\n         line 231: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      25     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n       StackMapTable: number_of_entries = 2\n-        frame_type = 7 /* same */\n-        frame_type = 16 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 10 /* same */\n+        frame_type = 3 /* same */\n \n   private void writeDeflated(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=6, args_size=4\n          0: iload_3\n          1: ifle          118\n          4: aload_0\n-         5: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n-         8: invokevirtual #109                // Method java/util/zip/Deflater.finished:()Z\n+         5: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n+         8: invokevirtual #153                // Method java/util/zip/Deflater.finished:()Z\n         11: ifne          118\n         14: iload_3\n         15: sipush        8192\n         18: if_icmpgt     38\n         21: aload_0\n-        22: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n+        22: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n         25: aload_1\n         26: iload_2\n         27: iload_3\n-        28: invokevirtual #116                // Method java/util/zip/Deflater.setInput:([BII)V\n+        28: invokevirtual #157                // Method java/util/zip/Deflater.setInput:([BII)V\n         31: aload_0\n-        32: invokespecial #119                // Method deflateUntilInputIsNeeded:()V\n+        32: invokespecial #160                // Method deflateUntilInputIsNeeded:()V\n         35: goto          118\n         38: iload_3\n         39: sipush        8192\n         42: idiv\n         43: istore        4\n         45: iconst_0\n         46: istore        5\n-        48: iload         5\n-        50: iload         4\n-        52: if_icmpge     84\n-        55: aload_0\n-        56: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n-        59: aload_1\n-        60: iload_2\n-        61: iload         5\n-        63: sipush        8192\n-        66: imul\n-        67: iadd\n-        68: sipush        8192\n-        71: invokevirtual #116                // Method java/util/zip/Deflater.setInput:([BII)V\n-        74: aload_0\n-        75: invokespecial #119                // Method deflateUntilInputIsNeeded:()V\n-        78: iinc          5, 1\n-        81: goto          48\n+        48: goto          77\n+        51: aload_0\n+        52: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n+        55: aload_1\n+        56: iload_2\n+        57: iload         5\n+        59: sipush        8192\n+        62: imul\n+        63: iadd\n+        64: sipush        8192\n+        67: invokevirtual #157                // Method java/util/zip/Deflater.setInput:([BII)V\n+        70: aload_0\n+        71: invokespecial #160                // Method deflateUntilInputIsNeeded:()V\n+        74: iinc          5, 1\n+        77: iload         5\n+        79: iload         4\n+        81: if_icmplt     51\n         84: iload         4\n         86: sipush        8192\n         89: imul\n         90: istore        5\n         92: iload         5\n         94: iload_3\n         95: if_icmpge     118\n         98: aload_0\n-        99: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n+        99: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n        102: aload_1\n        103: iload_2\n        104: iload         5\n        106: iadd\n        107: iload_3\n        108: iload         5\n        110: isub\n-       111: invokevirtual #116                // Method java/util/zip/Deflater.setInput:([BII)V\n+       111: invokevirtual #157                // Method java/util/zip/Deflater.setInput:([BII)V\n        114: aload_0\n-       115: invokespecial #119                // Method deflateUntilInputIsNeeded:()V\n+       115: invokespecial #160                // Method deflateUntilInputIsNeeded:()V\n        118: return\n       LineNumberTable:\n         line 235: 0\n         line 236: 14\n         line 237: 21\n         line 238: 31\n+        line 239: 35\n         line 240: 38\n         line 241: 45\n-        line 242: 55\n-        line 244: 74\n-        line 241: 78\n+        line 242: 51\n+        line 243: 64\n+        line 242: 67\n+        line 244: 70\n+        line 241: 74\n         line 246: 84\n         line 247: 92\n         line 248: 98\n         line 249: 114\n         line 253: 118\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           48      36     5     i   I\n-           45      73     4 fullblocks   I\n-           92      26     5  done   I\n             0     119     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n             0     119     1     b   [B\n             0     119     2 offset   I\n             0     119     3 length   I\n+           45      73     4 fullblocks   I\n+           48      36     5     i   I\n+           92      26     5  done   I\n       StackMapTable: number_of_entries = 4\n         frame_type = 38 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 9\n+          offset_delta = 12\n           locals = [ int, int ]\n-        frame_type = 250 /* chop */\n-          offset_delta = 35\n-        frame_type = 250 /* chop */\n-          offset_delta = 33\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 25 /* same */\n+        frame_type = 249 /* chop */\n+          offset_delta = 40\n \n   private void deflateUntilInputIsNeeded() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n-         0: aload_0\n-         1: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n-         4: invokevirtual #122                // Method java/util/zip/Deflater.needsInput:()Z\n-         7: ifne          17\n-        10: aload_0\n-        11: invokevirtual #113                // Method deflate:()V\n-        14: goto          0\n+         0: goto          7\n+         3: aload_0\n+         4: invokevirtual #151                // Method deflate:()V\n+         7: aload_0\n+         8: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n+        11: invokevirtual #166                // Method java/util/zip/Deflater.needsInput:()Z\n+        14: ifeq          3\n         17: return\n       LineNumberTable:\n         line 256: 0\n-        line 257: 10\n+        line 257: 3\n+        line 256: 7\n         line 259: 17\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      18     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n       StackMapTable: number_of_entries = 2\n-        frame_type = 0 /* same */\n-        frame_type = 16 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 3 /* same */\n+        frame_type = 3 /* same */\n \n   void deflate() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field def:Ljava/util/zip/Deflater;\n+         1: getfield      #39                 // Field def:Ljava/util/zip/Deflater;\n          4: aload_0\n-         5: getfield      #16                 // Field outputBuffer:[B\n+         5: getfield      #35                 // Field outputBuffer:[B\n          8: iconst_0\n          9: aload_0\n-        10: getfield      #16                 // Field outputBuffer:[B\n+        10: getfield      #35                 // Field outputBuffer:[B\n         13: arraylength\n-        14: invokevirtual #125                // Method java/util/zip/Deflater.deflate:([BII)I\n+        14: invokevirtual #169                // Method java/util/zip/Deflater.deflate:([BII)I\n         17: istore_1\n         18: iload_1\n         19: ifle          32\n         22: aload_0\n         23: aload_0\n-        24: getfield      #16                 // Field outputBuffer:[B\n+        24: getfield      #35                 // Field outputBuffer:[B\n         27: iconst_0\n         28: iload_1\n-        29: invokevirtual #98                 // Method writeCounted:([BII)V\n+        29: invokevirtual #136                // Method writeCounted:([BII)V\n         32: return\n       LineNumberTable:\n         line 262: 0\n         line 263: 18\n         line 264: 22\n         line 266: 32\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      33     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n            18      15     1   len   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 32\n           locals = [ int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void writeCounted(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #98                 // Method writeCounted:([BII)V\n+         5: invokevirtual #136                // Method writeCounted:([BII)V\n          8: return\n       LineNumberTable:\n         line 269: 0\n         line 270: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n             0       9     1  data   [B\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void writeCounted(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokevirtual #127                // Method writeOut:([BII)V\n+         4: invokevirtual #174                // Method writeOut:([BII)V\n          7: aload_0\n          8: dup\n-         9: getfield      #67                 // Field writtenToOutputStreamForLastEntry:J\n+         9: getfield      #98                 // Field writtenToOutputStreamForLastEntry:J\n         12: iload_3\n         13: i2l\n         14: ladd\n-        15: putfield      #67                 // Field writtenToOutputStreamForLastEntry:J\n+        15: putfield      #98                 // Field writtenToOutputStreamForLastEntry:J\n         18: aload_0\n         19: dup\n-        20: getfield      #70                 // Field totalWrittenToOutputStream:J\n+        20: getfield      #101                // Field totalWrittenToOutputStream:J\n         23: iload_3\n         24: i2l\n         25: ladd\n-        26: putfield      #70                 // Field totalWrittenToOutputStream:J\n+        26: putfield      #101                // Field totalWrittenToOutputStream:J\n         29: return\n       LineNumberTable:\n         line 273: 0\n         line 274: 7\n         line 275: 18\n         line 276: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      30     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n             0      30     1  data   [B\n             0      30     2 offset   I\n             0      30     3 length   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   protected abstract void writeOut(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"StreamCompressor.java\"\n InnerClasses:\n-  private static final #182= #27 of #11;  // OutputStreamCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n-  private static final #183= #41 of #11;  // DataOutputCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n-  private static final #184= #46 of #11;  // SeekableByteChannelCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n-  private static final #185= #51 of #11;  // ScatterGatherBackingStoreCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n+  private static final #180= #64 of #1;   // DataOutputCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n+  private static final #181= #48 of #1;   // OutputStreamCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n+  private static final #182= #78 of #1;   // ScatterGatherBackingStoreCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n+  private static final #183= #71 of #1;   // SeekableByteChannelCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n"}]}
