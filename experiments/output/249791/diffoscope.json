{"diffoscope-json-version": 1, "source1": "first/UncommentedMainCheck.class", "source2": "second/UncommentedMainCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -35,99 +35,95 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 9, 14, 16, 199 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.packageName = FullIdent.createFullIdent((DetailAST)null);\n         this.classDepth = 0;\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        if (ast.getType() == 14) {\n+    public void leaveToken(final DetailAST detailAST) {\n+        if (detailAST.getType() == 14) {\n             --this.classDepth;\n         }\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 16: {\n-                this.visitPackageDef(ast);\n+                this.visitPackageDef(detailAST);\n                 break;\n             }\n             case 14:\n             case 199: {\n-                this.visitClassOrRecordDef(ast);\n+                this.visitClassOrRecordDef(detailAST);\n                 break;\n             }\n             case 9: {\n-                this.visitMethodDef(ast);\n+                this.visitMethodDef(detailAST);\n                 break;\n             }\n             default: {\n-                throw new IllegalStateException(ast.toString());\n+                throw new IllegalStateException(detailAST.toString());\n             }\n         }\n     }\n     \n-    private void visitPackageDef(final DetailAST packageDef) {\n-        this.packageName = FullIdent.createFullIdent(packageDef.getLastChild().getPreviousSibling());\n+    private void visitPackageDef(final DetailAST detailAST) {\n+        this.packageName = FullIdent.createFullIdent(detailAST.getLastChild().getPreviousSibling());\n     }\n     \n-    private void visitClassOrRecordDef(final DetailAST classOrRecordDef) {\n+    private void visitClassOrRecordDef(final DetailAST detailAST) {\n         if (this.classDepth == 0) {\n-            final DetailAST ident = classOrRecordDef.findFirstToken(58);\n-            this.currentClass = this.packageName.getText() + \".\" + ident.getText();\n+            this.currentClass = this.packageName.getText() + \".\" + detailAST.findFirstToken(58).getText();\n             ++this.classDepth;\n         }\n     }\n     \n-    private void visitMethodDef(final DetailAST method) {\n-        if (this.classDepth == 1 && this.checkClassName() && checkName(method) && checkModifiers(method) && checkType(method) && checkParams(method)) {\n-            this.log(method, \"uncommented.main\", new Object[0]);\n+    private void visitMethodDef(final DetailAST detailAST) {\n+        if (this.classDepth == 1 && this.checkClassName() && checkName(detailAST) && checkModifiers(detailAST) && checkType(detailAST) && checkParams(detailAST)) {\n+            this.log(detailAST, \"uncommented.main\", new Object[0]);\n         }\n     }\n     \n     private boolean checkClassName() {\n         return !this.excludedClasses.matcher(this.currentClass).find();\n     }\n     \n-    private static boolean checkName(final DetailAST method) {\n-        final DetailAST ident = method.findFirstToken(58);\n-        return \"main\".equals(ident.getText());\n-    }\n-    \n-    private static boolean checkModifiers(final DetailAST method) {\n-        final DetailAST modifiers = method.findFirstToken(5);\n-        return modifiers.findFirstToken(62) != null && modifiers.findFirstToken(64) != null;\n-    }\n-    \n-    private static boolean checkType(final DetailAST method) {\n-        final DetailAST type = method.findFirstToken(13).getFirstChild();\n-        return type.getType() == 49;\n-    }\n-    \n-    private static boolean checkParams(final DetailAST method) {\n-        boolean checkPassed = false;\n-        final DetailAST params = method.findFirstToken(20);\n-        if (params.getChildCount() == 1) {\n-            final DetailAST parameterType = params.getFirstChild().findFirstToken(13);\n-            final boolean isArrayDeclaration = parameterType.findFirstToken(17) != null;\n-            final Optional<DetailAST> varargs = Optional.ofNullable(params.getFirstChild().findFirstToken(171));\n-            if (isArrayDeclaration || varargs.isPresent()) {\n-                checkPassed = isStringType(parameterType.getFirstChild());\n+    private static boolean checkName(final DetailAST detailAST) {\n+        return \"main\".equals(detailAST.findFirstToken(58).getText());\n+    }\n+    \n+    private static boolean checkModifiers(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(5);\n+        return firstToken.findFirstToken(62) != null && firstToken.findFirstToken(64) != null;\n+    }\n+    \n+    private static boolean checkType(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(13).getFirstChild().getType() == 49;\n+    }\n+    \n+    private static boolean checkParams(final DetailAST detailAST) {\n+        boolean stringType = false;\n+        final DetailAST firstToken = detailAST.findFirstToken(20);\n+        if (firstToken.getChildCount() == 1) {\n+            final DetailAST firstToken2 = firstToken.getFirstChild().findFirstToken(13);\n+            final boolean b = firstToken2.findFirstToken(17) != null;\n+            final Optional<DetailAST> ofNullable = Optional.ofNullable(firstToken.getFirstChild().findFirstToken(171));\n+            if (b || ofNullable.isPresent()) {\n+                stringType = isStringType(firstToken2.getFirstChild());\n             }\n         }\n-        return checkPassed;\n+        return stringType;\n     }\n     \n-    private static boolean isStringType(final DetailAST typeAst) {\n-        final FullIdent type = FullIdent.createFullIdent(typeAst);\n-        return UncommentedMainCheck.STRING_PARAMETER_NAMES.contains(type.getText());\n+    private static boolean isStringType(final DetailAST detailAST) {\n+        return UncommentedMainCheck.STRING_PARAMETER_NAMES.contains(FullIdent.createFullIdent(detailAST).getText());\n     }\n     \n     static {\n         STRING_PARAMETER_NAMES = Set.of(String[].class.getCanonicalName(), String.class.getCanonicalName(), String[].class.getSimpleName(), String.class.getSimpleName());\n     }\n }\n"}]}
