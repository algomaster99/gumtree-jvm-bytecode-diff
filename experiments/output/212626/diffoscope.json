{"diffoscope-json-version": 1, "source1": "first/StrBuilder.class", "source2": "second/StrBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,28 +21,28 @@\n     private String newLine;\n     private String nullText;\n     \n     public StrBuilder() {\n         this(32);\n     }\n     \n-    public StrBuilder(int initialCapacity) {\n-        if (initialCapacity <= 0) {\n-            initialCapacity = 32;\n+    public StrBuilder(int n) {\n+        if (n <= 0) {\n+            n = 32;\n         }\n-        this.buffer = new char[initialCapacity];\n+        this.buffer = new char[n];\n     }\n     \n-    public StrBuilder(final String str) {\n-        if (str == null) {\n+    public StrBuilder(final String s) {\n+        if (s == null) {\n             this.buffer = new char[32];\n         }\n         else {\n-            this.buffer = new char[str.length() + 32];\n-            this.append(str);\n+            this.buffer = new char[s.length() + 32];\n+            this.append(s);\n         }\n     }\n     \n     public String getNewLineText() {\n         return this.newLine;\n     }\n     \n@@ -64,49 +64,46 @@\n     }\n     \n     @Override\n     public int length() {\n         return this.size;\n     }\n     \n-    public StrBuilder setLength(final int length) {\n-        if (length < 0) {\n-            throw new StringIndexOutOfBoundsException(length);\n-        }\n-        if (length < this.size) {\n-            this.size = length;\n-        }\n-        else if (length > this.size) {\n-            this.ensureCapacity(length);\n-            final int oldEnd = this.size;\n-            final int newEnd = length;\n-            this.size = length;\n-            for (int i = oldEnd; i < newEnd; ++i) {\n+    public StrBuilder setLength(final int size) {\n+        if (size < 0) {\n+            throw new StringIndexOutOfBoundsException(size);\n+        }\n+        if (size < this.size) {\n+            this.size = size;\n+        }\n+        else if (size > this.size) {\n+            this.ensureCapacity(size);\n+            final int size2 = this.size;\n+            this.size = size;\n+            for (int i = size2; i < size; ++i) {\n                 this.buffer[i] = '\\0';\n             }\n         }\n         return this;\n     }\n     \n     public int capacity() {\n         return this.buffer.length;\n     }\n     \n-    public StrBuilder ensureCapacity(final int capacity) {\n-        if (capacity > this.buffer.length) {\n-            final char[] old = this.buffer;\n-            System.arraycopy(old, 0, this.buffer = new char[capacity * 2], 0, this.size);\n+    public StrBuilder ensureCapacity(final int n) {\n+        if (n > this.buffer.length) {\n+            System.arraycopy(this.buffer, 0, this.buffer = new char[n * 2], 0, this.size);\n         }\n         return this;\n     }\n     \n     public StrBuilder minimizeCapacity() {\n         if (this.buffer.length > this.length()) {\n-            final char[] old = this.buffer;\n-            System.arraycopy(old, 0, this.buffer = new char[this.length()], 0, this.size);\n+            System.arraycopy(this.buffer, 0, this.buffer = new char[this.length()], 0, this.size);\n         }\n         return this;\n     }\n     \n     public int size() {\n         return this.size;\n     }\n@@ -125,19 +122,19 @@\n     public char charAt(final int index) {\n         if (index < 0 || index >= this.length()) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n         return this.buffer[index];\n     }\n     \n-    public StrBuilder setCharAt(final int index, final char ch) {\n+    public StrBuilder setCharAt(final int index, final char c) {\n         if (index < 0 || index >= this.length()) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n-        this.buffer[index] = ch;\n+        this.buffer[index] = c;\n         return this;\n     }\n     \n     public StrBuilder deleteCharAt(final int index) {\n         if (index < 0 || index >= this.size) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n@@ -145,82 +142,81 @@\n         return this;\n     }\n     \n     public char[] toCharArray() {\n         if (this.size == 0) {\n             return ArrayUtils.EMPTY_CHAR_ARRAY;\n         }\n-        final char[] chars = new char[this.size];\n-        System.arraycopy(this.buffer, 0, chars, 0, this.size);\n-        return chars;\n+        final char[] array = new char[this.size];\n+        System.arraycopy(this.buffer, 0, array, 0, this.size);\n+        return array;\n     }\n     \n-    public char[] toCharArray(final int startIndex, int endIndex) {\n-        endIndex = this.validateRange(startIndex, endIndex);\n-        final int len = endIndex - startIndex;\n-        if (len == 0) {\n+    public char[] toCharArray(final int n, int validateRange) {\n+        validateRange = this.validateRange(n, validateRange);\n+        final int n2 = validateRange - n;\n+        if (n2 == 0) {\n             return ArrayUtils.EMPTY_CHAR_ARRAY;\n         }\n-        final char[] chars = new char[len];\n-        System.arraycopy(this.buffer, startIndex, chars, 0, len);\n-        return chars;\n+        final char[] array = new char[n2];\n+        System.arraycopy(this.buffer, n, array, 0, n2);\n+        return array;\n     }\n     \n-    public char[] getChars(char[] destination) {\n-        final int len = this.length();\n-        if (destination == null || destination.length < len) {\n-            destination = new char[len];\n+    public char[] getChars(char[] array) {\n+        final int length = this.length();\n+        if (array == null || array.length < length) {\n+            array = new char[length];\n         }\n-        System.arraycopy(this.buffer, 0, destination, 0, len);\n-        return destination;\n+        System.arraycopy(this.buffer, 0, array, 0, length);\n+        return array;\n     }\n     \n-    public void getChars(final int startIndex, final int endIndex, final char[] destination, final int destinationIndex) {\n-        if (startIndex < 0) {\n-            throw new StringIndexOutOfBoundsException(startIndex);\n+    public void getChars(final int index, final int index2, final char[] array, final int n) {\n+        if (index < 0) {\n+            throw new StringIndexOutOfBoundsException(index);\n         }\n-        if (endIndex < 0 || endIndex > this.length()) {\n-            throw new StringIndexOutOfBoundsException(endIndex);\n+        if (index2 < 0 || index2 > this.length()) {\n+            throw new StringIndexOutOfBoundsException(index2);\n         }\n-        if (startIndex > endIndex) {\n+        if (index > index2) {\n             throw new StringIndexOutOfBoundsException(\"end < start\");\n         }\n-        System.arraycopy(this.buffer, startIndex, destination, destinationIndex, endIndex - startIndex);\n+        System.arraycopy(this.buffer, index, array, n, index2 - index);\n     }\n     \n     public int readFrom(final Readable readable) throws IOException {\n-        final int oldSize = this.size;\n+        final int size = this.size;\n         if (readable instanceof Reader) {\n-            final Reader r = (Reader)readable;\n+            final Reader reader = (Reader)readable;\n             this.ensureCapacity(this.size + 1);\n             int read;\n-            while ((read = r.read(this.buffer, this.size, this.buffer.length - this.size)) != -1) {\n+            while ((read = reader.read(this.buffer, this.size, this.buffer.length - this.size)) != -1) {\n                 this.size += read;\n                 this.ensureCapacity(this.size + 1);\n             }\n         }\n         else if (readable instanceof CharBuffer) {\n-            final CharBuffer cb = (CharBuffer)readable;\n-            final int remaining = cb.remaining();\n+            final CharBuffer charBuffer = (CharBuffer)readable;\n+            final int remaining = charBuffer.remaining();\n             this.ensureCapacity(this.size + remaining);\n-            cb.get(this.buffer, this.size, remaining);\n+            charBuffer.get(this.buffer, this.size, remaining);\n             this.size += remaining;\n         }\n         else {\n             while (true) {\n                 this.ensureCapacity(this.size + 1);\n-                final CharBuffer buf = CharBuffer.wrap(this.buffer, this.size, this.buffer.length - this.size);\n-                final int read = readable.read(buf);\n-                if (read == -1) {\n+                final int read2 = readable.read(CharBuffer.wrap(this.buffer, this.size, this.buffer.length - this.size));\n+                if (read2 == -1) {\n                     break;\n                 }\n-                this.size += read;\n+                this.size += read2;\n             }\n         }\n-        return this.size - oldSize;\n+        return this.size - size;\n     }\n     \n     public StrBuilder appendNewLine() {\n         if (this.newLine == null) {\n             this.append(System.lineSeparator());\n             return this;\n         }\n@@ -230,263 +226,263 @@\n     public StrBuilder appendNull() {\n         if (this.nullText == null) {\n             return this;\n         }\n         return this.append(this.nullText);\n     }\n     \n-    public StrBuilder append(final Object obj) {\n-        if (obj == null) {\n+    public StrBuilder append(final Object o) {\n+        if (o == null) {\n             return this.appendNull();\n         }\n-        if (obj instanceof CharSequence) {\n-            return this.append((CharSequence)obj);\n+        if (o instanceof CharSequence) {\n+            return this.append((CharSequence)o);\n         }\n-        return this.append(obj.toString());\n+        return this.append(o.toString());\n     }\n     \n     @Override\n-    public StrBuilder append(final CharSequence seq) {\n-        if (seq == null) {\n+    public StrBuilder append(final CharSequence charSequence) {\n+        if (charSequence == null) {\n             return this.appendNull();\n         }\n-        if (seq instanceof StrBuilder) {\n-            return this.append((StrBuilder)seq);\n+        if (charSequence instanceof StrBuilder) {\n+            return this.append((StrBuilder)charSequence);\n         }\n-        if (seq instanceof StringBuilder) {\n-            return this.append((StringBuilder)seq);\n+        if (charSequence instanceof StringBuilder) {\n+            return this.append((StringBuilder)charSequence);\n         }\n-        if (seq instanceof StringBuffer) {\n-            return this.append((StringBuffer)seq);\n+        if (charSequence instanceof StringBuffer) {\n+            return this.append((StringBuffer)charSequence);\n         }\n-        if (seq instanceof CharBuffer) {\n-            return this.append((CharBuffer)seq);\n+        if (charSequence instanceof CharBuffer) {\n+            return this.append((CharBuffer)charSequence);\n         }\n-        return this.append(seq.toString());\n+        return this.append(charSequence.toString());\n     }\n     \n     @Override\n-    public StrBuilder append(final CharSequence seq, final int startIndex, final int length) {\n-        if (seq == null) {\n+    public StrBuilder append(final CharSequence charSequence, final int n, final int n2) {\n+        if (charSequence == null) {\n             return this.appendNull();\n         }\n-        return this.append(seq.toString(), startIndex, length);\n+        return this.append(charSequence.toString(), n, n2);\n     }\n     \n-    public StrBuilder append(final String str) {\n-        if (str == null) {\n+    public StrBuilder append(final String s) {\n+        if (s == null) {\n             return this.appendNull();\n         }\n-        final int strLen = str.length();\n-        if (strLen > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + strLen);\n-            str.getChars(0, strLen, this.buffer, len);\n-            this.size += strLen;\n+        final int length = s.length();\n+        if (length > 0) {\n+            final int length2 = this.length();\n+            this.ensureCapacity(length2 + length);\n+            s.getChars(0, length, this.buffer, length2);\n+            this.size += length;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final String str, final int startIndex, final int length) {\n-        if (str == null) {\n+    public StrBuilder append(final String s, final int srcBegin, final int n) {\n+        if (s == null) {\n             return this.appendNull();\n         }\n-        if (startIndex < 0 || startIndex > str.length()) {\n+        if (srcBegin < 0 || srcBegin > s.length()) {\n             throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n         }\n-        if (length < 0 || startIndex + length > str.length()) {\n+        if (n < 0 || srcBegin + n > s.length()) {\n             throw new StringIndexOutOfBoundsException(\"length must be valid\");\n         }\n-        if (length > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + length);\n-            str.getChars(startIndex, startIndex + length, this.buffer, len);\n-            this.size += length;\n+        if (n > 0) {\n+            final int length = this.length();\n+            this.ensureCapacity(length + n);\n+            s.getChars(srcBegin, srcBegin + n, this.buffer, length);\n+            this.size += n;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final String format, final Object... objs) {\n-        return this.append(String.format(format, objs));\n+    public StrBuilder append(final String format, final Object... args) {\n+        return this.append(String.format(format, args));\n     }\n     \n-    public StrBuilder append(final CharBuffer buf) {\n-        if (buf == null) {\n+    public StrBuilder append(final CharBuffer charBuffer) {\n+        if (charBuffer == null) {\n             return this.appendNull();\n         }\n-        if (buf.hasArray()) {\n-            final int length = buf.remaining();\n-            final int len = this.length();\n-            this.ensureCapacity(len + length);\n-            System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), this.buffer, len, length);\n-            this.size += length;\n+        if (charBuffer.hasArray()) {\n+            final int remaining = charBuffer.remaining();\n+            final int length = this.length();\n+            this.ensureCapacity(length + remaining);\n+            System.arraycopy(charBuffer.array(), charBuffer.arrayOffset() + charBuffer.position(), this.buffer, length, remaining);\n+            this.size += remaining;\n         }\n         else {\n-            this.append(buf.toString());\n+            this.append(charBuffer.toString());\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final CharBuffer buf, final int startIndex, final int length) {\n-        if (buf == null) {\n+    public StrBuilder append(final CharBuffer charBuffer, final int n, final int n2) {\n+        if (charBuffer == null) {\n             return this.appendNull();\n         }\n-        if (buf.hasArray()) {\n-            final int totalLength = buf.remaining();\n-            if (startIndex < 0 || startIndex > totalLength) {\n+        if (charBuffer.hasArray()) {\n+            final int remaining = charBuffer.remaining();\n+            if (n < 0 || n > remaining) {\n                 throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n             }\n-            if (length < 0 || startIndex + length > totalLength) {\n+            if (n2 < 0 || n + n2 > remaining) {\n                 throw new StringIndexOutOfBoundsException(\"length must be valid\");\n             }\n-            final int len = this.length();\n-            this.ensureCapacity(len + length);\n-            System.arraycopy(buf.array(), buf.arrayOffset() + buf.position() + startIndex, this.buffer, len, length);\n-            this.size += length;\n+            final int length = this.length();\n+            this.ensureCapacity(length + n2);\n+            System.arraycopy(charBuffer.array(), charBuffer.arrayOffset() + charBuffer.position() + n, this.buffer, length, n2);\n+            this.size += n2;\n         }\n         else {\n-            this.append(buf.toString(), startIndex, length);\n+            this.append(charBuffer.toString(), n, n2);\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final StringBuffer str) {\n-        if (str == null) {\n+    public StrBuilder append(final StringBuffer sb) {\n+        if (sb == null) {\n             return this.appendNull();\n         }\n-        final int strLen = str.length();\n-        if (strLen > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + strLen);\n-            str.getChars(0, strLen, this.buffer, len);\n-            this.size += strLen;\n+        final int length = sb.length();\n+        if (length > 0) {\n+            final int length2 = this.length();\n+            this.ensureCapacity(length2 + length);\n+            sb.getChars(0, length, this.buffer, length2);\n+            this.size += length;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final StringBuffer str, final int startIndex, final int length) {\n-        if (str == null) {\n+    public StrBuilder append(final StringBuffer sb, final int srcBegin, final int n) {\n+        if (sb == null) {\n             return this.appendNull();\n         }\n-        if (startIndex < 0 || startIndex > str.length()) {\n+        if (srcBegin < 0 || srcBegin > sb.length()) {\n             throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n         }\n-        if (length < 0 || startIndex + length > str.length()) {\n+        if (n < 0 || srcBegin + n > sb.length()) {\n             throw new StringIndexOutOfBoundsException(\"length must be valid\");\n         }\n-        if (length > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + length);\n-            str.getChars(startIndex, startIndex + length, this.buffer, len);\n-            this.size += length;\n+        if (n > 0) {\n+            final int length = this.length();\n+            this.ensureCapacity(length + n);\n+            sb.getChars(srcBegin, srcBegin + n, this.buffer, length);\n+            this.size += n;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final StringBuilder str) {\n-        if (str == null) {\n+    public StrBuilder append(final StringBuilder sb) {\n+        if (sb == null) {\n             return this.appendNull();\n         }\n-        final int strLen = str.length();\n-        if (strLen > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + strLen);\n-            str.getChars();\n-            this.size += strLen;\n+        final int length = sb.length();\n+        if (length > 0) {\n+            final int length2 = this.length();\n+            this.ensureCapacity(length2 + length);\n+            sb.getChars();\n+            this.size += length;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final StringBuilder str, final int startIndex, final int length) {\n-        if (str == null) {\n+    public StrBuilder append(final StringBuilder sb, final int n, final int n2) {\n+        if (sb == null) {\n             return this.appendNull();\n         }\n-        if (startIndex < 0 || startIndex > str.length()) {\n+        if (n < 0 || n > sb.length()) {\n             throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n         }\n-        if (length < 0 || startIndex + length > str.length()) {\n+        if (n2 < 0 || n + n2 > sb.length()) {\n             throw new StringIndexOutOfBoundsException(\"length must be valid\");\n         }\n-        if (length > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + length);\n-            str.getChars();\n-            this.size += length;\n+        if (n2 > 0) {\n+            final int length = this.length();\n+            this.ensureCapacity(length + n2);\n+            sb.getChars();\n+            this.size += n2;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final StrBuilder str) {\n-        if (str == null) {\n+    public StrBuilder append(final StrBuilder strBuilder) {\n+        if (strBuilder == null) {\n             return this.appendNull();\n         }\n-        final int strLen = str.length();\n-        if (strLen > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + strLen);\n-            System.arraycopy(str.buffer, 0, this.buffer, len, strLen);\n-            this.size += strLen;\n+        final int length = strBuilder.length();\n+        if (length > 0) {\n+            final int length2 = this.length();\n+            this.ensureCapacity(length2 + length);\n+            System.arraycopy(strBuilder.buffer, 0, this.buffer, length2, length);\n+            this.size += length;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final StrBuilder str, final int startIndex, final int length) {\n-        if (str == null) {\n+    public StrBuilder append(final StrBuilder strBuilder, final int n, final int n2) {\n+        if (strBuilder == null) {\n             return this.appendNull();\n         }\n-        if (startIndex < 0 || startIndex > str.length()) {\n+        if (n < 0 || n > strBuilder.length()) {\n             throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n         }\n-        if (length < 0 || startIndex + length > str.length()) {\n+        if (n2 < 0 || n + n2 > strBuilder.length()) {\n             throw new StringIndexOutOfBoundsException(\"length must be valid\");\n         }\n-        if (length > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + length);\n-            str.getChars(startIndex, startIndex + length, this.buffer, len);\n-            this.size += length;\n+        if (n2 > 0) {\n+            final int length = this.length();\n+            this.ensureCapacity(length + n2);\n+            strBuilder.getChars(n, n + n2, this.buffer, length);\n+            this.size += n2;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final char[] chars) {\n-        if (chars == null) {\n+    public StrBuilder append(final char[] array) {\n+        if (array == null) {\n             return this.appendNull();\n         }\n-        final int strLen = chars.length;\n-        if (strLen > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + strLen);\n-            System.arraycopy(chars, 0, this.buffer, len, strLen);\n-            this.size += strLen;\n+        final int length = array.length;\n+        if (length > 0) {\n+            final int length2 = this.length();\n+            this.ensureCapacity(length2 + length);\n+            System.arraycopy(array, 0, this.buffer, length2, length);\n+            this.size += length;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final char[] chars, final int startIndex, final int length) {\n-        if (chars == null) {\n+    public StrBuilder append(final char[] array, final int n, final int n2) {\n+        if (array == null) {\n             return this.appendNull();\n         }\n-        if (startIndex < 0 || startIndex > chars.length) {\n-            throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + length);\n+        if (n < 0 || n > array.length) {\n+            throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + n2);\n         }\n-        if (length < 0 || startIndex + length > chars.length) {\n-            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\n+        if (n2 < 0 || n + n2 > array.length) {\n+            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + n2);\n         }\n-        if (length > 0) {\n-            final int len = this.length();\n-            this.ensureCapacity(len + length);\n-            System.arraycopy(chars, startIndex, this.buffer, len, length);\n-            this.size += length;\n+        if (n2 > 0) {\n+            final int length = this.length();\n+            this.ensureCapacity(length + n2);\n+            System.arraycopy(array, n, this.buffer, length, n2);\n+            this.size += n2;\n         }\n         return this;\n     }\n     \n-    public StrBuilder append(final boolean value) {\n-        if (value) {\n+    public StrBuilder append(final boolean b) {\n+        if (b) {\n             this.ensureCapacity(this.size + 4);\n             this.buffer[this.size++] = 't';\n             this.buffer[this.size++] = 'r';\n             this.buffer[this.size++] = 'u';\n             this.buffer[this.size++] = 'e';\n         }\n         else {\n@@ -497,834 +493,831 @@\n             this.buffer[this.size++] = 's';\n             this.buffer[this.size++] = 'e';\n         }\n         return this;\n     }\n     \n     @Override\n-    public StrBuilder append(final char ch) {\n-        final int len = this.length();\n-        this.ensureCapacity(len + 1);\n-        this.buffer[this.size++] = ch;\n+    public StrBuilder append(final char c) {\n+        this.ensureCapacity(this.length() + 1);\n+        this.buffer[this.size++] = c;\n         return this;\n     }\n     \n-    public StrBuilder append(final int value) {\n-        return this.append(String.valueOf(value));\n+    public StrBuilder append(final int i) {\n+        return this.append(String.valueOf(i));\n     }\n     \n-    public StrBuilder append(final long value) {\n-        return this.append(String.valueOf(value));\n+    public StrBuilder append(final long l) {\n+        return this.append(String.valueOf(l));\n     }\n     \n-    public StrBuilder append(final float value) {\n-        return this.append(String.valueOf(value));\n+    public StrBuilder append(final float f) {\n+        return this.append(String.valueOf(f));\n     }\n     \n-    public StrBuilder append(final double value) {\n-        return this.append(String.valueOf(value));\n+    public StrBuilder append(final double d) {\n+        return this.append(String.valueOf(d));\n     }\n     \n-    public StrBuilder appendln(final Object obj) {\n-        return this.append(obj).appendNewLine();\n+    public StrBuilder appendln(final Object o) {\n+        return this.append(o).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final String str) {\n-        return this.append(str).appendNewLine();\n+    public StrBuilder appendln(final String s) {\n+        return this.append(s).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final String str, final int startIndex, final int length) {\n-        return this.append(str, startIndex, length).appendNewLine();\n+    public StrBuilder appendln(final String s, final int n, final int n2) {\n+        return this.append(s, n, n2).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final String format, final Object... objs) {\n-        return this.append(format, objs).appendNewLine();\n+    public StrBuilder appendln(final String s, final Object... array) {\n+        return this.append(s, array).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final StringBuffer str) {\n-        return this.append(str).appendNewLine();\n+    public StrBuilder appendln(final StringBuffer sb) {\n+        return this.append(sb).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final StringBuilder str) {\n-        return this.append(str).appendNewLine();\n+    public StrBuilder appendln(final StringBuilder sb) {\n+        return this.append(sb).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final StringBuilder str, final int startIndex, final int length) {\n-        return this.append(str, startIndex, length).appendNewLine();\n+    public StrBuilder appendln(final StringBuilder sb, final int n, final int n2) {\n+        return this.append(sb, n, n2).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final StringBuffer str, final int startIndex, final int length) {\n-        return this.append(str, startIndex, length).appendNewLine();\n+    public StrBuilder appendln(final StringBuffer sb, final int n, final int n2) {\n+        return this.append(sb, n, n2).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final StrBuilder str) {\n-        return this.append(str).appendNewLine();\n+    public StrBuilder appendln(final StrBuilder strBuilder) {\n+        return this.append(strBuilder).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final StrBuilder str, final int startIndex, final int length) {\n-        return this.append(str, startIndex, length).appendNewLine();\n+    public StrBuilder appendln(final StrBuilder strBuilder, final int n, final int n2) {\n+        return this.append(strBuilder, n, n2).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final char[] chars) {\n-        return this.append(chars).appendNewLine();\n+    public StrBuilder appendln(final char[] array) {\n+        return this.append(array).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final char[] chars, final int startIndex, final int length) {\n-        return this.append(chars, startIndex, length).appendNewLine();\n+    public StrBuilder appendln(final char[] array, final int n, final int n2) {\n+        return this.append(array, n, n2).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final boolean value) {\n-        return this.append(value).appendNewLine();\n+    public StrBuilder appendln(final boolean b) {\n+        return this.append(b).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final char ch) {\n-        return this.append(ch).appendNewLine();\n+    public StrBuilder appendln(final char c) {\n+        return this.append(c).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final int value) {\n-        return this.append(value).appendNewLine();\n+    public StrBuilder appendln(final int n) {\n+        return this.append(n).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final long value) {\n-        return this.append(value).appendNewLine();\n+    public StrBuilder appendln(final long n) {\n+        return this.append(n).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final float value) {\n-        return this.append(value).appendNewLine();\n+    public StrBuilder appendln(final float n) {\n+        return this.append(n).appendNewLine();\n     }\n     \n-    public StrBuilder appendln(final double value) {\n-        return this.append(value).appendNewLine();\n+    public StrBuilder appendln(final double n) {\n+        return this.append(n).appendNewLine();\n     }\n     \n     public <T> StrBuilder appendAll(final T... array) {\n         if (array != null && array.length > 0) {\n-            for (final Object element : array) {\n-                this.append(element);\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                this.append(array[i]);\n             }\n         }\n         return this;\n     }\n     \n     public StrBuilder appendAll(final Iterable<?> iterable) {\n         if (iterable != null) {\n-            for (final Object o : iterable) {\n-                this.append(o);\n+            final Iterator<?> iterator = iterable.iterator();\n+            while (iterator.hasNext()) {\n+                this.append(iterator.next());\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendAll(final Iterator<?> it) {\n-        if (it != null) {\n-            while (it.hasNext()) {\n-                this.append(it.next());\n+    public StrBuilder appendAll(final Iterator<?> iterator) {\n+        if (iterator != null) {\n+            while (iterator.hasNext()) {\n+                this.append(iterator.next());\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendWithSeparators(final Object[] array, final String separator) {\n+    public StrBuilder appendWithSeparators(final Object[] array, final String o) {\n         if (array != null && array.length > 0) {\n-            final String sep = Objects.toString(separator, \"\");\n+            final String string = Objects.toString(o, \"\");\n             this.append(array[0]);\n             for (int i = 1; i < array.length; ++i) {\n-                this.append(sep);\n+                this.append(string);\n                 this.append(array[i]);\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendWithSeparators(final Iterable<?> iterable, final String separator) {\n+    public StrBuilder appendWithSeparators(final Iterable<?> iterable, final String o) {\n         if (iterable != null) {\n-            final String sep = Objects.toString(separator, \"\");\n-            final Iterator<?> it = iterable.iterator();\n-            while (it.hasNext()) {\n-                this.append(it.next());\n-                if (it.hasNext()) {\n-                    this.append(sep);\n+            final String string = Objects.toString(o, \"\");\n+            final Iterator<?> iterator = iterable.iterator();\n+            while (iterator.hasNext()) {\n+                this.append(iterator.next());\n+                if (iterator.hasNext()) {\n+                    this.append(string);\n                 }\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendWithSeparators(final Iterator<?> it, final String separator) {\n-        if (it != null) {\n-            final String sep = Objects.toString(separator, \"\");\n-            while (it.hasNext()) {\n-                this.append(it.next());\n-                if (it.hasNext()) {\n-                    this.append(sep);\n+    public StrBuilder appendWithSeparators(final Iterator<?> iterator, final String o) {\n+        if (iterator != null) {\n+            final String string = Objects.toString(o, \"\");\n+            while (iterator.hasNext()) {\n+                this.append(iterator.next());\n+                if (iterator.hasNext()) {\n+                    this.append(string);\n                 }\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendSeparator(final String separator) {\n-        return this.appendSeparator(separator, null);\n+    public StrBuilder appendSeparator(final String s) {\n+        return this.appendSeparator(s, null);\n     }\n     \n-    public StrBuilder appendSeparator(final String standard, final String defaultIfEmpty) {\n-        final String str = this.isEmpty() ? defaultIfEmpty : standard;\n-        if (str != null) {\n-            this.append(str);\n+    public StrBuilder appendSeparator(final String s, final String s2) {\n+        final String s3 = this.isEmpty() ? s2 : s;\n+        if (s3 != null) {\n+            this.append(s3);\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendSeparator(final char separator) {\n+    public StrBuilder appendSeparator(final char c) {\n         if (this.size() > 0) {\n-            this.append(separator);\n+            this.append(c);\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendSeparator(final char standard, final char defaultIfEmpty) {\n+    public StrBuilder appendSeparator(final char c, final char c2) {\n         if (this.size() > 0) {\n-            this.append(standard);\n+            this.append(c);\n         }\n         else {\n-            this.append(defaultIfEmpty);\n+            this.append(c2);\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendSeparator(final String separator, final int loopIndex) {\n-        if (separator != null && loopIndex > 0) {\n-            this.append(separator);\n+    public StrBuilder appendSeparator(final String s, final int n) {\n+        if (s != null && n > 0) {\n+            this.append(s);\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendSeparator(final char separator, final int loopIndex) {\n-        if (loopIndex > 0) {\n-            this.append(separator);\n+    public StrBuilder appendSeparator(final char c, final int n) {\n+        if (n > 0) {\n+            this.append(c);\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendPadding(final int length, final char padChar) {\n-        if (length >= 0) {\n-            this.ensureCapacity(this.size + length);\n-            for (int i = 0; i < length; ++i) {\n-                this.buffer[this.size++] = padChar;\n+    public StrBuilder appendPadding(final int n, final char c) {\n+        if (n >= 0) {\n+            this.ensureCapacity(this.size + n);\n+            for (int i = 0; i < n; ++i) {\n+                this.buffer[this.size++] = c;\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendFixedWidthPadLeft(final Object obj, final int width, final char padChar) {\n-        if (width > 0) {\n-            this.ensureCapacity(this.size + width);\n-            String str = (obj == null) ? this.getNullText() : obj.toString();\n-            if (str == null) {\n-                str = \"\";\n+    public StrBuilder appendFixedWidthPadLeft(final Object o, final int n, final char c) {\n+        if (n > 0) {\n+            this.ensureCapacity(this.size + n);\n+            String s = (o == null) ? this.getNullText() : o.toString();\n+            if (s == null) {\n+                s = \"\";\n             }\n-            final int strLen = str.length();\n-            if (strLen >= width) {\n-                str.getChars(strLen - width, strLen, this.buffer, this.size);\n+            final int length = s.length();\n+            if (length >= n) {\n+                s.getChars(length - n, length, this.buffer, this.size);\n             }\n             else {\n-                final int padLen = width - strLen;\n-                for (int i = 0; i < padLen; ++i) {\n-                    this.buffer[this.size + i] = padChar;\n+                final int n2 = n - length;\n+                for (int i = 0; i < n2; ++i) {\n+                    this.buffer[this.size + i] = c;\n                 }\n-                str.getChars(0, strLen, this.buffer, this.size + padLen);\n+                s.getChars(0, length, this.buffer, this.size + n2);\n             }\n-            this.size += width;\n+            this.size += n;\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendFixedWidthPadLeft(final int value, final int width, final char padChar) {\n-        return this.appendFixedWidthPadLeft(String.valueOf(value), width, padChar);\n+    public StrBuilder appendFixedWidthPadLeft(final int i, final int n, final char c) {\n+        return this.appendFixedWidthPadLeft(String.valueOf(i), n, c);\n     }\n     \n-    public StrBuilder appendFixedWidthPadRight(final Object obj, final int width, final char padChar) {\n-        if (width > 0) {\n-            this.ensureCapacity(this.size + width);\n-            String str = (obj == null) ? this.getNullText() : obj.toString();\n-            if (str == null) {\n-                str = \"\";\n+    public StrBuilder appendFixedWidthPadRight(final Object o, final int srcEnd, final char c) {\n+        if (srcEnd > 0) {\n+            this.ensureCapacity(this.size + srcEnd);\n+            String s = (o == null) ? this.getNullText() : o.toString();\n+            if (s == null) {\n+                s = \"\";\n             }\n-            final int strLen = str.length();\n-            if (strLen >= width) {\n-                str.getChars(0, width, this.buffer, this.size);\n+            final int length = s.length();\n+            if (length >= srcEnd) {\n+                s.getChars(0, srcEnd, this.buffer, this.size);\n             }\n             else {\n-                final int padLen = width - strLen;\n-                str.getChars(0, strLen, this.buffer, this.size);\n-                for (int i = 0; i < padLen; ++i) {\n-                    this.buffer[this.size + strLen + i] = padChar;\n+                final int n = srcEnd - length;\n+                s.getChars(0, length, this.buffer, this.size);\n+                for (int i = 0; i < n; ++i) {\n+                    this.buffer[this.size + length + i] = c;\n                 }\n             }\n-            this.size += width;\n+            this.size += srcEnd;\n         }\n         return this;\n     }\n     \n-    public StrBuilder appendFixedWidthPadRight(final int value, final int width, final char padChar) {\n-        return this.appendFixedWidthPadRight(String.valueOf(value), width, padChar);\n+    public StrBuilder appendFixedWidthPadRight(final int i, final int n, final char c) {\n+        return this.appendFixedWidthPadRight(String.valueOf(i), n, c);\n     }\n     \n-    public StrBuilder insert(final int index, final Object obj) {\n-        if (obj == null) {\n-            return this.insert(index, this.nullText);\n+    public StrBuilder insert(final int n, final Object o) {\n+        if (o == null) {\n+            return this.insert(n, this.nullText);\n         }\n-        return this.insert(index, obj.toString());\n+        return this.insert(n, o.toString());\n     }\n     \n-    public StrBuilder insert(final int index, String str) {\n-        this.validateIndex(index);\n-        if (str == null) {\n-            str = this.nullText;\n+    public StrBuilder insert(final int dstBegin, String nullText) {\n+        this.validateIndex(dstBegin);\n+        if (nullText == null) {\n+            nullText = this.nullText;\n         }\n-        if (str != null) {\n-            final int strLen = str.length();\n-            if (strLen > 0) {\n-                final int newSize = this.size + strLen;\n-                this.ensureCapacity(newSize);\n-                System.arraycopy(this.buffer, index, this.buffer, index + strLen, this.size - index);\n-                this.size = newSize;\n-                str.getChars(0, strLen, this.buffer, index);\n+        if (nullText != null) {\n+            final int length = nullText.length();\n+            if (length > 0) {\n+                final int size = this.size + length;\n+                this.ensureCapacity(size);\n+                System.arraycopy(this.buffer, dstBegin, this.buffer, dstBegin + length, this.size - dstBegin);\n+                this.size = size;\n+                nullText.getChars(0, length, this.buffer, dstBegin);\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder insert(final int index, final char[] chars) {\n-        this.validateIndex(index);\n-        if (chars == null) {\n-            return this.insert(index, this.nullText);\n+    public StrBuilder insert(final int n, final char[] array) {\n+        this.validateIndex(n);\n+        if (array == null) {\n+            return this.insert(n, this.nullText);\n         }\n-        final int len = chars.length;\n-        if (len > 0) {\n-            this.ensureCapacity(this.size + len);\n-            System.arraycopy(this.buffer, index, this.buffer, index + len, this.size - index);\n-            System.arraycopy(chars, 0, this.buffer, index, len);\n-            this.size += len;\n+        final int length = array.length;\n+        if (length > 0) {\n+            this.ensureCapacity(this.size + length);\n+            System.arraycopy(this.buffer, n, this.buffer, n + length, this.size - n);\n+            System.arraycopy(array, 0, this.buffer, n, length);\n+            this.size += length;\n         }\n         return this;\n     }\n     \n-    public StrBuilder insert(final int index, final char[] chars, final int offset, final int length) {\n-        this.validateIndex(index);\n-        if (chars == null) {\n-            return this.insert(index, this.nullText);\n+    public StrBuilder insert(final int n, final char[] array, final int i, final int j) {\n+        this.validateIndex(n);\n+        if (array == null) {\n+            return this.insert(n, this.nullText);\n         }\n-        if (offset < 0 || offset > chars.length) {\n-            throw new StringIndexOutOfBoundsException(\"Invalid offset: \" + offset);\n+        if (i < 0 || i > array.length) {\n+            throw new StringIndexOutOfBoundsException(\"Invalid offset: \" + i);\n         }\n-        if (length < 0 || offset + length > chars.length) {\n-            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\n+        if (j < 0 || i + j > array.length) {\n+            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + j);\n         }\n-        if (length > 0) {\n-            this.ensureCapacity(this.size + length);\n-            System.arraycopy(this.buffer, index, this.buffer, index + length, this.size - index);\n-            System.arraycopy(chars, offset, this.buffer, index, length);\n-            this.size += length;\n+        if (j > 0) {\n+            this.ensureCapacity(this.size + j);\n+            System.arraycopy(this.buffer, n, this.buffer, n + j, this.size - n);\n+            System.arraycopy(array, i, this.buffer, n, j);\n+            this.size += j;\n         }\n         return this;\n     }\n     \n-    public StrBuilder insert(int index, final boolean value) {\n-        this.validateIndex(index);\n-        if (value) {\n+    public StrBuilder insert(int n, final boolean b) {\n+        this.validateIndex(n);\n+        if (b) {\n             this.ensureCapacity(this.size + 4);\n-            System.arraycopy(this.buffer, index, this.buffer, index + 4, this.size - index);\n-            this.buffer[index++] = 't';\n-            this.buffer[index++] = 'r';\n-            this.buffer[index++] = 'u';\n-            this.buffer[index] = 'e';\n+            System.arraycopy(this.buffer, n, this.buffer, n + 4, this.size - n);\n+            this.buffer[n++] = 't';\n+            this.buffer[n++] = 'r';\n+            this.buffer[n++] = 'u';\n+            this.buffer[n] = 'e';\n             this.size += 4;\n         }\n         else {\n             this.ensureCapacity(this.size + 5);\n-            System.arraycopy(this.buffer, index, this.buffer, index + 5, this.size - index);\n-            this.buffer[index++] = 'f';\n-            this.buffer[index++] = 'a';\n-            this.buffer[index++] = 'l';\n-            this.buffer[index++] = 's';\n-            this.buffer[index] = 'e';\n+            System.arraycopy(this.buffer, n, this.buffer, n + 5, this.size - n);\n+            this.buffer[n++] = 'f';\n+            this.buffer[n++] = 'a';\n+            this.buffer[n++] = 'l';\n+            this.buffer[n++] = 's';\n+            this.buffer[n] = 'e';\n             this.size += 5;\n         }\n         return this;\n     }\n     \n-    public StrBuilder insert(final int index, final char value) {\n-        this.validateIndex(index);\n+    public StrBuilder insert(final int n, final char c) {\n+        this.validateIndex(n);\n         this.ensureCapacity(this.size + 1);\n-        System.arraycopy(this.buffer, index, this.buffer, index + 1, this.size - index);\n-        this.buffer[index] = value;\n+        System.arraycopy(this.buffer, n, this.buffer, n + 1, this.size - n);\n+        this.buffer[n] = c;\n         ++this.size;\n         return this;\n     }\n     \n-    public StrBuilder insert(final int index, final int value) {\n-        return this.insert(index, String.valueOf(value));\n+    public StrBuilder insert(final int n, final int i) {\n+        return this.insert(n, String.valueOf(i));\n     }\n     \n-    public StrBuilder insert(final int index, final long value) {\n-        return this.insert(index, String.valueOf(value));\n+    public StrBuilder insert(final int n, final long l) {\n+        return this.insert(n, String.valueOf(l));\n     }\n     \n-    public StrBuilder insert(final int index, final float value) {\n-        return this.insert(index, String.valueOf(value));\n+    public StrBuilder insert(final int n, final float f) {\n+        return this.insert(n, String.valueOf(f));\n     }\n     \n-    public StrBuilder insert(final int index, final double value) {\n-        return this.insert(index, String.valueOf(value));\n+    public StrBuilder insert(final int n, final double d) {\n+        return this.insert(n, String.valueOf(d));\n     }\n     \n-    private void deleteImpl(final int startIndex, final int endIndex, final int len) {\n-        System.arraycopy(this.buffer, endIndex, this.buffer, startIndex, this.size - endIndex);\n-        this.size -= len;\n+    private void deleteImpl(final int n, final int n2, final int n3) {\n+        System.arraycopy(this.buffer, n2, this.buffer, n, this.size - n2);\n+        this.size -= n3;\n     }\n     \n-    public StrBuilder delete(final int startIndex, int endIndex) {\n-        endIndex = this.validateRange(startIndex, endIndex);\n-        final int len = endIndex - startIndex;\n-        if (len > 0) {\n-            this.deleteImpl(startIndex, endIndex, len);\n+    public StrBuilder delete(final int n, int validateRange) {\n+        validateRange = this.validateRange(n, validateRange);\n+        final int n2 = validateRange - n;\n+        if (n2 > 0) {\n+            this.deleteImpl(n, validateRange, n2);\n         }\n         return this;\n     }\n     \n-    public StrBuilder deleteAll(final char ch) {\n+    public StrBuilder deleteAll(final char c) {\n         for (int i = 0; i < this.size; ++i) {\n-            if (this.buffer[i] == ch) {\n-                final int start = i;\n-                while (++i < this.size && this.buffer[i] == ch) {}\n-                final int len = i - start;\n-                this.deleteImpl(start, i, len);\n-                i -= len;\n+            if (this.buffer[i] == c) {\n+                final int n = i;\n+                while (++i < this.size && this.buffer[i] == c) {}\n+                final int n2 = i - n;\n+                this.deleteImpl(n, i, n2);\n+                i -= n2;\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder deleteFirst(final char ch) {\n+    public StrBuilder deleteFirst(final char c) {\n         for (int i = 0; i < this.size; ++i) {\n-            if (this.buffer[i] == ch) {\n+            if (this.buffer[i] == c) {\n                 this.deleteImpl(i, i + 1, 1);\n                 break;\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder deleteAll(final String str) {\n-        final int len = (str == null) ? 0 : str.length();\n-        if (len > 0) {\n-            for (int index = this.indexOf(str, 0); index >= 0; index = this.indexOf(str, index)) {\n-                this.deleteImpl(index, index + len, len);\n+    public StrBuilder deleteAll(final String s) {\n+        final int n = (s == null) ? 0 : s.length();\n+        if (n > 0) {\n+            for (int i = this.indexOf(s, 0); i >= 0; i = this.indexOf(s, i)) {\n+                this.deleteImpl(i, i + n, n);\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder deleteFirst(final String str) {\n-        final int len = (str == null) ? 0 : str.length();\n-        if (len > 0) {\n-            final int index = this.indexOf(str, 0);\n+    public StrBuilder deleteFirst(final String s) {\n+        final int n = (s == null) ? 0 : s.length();\n+        if (n > 0) {\n+            final int index = this.indexOf(s, 0);\n             if (index >= 0) {\n-                this.deleteImpl(index, index + len, len);\n+                this.deleteImpl(index, index + n, n);\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder deleteAll(final StrMatcher matcher) {\n-        return this.replace(matcher, null, 0, this.size, -1);\n+    public StrBuilder deleteAll(final StrMatcher strMatcher) {\n+        return this.replace(strMatcher, null, 0, this.size, -1);\n     }\n     \n-    public StrBuilder deleteFirst(final StrMatcher matcher) {\n-        return this.replace(matcher, null, 0, this.size, 1);\n+    public StrBuilder deleteFirst(final StrMatcher strMatcher) {\n+        return this.replace(strMatcher, null, 0, this.size, 1);\n     }\n     \n-    private void replaceImpl(final int startIndex, final int endIndex, final int removeLen, final String insertStr, final int insertLen) {\n-        final int newSize = this.size - removeLen + insertLen;\n-        if (insertLen != removeLen) {\n-            this.ensureCapacity(newSize);\n-            System.arraycopy(this.buffer, endIndex, this.buffer, startIndex + insertLen, this.size - endIndex);\n-            this.size = newSize;\n+    private void replaceImpl(final int dstBegin, final int n, final int n2, final String s, final int srcEnd) {\n+        final int size = this.size - n2 + srcEnd;\n+        if (srcEnd != n2) {\n+            this.ensureCapacity(size);\n+            System.arraycopy(this.buffer, n, this.buffer, dstBegin + srcEnd, this.size - n);\n+            this.size = size;\n         }\n-        if (insertLen > 0) {\n-            insertStr.getChars(0, insertLen, this.buffer, startIndex);\n+        if (srcEnd > 0) {\n+            s.getChars(0, srcEnd, this.buffer, dstBegin);\n         }\n     }\n     \n-    public StrBuilder replace(final int startIndex, int endIndex, final String replaceStr) {\n-        endIndex = this.validateRange(startIndex, endIndex);\n-        final int insertLen = (replaceStr == null) ? 0 : replaceStr.length();\n-        this.replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);\n+    public StrBuilder replace(final int n, int validateRange, final String s) {\n+        validateRange = this.validateRange(n, validateRange);\n+        this.replaceImpl(n, validateRange, validateRange - n, s, (s == null) ? 0 : s.length());\n         return this;\n     }\n     \n-    public StrBuilder replaceAll(final char search, final char replace) {\n-        if (search != replace) {\n+    public StrBuilder replaceAll(final char c, final char c2) {\n+        if (c != c2) {\n             for (int i = 0; i < this.size; ++i) {\n-                if (this.buffer[i] == search) {\n-                    this.buffer[i] = replace;\n+                if (this.buffer[i] == c) {\n+                    this.buffer[i] = c2;\n                 }\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder replaceFirst(final char search, final char replace) {\n-        if (search != replace) {\n+    public StrBuilder replaceFirst(final char c, final char c2) {\n+        if (c != c2) {\n             for (int i = 0; i < this.size; ++i) {\n-                if (this.buffer[i] == search) {\n-                    this.buffer[i] = replace;\n+                if (this.buffer[i] == c) {\n+                    this.buffer[i] = c2;\n                     break;\n                 }\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder replaceAll(final String searchStr, final String replaceStr) {\n-        final int searchLen = (searchStr == null) ? 0 : searchStr.length();\n-        if (searchLen > 0) {\n-            for (int replaceLen = (replaceStr == null) ? 0 : replaceStr.length(), index = this.indexOf(searchStr, 0); index >= 0; index = this.indexOf(searchStr, index + replaceLen)) {\n-                this.replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\n+    public StrBuilder replaceAll(final String s, final String s2) {\n+        final int n = (s == null) ? 0 : s.length();\n+        if (n > 0) {\n+            for (int n2 = (s2 == null) ? 0 : s2.length(), i = this.indexOf(s, 0); i >= 0; i = this.indexOf(s, i + n2)) {\n+                this.replaceImpl(i, i + n, n, s2, n2);\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder replaceFirst(final String searchStr, final String replaceStr) {\n-        final int searchLen = (searchStr == null) ? 0 : searchStr.length();\n-        if (searchLen > 0) {\n-            final int index = this.indexOf(searchStr, 0);\n+    public StrBuilder replaceFirst(final String s, final String s2) {\n+        final int n = (s == null) ? 0 : s.length();\n+        if (n > 0) {\n+            final int index = this.indexOf(s, 0);\n             if (index >= 0) {\n-                final int replaceLen = (replaceStr == null) ? 0 : replaceStr.length();\n-                this.replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\n+                this.replaceImpl(index, index + n, n, s2, (s2 == null) ? 0 : s2.length());\n             }\n         }\n         return this;\n     }\n     \n-    public StrBuilder replaceAll(final StrMatcher matcher, final String replaceStr) {\n-        return this.replace(matcher, replaceStr, 0, this.size, -1);\n+    public StrBuilder replaceAll(final StrMatcher strMatcher, final String s) {\n+        return this.replace(strMatcher, s, 0, this.size, -1);\n     }\n     \n-    public StrBuilder replaceFirst(final StrMatcher matcher, final String replaceStr) {\n-        return this.replace(matcher, replaceStr, 0, this.size, 1);\n+    public StrBuilder replaceFirst(final StrMatcher strMatcher, final String s) {\n+        return this.replace(strMatcher, s, 0, this.size, 1);\n     }\n     \n-    public StrBuilder replace(final StrMatcher matcher, final String replaceStr, final int startIndex, int endIndex, final int replaceCount) {\n-        endIndex = this.validateRange(startIndex, endIndex);\n-        return this.replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);\n+    public StrBuilder replace(final StrMatcher strMatcher, final String s, final int n, int validateRange, final int n2) {\n+        validateRange = this.validateRange(n, validateRange);\n+        return this.replaceImpl(strMatcher, s, n, validateRange, n2);\n     }\n     \n-    private StrBuilder replaceImpl(final StrMatcher matcher, final String replaceStr, final int from, int to, int replaceCount) {\n-        if (matcher == null || this.size == 0) {\n+    private StrBuilder replaceImpl(final StrMatcher strMatcher, final String s, final int n, int n2, int n3) {\n+        if (strMatcher == null || this.size == 0) {\n             return this;\n         }\n-        final int replaceLen = (replaceStr == null) ? 0 : replaceStr.length();\n-        for (int i = from; i < to && replaceCount != 0; ++i) {\n-            final char[] buf = this.buffer;\n-            final int removeLen = matcher.isMatch(buf, i, from, to);\n-            if (removeLen > 0) {\n-                this.replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen);\n-                to = to - removeLen + replaceLen;\n-                i = i + replaceLen - 1;\n-                if (replaceCount > 0) {\n-                    --replaceCount;\n+        final int n4 = (s == null) ? 0 : s.length();\n+        for (int n5 = n; n5 < n2 && n3 != 0; ++n5) {\n+            final int match = strMatcher.isMatch(this.buffer, n5, n, n2);\n+            if (match > 0) {\n+                this.replaceImpl(n5, n5 + match, match, s, n4);\n+                n2 = n2 - match + n4;\n+                n5 = n5 + n4 - 1;\n+                if (n3 > 0) {\n+                    --n3;\n                 }\n             }\n         }\n         return this;\n     }\n     \n     public StrBuilder reverse() {\n         if (this.size == 0) {\n             return this;\n         }\n-        final int half = this.size / 2;\n-        final char[] buf = this.buffer;\n-        for (int leftIdx = 0, rightIdx = this.size - 1; leftIdx < half; ++leftIdx, --rightIdx) {\n-            final char swap = buf[leftIdx];\n-            buf[leftIdx] = buf[rightIdx];\n-            buf[rightIdx] = swap;\n+        final int n = this.size / 2;\n+        final char[] buffer = this.buffer;\n+        for (int i = 0, n2 = this.size - 1; i < n; ++i, --n2) {\n+            final char c = buffer[i];\n+            buffer[i] = buffer[n2];\n+            buffer[n2] = c;\n         }\n         return this;\n     }\n     \n     public StrBuilder trim() {\n         if (this.size == 0) {\n             return this;\n         }\n-        int len;\n-        char[] buf;\n-        int pos;\n-        for (len = this.size, buf = this.buffer, pos = 0; pos < len && buf[pos] <= ' '; ++pos) {}\n-        while (pos < len && buf[len - 1] <= ' ') {\n-            --len;\n+        int size;\n+        char[] buffer;\n+        int n;\n+        for (size = this.size, buffer = this.buffer, n = 0; n < size && buffer[n] <= ' '; ++n) {}\n+        while (n < size && buffer[size - 1] <= ' ') {\n+            --size;\n         }\n-        if (len < this.size) {\n-            this.delete(len, this.size);\n+        if (size < this.size) {\n+            this.delete(size, this.size);\n         }\n-        if (pos > 0) {\n-            this.delete(0, pos);\n+        if (n > 0) {\n+            this.delete(0, n);\n         }\n         return this;\n     }\n     \n-    public boolean startsWith(final String str) {\n-        if (str == null) {\n+    public boolean startsWith(final String s) {\n+        if (s == null) {\n             return false;\n         }\n-        final int len = str.length();\n-        if (len == 0) {\n+        final int length = s.length();\n+        if (length == 0) {\n             return true;\n         }\n-        if (len > this.size) {\n+        if (length > this.size) {\n             return false;\n         }\n-        for (int i = 0; i < len; ++i) {\n-            if (this.buffer[i] != str.charAt(i)) {\n+        for (int i = 0; i < length; ++i) {\n+            if (this.buffer[i] != s.charAt(i)) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public boolean endsWith(final String str) {\n-        if (str == null) {\n+    public boolean endsWith(final String s) {\n+        if (s == null) {\n             return false;\n         }\n-        final int len = str.length();\n-        if (len == 0) {\n+        final int length = s.length();\n+        if (length == 0) {\n             return true;\n         }\n-        if (len > this.size) {\n+        if (length > this.size) {\n             return false;\n         }\n-        for (int pos = this.size - len, i = 0; i < len; ++i, ++pos) {\n-            if (this.buffer[pos] != str.charAt(i)) {\n+        for (int n = this.size - length, i = 0; i < length; ++i, ++n) {\n+            if (this.buffer[n] != s.charAt(i)) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     @Override\n-    public CharSequence subSequence(final int startIndex, final int endIndex) {\n-        if (startIndex < 0) {\n-            throw new StringIndexOutOfBoundsException(startIndex);\n+    public CharSequence subSequence(final int index, final int index2) {\n+        if (index < 0) {\n+            throw new StringIndexOutOfBoundsException(index);\n         }\n-        if (endIndex > this.size) {\n-            throw new StringIndexOutOfBoundsException(endIndex);\n+        if (index2 > this.size) {\n+            throw new StringIndexOutOfBoundsException(index2);\n         }\n-        if (startIndex > endIndex) {\n-            throw new StringIndexOutOfBoundsException(endIndex - startIndex);\n+        if (index > index2) {\n+            throw new StringIndexOutOfBoundsException(index2 - index);\n         }\n-        return this.substring(startIndex, endIndex);\n+        return this.substring(index, index2);\n     }\n     \n-    public String substring(final int start) {\n-        return this.substring(start, this.size);\n+    public String substring(final int n) {\n+        return this.substring(n, this.size);\n     }\n     \n-    public String substring(final int startIndex, int endIndex) {\n-        endIndex = this.validateRange(startIndex, endIndex);\n-        return new String(this.buffer, startIndex, endIndex - startIndex);\n+    public String substring(final int offset, int validateRange) {\n+        validateRange = this.validateRange(offset, validateRange);\n+        return new String(this.buffer, offset, validateRange - offset);\n     }\n     \n-    public String leftString(final int length) {\n-        if (length <= 0) {\n+    public String leftString(final int count) {\n+        if (count <= 0) {\n             return \"\";\n         }\n-        if (length >= this.size) {\n+        if (count >= this.size) {\n             return new String(this.buffer, 0, this.size);\n         }\n-        return new String(this.buffer, 0, length);\n+        return new String(this.buffer, 0, count);\n     }\n     \n-    public String rightString(final int length) {\n-        if (length <= 0) {\n+    public String rightString(final int count) {\n+        if (count <= 0) {\n             return \"\";\n         }\n-        if (length >= this.size) {\n+        if (count >= this.size) {\n             return new String(this.buffer, 0, this.size);\n         }\n-        return new String(this.buffer, this.size - length, length);\n+        return new String(this.buffer, this.size - count, count);\n     }\n     \n-    public String midString(int index, final int length) {\n-        if (index < 0) {\n-            index = 0;\n+    public String midString(int n, final int count) {\n+        if (n < 0) {\n+            n = 0;\n         }\n-        if (length <= 0 || index >= this.size) {\n+        if (count <= 0 || n >= this.size) {\n             return \"\";\n         }\n-        if (this.size <= index + length) {\n-            return new String(this.buffer, index, this.size - index);\n+        if (this.size <= n + count) {\n+            return new String(this.buffer, n, this.size - n);\n         }\n-        return new String(this.buffer, index, length);\n+        return new String(this.buffer, n, count);\n     }\n     \n-    public boolean contains(final char ch) {\n-        final char[] thisBuf = this.buffer;\n+    public boolean contains(final char c) {\n+        final char[] buffer = this.buffer;\n         for (int i = 0; i < this.size; ++i) {\n-            if (thisBuf[i] == ch) {\n+            if (buffer[i] == c) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public boolean contains(final String str) {\n-        return this.indexOf(str, 0) >= 0;\n+    public boolean contains(final String s) {\n+        return this.indexOf(s, 0) >= 0;\n     }\n     \n-    public boolean contains(final StrMatcher matcher) {\n-        return this.indexOf(matcher, 0) >= 0;\n+    public boolean contains(final StrMatcher strMatcher) {\n+        return this.indexOf(strMatcher, 0) >= 0;\n     }\n     \n-    public int indexOf(final char ch) {\n-        return this.indexOf(ch, 0);\n+    public int indexOf(final char c) {\n+        return this.indexOf(c, 0);\n     }\n     \n-    public int indexOf(final char ch, int startIndex) {\n-        startIndex = ((startIndex < 0) ? 0 : startIndex);\n-        if (startIndex >= this.size) {\n+    public int indexOf(final char c, int n) {\n+        n = ((n < 0) ? 0 : n);\n+        if (n >= this.size) {\n             return -1;\n         }\n-        final char[] thisBuf = this.buffer;\n-        for (int i = startIndex; i < this.size; ++i) {\n-            if (thisBuf[i] == ch) {\n+        final char[] buffer = this.buffer;\n+        for (int i = n; i < this.size; ++i) {\n+            if (buffer[i] == c) {\n                 return i;\n             }\n         }\n         return -1;\n     }\n     \n-    public int indexOf(final String str) {\n-        return this.indexOf(str, 0);\n+    public int indexOf(final String s) {\n+        return this.indexOf(s, 0);\n     }\n     \n-    public int indexOf(final String str, int startIndex) {\n-        startIndex = ((startIndex < 0) ? 0 : startIndex);\n-        if (str == null || startIndex >= this.size) {\n+    public int indexOf(final String s, int n) {\n+        n = ((n < 0) ? 0 : n);\n+        if (s == null || n >= this.size) {\n             return -1;\n         }\n-        final int strLen = str.length();\n-        if (strLen == 1) {\n-            return this.indexOf(str.charAt(0), startIndex);\n+        final int length = s.length();\n+        if (length == 1) {\n+            return this.indexOf(s.charAt(0), n);\n         }\n-        if (strLen == 0) {\n-            return startIndex;\n+        if (length == 0) {\n+            return n;\n         }\n-        if (strLen > this.size) {\n+        if (length > this.size) {\n             return -1;\n         }\n-        final char[] thisBuf = this.buffer;\n-        final int len = this.size - strLen + 1;\n-        int i = startIndex;\n+        final char[] buffer = this.buffer;\n+        final int n2 = this.size - length + 1;\n+        int i = n;\n     Label_0080:\n-        while (i < len) {\n-            for (int j = 0; j < strLen; ++j) {\n-                if (str.charAt(j) != thisBuf[i + j]) {\n+        while (i < n2) {\n+            for (int j = 0; j < length; ++j) {\n+                if (s.charAt(j) != buffer[i + j]) {\n                     ++i;\n                     continue Label_0080;\n                 }\n             }\n             return i;\n         }\n         return -1;\n     }\n     \n-    public int indexOf(final StrMatcher matcher) {\n-        return this.indexOf(matcher, 0);\n+    public int indexOf(final StrMatcher strMatcher) {\n+        return this.indexOf(strMatcher, 0);\n     }\n     \n-    public int indexOf(final StrMatcher matcher, int startIndex) {\n-        startIndex = ((startIndex < 0) ? 0 : startIndex);\n-        if (matcher == null || startIndex >= this.size) {\n+    public int indexOf(final StrMatcher strMatcher, int n) {\n+        n = ((n < 0) ? 0 : n);\n+        if (strMatcher == null || n >= this.size) {\n             return -1;\n         }\n-        final int len = this.size;\n-        final char[] buf = this.buffer;\n-        for (int i = startIndex; i < len; ++i) {\n-            if (matcher.isMatch(buf, i, startIndex, len) > 0) {\n+        final int size = this.size;\n+        final char[] buffer = this.buffer;\n+        for (int i = n; i < size; ++i) {\n+            if (strMatcher.isMatch(buffer, i, n, size) > 0) {\n                 return i;\n             }\n         }\n         return -1;\n     }\n     \n-    public int lastIndexOf(final char ch) {\n-        return this.lastIndexOf(ch, this.size - 1);\n+    public int lastIndexOf(final char c) {\n+        return this.lastIndexOf(c, this.size - 1);\n     }\n     \n-    public int lastIndexOf(final char ch, int startIndex) {\n-        startIndex = ((startIndex >= this.size) ? (this.size - 1) : startIndex);\n-        if (startIndex < 0) {\n+    public int lastIndexOf(final char c, int n) {\n+        n = ((n >= this.size) ? (this.size - 1) : n);\n+        if (n < 0) {\n             return -1;\n         }\n-        for (int i = startIndex; i >= 0; --i) {\n-            if (this.buffer[i] == ch) {\n+        for (int i = n; i >= 0; --i) {\n+            if (this.buffer[i] == c) {\n                 return i;\n             }\n         }\n         return -1;\n     }\n     \n-    public int lastIndexOf(final String str) {\n-        return this.lastIndexOf(str, this.size - 1);\n+    public int lastIndexOf(final String s) {\n+        return this.lastIndexOf(s, this.size - 1);\n     }\n     \n-    public int lastIndexOf(final String str, int startIndex) {\n-        startIndex = ((startIndex >= this.size) ? (this.size - 1) : startIndex);\n-        if (str == null || startIndex < 0) {\n+    public int lastIndexOf(final String s, int n) {\n+        n = ((n >= this.size) ? (this.size - 1) : n);\n+        if (s == null || n < 0) {\n             return -1;\n         }\n-        final int strLen = str.length();\n-        if (strLen > 0 && strLen <= this.size) {\n-            if (strLen == 1) {\n-                return this.lastIndexOf(str.charAt(0), startIndex);\n+        final int length = s.length();\n+        if (length > 0 && length <= this.size) {\n+            if (length == 1) {\n+                return this.lastIndexOf(s.charAt(0), n);\n             }\n-            int i = startIndex - strLen + 1;\n+            int i = n - length + 1;\n         Label_0069:\n             while (i >= 0) {\n-                for (int j = 0; j < strLen; ++j) {\n-                    if (str.charAt(j) != this.buffer[i + j]) {\n+                for (int j = 0; j < length; ++j) {\n+                    if (s.charAt(j) != this.buffer[i + j]) {\n                         --i;\n                         continue Label_0069;\n                     }\n                 }\n                 return i;\n             }\n         }\n-        else if (strLen == 0) {\n-            return startIndex;\n+        else if (length == 0) {\n+            return n;\n         }\n         return -1;\n     }\n     \n-    public int lastIndexOf(final StrMatcher matcher) {\n-        return this.lastIndexOf(matcher, this.size);\n+    public int lastIndexOf(final StrMatcher strMatcher) {\n+        return this.lastIndexOf(strMatcher, this.size);\n     }\n     \n-    public int lastIndexOf(final StrMatcher matcher, int startIndex) {\n-        startIndex = ((startIndex >= this.size) ? (this.size - 1) : startIndex);\n-        if (matcher == null || startIndex < 0) {\n+    public int lastIndexOf(final StrMatcher strMatcher, int n) {\n+        n = ((n >= this.size) ? (this.size - 1) : n);\n+        if (strMatcher == null || n < 0) {\n             return -1;\n         }\n-        final char[] buf = this.buffer;\n-        final int endIndex = startIndex + 1;\n-        for (int i = startIndex; i >= 0; --i) {\n-            if (matcher.isMatch(buf, i, 0, endIndex) > 0) {\n+        final char[] buffer = this.buffer;\n+        final int n2 = n + 1;\n+        for (int i = n; i >= 0; --i) {\n+            if (strMatcher.isMatch(buffer, i, 0, n2) > 0) {\n                 return i;\n             }\n         }\n         return -1;\n     }\n     \n     public StrTokenizer asTokenizer() {\n@@ -1353,66 +1346,66 @@\n             ((CharBuffer)appendable).put(this.buffer, 0, this.size);\n         }\n         else {\n             appendable.append(this);\n         }\n     }\n     \n-    public boolean equalsIgnoreCase(final StrBuilder other) {\n-        if (this == other) {\n+    public boolean equalsIgnoreCase(final StrBuilder strBuilder) {\n+        if (this == strBuilder) {\n             return true;\n         }\n-        if (this.size != other.size) {\n+        if (this.size != strBuilder.size) {\n             return false;\n         }\n-        final char[] thisBuf = this.buffer;\n-        final char[] otherBuf = other.buffer;\n+        final char[] buffer = this.buffer;\n+        final char[] buffer2 = strBuilder.buffer;\n         for (int i = this.size - 1; i >= 0; --i) {\n-            final char c1 = thisBuf[i];\n-            final char c2 = otherBuf[i];\n-            if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {\n+            final char ch = buffer[i];\n+            final char ch2 = buffer2[i];\n+            if (ch != ch2 && Character.toUpperCase(ch) != Character.toUpperCase(ch2)) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public boolean equals(final StrBuilder other) {\n-        if (this == other) {\n+    public boolean equals(final StrBuilder strBuilder) {\n+        if (this == strBuilder) {\n             return true;\n         }\n-        if (other == null) {\n+        if (strBuilder == null) {\n             return false;\n         }\n-        if (this.size != other.size) {\n+        if (this.size != strBuilder.size) {\n             return false;\n         }\n-        final char[] thisBuf = this.buffer;\n-        final char[] otherBuf = other.buffer;\n+        final char[] buffer = this.buffer;\n+        final char[] buffer2 = strBuilder.buffer;\n         for (int i = this.size - 1; i >= 0; --i) {\n-            if (thisBuf[i] != otherBuf[i]) {\n+            if (buffer[i] != buffer2[i]) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        return obj instanceof StrBuilder && this.equals((StrBuilder)obj);\n+    public boolean equals(final Object o) {\n+        return o instanceof StrBuilder && this.equals((StrBuilder)o);\n     }\n     \n     @Override\n     public int hashCode() {\n-        final char[] buf = this.buffer;\n-        int hash = 0;\n+        final char[] buffer = this.buffer;\n+        int n = 0;\n         for (int i = this.size - 1; i >= 0; --i) {\n-            hash = 31 * hash + buf[i];\n+            n = 31 * n + buffer[i];\n         }\n-        return hash;\n+        return n;\n     }\n     \n     @Override\n     public String toString() {\n         return new String(this.buffer, 0, this.size);\n     }\n     \n@@ -1424,25 +1417,25 @@\n         return new StringBuilder(this.size).append(this.buffer, 0, this.size);\n     }\n     \n     public String build() {\n         return this.toString();\n     }\n     \n-    protected int validateRange(final int startIndex, int endIndex) {\n-        if (startIndex < 0) {\n-            throw new StringIndexOutOfBoundsException(startIndex);\n+    protected int validateRange(final int index, int size) {\n+        if (index < 0) {\n+            throw new StringIndexOutOfBoundsException(index);\n         }\n-        if (endIndex > this.size) {\n-            endIndex = this.size;\n+        if (size > this.size) {\n+            size = this.size;\n         }\n-        if (startIndex > endIndex) {\n+        if (index > size) {\n             throw new StringIndexOutOfBoundsException(\"end < start\");\n         }\n-        return endIndex;\n+        return size;\n     }\n     \n     protected void validateIndex(final int index) {\n         if (index < 0 || index > this.size) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n     }\n"}]}
