{"diffoscope-json-version": 1, "source1": "first/ZipSplitReadOnlySeekableByteChannelTest.class", "source2": "second/ZipSplitReadOnlySeekableByteChannelTest.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,198 +1,192 @@\n-  SHA-256 checksum 582dd932c80d518f6cc9a02b3202b5717f6c35f06218ca24ce99bf82ebf66d74\n+  SHA-256 checksum 3c3d4172f56dae50a243b9c10e0480e7246286b3216cb95e2feead2afc67be9f\n   Compiled from \"ZipSplitReadOnlySeekableByteChannelTest.java\"\n public class org.apache.commons.compress.utils.ZipSplitReadOnlySeekableByteChannelTest\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #46                         // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n   super_class: #47                        // java/lang/Object\n   interfaces: 0, fields: 1, methods: 14, attributes: 1\n Constant pool:\n-    #1 = Methodref          #47.#83       // java/lang/Object.\"<init>\":()V\n-    #2 = Methodref          #84.#85       // org/junit/rules/ExpectedException.none:()Lorg/junit/rules/ExpectedException;\n-    #3 = Fieldref           #46.#86       // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.thrown:Lorg/junit/rules/ExpectedException;\n-    #4 = Class              #87           // java/lang/NullPointerException\n-    #5 = Methodref          #84.#88       // org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n-    #6 = Class              #89           // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-    #7 = Methodref          #6.#90        // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n-    #8 = Class              #91           // java/io/IOException\n-    #9 = Class              #92           // java/util/ArrayList\n-   #10 = Methodref          #9.#83        // java/util/ArrayList.\"<init>\":()V\n-   #11 = String             #93           // COMPRESS-189.zip\n-   #12 = Methodref          #94.#95       // org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n-   #13 = Methodref          #37.#96       // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #14 = Class              #97           // java/nio/file/OpenOption\n-   #15 = Fieldref           #98.#99       // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #16 = Methodref          #100.#101     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-   #17 = InterfaceMethodref #102.#103     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #18 = Methodref          #46.#104      // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.getSplitZipChannels:()Ljava/util/List;\n-   #19 = InterfaceMethodref #102.#105     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #20 = InterfaceMethodref #106.#107     // java/util/Iterator.hasNext:()Z\n-   #21 = InterfaceMethodref #106.#108     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #22 = Class              #109          // java/nio/channels/SeekableByteChannel\n-   #23 = InterfaceMethodref #22.#110      // java/nio/channels/SeekableByteChannel.position:()J\n-   #24 = Methodref          #111.#112     // org/junit/Assert.assertEquals:(JJ)V\n-   #25 = Methodref          #6.#113       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-   #26 = Methodref          #6.#114       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-   #27 = String             #115          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-   #28 = String             #116          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n-   #29 = String             #117          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n-   #30 = Methodref          #111.#118     // org/junit/Assert.assertTrue:(Z)V\n-   #31 = Class              #119          // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-   #32 = Methodref          #31.#120      // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n-   #33 = Methodref          #111.#121     // org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n-   #34 = Methodref          #6.#122       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-   #35 = Methodref          #6.#123       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-   #36 = Methodref          #9.#103       // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n-   #37 = Class              #124          // java/io/File\n-   #38 = Class              #125          // java/lang/IllegalArgumentException\n-   #39 = Methodref          #6.#126       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-   #40 = Methodref          #37.#127      // java/io/File.length:()J\n-   #41 = Class              #128          // java/util/Random\n-   #42 = Methodref          #41.#83       // java/util/Random.\"<init>\":()V\n-   #43 = Methodref          #41.#129      // java/util/Random.nextInt:(I)I\n-   #44 = Methodref          #6.#130       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #45 = Methodref          #6.#110       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:()J\n-   #46 = Class              #131          // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n-   #47 = Class              #132          // java/lang/Object\n+    #1 = Methodref          #47.#79       // java/lang/Object.\"<init>\":()V\n+    #2 = Methodref          #80.#81       // org/junit/rules/ExpectedException.none:()Lorg/junit/rules/ExpectedException;\n+    #3 = Fieldref           #46.#82       // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.thrown:Lorg/junit/rules/ExpectedException;\n+    #4 = Class              #83           // java/lang/NullPointerException\n+    #5 = Methodref          #80.#84       // org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+    #6 = Class              #85           // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+    #7 = Methodref          #6.#86        // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+    #8 = Class              #87           // java/io/IOException\n+    #9 = Class              #88           // java/util/ArrayList\n+   #10 = Methodref          #9.#79        // java/util/ArrayList.\"<init>\":()V\n+   #11 = String             #89           // COMPRESS-189.zip\n+   #12 = Methodref          #90.#91       // org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+   #13 = Methodref          #37.#92       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #14 = Class              #93           // java/nio/file/OpenOption\n+   #15 = Fieldref           #94.#95       // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+   #16 = Methodref          #96.#97       // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #17 = InterfaceMethodref #62.#98       // java/util/List.add:(Ljava/lang/Object;)Z\n+   #18 = Methodref          #46.#99       // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.getSplitZipChannels:()Ljava/util/List;\n+   #19 = InterfaceMethodref #62.#100      // java/util/List.iterator:()Ljava/util/Iterator;\n+   #20 = InterfaceMethodref #63.#101      // java/util/Iterator.hasNext:()Z\n+   #21 = InterfaceMethodref #63.#102      // java/util/Iterator.next:()Ljava/lang/Object;\n+   #22 = Class              #103          // java/nio/channels/SeekableByteChannel\n+   #23 = InterfaceMethodref #22.#104      // java/nio/channels/SeekableByteChannel.position:()J\n+   #24 = Methodref          #105.#106     // org/junit/Assert.assertEquals:(JJ)V\n+   #25 = Methodref          #6.#107       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+   #26 = Methodref          #6.#108       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+   #27 = String             #109          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+   #28 = String             #110          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n+   #29 = String             #111          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n+   #30 = Methodref          #105.#112     // org/junit/Assert.assertTrue:(Z)V\n+   #31 = Class              #113          // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+   #32 = Methodref          #31.#114      // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+   #33 = Methodref          #105.#115     // org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n+   #34 = Methodref          #6.#116       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+   #35 = Methodref          #6.#117       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+   #36 = Methodref          #9.#98        // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n+   #37 = Class              #118          // java/io/File\n+   #38 = Class              #119          // java/lang/IllegalArgumentException\n+   #39 = Methodref          #6.#120       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+   #40 = Methodref          #37.#121      // java/io/File.length:()J\n+   #41 = Class              #122          // java/util/Random\n+   #42 = Methodref          #41.#79       // java/util/Random.\"<init>\":()V\n+   #43 = Methodref          #41.#123      // java/util/Random.nextInt:(I)I\n+   #44 = Methodref          #6.#124       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+   #45 = Methodref          #6.#104       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:()J\n+   #46 = Class              #125          // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n+   #47 = Class              #126          // java/lang/Object\n    #48 = Utf8               thrown\n    #49 = Utf8               Lorg/junit/rules/ExpectedException;\n    #50 = Utf8               RuntimeVisibleAnnotations\n    #51 = Utf8               Lorg/junit/Rule;\n    #52 = Utf8               <init>\n    #53 = Utf8               ()V\n    #54 = Utf8               Code\n    #55 = Utf8               LineNumberTable\n    #56 = Utf8               constructorThrowsOnNullArg\n    #57 = Utf8               Exceptions\n    #58 = Utf8               Lorg/junit/Test;\n    #59 = Utf8               constructorThrowsOnNonSplitZipFiles\n    #60 = Utf8               channelsPositionIsZeroAfterConstructor\n    #61 = Utf8               StackMapTable\n-   #62 = Class              #133          // java/util/List\n-   #63 = Class              #134          // java/util/Iterator\n+   #62 = Class              #127          // java/util/List\n+   #63 = Class              #128          // java/util/Iterator\n    #64 = Utf8               forOrderedSeekableByteChannelsThrowsOnNullArg\n    #65 = Utf8               forOrderedSeekableByteChannelsOfTwoParametersThrowsOnNullArg\n    #66 = Utf8               forOrderedSeekableByteChannelsReturnCorrectClass\n    #67 = Utf8               forOrderedSeekableByteChannelsReturnsIdentityForSingleElement\n    #68 = Utf8               forFilesThrowsOnNullArg\n    #69 = Utf8               forFilesOfTwoParametersThrowsOnNullArg\n    #70 = Utf8               forFilesReturnCorrectClass\n    #71 = Utf8               buildFromLastSplitSegmentThrowsOnNotZipFile\n    #72 = Utf8               positionToSomeZipSplitSegment\n-   #73 = Class              #131          // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n-   #74 = Class              #124          // java/io/File\n-   #75 = Class              #128          // java/util/Random\n-   #76 = Class              #89           // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-   #77 = Utf8               getSplitZipChannels\n-   #78 = Utf8               ()Ljava/util/List;\n-   #79 = Utf8               Signature\n-   #80 = Utf8               ()Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n-   #81 = Utf8               SourceFile\n-   #82 = Utf8               ZipSplitReadOnlySeekableByteChannelTest.java\n-   #83 = NameAndType        #52:#53       // \"<init>\":()V\n-   #84 = Class              #135          // org/junit/rules/ExpectedException\n-   #85 = NameAndType        #136:#137     // none:()Lorg/junit/rules/ExpectedException;\n-   #86 = NameAndType        #48:#49       // thrown:Lorg/junit/rules/ExpectedException;\n-   #87 = Utf8               java/lang/NullPointerException\n-   #88 = NameAndType        #138:#139     // expect:(Ljava/lang/Class;)V\n-   #89 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-   #90 = NameAndType        #52:#140      // \"<init>\":(Ljava/util/List;)V\n-   #91 = Utf8               java/io/IOException\n-   #92 = Utf8               java/util/ArrayList\n-   #93 = Utf8               COMPRESS-189.zip\n-   #94 = Class              #141          // org/apache/commons/compress/AbstractTestCase\n-   #95 = NameAndType        #142:#143     // getFile:(Ljava/lang/String;)Ljava/io/File;\n-   #96 = NameAndType        #144:#145     // toPath:()Ljava/nio/file/Path;\n-   #97 = Utf8               java/nio/file/OpenOption\n-   #98 = Class              #146          // java/nio/file/StandardOpenOption\n-   #99 = NameAndType        #147:#148     // READ:Ljava/nio/file/StandardOpenOption;\n-  #100 = Class              #149          // java/nio/file/Files\n-  #101 = NameAndType        #150:#151     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #102 = Class              #133          // java/util/List\n-  #103 = NameAndType        #152:#153     // add:(Ljava/lang/Object;)Z\n-  #104 = NameAndType        #77:#78       // getSplitZipChannels:()Ljava/util/List;\n-  #105 = NameAndType        #154:#155     // iterator:()Ljava/util/Iterator;\n-  #106 = Class              #134          // java/util/Iterator\n-  #107 = NameAndType        #156:#157     // hasNext:()Z\n-  #108 = NameAndType        #158:#159     // next:()Ljava/lang/Object;\n-  #109 = Utf8               java/nio/channels/SeekableByteChannel\n-  #110 = NameAndType        #160:#161     // position:()J\n-  #111 = Class              #162          // org/junit/Assert\n-  #112 = NameAndType        #163:#164     // assertEquals:(JJ)V\n-  #113 = NameAndType        #165:#166     // forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-  #114 = NameAndType        #165:#167     // forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #115 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-  #116 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n-  #117 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n-  #118 = NameAndType        #168:#169     // assertTrue:(Z)V\n-  #119 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-  #120 = NameAndType        #52:#170      // \"<init>\":([B)V\n-  #121 = NameAndType        #171:#172     // assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n-  #122 = NameAndType        #173:#174     // forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #123 = NameAndType        #173:#175     // forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #124 = Utf8               java/io/File\n-  #125 = Utf8               java/lang/IllegalArgumentException\n-  #126 = NameAndType        #176:#177     // buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #127 = NameAndType        #178:#161     // length:()J\n-  #128 = Utf8               java/util/Random\n-  #129 = NameAndType        #179:#180     // nextInt:(I)I\n-  #130 = NameAndType        #160:#181     // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #131 = Utf8               org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n-  #132 = Utf8               java/lang/Object\n-  #133 = Utf8               java/util/List\n-  #134 = Utf8               java/util/Iterator\n-  #135 = Utf8               org/junit/rules/ExpectedException\n-  #136 = Utf8               none\n-  #137 = Utf8               ()Lorg/junit/rules/ExpectedException;\n-  #138 = Utf8               expect\n-  #139 = Utf8               (Ljava/lang/Class;)V\n-  #140 = Utf8               (Ljava/util/List;)V\n-  #141 = Utf8               org/apache/commons/compress/AbstractTestCase\n-  #142 = Utf8               getFile\n-  #143 = Utf8               (Ljava/lang/String;)Ljava/io/File;\n-  #144 = Utf8               toPath\n-  #145 = Utf8               ()Ljava/nio/file/Path;\n-  #146 = Utf8               java/nio/file/StandardOpenOption\n-  #147 = Utf8               READ\n-  #148 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #149 = Utf8               java/nio/file/Files\n-  #150 = Utf8               newByteChannel\n-  #151 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #152 = Utf8               add\n-  #153 = Utf8               (Ljava/lang/Object;)Z\n-  #154 = Utf8               iterator\n-  #155 = Utf8               ()Ljava/util/Iterator;\n-  #156 = Utf8               hasNext\n-  #157 = Utf8               ()Z\n-  #158 = Utf8               next\n-  #159 = Utf8               ()Ljava/lang/Object;\n-  #160 = Utf8               position\n-  #161 = Utf8               ()J\n-  #162 = Utf8               org/junit/Assert\n-  #163 = Utf8               assertEquals\n-  #164 = Utf8               (JJ)V\n-  #165 = Utf8               forOrderedSeekableByteChannels\n-  #166 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-  #167 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #168 = Utf8               assertTrue\n-  #169 = Utf8               (Z)V\n-  #170 = Utf8               ([B)V\n-  #171 = Utf8               assertSame\n-  #172 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n-  #173 = Utf8               forFiles\n-  #174 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #175 = Utf8               (Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #176 = Utf8               buildFromLastSplitSegment\n-  #177 = Utf8               (Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #178 = Utf8               length\n-  #179 = Utf8               nextInt\n-  #180 = Utf8               (I)I\n-  #181 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+   #73 = Utf8               getSplitZipChannels\n+   #74 = Utf8               ()Ljava/util/List;\n+   #75 = Utf8               Signature\n+   #76 = Utf8               ()Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+   #77 = Utf8               SourceFile\n+   #78 = Utf8               ZipSplitReadOnlySeekableByteChannelTest.java\n+   #79 = NameAndType        #52:#53       // \"<init>\":()V\n+   #80 = Class              #129          // org/junit/rules/ExpectedException\n+   #81 = NameAndType        #130:#131     // none:()Lorg/junit/rules/ExpectedException;\n+   #82 = NameAndType        #48:#49       // thrown:Lorg/junit/rules/ExpectedException;\n+   #83 = Utf8               java/lang/NullPointerException\n+   #84 = NameAndType        #132:#133     // expect:(Ljava/lang/Class;)V\n+   #85 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+   #86 = NameAndType        #52:#134      // \"<init>\":(Ljava/util/List;)V\n+   #87 = Utf8               java/io/IOException\n+   #88 = Utf8               java/util/ArrayList\n+   #89 = Utf8               COMPRESS-189.zip\n+   #90 = Class              #135          // org/apache/commons/compress/AbstractTestCase\n+   #91 = NameAndType        #136:#137     // getFile:(Ljava/lang/String;)Ljava/io/File;\n+   #92 = NameAndType        #138:#139     // toPath:()Ljava/nio/file/Path;\n+   #93 = Utf8               java/nio/file/OpenOption\n+   #94 = Class              #140          // java/nio/file/StandardOpenOption\n+   #95 = NameAndType        #141:#142     // READ:Ljava/nio/file/StandardOpenOption;\n+   #96 = Class              #143          // java/nio/file/Files\n+   #97 = NameAndType        #144:#145     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #98 = NameAndType        #146:#147     // add:(Ljava/lang/Object;)Z\n+   #99 = NameAndType        #73:#74       // getSplitZipChannels:()Ljava/util/List;\n+  #100 = NameAndType        #148:#149     // iterator:()Ljava/util/Iterator;\n+  #101 = NameAndType        #150:#151     // hasNext:()Z\n+  #102 = NameAndType        #152:#153     // next:()Ljava/lang/Object;\n+  #103 = Utf8               java/nio/channels/SeekableByteChannel\n+  #104 = NameAndType        #154:#155     // position:()J\n+  #105 = Class              #156          // org/junit/Assert\n+  #106 = NameAndType        #157:#158     // assertEquals:(JJ)V\n+  #107 = NameAndType        #159:#160     // forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #108 = NameAndType        #159:#161     // forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #109 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+  #110 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n+  #111 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n+  #112 = NameAndType        #162:#163     // assertTrue:(Z)V\n+  #113 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+  #114 = NameAndType        #52:#164      // \"<init>\":([B)V\n+  #115 = NameAndType        #165:#166     // assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n+  #116 = NameAndType        #167:#168     // forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #117 = NameAndType        #167:#169     // forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #118 = Utf8               java/io/File\n+  #119 = Utf8               java/lang/IllegalArgumentException\n+  #120 = NameAndType        #170:#171     // buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #121 = NameAndType        #172:#155     // length:()J\n+  #122 = Utf8               java/util/Random\n+  #123 = NameAndType        #173:#174     // nextInt:(I)I\n+  #124 = NameAndType        #154:#175     // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #125 = Utf8               org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n+  #126 = Utf8               java/lang/Object\n+  #127 = Utf8               java/util/List\n+  #128 = Utf8               java/util/Iterator\n+  #129 = Utf8               org/junit/rules/ExpectedException\n+  #130 = Utf8               none\n+  #131 = Utf8               ()Lorg/junit/rules/ExpectedException;\n+  #132 = Utf8               expect\n+  #133 = Utf8               (Ljava/lang/Class;)V\n+  #134 = Utf8               (Ljava/util/List;)V\n+  #135 = Utf8               org/apache/commons/compress/AbstractTestCase\n+  #136 = Utf8               getFile\n+  #137 = Utf8               (Ljava/lang/String;)Ljava/io/File;\n+  #138 = Utf8               toPath\n+  #139 = Utf8               ()Ljava/nio/file/Path;\n+  #140 = Utf8               java/nio/file/StandardOpenOption\n+  #141 = Utf8               READ\n+  #142 = Utf8               Ljava/nio/file/StandardOpenOption;\n+  #143 = Utf8               java/nio/file/Files\n+  #144 = Utf8               newByteChannel\n+  #145 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #146 = Utf8               add\n+  #147 = Utf8               (Ljava/lang/Object;)Z\n+  #148 = Utf8               iterator\n+  #149 = Utf8               ()Ljava/util/Iterator;\n+  #150 = Utf8               hasNext\n+  #151 = Utf8               ()Z\n+  #152 = Utf8               next\n+  #153 = Utf8               ()Ljava/lang/Object;\n+  #154 = Utf8               position\n+  #155 = Utf8               ()J\n+  #156 = Utf8               org/junit/Assert\n+  #157 = Utf8               assertEquals\n+  #158 = Utf8               (JJ)V\n+  #159 = Utf8               forOrderedSeekableByteChannels\n+  #160 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #161 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #162 = Utf8               assertTrue\n+  #163 = Utf8               (Z)V\n+  #164 = Utf8               ([B)V\n+  #165 = Utf8               assertSame\n+  #166 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n+  #167 = Utf8               forFiles\n+  #168 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #169 = Utf8               (Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #170 = Utf8               buildFromLastSplitSegment\n+  #171 = Utf8               (Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #172 = Utf8               length\n+  #173 = Utf8               nextInt\n+  #174 = Utf8               (I)I\n+  #175 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n {\n   public org.junit.rules.ExpectedException thrown;\n     descriptor: Lorg/junit/rules/ExpectedException;\n     flags: (0x0001) ACC_PUBLIC\n     RuntimeVisibleAnnotations:\n       0: #51()\n         org.junit.Rule\n@@ -854,10 +848,10 @@\n         line 173: 38\n         line 174: 44\n         line 176: 68\n         line 177: 75\n         line 179: 100\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #80                          // ()Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+    Signature: #76                          // ()Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n }\n SourceFile: \"ZipSplitReadOnlySeekableByteChannelTest.java\"\n"}]}
