{"diffoscope-json-version": 1, "source1": "first/LineIterator.class", "source2": "second/LineIterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,16 +13,16 @@\n public class LineIterator implements Iterator<String>, Closeable\n {\n     private final BufferedReader bufferedReader;\n     private String cachedLine;\n     private boolean finished;\n     \n     @Deprecated\n-    public static void closeQuietly(final LineIterator iterator) {\n-        IOUtils.closeQuietly((Closeable)iterator);\n+    public static void closeQuietly(final LineIterator lineIterator) {\n+        IOUtils.closeQuietly((Closeable)lineIterator);\n     }\n     \n     public LineIterator(final Reader reader) throws IllegalArgumentException {\n         Objects.requireNonNull(reader, \"reader\");\n         if (reader instanceof BufferedReader) {\n             this.bufferedReader = (BufferedReader)reader;\n         }\n@@ -57,37 +57,37 @@\n                     }\n                     if (this.isValidLine(line)) {\n                         this.cachedLine = line;\n                         return true;\n                     }\n                 }\n             }\n-            catch (final IOException ioe) {\n-                IOUtils.closeQuietly((Closeable)this, (Consumer)ioe::addSuppressed);\n-                throw new IllegalStateException(ioe);\n+            catch (final IOException cause) {\n+                IOUtils.closeQuietly((Closeable)this, (Consumer)cause::addSuppressed);\n+                throw new IllegalStateException(cause);\n             }\n         }\n     }\n     \n-    protected boolean isValidLine(final String line) {\n+    protected boolean isValidLine(final String s) {\n         return true;\n     }\n     \n     @Override\n     public String next() {\n         return this.nextLine();\n     }\n     \n     public String nextLine() {\n         if (!this.hasNext()) {\n             throw new NoSuchElementException(\"No more lines\");\n         }\n-        final String currentLine = this.cachedLine;\n+        final String cachedLine = this.cachedLine;\n         this.cachedLine = null;\n-        return currentLine;\n+        return cachedLine;\n     }\n     \n     @Override\n     public void remove() {\n         throw new UnsupportedOperationException(\"remove not supported\");\n     }\n }\n"}]}
