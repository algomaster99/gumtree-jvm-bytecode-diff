{"diffoscope-json-version": 1, "source1": "first/FileExtensionConfigurationBuilderProvider.class", "source2": "second/FileExtensionConfigurationBuilderProvider.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,50 +9,48 @@\n \n public class FileExtensionConfigurationBuilderProvider extends BaseConfigurationBuilderProvider\n {\n     private static final char EXT_SEPARATOR = '.';\n     private final String matchingConfigurationClass;\n     private final String extension;\n     \n-    public FileExtensionConfigurationBuilderProvider(final String bldrCls, final String reloadBldrCls, final String matchingConfigCls, final String defConfigClass, final String ext, final Collection<String> paramCls) {\n-        super(bldrCls, reloadBldrCls, defConfigClass, (Collection)paramCls);\n-        if (matchingConfigCls == null) {\n+    public FileExtensionConfigurationBuilderProvider(final String s, final String s2, final String matchingConfigurationClass, final String s3, final String extension, final Collection<String> collection) {\n+        super(s, s2, s3, (Collection)collection);\n+        if (matchingConfigurationClass == null) {\n             throw new IllegalArgumentException(\"Matching configuration class must not be null!\");\n         }\n-        if (ext == null) {\n+        if (extension == null) {\n             throw new IllegalArgumentException(\"File extension must not be null!\");\n         }\n-        this.matchingConfigurationClass = matchingConfigCls;\n-        this.extension = ext;\n+        this.matchingConfigurationClass = matchingConfigurationClass;\n+        this.extension = extension;\n     }\n     \n     public String getMatchingConfigurationClass() {\n         return this.matchingConfigurationClass;\n     }\n     \n     public String getExtension() {\n         return this.extension;\n     }\n     \n-    protected String determineConfigurationClass(final ConfigurationDeclaration decl, final Collection<BuilderParameters> params) throws ConfigurationException {\n-        final String currentExt = extractExtension(fetchCurrentFileName(params));\n-        return this.getExtension().equalsIgnoreCase(currentExt) ? this.getMatchingConfigurationClass() : this.getConfigurationClass();\n+    protected String determineConfigurationClass(final ConfigurationDeclaration configurationDeclaration, final Collection<BuilderParameters> collection) throws ConfigurationException {\n+        return this.getExtension().equalsIgnoreCase(extractExtension(fetchCurrentFileName(collection))) ? this.getMatchingConfigurationClass() : this.getConfigurationClass();\n     }\n     \n-    private static String fetchCurrentFileName(final Collection<BuilderParameters> params) {\n-        for (final BuilderParameters p : params) {\n-            if (p instanceof FileBasedBuilderParametersImpl) {\n-                final FileBasedBuilderParametersImpl fp = (FileBasedBuilderParametersImpl)p;\n-                return fp.getFileHandler().getFileName();\n+    private static String fetchCurrentFileName(final Collection<BuilderParameters> collection) {\n+        for (final BuilderParameters builderParameters : collection) {\n+            if (builderParameters instanceof FileBasedBuilderParametersImpl) {\n+                return ((FileBasedBuilderParametersImpl)builderParameters).getFileHandler().getFileName();\n             }\n         }\n         return null;\n     }\n     \n-    private static String extractExtension(final String fileName) {\n-        if (fileName == null) {\n+    private static String extractExtension(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        final int pos = fileName.lastIndexOf(46);\n-        return (pos < 0) ? null : fileName.substring(pos + 1);\n+        final int lastIndex = s.lastIndexOf(46);\n+        return (lastIndex < 0) ? null : s.substring(lastIndex + 1);\n     }\n }\n"}]}
