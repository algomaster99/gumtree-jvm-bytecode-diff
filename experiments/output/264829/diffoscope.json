{"diffoscope-json-version": 1, "source1": "first/MethodParameters.class", "source2": "second/MethodParameters.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,40 +9,41 @@\n import java.io.DataInput;\n \n public class MethodParameters extends Attribute implements Iterable<MethodParameter>\n {\n     private static final MethodParameter[] EMPTY_METHOD_PARAMETER_ARRAY;\n     private MethodParameter[] parameters;\n     \n-    MethodParameters(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        super((byte)21, name_index, length, constant_pool);\n+    MethodParameters(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        super((byte)21, n, n2, constantPool);\n         this.parameters = MethodParameters.EMPTY_METHOD_PARAMETER_ARRAY;\n-        final int parameters_count = input.readUnsignedByte();\n-        this.parameters = new MethodParameter[parameters_count];\n-        for (int i = 0; i < parameters_count; ++i) {\n-            this.parameters[i] = new MethodParameter(input);\n+        final int unsignedByte = dataInput.readUnsignedByte();\n+        this.parameters = new MethodParameter[unsignedByte];\n+        for (int i = 0; i < unsignedByte; ++i) {\n+            this.parameters[i] = new MethodParameter(dataInput);\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitMethodParameters(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitMethodParameters(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final MethodParameters c = (MethodParameters)this.clone();\n-        Arrays.setAll(c.parameters = new MethodParameter[this.parameters.length], i -> this.parameters[i].copy());\n-        c.setConstantPool(constantPool);\n-        return c;\n+        final MethodParameters methodParameters = (MethodParameters)this.clone();\n+        Arrays.setAll(methodParameters.parameters = new MethodParameter[this.parameters.length], n2 -> this.parameters[n2].copy());\n+        methodParameters.setConstantPool(constantPool);\n+        return methodParameters;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeByte(this.parameters.length);\n-        for (final MethodParameter parameter : this.parameters) {\n-            parameter.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeByte(this.parameters.length);\n+        final MethodParameter[] parameters = this.parameters;\n+        for (int length = parameters.length, i = 0; i < length; ++i) {\n+            parameters[i].dump(dataOutputStream);\n         }\n     }\n     \n     public MethodParameter[] getParameters() {\n         return this.parameters;\n     }\n     \n"}]}
