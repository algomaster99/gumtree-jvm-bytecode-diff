{"diffoscope-json-version": 1, "source1": "first/Attribute.class", "source2": "second/Attribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,182 +19,180 @@\n     protected int length;\n     @Deprecated\n     protected byte tag;\n     @Deprecated\n     protected ConstantPool constant_pool;\n     \n     @Deprecated\n-    public static void addAttributeReader(final String name, final AttributeReader r) {\n-        Attribute.readers.put(name, r);\n+    public static void addAttributeReader(final String s, final AttributeReader attributeReader) {\n+        Attribute.readers.put(s, attributeReader);\n     }\n     \n-    public static void addAttributeReader(final String name, final UnknownAttributeReader r) {\n-        Attribute.readers.put(name, r);\n+    public static void addAttributeReader(final String s, final UnknownAttributeReader unknownAttributeReader) {\n+        Attribute.readers.put(s, unknownAttributeReader);\n     }\n     \n-    protected static void println(final String msg) {\n+    protected static void println(final String x) {\n         if (Attribute.debug) {\n-            System.err.println(msg);\n+            System.err.println(x);\n         }\n     }\n     \n-    public static Attribute readAttribute(final DataInput file, final ConstantPool constant_pool) throws IOException, ClassFormatException {\n-        byte tag = -1;\n-        final int name_index = file.readUnsignedShort();\n-        final ConstantUtf8 c = (ConstantUtf8)constant_pool.getConstant(name_index, (byte)1);\n-        final String name = c.getBytes();\n-        final int length = file.readInt();\n-        for (byte i = 0; i < 27; ++i) {\n-            if (name.equals(Const.getAttributeName((int)i))) {\n-                tag = i;\n+    public static Attribute readAttribute(final DataInput dataInput, final ConstantPool constantPool) throws IOException, ClassFormatException {\n+        int i = -1;\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        final String bytes = ((ConstantUtf8)constantPool.getConstant(unsignedShort, (byte)1)).getBytes();\n+        final int int1 = dataInput.readInt();\n+        for (int j = 0; j < 27; j = (byte)(j + 1)) {\n+            if (bytes.equals(Const.getAttributeName(j))) {\n+                i = j;\n                 break;\n             }\n         }\n-        switch (tag) {\n+        switch (i) {\n             case -1: {\n-                final Object r = Attribute.readers.get(name);\n-                if (r instanceof UnknownAttributeReader) {\n-                    return ((UnknownAttributeReader)r).createAttribute(name_index, length, file, constant_pool);\n+                final Object value = Attribute.readers.get(bytes);\n+                if (value instanceof UnknownAttributeReader) {\n+                    return ((UnknownAttributeReader)value).createAttribute(unsignedShort, int1, dataInput, constantPool);\n                 }\n-                return (Attribute)new Unknown(name_index, length, file, constant_pool);\n+                return (Attribute)new Unknown(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 1: {\n-                return (Attribute)new ConstantValue(name_index, length, file, constant_pool);\n+                return (Attribute)new ConstantValue(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 0: {\n-                return (Attribute)new SourceFile(name_index, length, file, constant_pool);\n+                return (Attribute)new SourceFile(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 2: {\n-                return (Attribute)new Code(name_index, length, file, constant_pool);\n+                return (Attribute)new Code(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 3: {\n-                return (Attribute)new ExceptionTable(name_index, length, file, constant_pool);\n+                return (Attribute)new ExceptionTable(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 4: {\n-                return (Attribute)new LineNumberTable(name_index, length, file, constant_pool);\n+                return (Attribute)new LineNumberTable(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 5: {\n-                return (Attribute)new LocalVariableTable(name_index, length, file, constant_pool);\n+                return (Attribute)new LocalVariableTable(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 6: {\n-                return (Attribute)new InnerClasses(name_index, length, file, constant_pool);\n+                return (Attribute)new InnerClasses(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 7: {\n-                return (Attribute)new Synthetic(name_index, length, file, constant_pool);\n+                return (Attribute)new Synthetic(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 8: {\n-                return (Attribute)new org.apache.bcel.classfile.Deprecated(name_index, length, file, constant_pool);\n+                return (Attribute)new org.apache.bcel.classfile.Deprecated(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 9: {\n-                return (Attribute)new PMGClass(name_index, length, file, constant_pool);\n+                return (Attribute)new PMGClass(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 10: {\n-                return (Attribute)new Signature(name_index, length, file, constant_pool);\n+                return (Attribute)new Signature(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 11: {\n                 println(\"Warning: Obsolete StackMap attribute ignored.\");\n-                return (Attribute)new Unknown(name_index, length, file, constant_pool);\n+                return (Attribute)new Unknown(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 12: {\n-                return (Attribute)new RuntimeVisibleAnnotations(name_index, length, file, constant_pool);\n+                return (Attribute)new RuntimeVisibleAnnotations(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 13: {\n-                return (Attribute)new RuntimeInvisibleAnnotations(name_index, length, file, constant_pool);\n+                return (Attribute)new RuntimeInvisibleAnnotations(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 14: {\n-                return (Attribute)new RuntimeVisibleParameterAnnotations(name_index, length, file, constant_pool);\n+                return (Attribute)new RuntimeVisibleParameterAnnotations(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 15: {\n-                return (Attribute)new RuntimeInvisibleParameterAnnotations(name_index, length, file, constant_pool);\n+                return (Attribute)new RuntimeInvisibleParameterAnnotations(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 16: {\n-                return (Attribute)new AnnotationDefault(name_index, length, file, constant_pool);\n+                return (Attribute)new AnnotationDefault(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 17: {\n-                return (Attribute)new LocalVariableTypeTable(name_index, length, file, constant_pool);\n+                return (Attribute)new LocalVariableTypeTable(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 18: {\n-                return (Attribute)new EnclosingMethod(name_index, length, file, constant_pool);\n+                return (Attribute)new EnclosingMethod(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 19: {\n-                return (Attribute)new StackMap(name_index, length, file, constant_pool);\n+                return (Attribute)new StackMap(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 20: {\n-                return (Attribute)new BootstrapMethods(name_index, length, file, constant_pool);\n+                return (Attribute)new BootstrapMethods(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 21: {\n-                return (Attribute)new MethodParameters(name_index, length, file, constant_pool);\n+                return (Attribute)new MethodParameters(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 22: {\n-                return (Attribute)new Module(name_index, length, file, constant_pool);\n+                return (Attribute)new Module(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 23: {\n-                return (Attribute)new ModulePackages(name_index, length, file, constant_pool);\n+                return (Attribute)new ModulePackages(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 24: {\n-                return (Attribute)new ModuleMainClass(name_index, length, file, constant_pool);\n+                return (Attribute)new ModuleMainClass(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 25: {\n-                return (Attribute)new NestHost(name_index, length, file, constant_pool);\n+                return (Attribute)new NestHost(unsignedShort, int1, dataInput, constantPool);\n             }\n             case 26: {\n-                return (Attribute)new NestMembers(name_index, length, file, constant_pool);\n+                return (Attribute)new NestMembers(unsignedShort, int1, dataInput, constantPool);\n             }\n             default: {\n-                throw new IllegalStateException(\"Unrecognized attribute type tag parsed: \" + tag);\n+                throw new IllegalStateException(\"Unrecognized attribute type tag parsed: \" + i);\n             }\n         }\n     }\n     \n-    public static Attribute readAttribute(final DataInputStream file, final ConstantPool constant_pool) throws IOException, ClassFormatException {\n-        return readAttribute((DataInput)file, constant_pool);\n+    public static Attribute readAttribute(final DataInputStream dataInputStream, final ConstantPool constantPool) throws IOException, ClassFormatException {\n+        return readAttribute((DataInput)dataInputStream, constantPool);\n     }\n     \n-    public static void removeAttributeReader(final String name) {\n-        Attribute.readers.remove(name);\n+    public static void removeAttributeReader(final String s) {\n+        Attribute.readers.remove(s);\n     }\n     \n     protected Attribute(final byte tag, final int name_index, final int length, final ConstantPool constant_pool) {\n         this.tag = tag;\n         this.name_index = name_index;\n         this.length = length;\n         this.constant_pool = constant_pool;\n     }\n     \n     public abstract void accept(final Visitor p0);\n     \n     public Object clone() {\n-        Attribute attr = null;\n+        Attribute attribute;\n         try {\n-            attr = (Attribute)super.clone();\n+            attribute = (Attribute)super.clone();\n         }\n-        catch (final CloneNotSupportedException e) {\n+        catch (final CloneNotSupportedException ex) {\n             throw new Error(\"Clone Not Supported\");\n         }\n-        return attr;\n+        return attribute;\n     }\n     \n     public abstract Attribute copy(final ConstantPool p0);\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(this.name_index);\n-        file.writeInt(this.length);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.name_index);\n+        dataOutputStream.writeInt(this.length);\n     }\n     \n     public final ConstantPool getConstantPool() {\n         return this.constant_pool;\n     }\n     \n     public final int getLength() {\n         return this.length;\n     }\n     \n     public String getName() {\n-        final ConstantUtf8 c = (ConstantUtf8)this.constant_pool.getConstant(this.name_index, (byte)1);\n-        return c.getBytes();\n+        return ((ConstantUtf8)this.constant_pool.getConstant(this.name_index, (byte)1)).getBytes();\n     }\n     \n     public final int getNameIndex() {\n         return this.name_index;\n     }\n     \n     public final byte getTag() {\n"}]}
