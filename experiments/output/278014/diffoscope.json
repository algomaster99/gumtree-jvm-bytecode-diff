{"diffoscope-json-version": 1, "source1": "first/Archive.class", "source2": "second/Archive.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,16 +14,16 @@\n {\n     private final JarInputStream jarInputStream;\n     private final OutputStream outputStream;\n     private JarFile jarFile;\n     private long currentSegmentSize;\n     private final PackingOptions options;\n     \n-    public Archive(final JarInputStream inputStream, OutputStream outputStream, PackingOptions options) throws IOException {\n-        this.jarInputStream = inputStream;\n+    public Archive(final JarInputStream jarInputStream, OutputStream outputStream, PackingOptions options) throws IOException {\n+        this.jarInputStream = jarInputStream;\n         if (options == null) {\n             options = new PackingOptions();\n         }\n         this.options = options;\n         if (options.isGzip()) {\n             outputStream = new GZIPOutputStream(outputStream);\n         }\n@@ -62,87 +62,87 @@\n         else {\n             PackingUtils.copyThroughJar(this.jarFile, this.outputStream);\n         }\n     }\n     \n     private void doNormalPack() throws IOException, Pack200Exception {\n         PackingUtils.log(\"Start to perform a normal packing\");\n-        List packingFileList;\n+        List list;\n         if (this.jarInputStream != null) {\n-            packingFileList = PackingUtils.getPackingFileListFromJar(this.jarInputStream, this.options.isKeepFileOrder());\n+            list = PackingUtils.getPackingFileListFromJar(this.jarInputStream, this.options.isKeepFileOrder());\n         }\n         else {\n-            packingFileList = PackingUtils.getPackingFileListFromJar(this.jarFile, this.options.isKeepFileOrder());\n+            list = PackingUtils.getPackingFileListFromJar(this.jarFile, this.options.isKeepFileOrder());\n         }\n-        final List segmentUnitList = this.splitIntoSegments(packingFileList);\n-        int previousByteAmount = 0;\n-        int packedByteAmount = 0;\n-        final int segmentSize = segmentUnitList.size();\n-        for (int index = 0; index < segmentSize; ++index) {\n-            final Archive.SegmentUnit segmentUnit = (Archive.SegmentUnit)segmentUnitList.get(index);\n+        final List splitIntoSegments = this.splitIntoSegments(list);\n+        int n = 0;\n+        int n2 = 0;\n+        final int size = splitIntoSegments.size();\n+        for (int i = 0; i < size; ++i) {\n+            final Archive.SegmentUnit segmentUnit = (Archive.SegmentUnit)splitIntoSegments.get(i);\n             new Segment().pack(segmentUnit, this.outputStream, this.options);\n-            previousByteAmount += segmentUnit.getByteAmount();\n-            packedByteAmount += segmentUnit.getPackedByteAmount();\n+            n += segmentUnit.getByteAmount();\n+            n2 += segmentUnit.getPackedByteAmount();\n         }\n-        PackingUtils.log(\"Total: Packed \" + previousByteAmount + \" input bytes of \" + packingFileList.size() + \" files into \" + packedByteAmount + \" bytes in \" + segmentSize + \" segments\");\n+        PackingUtils.log(\"Total: Packed \" + n + \" input bytes of \" + list.size() + \" files into \" + n2 + \" bytes in \" + size + \" segments\");\n         this.outputStream.close();\n     }\n     \n-    private List splitIntoSegments(final List packingFileList) throws IOException, Pack200Exception {\n-        final List segmentUnitList = new ArrayList();\n-        List classes = new ArrayList();\n-        List files = new ArrayList();\n+    private List splitIntoSegments(final List list) throws IOException, Pack200Exception {\n+        final ArrayList list2 = new ArrayList();\n+        ArrayList list3 = new ArrayList();\n+        ArrayList list4 = new ArrayList();\n         final long segmentLimit = this.options.getSegmentLimit();\n-        for (int size = packingFileList.size(), index = 0; index < size; ++index) {\n-            final Archive.PackingFile packingFile = (Archive.PackingFile)packingFileList.get(index);\n-            if (!this.addJarEntry(packingFile, classes, files)) {\n-                segmentUnitList.add(new Archive.SegmentUnit(classes, files));\n-                classes = new ArrayList();\n-                files = new ArrayList();\n+        for (int size = list.size(), i = 0; i < size; ++i) {\n+            final Archive.PackingFile packingFile = (Archive.PackingFile)list.get(i);\n+            if (!this.addJarEntry(packingFile, list3, list4)) {\n+                list2.add(new Archive.SegmentUnit((List)list3, (List)list4));\n+                list3 = new ArrayList();\n+                list4 = new ArrayList();\n                 this.currentSegmentSize = 0L;\n-                this.addJarEntry(packingFile, classes, files);\n+                this.addJarEntry(packingFile, list3, list4);\n                 this.currentSegmentSize = 0L;\n             }\n             else if (segmentLimit == 0L && this.estimateSize(packingFile) > 0L) {\n-                segmentUnitList.add(new Archive.SegmentUnit(classes, files));\n-                classes = new ArrayList();\n-                files = new ArrayList();\n+                list2.add(new Archive.SegmentUnit((List)list3, (List)list4));\n+                list3 = new ArrayList();\n+                list4 = new ArrayList();\n             }\n         }\n-        if (classes.size() > 0 || files.size() > 0) {\n-            segmentUnitList.add(new Archive.SegmentUnit(classes, files));\n+        if (list3.size() > 0 || list4.size() > 0) {\n+            list2.add(new Archive.SegmentUnit((List)list3, (List)list4));\n         }\n-        return segmentUnitList;\n+        return list2;\n     }\n     \n-    private boolean addJarEntry(final Archive.PackingFile packingFile, final List javaClasses, final List files) throws IOException, Pack200Exception {\n+    private boolean addJarEntry(final Archive.PackingFile packingFile, final List list, final List list2) throws IOException, Pack200Exception {\n         final long segmentLimit = this.options.getSegmentLimit();\n         if (segmentLimit != -1L && segmentLimit != 0L) {\n-            final long packedSize = this.estimateSize(packingFile);\n-            if (packedSize + this.currentSegmentSize > segmentLimit && this.currentSegmentSize > 0L) {\n+            final long estimateSize = this.estimateSize(packingFile);\n+            if (estimateSize + this.currentSegmentSize > segmentLimit && this.currentSegmentSize > 0L) {\n                 return false;\n             }\n-            this.currentSegmentSize += packedSize;\n+            this.currentSegmentSize += estimateSize;\n         }\n         final String name = packingFile.getName();\n         if (name.endsWith(\".class\") && !this.options.isPassFile(name)) {\n-            final Pack200ClassReader classParser = new Pack200ClassReader(Archive.PackingFile.access$000(packingFile));\n-            classParser.setFileName(name);\n-            javaClasses.add(classParser);\n+            final Pack200ClassReader pack200ClassReader = new Pack200ClassReader(Archive.PackingFile.access$000(packingFile));\n+            pack200ClassReader.setFileName(name);\n+            list.add(pack200ClassReader);\n             Archive.PackingFile.access$002(packingFile, new byte[0]);\n         }\n-        files.add(packingFile);\n+        list2.add(packingFile);\n         return true;\n     }\n     \n     private long estimateSize(final Archive.PackingFile packingFile) {\n         final String name = packingFile.getName();\n         if (name.startsWith(\"META-INF\") || name.startsWith(\"/META-INF\")) {\n             return 0L;\n         }\n-        long fileSize = (long)Archive.PackingFile.access$000(packingFile).length;\n-        if (fileSize < 0L) {\n-            fileSize = 0L;\n+        long n = (long)Archive.PackingFile.access$000(packingFile).length;\n+        if (n < 0L) {\n+            n = 0L;\n         }\n-        return name.length() + fileSize + 5L;\n+        return name.length() + n + 5L;\n     }\n }\n"}]}
