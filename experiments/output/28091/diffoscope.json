{"diffoscope-json-version": 1, "source1": "first/BinaryTree.class", "source2": "second/BinaryTree.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,171 +1,171 @@\n-  SHA-256 checksum 2241de6c9e20e50b5f8b5e0963c03a7d9f7736b137d109a6e455661ea0f17cf6\n+  SHA-256 checksum 9abaa3ffb766ce358e83d447b25fe381a692c0c6386418b1b8a64991fc246df7\n   Compiled from \"BinaryTree.java\"\n class org.apache.commons.compress.archivers.zip.BinaryTree\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #11                         // org/apache/commons/compress/archivers/zip/BinaryTree\n-  super_class: #33                        // java/lang/Object\n+  this_class: #29                         // org/apache/commons/compress/archivers/zip/BinaryTree\n+  super_class: #2                         // java/lang/Object\n   interfaces: 0, fields: 3, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Methodref          #33.#97       // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #98           // java/lang/IllegalArgumentException\n-    #3 = Class              #99           // java/lang/StringBuilder\n-    #4 = Methodref          #3.#97        // java/lang/StringBuilder.\"<init>\":()V\n-    #5 = String             #100          // depth must be bigger than 0 and not bigger than 30 but is\n-    #6 = Methodref          #3.#101       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #7 = Methodref          #3.#102       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-    #8 = Methodref          #3.#103       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #9 = Methodref          #2.#104       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #10 = Fieldref           #11.#105      // org/apache/commons/compress/archivers/zip/BinaryTree.tree:[I\n-   #11 = Class              #106          // org/apache/commons/compress/archivers/zip/BinaryTree\n-   #12 = Methodref          #107.#108     // java/util/Arrays.fill:([II)V\n-   #13 = String             #109          // Tree value at index\n-   #14 = String             #110          //  has already been assigned (\n-   #15 = String             #111          // )\n-   #16 = Methodref          #11.#112      // org/apache/commons/compress/archivers/zip/BinaryTree.addLeaf:(IIII)V\n-   #17 = Methodref          #113.#114     // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n-   #18 = Class              #115          // java/io/IOException\n-   #19 = String             #116          // The child\n-   #20 = String             #117          //  of node at index\n-   #21 = String             #118          //  is not defined\n-   #22 = Methodref          #18.#104      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #23 = String             #119          // totalNumberOfValues must be bigger than 0, is\n-   #24 = Methodref          #93.#120      // java/io/InputStream.read:()I\n-   #25 = String             #121          // Cannot read the size of the encoded tree, unexpected end of stream\n-   #26 = Methodref          #122.#123     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-   #27 = Class              #124          // java/io/EOFException\n-   #28 = Methodref          #27.#97       // java/io/EOFException.\"<init>\":()V\n-   #29 = String             #125          // Number of values exceeds given total number of values\n-   #30 = Methodref          #126.#127     // java/lang/Math.max:(II)I\n-   #31 = Methodref          #11.#128      // org/apache/commons/compress/archivers/zip/BinaryTree.\"<init>\":(I)V\n-   #32 = Methodref          #129.#130     // java/lang/Integer.reverse:(I)I\n-   #33 = Class              #131          // java/lang/Object\n-   #34 = Utf8               UNDEFINED\n-   #35 = Utf8               I\n-   #36 = Utf8               ConstantValue\n-   #37 = Integer            -1\n-   #38 = Utf8               NODE\n-   #39 = Integer            -2\n-   #40 = Utf8               tree\n-   #41 = Utf8               [I\n-   #42 = Utf8               <init>\n-   #43 = Utf8               (I)V\n-   #44 = Utf8               Code\n-   #45 = Utf8               LineNumberTable\n-   #46 = Utf8               LocalVariableTable\n-   #47 = Utf8               this\n-   #48 = Utf8               Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #49 = Utf8               depth\n-   #50 = Utf8               StackMapTable\n-   #51 = Utf8               addLeaf\n-   #52 = Utf8               (IIII)V\n-   #53 = Utf8               nextChild\n-   #54 = Utf8               node\n-   #55 = Utf8               path\n-   #56 = Utf8               value\n-   #57 = Utf8               read\n-   #58 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-   #59 = Utf8               bit\n-   #60 = Utf8               childIndex\n-   #61 = Utf8               stream\n-   #62 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #63 = Utf8               currentIndex\n-   #64 = Utf8               Exceptions\n-   #65 = Utf8               decode\n-   #66 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #67 = Utf8               j\n-   #68 = Utf8               numberOfValues\n-   #69 = Utf8               bitLength\n-   #70 = Utf8               b\n-   #71 = Utf8               B\n-   #72 = Utf8               k\n-   #73 = Utf8               l\n-   #74 = Utf8               i\n-   #75 = Utf8               inputStream\n-   #76 = Utf8               Ljava/io/InputStream;\n-   #77 = Utf8               totalNumberOfValues\n-   #78 = Utf8               size\n-   #79 = Utf8               encodedTree\n-   #80 = Utf8               [B\n-   #81 = Utf8               maxLength\n-   #82 = Utf8               originalBitLengths\n-   #83 = Utf8               pos\n-   #84 = Utf8               oBitLengths\n-   #85 = Utf8               permutation\n-   #86 = Utf8               c\n-   #87 = Utf8               sortedBitLengths\n-   #88 = Utf8               code\n-   #89 = Utf8               codeIncrement\n-   #90 = Utf8               lastBitLength\n-   #91 = Utf8               codes\n-   #92 = Class              #80           // \"[B\"\n-   #93 = Class              #132          // java/io/InputStream\n-   #94 = Class              #41           // \"[I\"\n-   #95 = Utf8               SourceFile\n-   #96 = Utf8               BinaryTree.java\n-   #97 = NameAndType        #42:#133      // \"<init>\":()V\n-   #98 = Utf8               java/lang/IllegalArgumentException\n-   #99 = Utf8               java/lang/StringBuilder\n-  #100 = Utf8               depth must be bigger than 0 and not bigger than 30 but is\n-  #101 = NameAndType        #134:#135     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #102 = NameAndType        #134:#136     // append:(I)Ljava/lang/StringBuilder;\n-  #103 = NameAndType        #137:#138     // toString:()Ljava/lang/String;\n-  #104 = NameAndType        #42:#139      // \"<init>\":(Ljava/lang/String;)V\n-  #105 = NameAndType        #40:#41       // tree:[I\n-  #106 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n-  #107 = Class              #140          // java/util/Arrays\n-  #108 = NameAndType        #141:#142     // fill:([II)V\n-  #109 = Utf8               Tree value at index\n-  #110 = Utf8                has already been assigned (\n-  #111 = Utf8               )\n-  #112 = NameAndType        #51:#52       // addLeaf:(IIII)V\n-  #113 = Class              #143          // org/apache/commons/compress/archivers/zip/BitStream\n-  #114 = NameAndType        #144:#145     // nextBit:()I\n-  #115 = Utf8               java/io/IOException\n-  #116 = Utf8               The child\n-  #117 = Utf8                of node at index\n-  #118 = Utf8                is not defined\n-  #119 = Utf8               totalNumberOfValues must be bigger than 0, is\n-  #120 = NameAndType        #57:#145      // read:()I\n-  #121 = Utf8               Cannot read the size of the encoded tree, unexpected end of stream\n-  #122 = Class              #146          // org/apache/commons/compress/utils/IOUtils\n-  #123 = NameAndType        #147:#148     // readRange:(Ljava/io/InputStream;I)[B\n-  #124 = Utf8               java/io/EOFException\n-  #125 = Utf8               Number of values exceeds given total number of values\n-  #126 = Class              #149          // java/lang/Math\n-  #127 = NameAndType        #150:#151     // max:(II)I\n-  #128 = NameAndType        #42:#43       // \"<init>\":(I)V\n-  #129 = Class              #152          // java/lang/Integer\n-  #130 = NameAndType        #153:#154     // reverse:(I)I\n-  #131 = Utf8               java/lang/Object\n-  #132 = Utf8               java/io/InputStream\n-  #133 = Utf8               ()V\n-  #134 = Utf8               append\n-  #135 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #136 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #137 = Utf8               toString\n-  #138 = Utf8               ()Ljava/lang/String;\n-  #139 = Utf8               (Ljava/lang/String;)V\n-  #140 = Utf8               java/util/Arrays\n-  #141 = Utf8               fill\n-  #142 = Utf8               ([II)V\n-  #143 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n-  #144 = Utf8               nextBit\n-  #145 = Utf8               ()I\n-  #146 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #147 = Utf8               readRange\n-  #148 = Utf8               (Ljava/io/InputStream;I)[B\n-  #149 = Utf8               java/lang/Math\n-  #150 = Utf8               max\n-  #151 = Utf8               (II)I\n-  #152 = Utf8               java/lang/Integer\n-  #153 = Utf8               reverse\n-  #154 = Utf8               (I)I\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // java/lang/IllegalArgumentException\n+    #8 = Utf8               java/lang/IllegalArgumentException\n+    #9 = Class              #10           // java/lang/StringBuilder\n+   #10 = Utf8               java/lang/StringBuilder\n+   #11 = Methodref          #9.#3         // java/lang/StringBuilder.\"<init>\":()V\n+   #12 = String             #13           // depth must be bigger than 0 and not bigger than 30 but is\n+   #13 = Utf8               depth must be bigger than 0 and not bigger than 30 but is\n+   #14 = Methodref          #9.#15        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #15 = NameAndType        #16:#17       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #16 = Utf8               append\n+   #17 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #18 = Methodref          #9.#19        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #19 = NameAndType        #16:#20       // append:(I)Ljava/lang/StringBuilder;\n+   #20 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #21 = Methodref          #9.#22        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #22 = NameAndType        #23:#24       // toString:()Ljava/lang/String;\n+   #23 = Utf8               toString\n+   #24 = Utf8               ()Ljava/lang/String;\n+   #25 = Methodref          #7.#26        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #26 = NameAndType        #5:#27        // \"<init>\":(Ljava/lang/String;)V\n+   #27 = Utf8               (Ljava/lang/String;)V\n+   #28 = Fieldref           #29.#30       // org/apache/commons/compress/archivers/zip/BinaryTree.tree:[I\n+   #29 = Class              #31           // org/apache/commons/compress/archivers/zip/BinaryTree\n+   #30 = NameAndType        #32:#33       // tree:[I\n+   #31 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n+   #32 = Utf8               tree\n+   #33 = Utf8               [I\n+   #34 = Methodref          #35.#36       // java/util/Arrays.fill:([II)V\n+   #35 = Class              #37           // java/util/Arrays\n+   #36 = NameAndType        #38:#39       // fill:([II)V\n+   #37 = Utf8               java/util/Arrays\n+   #38 = Utf8               fill\n+   #39 = Utf8               ([II)V\n+   #40 = String             #41           // Tree value at index\n+   #41 = Utf8               Tree value at index\n+   #42 = String             #43           //  has already been assigned (\n+   #43 = Utf8                has already been assigned (\n+   #44 = String             #45           // )\n+   #45 = Utf8               )\n+   #46 = Methodref          #29.#47       // org/apache/commons/compress/archivers/zip/BinaryTree.addLeaf:(IIII)V\n+   #47 = NameAndType        #48:#49       // addLeaf:(IIII)V\n+   #48 = Utf8               addLeaf\n+   #49 = Utf8               (IIII)V\n+   #50 = Methodref          #51.#52       // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+   #51 = Class              #53           // org/apache/commons/compress/archivers/zip/BitStream\n+   #52 = NameAndType        #54:#55       // nextBit:()I\n+   #53 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n+   #54 = Utf8               nextBit\n+   #55 = Utf8               ()I\n+   #56 = Class              #57           // java/io/IOException\n+   #57 = Utf8               java/io/IOException\n+   #58 = String             #59           // The child\n+   #59 = Utf8               The child\n+   #60 = String             #61           //  of node at index\n+   #61 = Utf8                of node at index\n+   #62 = String             #63           //  is not defined\n+   #63 = Utf8                is not defined\n+   #64 = Methodref          #56.#26       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #65 = String             #66           // totalNumberOfValues must be bigger than 0, is\n+   #66 = Utf8               totalNumberOfValues must be bigger than 0, is\n+   #67 = Methodref          #68.#69       // java/io/InputStream.read:()I\n+   #68 = Class              #70           // java/io/InputStream\n+   #69 = NameAndType        #71:#55       // read:()I\n+   #70 = Utf8               java/io/InputStream\n+   #71 = Utf8               read\n+   #72 = String             #73           // Cannot read the size of the encoded tree, unexpected end of stream\n+   #73 = Utf8               Cannot read the size of the encoded tree, unexpected end of stream\n+   #74 = Methodref          #75.#76       // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+   #75 = Class              #77           // org/apache/commons/compress/utils/IOUtils\n+   #76 = NameAndType        #78:#79       // readRange:(Ljava/io/InputStream;I)[B\n+   #77 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #78 = Utf8               readRange\n+   #79 = Utf8               (Ljava/io/InputStream;I)[B\n+   #80 = Class              #81           // java/io/EOFException\n+   #81 = Utf8               java/io/EOFException\n+   #82 = Methodref          #80.#3        // java/io/EOFException.\"<init>\":()V\n+   #83 = String             #84           // Number of values exceeds given total number of values\n+   #84 = Utf8               Number of values exceeds given total number of values\n+   #85 = Methodref          #86.#87       // java/lang/Math.max:(II)I\n+   #86 = Class              #88           // java/lang/Math\n+   #87 = NameAndType        #89:#90       // max:(II)I\n+   #88 = Utf8               java/lang/Math\n+   #89 = Utf8               max\n+   #90 = Utf8               (II)I\n+   #91 = Methodref          #29.#92       // org/apache/commons/compress/archivers/zip/BinaryTree.\"<init>\":(I)V\n+   #92 = NameAndType        #5:#93        // \"<init>\":(I)V\n+   #93 = Utf8               (I)V\n+   #94 = Methodref          #95.#96       // java/lang/Integer.reverse:(I)I\n+   #95 = Class              #97           // java/lang/Integer\n+   #96 = NameAndType        #98:#99       // reverse:(I)I\n+   #97 = Utf8               java/lang/Integer\n+   #98 = Utf8               reverse\n+   #99 = Utf8               (I)I\n+  #100 = Utf8               UNDEFINED\n+  #101 = Utf8               I\n+  #102 = Utf8               ConstantValue\n+  #103 = Integer            -1\n+  #104 = Utf8               NODE\n+  #105 = Integer            -2\n+  #106 = Utf8               Code\n+  #107 = Utf8               LineNumberTable\n+  #108 = Utf8               LocalVariableTable\n+  #109 = Utf8               this\n+  #110 = Utf8               Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+  #111 = Utf8               depth\n+  #112 = Utf8               StackMapTable\n+  #113 = Utf8               nextChild\n+  #114 = Utf8               node\n+  #115 = Utf8               path\n+  #116 = Utf8               value\n+  #117 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+  #118 = Utf8               bit\n+  #119 = Utf8               childIndex\n+  #120 = Utf8               stream\n+  #121 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n+  #122 = Utf8               currentIndex\n+  #123 = Utf8               Exceptions\n+  #124 = Utf8               decode\n+  #125 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+  #126 = Utf8               j\n+  #127 = Utf8               numberOfValues\n+  #128 = Utf8               bitLength\n+  #129 = Utf8               b\n+  #130 = Utf8               B\n+  #131 = Utf8               k\n+  #132 = Utf8               l\n+  #133 = Utf8               i\n+  #134 = Utf8               inputStream\n+  #135 = Utf8               Ljava/io/InputStream;\n+  #136 = Utf8               totalNumberOfValues\n+  #137 = Utf8               size\n+  #138 = Utf8               encodedTree\n+  #139 = Utf8               [B\n+  #140 = Utf8               maxLength\n+  #141 = Utf8               originalBitLengths\n+  #142 = Utf8               pos\n+  #143 = Utf8               oBitLengths\n+  #144 = Utf8               permutation\n+  #145 = Utf8               c\n+  #146 = Utf8               sortedBitLengths\n+  #147 = Utf8               code\n+  #148 = Utf8               codeIncrement\n+  #149 = Utf8               lastBitLength\n+  #150 = Utf8               codes\n+  #151 = Class              #139          // \"[B\"\n+  #152 = Class              #33           // \"[I\"\n+  #153 = Utf8               SourceFile\n+  #154 = Utf8               BinaryTree.java\n {\n   private static final int UNDEFINED = -1;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int -1\n \n   private static final int NODE = -2;\n@@ -185,41 +185,41 @@\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: iload_1\n          5: iflt          14\n          8: iload_1\n          9: bipush        30\n         11: if_icmple     41\n-        14: new           #2                  // class java/lang/IllegalArgumentException\n+        14: new           #7                  // class java/lang/IllegalArgumentException\n         17: dup\n-        18: new           #3                  // class java/lang/StringBuilder\n+        18: new           #9                  // class java/lang/StringBuilder\n         21: dup\n-        22: invokespecial #4                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        25: ldc           #5                  // String depth must be bigger than 0 and not bigger than 30 but is\n-        27: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        22: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        25: ldc           #12                 // String depth must be bigger than 0 and not bigger than 30 but is\n+        27: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         30: iload_1\n-        31: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        34: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        37: invokespecial #9                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        31: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        34: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        37: invokespecial #25                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         40: athrow\n         41: aload_0\n         42: lconst_1\n         43: iload_1\n         44: iconst_1\n         45: iadd\n         46: lshl\n         47: lconst_1\n         48: lsub\n         49: l2i\n         50: newarray       int\n-        52: putfield      #10                 // Field tree:[I\n+        52: putfield      #28                 // Field tree:[I\n         55: aload_0\n-        56: getfield      #10                 // Field tree:[I\n+        56: getfield      #28                 // Field tree:[I\n         59: iconst_m1\n-        60: invokestatic  #12                 // Method java/util/Arrays.fill:([II)V\n+        60: invokestatic  #34                 // Method java/util/Arrays.fill:([II)V\n         63: return\n       LineNumberTable:\n         line 48: 0\n         line 49: 4\n         line 50: 14\n         line 53: 41\n         line 54: 55\n@@ -239,48 +239,48 @@\n     descriptor: (IIII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=6, args_size=5\n          0: iload_3\n          1: ifne          71\n          4: aload_0\n-         5: getfield      #10                 // Field tree:[I\n+         5: getfield      #28                 // Field tree:[I\n          8: iload_1\n          9: iaload\n         10: iconst_m1\n         11: if_icmpeq     60\n-        14: new           #2                  // class java/lang/IllegalArgumentException\n+        14: new           #7                  // class java/lang/IllegalArgumentException\n         17: dup\n-        18: new           #3                  // class java/lang/StringBuilder\n+        18: new           #9                  // class java/lang/StringBuilder\n         21: dup\n-        22: invokespecial #4                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        25: ldc           #13                 // String Tree value at index\n-        27: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        22: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        25: ldc           #40                 // String Tree value at index\n+        27: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         30: iload_1\n-        31: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        34: ldc           #14                 // String  has already been assigned (\n-        36: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        31: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        34: ldc           #42                 // String  has already been assigned (\n+        36: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         39: aload_0\n-        40: getfield      #10                 // Field tree:[I\n+        40: getfield      #28                 // Field tree:[I\n         43: iload_1\n         44: iaload\n-        45: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        48: ldc           #15                 // String )\n-        50: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        53: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        56: invokespecial #9                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        45: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        48: ldc           #44                 // String )\n+        50: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        53: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        56: invokespecial #25                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         59: athrow\n         60: aload_0\n-        61: getfield      #10                 // Field tree:[I\n+        61: getfield      #28                 // Field tree:[I\n         64: iload_1\n         65: iload         4\n         67: iastore\n         68: goto          104\n         71: aload_0\n-        72: getfield      #10                 // Field tree:[I\n+        72: getfield      #28                 // Field tree:[I\n         75: iload_1\n         76: bipush        -2\n         78: iastore\n         79: iconst_2\n         80: iload_1\n         81: imul\n         82: iconst_1\n@@ -295,15 +295,15 @@\n         93: iload_2\n         94: iconst_1\n         95: iushr\n         96: iload_3\n         97: iconst_1\n         98: isub\n         99: iload         4\n-       101: invokevirtual #16                 // Method addLeaf:(IIII)V\n+       101: invokevirtual #46                 // Method addLeaf:(IIII)V\n        104: return\n       LineNumberTable:\n         line 66: 0\n         line 68: 4\n         line 69: 14\n         line 71: 60\n         line 74: 71\n@@ -327,15 +327,15 @@\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=6, args_size=2\n          0: iconst_0\n          1: istore_2\n          2: aload_1\n-         3: invokevirtual #17                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+         3: invokevirtual #50                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n          6: istore_3\n          7: iload_3\n          8: iconst_m1\n          9: if_icmpne     14\n         12: iconst_m1\n         13: ireturn\n         14: iconst_2\n@@ -343,46 +343,46 @@\n         16: imul\n         17: iconst_1\n         18: iadd\n         19: iload_3\n         20: iadd\n         21: istore        4\n         23: aload_0\n-        24: getfield      #10                 // Field tree:[I\n+        24: getfield      #28                 // Field tree:[I\n         27: iload         4\n         29: iaload\n         30: istore        5\n         32: iload         5\n         34: bipush        -2\n         36: if_icmpne     45\n         39: iload         4\n         41: istore_2\n         42: goto          95\n         45: iload         5\n         47: iconst_m1\n         48: if_icmpeq     54\n         51: iload         5\n         53: ireturn\n-        54: new           #18                 // class java/io/IOException\n+        54: new           #56                 // class java/io/IOException\n         57: dup\n-        58: new           #3                  // class java/lang/StringBuilder\n+        58: new           #9                  // class java/lang/StringBuilder\n         61: dup\n-        62: invokespecial #4                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        65: ldc           #19                 // String The child\n-        67: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        62: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        65: ldc           #58                 // String The child\n+        67: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         70: iload_3\n-        71: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        74: ldc           #20                 // String  of node at index\n-        76: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        71: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        74: ldc           #60                 // String  of node at index\n+        76: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         79: iload_2\n-        80: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        83: ldc           #21                 // String  is not defined\n-        85: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        88: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        91: invokespecial #22                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        80: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        83: ldc           #62                 // String  is not defined\n+        85: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        88: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        91: invokespecial #64                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         94: athrow\n         95: goto          2\n       LineNumberTable:\n         line 89: 0\n         line 92: 2\n         line 93: 7\n         line 94: 12\n@@ -421,49 +421,49 @@\n   static org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=5, locals=18, args_size=2\n          0: iload_1\n          1: ifge          31\n-         4: new           #2                  // class java/lang/IllegalArgumentException\n+         4: new           #7                  // class java/lang/IllegalArgumentException\n          7: dup\n-         8: new           #3                  // class java/lang/StringBuilder\n+         8: new           #9                  // class java/lang/StringBuilder\n         11: dup\n-        12: invokespecial #4                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        15: ldc           #23                 // String totalNumberOfValues must be bigger than 0, is\n-        17: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        12: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        15: ldc           #65                 // String totalNumberOfValues must be bigger than 0, is\n+        17: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         20: iload_1\n-        21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        27: invokespecial #9                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        21: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        24: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        27: invokespecial #25                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         30: athrow\n         31: aload_0\n-        32: invokevirtual #24                 // Method java/io/InputStream.read:()I\n+        32: invokevirtual #67                 // Method java/io/InputStream.read:()I\n         35: iconst_1\n         36: iadd\n         37: istore_2\n         38: iload_2\n         39: ifne          52\n-        42: new           #18                 // class java/io/IOException\n+        42: new           #56                 // class java/io/IOException\n         45: dup\n-        46: ldc           #25                 // String Cannot read the size of the encoded tree, unexpected end of stream\n-        48: invokespecial #22                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        46: ldc           #72                 // String Cannot read the size of the encoded tree, unexpected end of stream\n+        48: invokespecial #64                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         51: athrow\n         52: aload_0\n         53: iload_2\n-        54: invokestatic  #26                 // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+        54: invokestatic  #74                 // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n         57: astore_3\n         58: aload_3\n         59: arraylength\n         60: iload_2\n         61: if_icmpeq     72\n-        64: new           #27                 // class java/io/EOFException\n+        64: new           #80                 // class java/io/EOFException\n         67: dup\n-        68: invokespecial #28                 // Method java/io/EOFException.\"<init>\":()V\n+        68: invokespecial #82                 // Method java/io/EOFException.\"<init>\":()V\n         71: athrow\n         72: iconst_0\n         73: istore        4\n         75: iload_1\n         76: newarray       int\n         78: astore        5\n         80: iconst_0\n@@ -491,18 +491,18 @@\n        117: iadd\n        118: istore        11\n        120: iload         6\n        122: iload         11\n        124: iadd\n        125: iload_1\n        126: if_icmple     139\n-       129: new           #18                 // class java/io/IOException\n+       129: new           #56                 // class java/io/IOException\n        132: dup\n-       133: ldc           #29                 // String Number of values exceeds given total number of values\n-       135: invokespecial #22                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       133: ldc           #83                 // String Number of values exceeds given total number of values\n+       135: invokespecial #64                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        138: athrow\n        139: iload         10\n        141: bipush        15\n        143: iand\n        144: iconst_1\n        145: iadd\n        146: istore        12\n@@ -516,15 +516,15 @@\n        162: iinc          6, 1\n        165: iload         12\n        167: iastore\n        168: iinc          13, 1\n        171: goto          151\n        174: iload         4\n        176: iload         12\n-       178: invokestatic  #30                 // Method java/lang/Math.max:(II)I\n+       178: invokestatic  #85                 // Method java/lang/Math.max:(II)I\n        181: istore        4\n        183: iinc          9, 1\n        186: goto          94\n        189: aload         5\n        191: arraylength\n        192: istore        7\n        194: iload         7\n@@ -613,18 +613,18 @@\n        351: aload         8\n        353: iload         15\n        355: iaload\n        356: iload         11\n        358: iastore\n        359: iinc          15, -1\n        362: goto          311\n-       365: new           #11                 // class org/apache/commons/compress/archivers/zip/BinaryTree\n+       365: new           #29                 // class org/apache/commons/compress/archivers/zip/BinaryTree\n        368: dup\n        369: iload         4\n-       371: invokespecial #31                 // Method \"<init>\":(I)V\n+       371: invokespecial #91                 // Method \"<init>\":(I)V\n        374: astore        15\n        376: iconst_0\n        377: istore        16\n        379: iload         16\n        381: aload         14\n        383: arraylength\n        384: if_icmpge     426\n@@ -637,18 +637,18 @@\n        399: aload         15\n        401: iconst_0\n        402: aload         14\n        404: iload         16\n        406: iaload\n        407: bipush        16\n        409: ishl\n-       410: invokestatic  #32                 // Method java/lang/Integer.reverse:(I)I\n+       410: invokestatic  #94                 // Method java/lang/Integer.reverse:(I)I\n        413: iload         17\n        415: iload         16\n-       417: invokevirtual #16                 // Method addLeaf:(IIII)V\n+       417: invokevirtual #46                 // Method addLeaf:(IIII)V\n        420: iinc          16, 1\n        423: goto          379\n        426: aload         15\n        428: areturn\n       LineNumberTable:\n         line 115: 0\n         line 116: 4\n"}]}
