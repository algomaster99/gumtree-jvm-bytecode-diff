{"diffoscope-json-version": 1, "source1": "first/MagicNumberCheck.class", "source2": "second/MagicNumberCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -39,125 +39,113 @@\n         return new int[] { 142, 140, 137, 141 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (this.shouldTestAnnotationArgs(ast) && this.shouldTestAnnotationDefaults(ast) && !this.isInIgnoreList(ast) && (!this.ignoreHashCodeMethod || !isInHashCodeMethod(ast))) {\n-            final DetailAST constantDefAST = findContainingConstantDef(ast);\n-            if (constantDefAST == null) {\n-                if (!this.ignoreFieldDeclaration || !isFieldDeclaration(ast)) {\n-                    this.reportMagicNumber(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (this.shouldTestAnnotationArgs(detailAST) && this.shouldTestAnnotationDefaults(detailAST) && !this.isInIgnoreList(detailAST) && (!this.ignoreHashCodeMethod || !isInHashCodeMethod(detailAST))) {\n+            final DetailAST containingConstantDef = findContainingConstantDef(detailAST);\n+            if (containingConstantDef == null) {\n+                if (!this.ignoreFieldDeclaration || !isFieldDeclaration(detailAST)) {\n+                    this.reportMagicNumber(detailAST);\n                 }\n             }\n-            else {\n-                final boolean found = this.isMagicNumberExists(ast, constantDefAST);\n-                if (found) {\n-                    this.reportMagicNumber(ast);\n-                }\n+            else if (this.isMagicNumberExists(detailAST, containingConstantDef)) {\n+                this.reportMagicNumber(detailAST);\n             }\n         }\n     }\n     \n-    private boolean shouldTestAnnotationArgs(final DetailAST ast) {\n-        return !this.ignoreAnnotation || !isChildOf(ast, 159);\n+    private boolean shouldTestAnnotationArgs(final DetailAST detailAST) {\n+        return !this.ignoreAnnotation || !isChildOf(detailAST, 159);\n     }\n     \n-    private boolean shouldTestAnnotationDefaults(final DetailAST ast) {\n-        return !this.ignoreAnnotationElementDefaults || !isChildOf(ast, 94);\n+    private boolean shouldTestAnnotationDefaults(final DetailAST detailAST) {\n+        return !this.ignoreAnnotationElementDefaults || !isChildOf(detailAST, 94);\n     }\n     \n-    private boolean isMagicNumberExists(final DetailAST ast, final DetailAST constantDefAST) {\n-        boolean found = false;\n-        for (DetailAST astNode = ast.getParent(); astNode != constantDefAST; astNode = astNode.getParent()) {\n-            final int type = astNode.getType();\n-            if (!this.constantWaiverParentToken.get(type)) {\n-                found = true;\n+    private boolean isMagicNumberExists(final DetailAST detailAST, final DetailAST detailAST2) {\n+        boolean b = false;\n+        for (DetailAST detailAST3 = detailAST.getParent(); detailAST3 != detailAST2; detailAST3 = detailAST3.getParent()) {\n+            if (!this.constantWaiverParentToken.get(detailAST3.getType())) {\n+                b = true;\n                 break;\n             }\n         }\n-        return found;\n+        return b;\n     }\n     \n-    private static DetailAST findContainingConstantDef(final DetailAST ast) {\n-        DetailAST varDefAST;\n-        for (varDefAST = ast; varDefAST != null && varDefAST.getType() != 10 && varDefAST.getType() != 155; varDefAST = varDefAST.getParent()) {}\n-        DetailAST constantDef = null;\n-        if (varDefAST != null) {\n-            if (ScopeUtil.isInInterfaceOrAnnotationBlock(varDefAST) || varDefAST.getType() == 155) {\n-                constantDef = varDefAST;\n-            }\n-            else {\n-                final DetailAST modifiersAST = varDefAST.findFirstToken(5);\n-                if (modifiersAST.findFirstToken(39) != null) {\n-                    constantDef = varDefAST;\n-                }\n+    private static DetailAST findContainingConstantDef(final DetailAST detailAST) {\n+        DetailAST parent;\n+        for (parent = detailAST; parent != null && parent.getType() != 10 && parent.getType() != 155; parent = parent.getParent()) {}\n+        DetailAST detailAST2 = null;\n+        if (parent != null) {\n+            if (ScopeUtil.isInInterfaceOrAnnotationBlock(parent) || parent.getType() == 155) {\n+                detailAST2 = parent;\n+            }\n+            else if (parent.findFirstToken(5).findFirstToken(39) != null) {\n+                detailAST2 = parent;\n             }\n         }\n-        return constantDef;\n+        return detailAST2;\n     }\n     \n-    private void reportMagicNumber(final DetailAST ast) {\n-        String text = ast.getText();\n-        final DetailAST parent = ast.getParent();\n-        DetailAST reportAST = ast;\n+    private void reportMagicNumber(final DetailAST detailAST) {\n+        String text = detailAST.getText();\n+        final DetailAST parent = detailAST.getParent();\n+        DetailAST detailAST2 = detailAST;\n         if (parent.getType() == 31) {\n-            reportAST = parent;\n+            detailAST2 = parent;\n             text = \"-\" + text;\n         }\n         else if (parent.getType() == 32) {\n-            reportAST = parent;\n+            detailAST2 = parent;\n             text = \"+\" + text;\n         }\n-        this.log(reportAST, \"magic.number\", new Object[] { text });\n+        this.log(detailAST2, \"magic.number\", new Object[] { text });\n     }\n     \n-    private static boolean isInHashCodeMethod(final DetailAST ast) {\n-        DetailAST currentAST;\n-        for (currentAST = ast; currentAST != null && currentAST.getType() != 9; currentAST = currentAST.getParent()) {}\n-        final DetailAST methodDefAST = currentAST;\n-        boolean inHashCodeMethod = false;\n-        if (methodDefAST != null) {\n-            final DetailAST identAST = methodDefAST.findFirstToken(58);\n-            if (\"hashCode\".equals(identAST.getText())) {\n-                final DetailAST paramAST = methodDefAST.findFirstToken(20);\n-                inHashCodeMethod = !paramAST.hasChildren();\n-            }\n+    private static boolean isInHashCodeMethod(final DetailAST detailAST) {\n+        DetailAST parent;\n+        for (parent = detailAST; parent != null && parent.getType() != 9; parent = parent.getParent()) {}\n+        final DetailAST detailAST2 = parent;\n+        boolean b = false;\n+        if (detailAST2 != null && \"hashCode\".equals(detailAST2.findFirstToken(58).getText())) {\n+            b = !detailAST2.findFirstToken(20).hasChildren();\n         }\n-        return inHashCodeMethod;\n+        return b;\n     }\n     \n-    private boolean isInIgnoreList(final DetailAST ast) {\n-        double value = CheckUtil.parseDouble(ast.getText(), ast.getType());\n-        final DetailAST parent = ast.getParent();\n-        if (parent.getType() == 31) {\n-            value *= -1.0;\n+    private boolean isInIgnoreList(final DetailAST detailAST) {\n+        double double1 = CheckUtil.parseDouble(detailAST.getText(), detailAST.getType());\n+        if (detailAST.getParent().getType() == 31) {\n+            double1 *= -1.0;\n         }\n-        return Arrays.binarySearch(this.ignoreNumbers, value) >= 0;\n+        return Arrays.binarySearch(this.ignoreNumbers, double1) >= 0;\n     }\n     \n-    private static boolean isFieldDeclaration(final DetailAST ast) {\n-        DetailAST varDefAST = null;\n-        for (DetailAST node = ast; node.getType() != 6; node = node.getParent()) {\n-            if (node.getType() == 10) {\n-                varDefAST = node;\n+    private static boolean isFieldDeclaration(final DetailAST detailAST) {\n+        DetailAST detailAST2 = null;\n+        for (DetailAST parent = detailAST; parent.getType() != 6; parent = parent.getParent()) {\n+            if (parent.getType() == 10) {\n+                detailAST2 = parent;\n                 break;\n             }\n         }\n-        return varDefAST != null && (varDefAST.getParent().getParent().getType() == 14 || varDefAST.getParent().getParent().getType() == 199 || varDefAST.getParent().getParent().getType() == 136);\n+        return detailAST2 != null && (detailAST2.getParent().getParent().getType() == 14 || detailAST2.getParent().getParent().getType() == 199 || detailAST2.getParent().getParent().getType() == 136);\n     }\n     \n-    public void setConstantWaiverParentToken(final String... tokens) {\n-        this.constantWaiverParentToken = TokenUtil.asBitSet(tokens);\n+    public void setConstantWaiverParentToken(final String... array) {\n+        this.constantWaiverParentToken = TokenUtil.asBitSet(array);\n     }\n     \n-    public void setIgnoreNumbers(final double... list) {\n-        System.arraycopy(list, 0, this.ignoreNumbers = new double[list.length], 0, list.length);\n+    public void setIgnoreNumbers(final double... array) {\n+        System.arraycopy(array, 0, this.ignoreNumbers = new double[array.length], 0, array.length);\n         Arrays.sort(this.ignoreNumbers);\n     }\n     \n     public void setIgnoreHashCodeMethod(final boolean ignoreHashCodeMethod) {\n         this.ignoreHashCodeMethod = ignoreHashCodeMethod;\n     }\n     \n@@ -169,20 +157,20 @@\n         this.ignoreFieldDeclaration = ignoreFieldDeclaration;\n     }\n     \n     public void setIgnoreAnnotationElementDefaults(final boolean ignoreAnnotationElementDefaults) {\n         this.ignoreAnnotationElementDefaults = ignoreAnnotationElementDefaults;\n     }\n     \n-    private static boolean isChildOf(final DetailAST ast, final int type) {\n-        boolean result = false;\n-        DetailAST node = ast;\n-        while (node.getType() != type) {\n-            node = node.getParent();\n-            if (node == null) {\n-                return result;\n+    private static boolean isChildOf(final DetailAST detailAST, final int n) {\n+        boolean b = false;\n+        DetailAST parent = detailAST;\n+        while (parent.getType() != n) {\n+            parent = parent.getParent();\n+            if (parent == null) {\n+                return b;\n             }\n         }\n-        result = true;\n-        return result;\n+        b = true;\n+        return b;\n     }\n }\n"}]}
