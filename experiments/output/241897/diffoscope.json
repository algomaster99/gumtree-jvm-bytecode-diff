{"diffoscope-json-version": 1, "source1": "first/ExecutionVisitor.class", "source2": "second/ExecutionVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -184,947 +184,945 @@\n         return this.frame.getLocals();\n     }\n     \n     public void setConstantPoolGen(final ConstantPoolGen cpg) {\n         this.cpg = cpg;\n     }\n     \n-    public void setFrame(final Frame f) {\n-        this.frame = f;\n+    public void setFrame(final Frame frame) {\n+        this.frame = frame;\n     }\n     \n-    public void visitAALOAD(final AALOAD o) {\n+    public void visitAALOAD(final AALOAD aaload) {\n         this.stack().pop();\n-        final Type t = this.stack().pop();\n-        if (t == Type.NULL) {\n+        final Type pop = this.stack().pop();\n+        if (pop == Type.NULL) {\n             this.stack().push((Type)Type.NULL);\n         }\n         else {\n-            final ArrayType at = (ArrayType)t;\n-            this.stack().push(at.getElementType());\n+            this.stack().push(((ArrayType)pop).getElementType());\n         }\n     }\n     \n-    public void visitAASTORE(final AASTORE o) {\n+    public void visitAASTORE(final AASTORE aastore) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitACONST_NULL(final ACONST_NULL o) {\n+    public void visitACONST_NULL(final ACONST_NULL aconst_NULL) {\n         this.stack().push((Type)Type.NULL);\n     }\n     \n-    public void visitALOAD(final ALOAD o) {\n-        this.stack().push(this.locals().get(o.getIndex()));\n+    public void visitALOAD(final ALOAD aload) {\n+        this.stack().push(this.locals().get(aload.getIndex()));\n     }\n     \n-    public void visitANEWARRAY(final ANEWARRAY o) {\n+    public void visitANEWARRAY(final ANEWARRAY anewarray) {\n         this.stack().pop();\n-        this.stack().push((Type)new ArrayType(o.getType(this.cpg), 1));\n+        this.stack().push((Type)new ArrayType(anewarray.getType(this.cpg), 1));\n     }\n     \n-    public void visitARETURN(final ARETURN o) {\n+    public void visitARETURN(final ARETURN areturn) {\n         this.stack().pop();\n     }\n     \n-    public void visitARRAYLENGTH(final ARRAYLENGTH o) {\n+    public void visitARRAYLENGTH(final ARRAYLENGTH arraylength) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitASTORE(final ASTORE o) {\n-        this.locals().set(o.getIndex(), this.stack().pop());\n+    public void visitASTORE(final ASTORE astore) {\n+        this.locals().set(astore.getIndex(), this.stack().pop());\n     }\n     \n-    public void visitATHROW(final ATHROW o) {\n-        final Type t = this.stack().pop();\n+    public void visitATHROW(final ATHROW athrow) {\n+        final Type pop = this.stack().pop();\n         this.stack().clear();\n-        if (t.equals((Object)Type.NULL)) {\n+        if (pop.equals((Object)Type.NULL)) {\n             this.stack().push(Type.getType(\"Ljava/lang/NullPointerException;\"));\n         }\n         else {\n-            this.stack().push(t);\n+            this.stack().push(pop);\n         }\n     }\n     \n-    public void visitBALOAD(final BALOAD o) {\n+    public void visitBALOAD(final BALOAD baload) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitBASTORE(final BASTORE o) {\n+    public void visitBASTORE(final BASTORE bastore) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitBIPUSH(final BIPUSH o) {\n+    public void visitBIPUSH(final BIPUSH bipush) {\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitCALOAD(final CALOAD o) {\n+    public void visitCALOAD(final CALOAD caload) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitCASTORE(final CASTORE o) {\n+    public void visitCASTORE(final CASTORE castore) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitCHECKCAST(final CHECKCAST o) {\n+    public void visitCHECKCAST(final CHECKCAST checkcast) {\n         this.stack().pop();\n-        this.stack().push(o.getType(this.cpg));\n+        this.stack().push(checkcast.getType(this.cpg));\n     }\n     \n-    public void visitD2F(final D2F o) {\n+    public void visitD2F(final D2F d2F) {\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitD2I(final D2I o) {\n+    public void visitD2I(final D2I d2I) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitD2L(final D2L o) {\n+    public void visitD2L(final D2L d2L) {\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitDADD(final DADD o) {\n+    public void visitDADD(final DADD dadd) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDALOAD(final DALOAD o) {\n+    public void visitDALOAD(final DALOAD daload) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDASTORE(final DASTORE o) {\n+    public void visitDASTORE(final DASTORE dastore) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitDCMPG(final DCMPG o) {\n+    public void visitDCMPG(final DCMPG dcmpg) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitDCMPL(final DCMPL o) {\n+    public void visitDCMPL(final DCMPL dcmpl) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitDCONST(final DCONST o) {\n+    public void visitDCONST(final DCONST dconst) {\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDDIV(final DDIV o) {\n+    public void visitDDIV(final DDIV ddiv) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDLOAD(final DLOAD o) {\n+    public void visitDLOAD(final DLOAD dload) {\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDMUL(final DMUL o) {\n+    public void visitDMUL(final DMUL dmul) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDNEG(final DNEG o) {\n+    public void visitDNEG(final DNEG dneg) {\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDREM(final DREM o) {\n+    public void visitDREM(final DREM drem) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDRETURN(final DRETURN o) {\n+    public void visitDRETURN(final DRETURN dreturn) {\n         this.stack().pop();\n     }\n     \n-    public void visitDSTORE(final DSTORE o) {\n-        this.locals().set(o.getIndex(), this.stack().pop());\n-        this.locals().set(o.getIndex() + 1, Type.UNKNOWN);\n+    public void visitDSTORE(final DSTORE dstore) {\n+        this.locals().set(dstore.getIndex(), this.stack().pop());\n+        this.locals().set(dstore.getIndex() + 1, Type.UNKNOWN);\n     }\n     \n-    public void visitDSUB(final DSUB o) {\n+    public void visitDSUB(final DSUB dsub) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitDUP(final DUP o) {\n-        final Type t = this.stack().pop();\n-        this.stack().push(t);\n-        this.stack().push(t);\n+    public void visitDUP(final DUP dup) {\n+        final Type pop = this.stack().pop();\n+        this.stack().push(pop);\n+        this.stack().push(pop);\n     }\n     \n-    public void visitDUP_X1(final DUP_X1 o) {\n-        final Type w1 = this.stack().pop();\n-        final Type w2 = this.stack().pop();\n-        this.stack().push(w1);\n-        this.stack().push(w2);\n-        this.stack().push(w1);\n+    public void visitDUP_X1(final DUP_X1 dup_X1) {\n+        final Type pop = this.stack().pop();\n+        final Type pop2 = this.stack().pop();\n+        this.stack().push(pop);\n+        this.stack().push(pop2);\n+        this.stack().push(pop);\n     }\n     \n-    public void visitDUP_X2(final DUP_X2 o) {\n-        final Type w1 = this.stack().pop();\n-        final Type w2 = this.stack().pop();\n-        if (w2.getSize() == 2) {\n-            this.stack().push(w1);\n-            this.stack().push(w2);\n-            this.stack().push(w1);\n+    public void visitDUP_X2(final DUP_X2 dup_X2) {\n+        final Type pop = this.stack().pop();\n+        final Type pop2 = this.stack().pop();\n+        if (pop2.getSize() == 2) {\n+            this.stack().push(pop);\n+            this.stack().push(pop2);\n+            this.stack().push(pop);\n         }\n         else {\n-            final Type w3 = this.stack().pop();\n-            this.stack().push(w1);\n-            this.stack().push(w3);\n-            this.stack().push(w2);\n-            this.stack().push(w1);\n+            final Type pop3 = this.stack().pop();\n+            this.stack().push(pop);\n+            this.stack().push(pop3);\n+            this.stack().push(pop2);\n+            this.stack().push(pop);\n         }\n     }\n     \n-    public void visitDUP2(final DUP2 o) {\n-        final Type t = this.stack().pop();\n-        if (t.getSize() == 2) {\n-            this.stack().push(t);\n-            this.stack().push(t);\n+    public void visitDUP2(final DUP2 dup2) {\n+        final Type pop = this.stack().pop();\n+        if (pop.getSize() == 2) {\n+            this.stack().push(pop);\n+            this.stack().push(pop);\n         }\n         else {\n-            final Type u = this.stack().pop();\n-            this.stack().push(u);\n-            this.stack().push(t);\n-            this.stack().push(u);\n-            this.stack().push(t);\n+            final Type pop2 = this.stack().pop();\n+            this.stack().push(pop2);\n+            this.stack().push(pop);\n+            this.stack().push(pop2);\n+            this.stack().push(pop);\n         }\n     }\n     \n-    public void visitDUP2_X1(final DUP2_X1 o) {\n-        final Type t = this.stack().pop();\n-        if (t.getSize() == 2) {\n-            final Type u = this.stack().pop();\n-            this.stack().push(t);\n-            this.stack().push(u);\n-            this.stack().push(t);\n+    public void visitDUP2_X1(final DUP2_X1 dup2_X1) {\n+        final Type pop = this.stack().pop();\n+        if (pop.getSize() == 2) {\n+            final Type pop2 = this.stack().pop();\n+            this.stack().push(pop);\n+            this.stack().push(pop2);\n+            this.stack().push(pop);\n         }\n         else {\n-            final Type u = this.stack().pop();\n-            final Type v = this.stack().pop();\n-            this.stack().push(u);\n-            this.stack().push(t);\n-            this.stack().push(v);\n-            this.stack().push(u);\n-            this.stack().push(t);\n+            final Type pop3 = this.stack().pop();\n+            final Type pop4 = this.stack().pop();\n+            this.stack().push(pop3);\n+            this.stack().push(pop);\n+            this.stack().push(pop4);\n+            this.stack().push(pop3);\n+            this.stack().push(pop);\n         }\n     }\n     \n-    public void visitDUP2_X2(final DUP2_X2 o) {\n-        final Type t = this.stack().pop();\n-        if (t.getSize() == 2) {\n-            final Type u = this.stack().pop();\n-            if (u.getSize() == 2) {\n-                this.stack().push(t);\n-                this.stack().push(u);\n-                this.stack().push(t);\n+    public void visitDUP2_X2(final DUP2_X2 dup2_X2) {\n+        final Type pop = this.stack().pop();\n+        if (pop.getSize() == 2) {\n+            final Type pop2 = this.stack().pop();\n+            if (pop2.getSize() == 2) {\n+                this.stack().push(pop);\n+                this.stack().push(pop2);\n+                this.stack().push(pop);\n             }\n             else {\n-                final Type v = this.stack().pop();\n-                this.stack().push(t);\n-                this.stack().push(v);\n-                this.stack().push(u);\n-                this.stack().push(t);\n+                final Type pop3 = this.stack().pop();\n+                this.stack().push(pop);\n+                this.stack().push(pop3);\n+                this.stack().push(pop2);\n+                this.stack().push(pop);\n             }\n         }\n         else {\n-            final Type u = this.stack().pop();\n-            final Type v = this.stack().pop();\n-            if (v.getSize() == 2) {\n-                this.stack().push(u);\n-                this.stack().push(t);\n-                this.stack().push(v);\n-                this.stack().push(u);\n-                this.stack().push(t);\n+            final Type pop4 = this.stack().pop();\n+            final Type pop5 = this.stack().pop();\n+            if (pop5.getSize() == 2) {\n+                this.stack().push(pop4);\n+                this.stack().push(pop);\n+                this.stack().push(pop5);\n+                this.stack().push(pop4);\n+                this.stack().push(pop);\n             }\n             else {\n-                final Type w = this.stack().pop();\n-                this.stack().push(u);\n-                this.stack().push(t);\n-                this.stack().push(w);\n-                this.stack().push(v);\n-                this.stack().push(u);\n-                this.stack().push(t);\n+                final Type pop6 = this.stack().pop();\n+                this.stack().push(pop4);\n+                this.stack().push(pop);\n+                this.stack().push(pop6);\n+                this.stack().push(pop5);\n+                this.stack().push(pop4);\n+                this.stack().push(pop);\n             }\n         }\n     }\n     \n-    public void visitF2D(final F2D o) {\n+    public void visitF2D(final F2D f2D) {\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitF2I(final F2I o) {\n+    public void visitF2I(final F2I f2I) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitF2L(final F2L o) {\n+    public void visitF2L(final F2L f2L) {\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitFADD(final FADD o) {\n+    public void visitFADD(final FADD fadd) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitFALOAD(final FALOAD o) {\n+    public void visitFALOAD(final FALOAD faload) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitFASTORE(final FASTORE o) {\n+    public void visitFASTORE(final FASTORE fastore) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitFCMPG(final FCMPG o) {\n+    public void visitFCMPG(final FCMPG fcmpg) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitFCMPL(final FCMPL o) {\n+    public void visitFCMPL(final FCMPL fcmpl) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitFCONST(final FCONST o) {\n+    public void visitFCONST(final FCONST fconst) {\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitFDIV(final FDIV o) {\n+    public void visitFDIV(final FDIV fdiv) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitFLOAD(final FLOAD o) {\n+    public void visitFLOAD(final FLOAD fload) {\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitFMUL(final FMUL o) {\n+    public void visitFMUL(final FMUL fmul) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitFNEG(final FNEG o) {\n+    public void visitFNEG(final FNEG fneg) {\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitFREM(final FREM o) {\n+    public void visitFREM(final FREM frem) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitFRETURN(final FRETURN o) {\n+    public void visitFRETURN(final FRETURN freturn) {\n         this.stack().pop();\n     }\n     \n-    public void visitFSTORE(final FSTORE o) {\n-        this.locals().set(o.getIndex(), this.stack().pop());\n+    public void visitFSTORE(final FSTORE fstore) {\n+        this.locals().set(fstore.getIndex(), this.stack().pop());\n     }\n     \n-    public void visitFSUB(final FSUB o) {\n+    public void visitFSUB(final FSUB fsub) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitGETFIELD(final GETFIELD o) {\n+    public void visitGETFIELD(final GETFIELD getfield) {\n         this.stack().pop();\n-        Type t = o.getFieldType(this.cpg);\n-        if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-            t = (Type)Type.INT;\n+        Object o = getfield.getFieldType(this.cpg);\n+        if (((Type)o).equals((Object)Type.BOOLEAN) || ((Type)o).equals((Object)Type.CHAR) || ((Type)o).equals((Object)Type.BYTE) || ((Type)o).equals((Object)Type.SHORT)) {\n+            o = Type.INT;\n         }\n-        this.stack().push(t);\n+        this.stack().push((Type)o);\n     }\n     \n-    public void visitGETSTATIC(final GETSTATIC o) {\n-        Type t = o.getFieldType(this.cpg);\n-        if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-            t = (Type)Type.INT;\n+    public void visitGETSTATIC(final GETSTATIC getstatic) {\n+        Object o = getstatic.getFieldType(this.cpg);\n+        if (((Type)o).equals((Object)Type.BOOLEAN) || ((Type)o).equals((Object)Type.CHAR) || ((Type)o).equals((Object)Type.BYTE) || ((Type)o).equals((Object)Type.SHORT)) {\n+            o = Type.INT;\n         }\n-        this.stack().push(t);\n+        this.stack().push((Type)o);\n     }\n     \n-    public void visitGOTO(final GOTO o) {\n+    public void visitGOTO(final GOTO goto1) {\n     }\n     \n-    public void visitGOTO_W(final GOTO_W o) {\n+    public void visitGOTO_W(final GOTO_W goto_W) {\n     }\n     \n-    public void visitI2B(final I2B o) {\n+    public void visitI2B(final I2B i2B) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitI2C(final I2C o) {\n+    public void visitI2C(final I2C i2C) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitI2D(final I2D o) {\n+    public void visitI2D(final I2D i2D) {\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitI2F(final I2F o) {\n+    public void visitI2F(final I2F i2F) {\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitI2L(final I2L o) {\n+    public void visitI2L(final I2L i2L) {\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitI2S(final I2S o) {\n+    public void visitI2S(final I2S i2S) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIADD(final IADD o) {\n+    public void visitIADD(final IADD iadd) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIALOAD(final IALOAD o) {\n+    public void visitIALOAD(final IALOAD iaload) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIAND(final IAND o) {\n+    public void visitIAND(final IAND iand) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIASTORE(final IASTORE o) {\n+    public void visitIASTORE(final IASTORE iastore) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitICONST(final ICONST o) {\n+    public void visitICONST(final ICONST iconst) {\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIDIV(final IDIV o) {\n+    public void visitIDIV(final IDIV idiv) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIF_ACMPEQ(final IF_ACMPEQ o) {\n+    public void visitIF_ACMPEQ(final IF_ACMPEQ if_ACMPEQ) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitIF_ACMPNE(final IF_ACMPNE o) {\n+    public void visitIF_ACMPNE(final IF_ACMPNE if_ACMPNE) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitIF_ICMPEQ(final IF_ICMPEQ o) {\n+    public void visitIF_ICMPEQ(final IF_ICMPEQ if_ICMPEQ) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitIF_ICMPGE(final IF_ICMPGE o) {\n+    public void visitIF_ICMPGE(final IF_ICMPGE if_ICMPGE) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitIF_ICMPGT(final IF_ICMPGT o) {\n+    public void visitIF_ICMPGT(final IF_ICMPGT if_ICMPGT) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitIF_ICMPLE(final IF_ICMPLE o) {\n+    public void visitIF_ICMPLE(final IF_ICMPLE if_ICMPLE) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitIF_ICMPLT(final IF_ICMPLT o) {\n+    public void visitIF_ICMPLT(final IF_ICMPLT if_ICMPLT) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitIF_ICMPNE(final IF_ICMPNE o) {\n+    public void visitIF_ICMPNE(final IF_ICMPNE if_ICMPNE) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitIFEQ(final IFEQ o) {\n+    public void visitIFEQ(final IFEQ ifeq) {\n         this.stack().pop();\n     }\n     \n-    public void visitIFGE(final IFGE o) {\n+    public void visitIFGE(final IFGE ifge) {\n         this.stack().pop();\n     }\n     \n-    public void visitIFGT(final IFGT o) {\n+    public void visitIFGT(final IFGT ifgt) {\n         this.stack().pop();\n     }\n     \n-    public void visitIFLE(final IFLE o) {\n+    public void visitIFLE(final IFLE ifle) {\n         this.stack().pop();\n     }\n     \n-    public void visitIFLT(final IFLT o) {\n+    public void visitIFLT(final IFLT iflt) {\n         this.stack().pop();\n     }\n     \n-    public void visitIFNE(final IFNE o) {\n+    public void visitIFNE(final IFNE ifne) {\n         this.stack().pop();\n     }\n     \n-    public void visitIFNONNULL(final IFNONNULL o) {\n+    public void visitIFNONNULL(final IFNONNULL ifnonnull) {\n         this.stack().pop();\n     }\n     \n-    public void visitIFNULL(final IFNULL o) {\n+    public void visitIFNULL(final IFNULL ifnull) {\n         this.stack().pop();\n     }\n     \n-    public void visitIINC(final IINC o) {\n+    public void visitIINC(final IINC iinc) {\n     }\n     \n-    public void visitILOAD(final ILOAD o) {\n+    public void visitILOAD(final ILOAD iload) {\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIMUL(final IMUL o) {\n+    public void visitIMUL(final IMUL imul) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitINEG(final INEG o) {\n+    public void visitINEG(final INEG ineg) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitINSTANCEOF(final INSTANCEOF o) {\n+    public void visitINSTANCEOF(final INSTANCEOF instanceof1) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitINVOKEDYNAMIC(final INVOKEDYNAMIC o) {\n-        for (int i = 0; i < o.getArgumentTypes(this.cpg).length; ++i) {\n+    public void visitINVOKEDYNAMIC(final INVOKEDYNAMIC invokedynamic) {\n+        for (int i = 0; i < invokedynamic.getArgumentTypes(this.cpg).length; ++i) {\n             this.stack().pop();\n         }\n-        if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t = o.getReturnType(this.cpg);\n-            if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-                t = (Type)Type.INT;\n+        if (invokedynamic.getReturnType(this.cpg) != Type.VOID) {\n+            Object o = invokedynamic.getReturnType(this.cpg);\n+            if (((Type)o).equals((Object)Type.BOOLEAN) || ((Type)o).equals((Object)Type.CHAR) || ((Type)o).equals((Object)Type.BYTE) || ((Type)o).equals((Object)Type.SHORT)) {\n+                o = Type.INT;\n             }\n-            this.stack().push(t);\n+            this.stack().push((Type)o);\n         }\n     }\n     \n-    public void visitINVOKEINTERFACE(final INVOKEINTERFACE o) {\n+    public void visitINVOKEINTERFACE(final INVOKEINTERFACE invokeinterface) {\n         this.stack().pop();\n-        for (int i = 0; i < o.getArgumentTypes(this.cpg).length; ++i) {\n+        for (int i = 0; i < invokeinterface.getArgumentTypes(this.cpg).length; ++i) {\n             this.stack().pop();\n         }\n-        if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t = o.getReturnType(this.cpg);\n-            if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-                t = (Type)Type.INT;\n+        if (invokeinterface.getReturnType(this.cpg) != Type.VOID) {\n+            Object o = invokeinterface.getReturnType(this.cpg);\n+            if (((Type)o).equals((Object)Type.BOOLEAN) || ((Type)o).equals((Object)Type.CHAR) || ((Type)o).equals((Object)Type.BYTE) || ((Type)o).equals((Object)Type.SHORT)) {\n+                o = Type.INT;\n             }\n-            this.stack().push(t);\n+            this.stack().push((Type)o);\n         }\n     }\n     \n-    public void visitINVOKESPECIAL(final INVOKESPECIAL o) {\n-        if (o.getMethodName(this.cpg).equals(\"<init>\")) {\n-            final UninitializedObjectType t = (UninitializedObjectType)this.stack().peek(o.getArgumentTypes(this.cpg).length);\n-            if (t == Frame.getThis()) {\n+    public void visitINVOKESPECIAL(final INVOKESPECIAL invokespecial) {\n+        if (invokespecial.getMethodName(this.cpg).equals(\"<init>\")) {\n+            final UninitializedObjectType uninitializedObjectType = (UninitializedObjectType)this.stack().peek(invokespecial.getArgumentTypes(this.cpg).length);\n+            if (uninitializedObjectType == Frame.getThis()) {\n                 Frame.setThis((UninitializedObjectType)null);\n             }\n-            this.stack().initializeObject(t);\n-            this.locals().initializeObject(t);\n+            this.stack().initializeObject(uninitializedObjectType);\n+            this.locals().initializeObject(uninitializedObjectType);\n         }\n         this.stack().pop();\n-        for (int i = 0; i < o.getArgumentTypes(this.cpg).length; ++i) {\n+        for (int i = 0; i < invokespecial.getArgumentTypes(this.cpg).length; ++i) {\n             this.stack().pop();\n         }\n-        if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t2 = o.getReturnType(this.cpg);\n-            if (t2.equals((Object)Type.BOOLEAN) || t2.equals((Object)Type.CHAR) || t2.equals((Object)Type.BYTE) || t2.equals((Object)Type.SHORT)) {\n-                t2 = (Type)Type.INT;\n+        if (invokespecial.getReturnType(this.cpg) != Type.VOID) {\n+            Object o = invokespecial.getReturnType(this.cpg);\n+            if (((Type)o).equals((Object)Type.BOOLEAN) || ((Type)o).equals((Object)Type.CHAR) || ((Type)o).equals((Object)Type.BYTE) || ((Type)o).equals((Object)Type.SHORT)) {\n+                o = Type.INT;\n             }\n-            this.stack().push(t2);\n+            this.stack().push((Type)o);\n         }\n     }\n     \n-    public void visitINVOKESTATIC(final INVOKESTATIC o) {\n-        for (int i = 0; i < o.getArgumentTypes(this.cpg).length; ++i) {\n+    public void visitINVOKESTATIC(final INVOKESTATIC invokestatic) {\n+        for (int i = 0; i < invokestatic.getArgumentTypes(this.cpg).length; ++i) {\n             this.stack().pop();\n         }\n-        if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t = o.getReturnType(this.cpg);\n-            if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-                t = (Type)Type.INT;\n+        if (invokestatic.getReturnType(this.cpg) != Type.VOID) {\n+            Object o = invokestatic.getReturnType(this.cpg);\n+            if (((Type)o).equals((Object)Type.BOOLEAN) || ((Type)o).equals((Object)Type.CHAR) || ((Type)o).equals((Object)Type.BYTE) || ((Type)o).equals((Object)Type.SHORT)) {\n+                o = Type.INT;\n             }\n-            this.stack().push(t);\n+            this.stack().push((Type)o);\n         }\n     }\n     \n-    public void visitINVOKEVIRTUAL(final INVOKEVIRTUAL o) {\n+    public void visitINVOKEVIRTUAL(final INVOKEVIRTUAL invokevirtual) {\n         this.stack().pop();\n-        for (int i = 0; i < o.getArgumentTypes(this.cpg).length; ++i) {\n+        for (int i = 0; i < invokevirtual.getArgumentTypes(this.cpg).length; ++i) {\n             this.stack().pop();\n         }\n-        if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t = o.getReturnType(this.cpg);\n-            if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-                t = (Type)Type.INT;\n+        if (invokevirtual.getReturnType(this.cpg) != Type.VOID) {\n+            Object o = invokevirtual.getReturnType(this.cpg);\n+            if (((Type)o).equals((Object)Type.BOOLEAN) || ((Type)o).equals((Object)Type.CHAR) || ((Type)o).equals((Object)Type.BYTE) || ((Type)o).equals((Object)Type.SHORT)) {\n+                o = Type.INT;\n             }\n-            this.stack().push(t);\n+            this.stack().push((Type)o);\n         }\n     }\n     \n-    public void visitIOR(final IOR o) {\n+    public void visitIOR(final IOR ior) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIREM(final IREM o) {\n+    public void visitIREM(final IREM irem) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIRETURN(final IRETURN o) {\n+    public void visitIRETURN(final IRETURN ireturn) {\n         this.stack().pop();\n     }\n     \n-    public void visitISHL(final ISHL o) {\n+    public void visitISHL(final ISHL ishl) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitISHR(final ISHR o) {\n+    public void visitISHR(final ISHR ishr) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitISTORE(final ISTORE o) {\n-        this.locals().set(o.getIndex(), this.stack().pop());\n+    public void visitISTORE(final ISTORE istore) {\n+        this.locals().set(istore.getIndex(), this.stack().pop());\n     }\n     \n-    public void visitISUB(final ISUB o) {\n+    public void visitISUB(final ISUB isub) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIUSHR(final IUSHR o) {\n+    public void visitIUSHR(final IUSHR iushr) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitIXOR(final IXOR o) {\n+    public void visitIXOR(final IXOR ixor) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitJSR(final JSR o) {\n-        this.stack().push((Type)new ReturnaddressType(o.physicalSuccessor()));\n+    public void visitJSR(final JSR jsr) {\n+        this.stack().push((Type)new ReturnaddressType(jsr.physicalSuccessor()));\n     }\n     \n-    public void visitJSR_W(final JSR_W o) {\n-        this.stack().push((Type)new ReturnaddressType(o.physicalSuccessor()));\n+    public void visitJSR_W(final JSR_W jsr_W) {\n+        this.stack().push((Type)new ReturnaddressType(jsr_W.physicalSuccessor()));\n     }\n     \n-    public void visitL2D(final L2D o) {\n+    public void visitL2D(final L2D l2D) {\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n-    public void visitL2F(final L2F o) {\n+    public void visitL2F(final L2F l2F) {\n         this.stack().pop();\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n-    public void visitL2I(final L2I o) {\n+    public void visitL2I(final L2I l2I) {\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitLADD(final LADD o) {\n+    public void visitLADD(final LADD ladd) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLALOAD(final LALOAD o) {\n+    public void visitLALOAD(final LALOAD laload) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLAND(final LAND o) {\n+    public void visitLAND(final LAND land) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLASTORE(final LASTORE o) {\n+    public void visitLASTORE(final LASTORE lastore) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitLCMP(final LCMP o) {\n+    public void visitLCMP(final LCMP lcmp) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitLCONST(final LCONST o) {\n+    public void visitLCONST(final LCONST lconst) {\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLDC(final LDC o) {\n-        final Constant c = this.cpg.getConstant(o.getIndex());\n-        if (c instanceof ConstantInteger) {\n+    public void visitLDC(final LDC ldc) {\n+        final Constant constant = this.cpg.getConstant(ldc.getIndex());\n+        if (constant instanceof ConstantInteger) {\n             this.stack().push((Type)Type.INT);\n         }\n-        if (c instanceof ConstantFloat) {\n+        if (constant instanceof ConstantFloat) {\n             this.stack().push((Type)Type.FLOAT);\n         }\n-        if (c instanceof ConstantString) {\n+        if (constant instanceof ConstantString) {\n             this.stack().push((Type)Type.STRING);\n         }\n-        if (c instanceof ConstantClass) {\n+        if (constant instanceof ConstantClass) {\n             this.stack().push((Type)Type.CLASS);\n         }\n     }\n     \n-    public void visitLDC_W(final LDC_W o) {\n-        final Constant c = this.cpg.getConstant(o.getIndex());\n-        if (c instanceof ConstantInteger) {\n+    public void visitLDC_W(final LDC_W ldc_W) {\n+        final Constant constant = this.cpg.getConstant(ldc_W.getIndex());\n+        if (constant instanceof ConstantInteger) {\n             this.stack().push((Type)Type.INT);\n         }\n-        if (c instanceof ConstantFloat) {\n+        if (constant instanceof ConstantFloat) {\n             this.stack().push((Type)Type.FLOAT);\n         }\n-        if (c instanceof ConstantString) {\n+        if (constant instanceof ConstantString) {\n             this.stack().push((Type)Type.STRING);\n         }\n-        if (c instanceof ConstantClass) {\n+        if (constant instanceof ConstantClass) {\n             this.stack().push((Type)Type.CLASS);\n         }\n     }\n     \n-    public void visitLDC2_W(final LDC2_W o) {\n-        final Constant c = this.cpg.getConstant(o.getIndex());\n-        if (c instanceof ConstantLong) {\n+    public void visitLDC2_W(final LDC2_W ldc2_W) {\n+        final Constant constant = this.cpg.getConstant(ldc2_W.getIndex());\n+        if (constant instanceof ConstantLong) {\n             this.stack().push((Type)Type.LONG);\n         }\n-        if (c instanceof ConstantDouble) {\n+        if (constant instanceof ConstantDouble) {\n             this.stack().push((Type)Type.DOUBLE);\n         }\n     }\n     \n-    public void visitLDIV(final LDIV o) {\n+    public void visitLDIV(final LDIV ldiv) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLLOAD(final LLOAD o) {\n-        this.stack().push(this.locals().get(o.getIndex()));\n+    public void visitLLOAD(final LLOAD lload) {\n+        this.stack().push(this.locals().get(lload.getIndex()));\n     }\n     \n-    public void visitLMUL(final LMUL o) {\n+    public void visitLMUL(final LMUL lmul) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLNEG(final LNEG o) {\n+    public void visitLNEG(final LNEG lneg) {\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLOOKUPSWITCH(final LOOKUPSWITCH o) {\n+    public void visitLOOKUPSWITCH(final LOOKUPSWITCH lookupswitch) {\n         this.stack().pop();\n     }\n     \n-    public void visitLOR(final LOR o) {\n+    public void visitLOR(final LOR lor) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLREM(final LREM o) {\n+    public void visitLREM(final LREM lrem) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLRETURN(final LRETURN o) {\n+    public void visitLRETURN(final LRETURN lreturn) {\n         this.stack().pop();\n     }\n     \n-    public void visitLSHL(final LSHL o) {\n+    public void visitLSHL(final LSHL lshl) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLSHR(final LSHR o) {\n+    public void visitLSHR(final LSHR lshr) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLSTORE(final LSTORE o) {\n-        this.locals().set(o.getIndex(), this.stack().pop());\n-        this.locals().set(o.getIndex() + 1, Type.UNKNOWN);\n+    public void visitLSTORE(final LSTORE lstore) {\n+        this.locals().set(lstore.getIndex(), this.stack().pop());\n+        this.locals().set(lstore.getIndex() + 1, Type.UNKNOWN);\n     }\n     \n-    public void visitLSUB(final LSUB o) {\n+    public void visitLSUB(final LSUB lsub) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLUSHR(final LUSHR o) {\n+    public void visitLUSHR(final LUSHR lushr) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitLXOR(final LXOR o) {\n+    public void visitLXOR(final LXOR lxor) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.LONG);\n     }\n     \n-    public void visitMONITORENTER(final MONITORENTER o) {\n+    public void visitMONITORENTER(final MONITORENTER monitorenter) {\n         this.stack().pop();\n     }\n     \n-    public void visitMONITOREXIT(final MONITOREXIT o) {\n+    public void visitMONITOREXIT(final MONITOREXIT monitorexit) {\n         this.stack().pop();\n     }\n     \n-    public void visitMULTIANEWARRAY(final MULTIANEWARRAY o) {\n-        for (int i = 0; i < o.getDimensions(); ++i) {\n+    public void visitMULTIANEWARRAY(final MULTIANEWARRAY multianewarray) {\n+        for (short n = 0; n < multianewarray.getDimensions(); ++n) {\n             this.stack().pop();\n         }\n-        this.stack().push(o.getType(this.cpg));\n+        this.stack().push(multianewarray.getType(this.cpg));\n     }\n     \n-    public void visitNEW(final NEW o) {\n-        this.stack().push((Type)new UninitializedObjectType((ObjectType)o.getType(this.cpg)));\n+    public void visitNEW(final NEW new1) {\n+        this.stack().push((Type)new UninitializedObjectType((ObjectType)new1.getType(this.cpg)));\n     }\n     \n-    public void visitNEWARRAY(final NEWARRAY o) {\n+    public void visitNEWARRAY(final NEWARRAY newarray) {\n         this.stack().pop();\n-        this.stack().push(o.getType());\n+        this.stack().push(newarray.getType());\n     }\n     \n-    public void visitNOP(final NOP o) {\n+    public void visitNOP(final NOP nop) {\n     }\n     \n-    public void visitPOP(final POP o) {\n+    public void visitPOP(final POP pop) {\n         this.stack().pop();\n     }\n     \n-    public void visitPOP2(final POP2 o) {\n-        final Type t = this.stack().pop();\n-        if (t.getSize() == 1) {\n+    public void visitPOP2(final POP2 pop2) {\n+        if (this.stack().pop().getSize() == 1) {\n             this.stack().pop();\n         }\n     }\n     \n-    public void visitPUTFIELD(final PUTFIELD o) {\n+    public void visitPUTFIELD(final PUTFIELD putfield) {\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitPUTSTATIC(final PUTSTATIC o) {\n+    public void visitPUTSTATIC(final PUTSTATIC putstatic) {\n         this.stack().pop();\n     }\n     \n-    public void visitRET(final RET o) {\n+    public void visitRET(final RET ret) {\n     }\n     \n-    public void visitRETURN(final RETURN o) {\n+    public void visitRETURN(final RETURN return1) {\n     }\n     \n-    public void visitSALOAD(final SALOAD o) {\n+    public void visitSALOAD(final SALOAD saload) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitSASTORE(final SASTORE o) {\n+    public void visitSASTORE(final SASTORE sastore) {\n         this.stack().pop();\n         this.stack().pop();\n         this.stack().pop();\n     }\n     \n-    public void visitSIPUSH(final SIPUSH o) {\n+    public void visitSIPUSH(final SIPUSH sipush) {\n         this.stack().push((Type)Type.INT);\n     }\n     \n-    public void visitSWAP(final SWAP o) {\n-        final Type t = this.stack().pop();\n-        final Type u = this.stack().pop();\n-        this.stack().push(t);\n-        this.stack().push(u);\n+    public void visitSWAP(final SWAP swap) {\n+        final Type pop = this.stack().pop();\n+        final Type pop2 = this.stack().pop();\n+        this.stack().push(pop);\n+        this.stack().push(pop2);\n     }\n     \n-    public void visitTABLESWITCH(final TABLESWITCH o) {\n+    public void visitTABLESWITCH(final TABLESWITCH tableswitch) {\n         this.stack().pop();\n     }\n }\n"}]}
