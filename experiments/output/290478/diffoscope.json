{"diffoscope-json-version": 1, "source1": "first/CharSequenceReader.class", "source2": "second/CharSequenceReader.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,68 +1,68 @@\n-  SHA-256 checksum ea3dedd1ad42310c2ae6674fe86fac9064a7281f1cf62498fd715e833ecd33a5\n+  SHA-256 checksum 737ba34422135b4a47ba0481c5c5ab21ab63c4c3250e3edc66b09c7ee45b0923\n   Compiled from \"CharSequenceReader.java\"\n public class org.apache.commons.io.input.CharSequenceReader extends java.io.Reader implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #50                         // org/apache/commons/io/input/CharSequenceReader\n   super_class: #51                        // java/io/Reader\n   interfaces: 1, fields: 6, methods: 13, attributes: 1\n Constant pool:\n-    #1 = Class              #90           // org/apache/commons/io/IOUtils\n-    #2 = Methodref          #50.#91       // org/apache/commons/io/input/CharSequenceReader.\"<init>\":(Ljava/lang/CharSequence;I)V\n-    #3 = Class              #92           // java/lang/Integer\n+    #1 = Class              #89           // org/apache/commons/io/IOUtils\n+    #2 = Methodref          #50.#90       // org/apache/commons/io/input/CharSequenceReader.\"<init>\":(Ljava/lang/CharSequence;I)V\n+    #3 = Class              #91           // java/lang/Integer\n     #4 = Integer            2147483647\n-    #5 = Methodref          #50.#93       // org/apache/commons/io/input/CharSequenceReader.\"<init>\":(Ljava/lang/CharSequence;II)V\n-    #6 = Methodref          #51.#94       // java/io/Reader.\"<init>\":()V\n-    #7 = Class              #95           // java/lang/IllegalArgumentException\n-    #8 = Class              #96           // java/lang/StringBuilder\n-    #9 = Methodref          #8.#94        // java/lang/StringBuilder.\"<init>\":()V\n-   #10 = String             #97           // Start index is less than zero:\n-   #11 = Methodref          #8.#98        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #12 = Methodref          #8.#99        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #13 = Methodref          #8.#100       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #14 = Methodref          #7.#101       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = String             #102          // End index is less than start\n-   #16 = String             #103          // :\n-   #17 = String             #104          //\n-   #18 = Fieldref           #50.#105      // org/apache/commons/io/input/CharSequenceReader.charSequence:Ljava/lang/CharSequence;\n-   #19 = Fieldref           #50.#106      // org/apache/commons/io/input/CharSequenceReader.start:I\n-   #20 = Methodref          #3.#107       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #21 = Fieldref           #50.#108      // org/apache/commons/io/input/CharSequenceReader.end:Ljava/lang/Integer;\n-   #22 = Fieldref           #50.#109      // org/apache/commons/io/input/CharSequenceReader.idx:I\n-   #23 = Fieldref           #50.#110      // org/apache/commons/io/input/CharSequenceReader.mark:I\n-   #24 = InterfaceMethodref #111.#112     // java/lang/CharSequence.length:()I\n-   #25 = Methodref          #113.#114     // java/lang/Math.min:(II)I\n-   #26 = Methodref          #3.#115       // java/lang/Integer.intValue:()I\n-   #27 = Methodref          #50.#116      // org/apache/commons/io/input/CharSequenceReader.end:()I\n-   #28 = InterfaceMethodref #111.#117     // java/lang/CharSequence.charAt:(I)C\n-   #29 = String             #118          // array\n-   #30 = Methodref          #119.#120     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #31 = Class              #121          // java/lang/IndexOutOfBoundsException\n-   #32 = String             #122          // Array Size=\n-   #33 = String             #123          // , offset=\n-   #34 = String             #124          // , length=\n-   #35 = Methodref          #31.#101      // java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n-   #36 = Class              #125          // java/lang/String\n-   #37 = Methodref          #36.#126      // java/lang/String.getChars:(II[CI)V\n-   #38 = Methodref          #8.#126       // java/lang/StringBuilder.getChars:(II[CI)V\n-   #39 = Class              #127          // java/lang/StringBuffer\n-   #40 = Methodref          #39.#126      // java/lang/StringBuffer.getChars:(II[CI)V\n-   #41 = Methodref          #50.#128      // org/apache/commons/io/input/CharSequenceReader.read:()I\n-   #42 = String             #129          // Number of characters to skip is less than zero:\n-   #43 = Methodref          #8.#130       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+    #5 = Methodref          #50.#92       // org/apache/commons/io/input/CharSequenceReader.\"<init>\":(Ljava/lang/CharSequence;II)V\n+    #6 = Methodref          #51.#93       // java/io/Reader.\"<init>\":()V\n+    #7 = Class              #94           // java/lang/IllegalArgumentException\n+    #8 = Class              #95           // java/lang/StringBuilder\n+    #9 = Methodref          #8.#93        // java/lang/StringBuilder.\"<init>\":()V\n+   #10 = String             #96           // Start index is less than zero:\n+   #11 = Methodref          #8.#97        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #12 = Methodref          #8.#98        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #13 = Methodref          #8.#99        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #14 = Methodref          #7.#100       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #15 = String             #101          // End index is less than start\n+   #16 = String             #102          // :\n+   #17 = String             #103          //\n+   #18 = Fieldref           #50.#104      // org/apache/commons/io/input/CharSequenceReader.charSequence:Ljava/lang/CharSequence;\n+   #19 = Fieldref           #50.#105      // org/apache/commons/io/input/CharSequenceReader.start:I\n+   #20 = Methodref          #3.#106       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #21 = Fieldref           #50.#107      // org/apache/commons/io/input/CharSequenceReader.end:Ljava/lang/Integer;\n+   #22 = Fieldref           #50.#108      // org/apache/commons/io/input/CharSequenceReader.idx:I\n+   #23 = Fieldref           #50.#109      // org/apache/commons/io/input/CharSequenceReader.mark:I\n+   #24 = InterfaceMethodref #73.#110      // java/lang/CharSequence.length:()I\n+   #25 = Methodref          #111.#112     // java/lang/Math.min:(II)I\n+   #26 = Methodref          #3.#113       // java/lang/Integer.intValue:()I\n+   #27 = Methodref          #50.#114      // org/apache/commons/io/input/CharSequenceReader.end:()I\n+   #28 = InterfaceMethodref #73.#115      // java/lang/CharSequence.charAt:(I)C\n+   #29 = String             #116          // array\n+   #30 = Methodref          #117.#118     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #31 = Class              #119          // java/lang/IndexOutOfBoundsException\n+   #32 = String             #120          // Array Size=\n+   #33 = String             #121          // , offset=\n+   #34 = String             #122          // , length=\n+   #35 = Methodref          #31.#100      // java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n+   #36 = Class              #123          // java/lang/String\n+   #37 = Methodref          #36.#124      // java/lang/String.getChars:(II[CI)V\n+   #38 = Methodref          #8.#124       // java/lang/StringBuilder.getChars:(II[CI)V\n+   #39 = Class              #125          // java/lang/StringBuffer\n+   #40 = Methodref          #39.#124      // java/lang/StringBuffer.getChars:(II[CI)V\n+   #41 = Methodref          #50.#126      // org/apache/commons/io/input/CharSequenceReader.read:()I\n+   #42 = String             #127          // Number of characters to skip is less than zero:\n+   #43 = Methodref          #8.#128       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n    #44 = Long               -1l\n-   #46 = Methodref          #113.#131     // java/lang/Math.min:(JJ)J\n-   #47 = Methodref          #50.#132      // org/apache/commons/io/input/CharSequenceReader.start:()I\n-   #48 = InterfaceMethodref #111.#133     // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n-   #49 = InterfaceMethodref #111.#100     // java/lang/CharSequence.toString:()Ljava/lang/String;\n-   #50 = Class              #134          // org/apache/commons/io/input/CharSequenceReader\n-   #51 = Class              #135          // java/io/Reader\n-   #52 = Class              #136          // java/io/Serializable\n+   #46 = Methodref          #111.#129     // java/lang/Math.min:(JJ)J\n+   #47 = Methodref          #50.#130      // org/apache/commons/io/input/CharSequenceReader.start:()I\n+   #48 = InterfaceMethodref #73.#131      // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n+   #49 = InterfaceMethodref #73.#99       // java/lang/CharSequence.toString:()Ljava/lang/String;\n+   #50 = Class              #132          // org/apache/commons/io/input/CharSequenceReader\n+   #51 = Class              #133          // java/io/Reader\n+   #52 = Class              #134          // java/io/Serializable\n    #53 = Utf8               serialVersionUID\n    #54 = Utf8               J\n    #55 = Utf8               ConstantValue\n    #56 = Long               3724187752191401220l\n    #58 = Utf8               charSequence\n    #59 = Utf8               Ljava/lang/CharSequence;\n    #60 = Utf8               idx\n@@ -74,101 +74,99 @@\n    #66 = Utf8               <init>\n    #67 = Utf8               (Ljava/lang/CharSequence;)V\n    #68 = Utf8               Code\n    #69 = Utf8               LineNumberTable\n    #70 = Utf8               (Ljava/lang/CharSequence;I)V\n    #71 = Utf8               (Ljava/lang/CharSequence;II)V\n    #72 = Utf8               StackMapTable\n-   #73 = Class              #134          // org/apache/commons/io/input/CharSequenceReader\n-   #74 = Class              #137          // java/lang/CharSequence\n-   #75 = Utf8               ()I\n-   #76 = Utf8               close\n-   #77 = Utf8               ()V\n-   #78 = Utf8               (I)V\n-   #79 = Utf8               markSupported\n-   #80 = Utf8               ()Z\n-   #81 = Utf8               read\n-   #82 = Utf8               ([CII)I\n-   #83 = Utf8               reset\n-   #84 = Utf8               skip\n-   #85 = Utf8               (J)J\n-   #86 = Utf8               toString\n-   #87 = Utf8               ()Ljava/lang/String;\n-   #88 = Utf8               SourceFile\n-   #89 = Utf8               CharSequenceReader.java\n-   #90 = Utf8               org/apache/commons/io/IOUtils\n-   #91 = NameAndType        #66:#70       // \"<init>\":(Ljava/lang/CharSequence;I)V\n-   #92 = Utf8               java/lang/Integer\n-   #93 = NameAndType        #66:#71       // \"<init>\":(Ljava/lang/CharSequence;II)V\n-   #94 = NameAndType        #66:#77       // \"<init>\":()V\n-   #95 = Utf8               java/lang/IllegalArgumentException\n-   #96 = Utf8               java/lang/StringBuilder\n-   #97 = Utf8               Start index is less than zero:\n-   #98 = NameAndType        #138:#139     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #99 = NameAndType        #138:#140     // append:(I)Ljava/lang/StringBuilder;\n-  #100 = NameAndType        #86:#87       // toString:()Ljava/lang/String;\n-  #101 = NameAndType        #66:#141      // \"<init>\":(Ljava/lang/String;)V\n-  #102 = Utf8               End index is less than start\n-  #103 = Utf8               :\n-  #104 = Utf8\n-  #105 = NameAndType        #58:#59       // charSequence:Ljava/lang/CharSequence;\n-  #106 = NameAndType        #63:#61       // start:I\n-  #107 = NameAndType        #142:#143     // valueOf:(I)Ljava/lang/Integer;\n-  #108 = NameAndType        #64:#65       // end:Ljava/lang/Integer;\n-  #109 = NameAndType        #60:#61       // idx:I\n-  #110 = NameAndType        #62:#61       // mark:I\n-  #111 = Class              #137          // java/lang/CharSequence\n-  #112 = NameAndType        #144:#75      // length:()I\n-  #113 = Class              #145          // java/lang/Math\n-  #114 = NameAndType        #146:#147     // min:(II)I\n-  #115 = NameAndType        #148:#75      // intValue:()I\n-  #116 = NameAndType        #64:#75       // end:()I\n-  #117 = NameAndType        #149:#150     // charAt:(I)C\n-  #118 = Utf8               array\n-  #119 = Class              #151          // java/util/Objects\n-  #120 = NameAndType        #152:#153     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #121 = Utf8               java/lang/IndexOutOfBoundsException\n-  #122 = Utf8               Array Size=\n-  #123 = Utf8               , offset=\n-  #124 = Utf8               , length=\n-  #125 = Utf8               java/lang/String\n-  #126 = NameAndType        #154:#155     // getChars:(II[CI)V\n-  #127 = Utf8               java/lang/StringBuffer\n-  #128 = NameAndType        #81:#75       // read:()I\n-  #129 = Utf8               Number of characters to skip is less than zero:\n-  #130 = NameAndType        #138:#156     // append:(J)Ljava/lang/StringBuilder;\n-  #131 = NameAndType        #146:#157     // min:(JJ)J\n-  #132 = NameAndType        #63:#75       // start:()I\n-  #133 = NameAndType        #158:#159     // subSequence:(II)Ljava/lang/CharSequence;\n-  #134 = Utf8               org/apache/commons/io/input/CharSequenceReader\n-  #135 = Utf8               java/io/Reader\n-  #136 = Utf8               java/io/Serializable\n-  #137 = Utf8               java/lang/CharSequence\n-  #138 = Utf8               append\n-  #139 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #140 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #141 = Utf8               (Ljava/lang/String;)V\n-  #142 = Utf8               valueOf\n-  #143 = Utf8               (I)Ljava/lang/Integer;\n-  #144 = Utf8               length\n-  #145 = Utf8               java/lang/Math\n-  #146 = Utf8               min\n-  #147 = Utf8               (II)I\n-  #148 = Utf8               intValue\n-  #149 = Utf8               charAt\n-  #150 = Utf8               (I)C\n-  #151 = Utf8               java/util/Objects\n-  #152 = Utf8               requireNonNull\n-  #153 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #154 = Utf8               getChars\n-  #155 = Utf8               (II[CI)V\n-  #156 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #157 = Utf8               (JJ)J\n-  #158 = Utf8               subSequence\n-  #159 = Utf8               (II)Ljava/lang/CharSequence;\n+   #73 = Class              #135          // java/lang/CharSequence\n+   #74 = Utf8               ()I\n+   #75 = Utf8               close\n+   #76 = Utf8               ()V\n+   #77 = Utf8               (I)V\n+   #78 = Utf8               markSupported\n+   #79 = Utf8               ()Z\n+   #80 = Utf8               read\n+   #81 = Utf8               ([CII)I\n+   #82 = Utf8               reset\n+   #83 = Utf8               skip\n+   #84 = Utf8               (J)J\n+   #85 = Utf8               toString\n+   #86 = Utf8               ()Ljava/lang/String;\n+   #87 = Utf8               SourceFile\n+   #88 = Utf8               CharSequenceReader.java\n+   #89 = Utf8               org/apache/commons/io/IOUtils\n+   #90 = NameAndType        #66:#70       // \"<init>\":(Ljava/lang/CharSequence;I)V\n+   #91 = Utf8               java/lang/Integer\n+   #92 = NameAndType        #66:#71       // \"<init>\":(Ljava/lang/CharSequence;II)V\n+   #93 = NameAndType        #66:#76       // \"<init>\":()V\n+   #94 = Utf8               java/lang/IllegalArgumentException\n+   #95 = Utf8               java/lang/StringBuilder\n+   #96 = Utf8               Start index is less than zero:\n+   #97 = NameAndType        #136:#137     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #98 = NameAndType        #136:#138     // append:(I)Ljava/lang/StringBuilder;\n+   #99 = NameAndType        #85:#86       // toString:()Ljava/lang/String;\n+  #100 = NameAndType        #66:#139      // \"<init>\":(Ljava/lang/String;)V\n+  #101 = Utf8               End index is less than start\n+  #102 = Utf8               :\n+  #103 = Utf8\n+  #104 = NameAndType        #58:#59       // charSequence:Ljava/lang/CharSequence;\n+  #105 = NameAndType        #63:#61       // start:I\n+  #106 = NameAndType        #140:#141     // valueOf:(I)Ljava/lang/Integer;\n+  #107 = NameAndType        #64:#65       // end:Ljava/lang/Integer;\n+  #108 = NameAndType        #60:#61       // idx:I\n+  #109 = NameAndType        #62:#61       // mark:I\n+  #110 = NameAndType        #142:#74      // length:()I\n+  #111 = Class              #143          // java/lang/Math\n+  #112 = NameAndType        #144:#145     // min:(II)I\n+  #113 = NameAndType        #146:#74      // intValue:()I\n+  #114 = NameAndType        #64:#74       // end:()I\n+  #115 = NameAndType        #147:#148     // charAt:(I)C\n+  #116 = Utf8               array\n+  #117 = Class              #149          // java/util/Objects\n+  #118 = NameAndType        #150:#151     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #119 = Utf8               java/lang/IndexOutOfBoundsException\n+  #120 = Utf8               Array Size=\n+  #121 = Utf8               , offset=\n+  #122 = Utf8               , length=\n+  #123 = Utf8               java/lang/String\n+  #124 = NameAndType        #152:#153     // getChars:(II[CI)V\n+  #125 = Utf8               java/lang/StringBuffer\n+  #126 = NameAndType        #80:#74       // read:()I\n+  #127 = Utf8               Number of characters to skip is less than zero:\n+  #128 = NameAndType        #136:#154     // append:(J)Ljava/lang/StringBuilder;\n+  #129 = NameAndType        #144:#155     // min:(JJ)J\n+  #130 = NameAndType        #63:#74       // start:()I\n+  #131 = NameAndType        #156:#157     // subSequence:(II)Ljava/lang/CharSequence;\n+  #132 = Utf8               org/apache/commons/io/input/CharSequenceReader\n+  #133 = Utf8               java/io/Reader\n+  #134 = Utf8               java/io/Serializable\n+  #135 = Utf8               java/lang/CharSequence\n+  #136 = Utf8               append\n+  #137 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #138 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #139 = Utf8               (Ljava/lang/String;)V\n+  #140 = Utf8               valueOf\n+  #141 = Utf8               (I)Ljava/lang/Integer;\n+  #142 = Utf8               length\n+  #143 = Utf8               java/lang/Math\n+  #144 = Utf8               min\n+  #145 = Utf8               (II)I\n+  #146 = Utf8               intValue\n+  #147 = Utf8               charAt\n+  #148 = Utf8               (I)C\n+  #149 = Utf8               java/util/Objects\n+  #150 = Utf8               requireNonNull\n+  #151 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #152 = Utf8               getChars\n+  #153 = Utf8               (II[CI)V\n+  #154 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #155 = Utf8               (JJ)J\n+  #156 = Utf8               subSequence\n+  #157 = Utf8               (II)Ljava/lang/CharSequence;\n {\n   private static final long serialVersionUID = 3724187752191401220l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 3724187752191401220l\n \n   private final java.lang.CharSequence charSequence;\n"}]}
