{"diffoscope-json-version": 1, "source1": "first/AbstractHierarchicalConfiguration$DefinedKeysVisitor.class", "source2": "second/AbstractHierarchicalConfiguration$DefinedKeysVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,36 +15,36 @@\n     \n     public DefinedKeysVisitor(final AbstractHierarchicalConfiguration this$0) {\n         this.this$0 = this$0;\n         this.keyList = new LinkedHashSet();\n         this.parentKeys = new Stack();\n     }\n     \n-    public DefinedKeysVisitor(final AbstractHierarchicalConfiguration abstractHierarchicalConfiguration, final String prefix) {\n+    public DefinedKeysVisitor(final AbstractHierarchicalConfiguration abstractHierarchicalConfiguration, final String item) {\n         this(abstractHierarchicalConfiguration);\n-        this.parentKeys.push(prefix);\n+        this.parentKeys.push(item);\n     }\n     \n     public Set<String> getKeyList() {\n         return this.keyList;\n     }\n     \n-    public void visitAfterChildren(final Object node, final NodeHandler handler) {\n+    public void visitAfterChildren(final Object o, final NodeHandler nodeHandler) {\n         this.parentKeys.pop();\n     }\n     \n-    public void visitBeforeChildren(final Object node, final NodeHandler handler) {\n-        final String parentKey = this.parentKeys.isEmpty() ? null : ((String)this.parentKeys.peek());\n-        final String key = this.this$0.getExpressionEngine().nodeKey(node, parentKey, handler);\n-        this.parentKeys.push(key);\n-        if (handler.getValue(node) != null) {\n-            this.keyList.add(key);\n+    public void visitBeforeChildren(final Object o, final NodeHandler nodeHandler) {\n+        final String nodeKey = this.this$0.getExpressionEngine().nodeKey(o, this.parentKeys.isEmpty() ? null : ((String)this.parentKeys.peek()), nodeHandler);\n+        this.parentKeys.push(nodeKey);\n+        if (nodeHandler.getValue(o) != null) {\n+            this.keyList.add(nodeKey);\n         }\n-        this.handleAttributeKeys(key, node, handler);\n+        this.handleAttributeKeys(nodeKey, o, nodeHandler);\n     }\n     \n-    public void handleAttributeKeys(final String parentKey, final Object node, final NodeHandler handler) {\n-        for (final String attr : handler.getAttributes(node)) {\n-            this.keyList.add(this.this$0.getExpressionEngine().attributeKey(parentKey, attr));\n+    public void handleAttributeKeys(final String s, final Object o, final NodeHandler nodeHandler) {\n+        final Iterator iterator = nodeHandler.getAttributes(o).iterator();\n+        while (iterator.hasNext()) {\n+            this.keyList.add(this.this$0.getExpressionEngine().attributeKey(s, (String)iterator.next()));\n         }\n     }\n }\n"}]}
