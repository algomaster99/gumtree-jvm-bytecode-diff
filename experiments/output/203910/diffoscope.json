{"diffoscope-json-version": 1, "source1": "first/SegmentConstantPoolArrayCache$CachedArray.class", "source2": "second/SegmentConstantPoolArrayCache$CachedArray.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,36 +8,36 @@\n \n protected class CachedArray\n {\n     String[] primaryArray;\n     int lastKnownSize;\n     HashMap<String, List<Integer>> primaryTable;\n     \n-    public CachedArray(final SegmentConstantPoolArrayCache this$0, final String[] array) {\n+    public CachedArray(final SegmentConstantPoolArrayCache this$0, final String[] primaryArray) {\n         this.this$0 = this$0;\n-        this.primaryArray = array;\n-        this.lastKnownSize = array.length;\n+        this.primaryArray = primaryArray;\n+        this.lastKnownSize = primaryArray.length;\n         this.primaryTable = new HashMap(this.lastKnownSize);\n         this.cacheIndexes();\n     }\n     \n     public int lastKnownSize() {\n         return this.lastKnownSize;\n     }\n     \n-    public List<Integer> indexesForKey(final String key) {\n-        if (!this.primaryTable.containsKey(key)) {\n+    public List<Integer> indexesForKey(final String s) {\n+        if (!this.primaryTable.containsKey(s)) {\n             return Collections.EMPTY_LIST;\n         }\n-        return this.primaryTable.get(key);\n+        return this.primaryTable.get(s);\n     }\n     \n     protected void cacheIndexes() {\n-        for (int index = 0; index < this.primaryArray.length; ++index) {\n-            final String key = this.primaryArray[index];\n+        for (int i = 0; i < this.primaryArray.length; ++i) {\n+            final String key = this.primaryArray[i];\n             if (!this.primaryTable.containsKey(key)) {\n                 this.primaryTable.put(key, new ArrayList());\n             }\n-            ((List<Integer>)this.primaryTable.get(key)).add(Integer.valueOf(index));\n+            ((List<Integer>)this.primaryTable.get(key)).add(Integer.valueOf(i));\n         }\n     }\n }\n"}]}
