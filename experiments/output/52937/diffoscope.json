{"diffoscope-json-version": 1, "source1": "first/CpBands.class", "source2": "second/CpBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -135,15 +135,15 @@\n         this.cpDescriptorNameInts = this.decodeBandInt(\"cp_Descr_name\", in, Codec.DELTA5, cpDescriptorCount);\n         this.cpDescriptorTypeInts = this.decodeBandInt(\"cp_Descr_type\", in, Codec.UDELTA5, cpDescriptorCount);\n         final String[] cpDescriptorNames = this.getReferences(this.cpDescriptorNameInts, this.cpUTF8);\n         final String[] cpDescriptorTypes = this.getReferences(this.cpDescriptorTypeInts, this.cpSignature);\n         this.cpDescriptor = new String[cpDescriptorCount];\n         this.mapDescriptor = new HashMap(cpDescriptorCount);\n         for (int i = 0; i < cpDescriptorCount; ++i) {\n-            this.cpDescriptor[i] = cpDescriptorNames[i] + \":\" + cpDescriptorTypes[i];\n+            this.cpDescriptor[i] = String.valueOf(cpDescriptorNames[i]) + \":\" + cpDescriptorTypes[i];\n             this.mapDescriptor.put(this.cpDescriptor[i], Integer.valueOf(i));\n         }\n     }\n     \n     private void parseCpDouble(final InputStream in) throws IOException, Pack200Exception {\n         final int cpDoubleCount = this.header.getCpDoubleCount();\n         final long[] band = this.parseFlags(\"cp_Double\", in, cpDoubleCount, Codec.UDELTA5, Codec.DELTA5);\n@@ -292,19 +292,19 @@\n             }\n         }\n         charCount = 0;\n         bigSuffixCount = 0;\n         for (int l = 1; l < cpUTF8Count; ++l) {\n             final String lastString = this.cpUTF8[l - 1];\n             if (suffix[l - 1] == 0) {\n-                this.cpUTF8[l] = lastString.substring(0, (l > 1) ? prefix[l - 2] : 0) + new String(bigSuffixData[bigSuffixCount++]);\n+                this.cpUTF8[l] = String.valueOf(lastString.substring(0, (l > 1) ? prefix[l - 2] : 0)) + new String(bigSuffixData[bigSuffixCount++]);\n                 this.mapUTF8.put(this.cpUTF8[l], Integer.valueOf(l));\n             }\n             else {\n-                this.cpUTF8[l] = lastString.substring(0, (l > 1) ? prefix[l - 2] : 0) + new String(data, charCount, suffix[l - 1]);\n+                this.cpUTF8[l] = String.valueOf(lastString.substring(0, (l > 1) ? prefix[l - 2] : 0)) + new String(data, charCount, suffix[l - 1]);\n                 charCount += suffix[l - 1];\n                 this.mapUTF8.put(this.cpUTF8[l], Integer.valueOf(l));\n             }\n         }\n     }\n     \n     public String[] getCpClass() {\n"}]}
