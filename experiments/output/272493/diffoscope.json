{"diffoscope-json-version": 1, "source1": "first/LocalizedMessage.class", "source2": "second/LocalizedMessage.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,48 +11,44 @@\n {\n     private static Locale sLocale;\n     private final String bundle;\n     private final Class<?> sourceClass;\n     private final String key;\n     private final Object[] args;\n     \n-    public LocalizedMessage(final String bundle, final Class<?> sourceClass, final String key, final Object... args) {\n+    public LocalizedMessage(final String bundle, final Class<?> sourceClass, final String key, final Object... original) {\n         this.bundle = bundle;\n         this.sourceClass = sourceClass;\n         this.key = key;\n-        if (args == null) {\n+        if (original == null) {\n             this.args = null;\n         }\n         else {\n-            this.args = Arrays.copyOf(args, args.length);\n+            this.args = Arrays.copyOf(original, original.length);\n         }\n     }\n     \n-    public static void setLocale(final Locale locale) {\n-        if (Locale.ENGLISH.getLanguage().equals(locale.getLanguage())) {\n+    public static void setLocale(final Locale sLocale) {\n+        if (Locale.ENGLISH.getLanguage().equals(sLocale.getLanguage())) {\n             LocalizedMessage.sLocale = Locale.ROOT;\n         }\n         else {\n-            LocalizedMessage.sLocale = locale;\n+            LocalizedMessage.sLocale = sLocale;\n         }\n     }\n     \n     public String getMessage() {\n-        String result;\n+        String s;\n         try {\n-            final ResourceBundle resourceBundle = this.getBundle();\n-            final String pattern = resourceBundle.getString(this.key);\n-            final MessageFormat formatter = new MessageFormat(pattern, Locale.ROOT);\n-            result = formatter.format(this.args);\n-        }\n-        catch (final MissingResourceException ignored) {\n-            final MessageFormat formatter2 = new MessageFormat(this.key, Locale.ROOT);\n-            result = formatter2.format(this.args);\n+            s = new MessageFormat(this.getBundle().getString(this.key), Locale.ROOT).format(this.args);\n         }\n-        return result;\n+        catch (final MissingResourceException ex) {\n+            s = new MessageFormat(this.key, Locale.ROOT).format(this.args);\n+        }\n+        return s;\n     }\n     \n     private ResourceBundle getBundle() {\n         return ResourceBundle.getBundle(this.bundle, LocalizedMessage.sLocale, this.sourceClass.getClassLoader(), (ResourceBundle.Control)new LocalizedMessage.Utf8Control());\n     }\n     \n     static {\n"}]}
