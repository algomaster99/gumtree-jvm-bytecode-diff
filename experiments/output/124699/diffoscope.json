{"diffoscope-json-version": 1, "source1": "first/SiteUtil$DescriptionExtractor.class", "source2": "second/SiteUtil$DescriptionExtractor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,39 +3,32 @@\n \n import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n import java.util.ArrayList;\n import org.apache.maven.doxia.macro.MacroExecutionException;\n import java.util.Deque;\n import java.util.Arrays;\n import java.util.function.Consumer;\n-import java.util.Objects;\n import java.util.List;\n import com.google.common.collect.Lists;\n import java.util.ArrayDeque;\n import com.puppycrawl.tools.checkstyle.api.DetailNode;\n \n private static final class DescriptionExtractor\n {\n     private static String getDescriptionFromJavadoc(final DetailNode javadoc, final String moduleName) throws MacroExecutionException {\n         boolean isInCodeLiteral = false;\n         boolean isInHtmlElement = false;\n         boolean isInHrefAttribute = false;\n         final StringBuilder description = new StringBuilder(128);\n         final Deque<DetailNode> queue = new ArrayDeque<DetailNode>();\n         final List<DetailNode> descriptionNodes = getDescriptionNodes(javadoc);\n-        final List reverse = Lists.reverse((List)descriptionNodes);\n-        final Deque<DetailNode> obj = queue;\n-        Objects.requireNonNull((ArrayDeque)obj);\n-        reverse.forEach(obj::push);\n+        Lists.reverse((List)descriptionNodes).forEach(queue::push);\n         while (!queue.isEmpty()) {\n             final DetailNode node = (DetailNode)queue.pop();\n-            final List reverse2 = Lists.reverse((List)Arrays.asList(node.getChildren()));\n-            final Deque<DetailNode> obj2 = queue;\n-            Objects.requireNonNull((ArrayDeque)obj2);\n-            reverse2.forEach(obj2::push);\n+            Lists.reverse((List)Arrays.asList(node.getChildren())).forEach(queue::push);\n             if (node.getType() == 100 && \"href\".equals(node.getText())) {\n                 isInHrefAttribute = true;\n             }\n             if (isInHrefAttribute && node.getType() == 89) {\n                 final String href = node.getText();\n                 if (href.contains(\"https://checkstyle.org/\")) {\n                     handleInternalLink(description, moduleName, href);\n@@ -78,15 +71,17 @@\n         final char doubleQuote = '\\\"';\n         description.append('\\\"').append(relativeHref).append('\\\"');\n     }\n     \n     private static List<DetailNode> getDescriptionNodes(final DetailNode javadoc) {\n         final DetailNode[] children = javadoc.getChildren();\n         final List<DetailNode> descriptionNodes = new ArrayList<DetailNode>();\n-        for (final DetailNode child : children) {\n+        DetailNode[] array;\n+        for (int length = (array = children).length, i = 0; i < length; ++i) {\n+            final DetailNode child = array[i];\n             if (isEndOfDescription(child)) {\n                 break;\n             }\n             descriptionNodes.add(child);\n         }\n         return descriptionNodes;\n     }\n"}]}
