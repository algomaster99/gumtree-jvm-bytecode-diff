{"diffoscope-json-version": 1, "source1": "first/ConstructorUtils.class", "source2": "second/ConstructorUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,54 +10,54 @@\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.ArrayUtils;\n \n public class ConstructorUtils\n {\n     public static <T> T invokeConstructor(final Class<T> cls, Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n         args = ArrayUtils.nullToEmpty(args);\n-        final Class<?>[] parameterTypes = ClassUtils.toClass(args);\n+        final Class[] parameterTypes = ClassUtils.toClass(args);\n         return invokeConstructor(cls, args, parameterTypes);\n     }\n     \n     public static <T> T invokeConstructor(final Class<T> cls, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n         args = ArrayUtils.nullToEmpty(args);\n-        parameterTypes = ArrayUtils.nullToEmpty((Class[])parameterTypes);\n-        final Constructor<T> ctor = getMatchingAccessibleConstructor(cls, parameterTypes);\n+        parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);\n+        final Constructor<T> ctor = getMatchingAccessibleConstructor(cls, (Class<?>[])parameterTypes);\n         if (ctor == null) {\n             throw new NoSuchMethodException(\"No such accessible constructor on object: \" + cls.getName());\n         }\n         if (ctor.isVarArgs()) {\n-            final Class<?>[] methodParameterTypes = ctor.getParameterTypes();\n-            args = MethodUtils.getVarArgs(args, (Class[])methodParameterTypes);\n+            final Class[] methodParameterTypes = ctor.getParameterTypes();\n+            args = MethodUtils.getVarArgs(args, methodParameterTypes);\n         }\n         return ctor.newInstance(args);\n     }\n     \n     public static <T> T invokeExactConstructor(final Class<T> cls, Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n         args = ArrayUtils.nullToEmpty(args);\n-        final Class<?>[] parameterTypes = ClassUtils.toClass(args);\n+        final Class[] parameterTypes = ClassUtils.toClass(args);\n         return invokeExactConstructor(cls, args, parameterTypes);\n     }\n     \n     public static <T> T invokeExactConstructor(final Class<T> cls, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n         args = ArrayUtils.nullToEmpty(args);\n-        parameterTypes = ArrayUtils.nullToEmpty((Class[])parameterTypes);\n-        final Constructor<T> ctor = getAccessibleConstructor(cls, parameterTypes);\n+        parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);\n+        final Constructor<T> ctor = getAccessibleConstructor(cls, (Class<?>[])parameterTypes);\n         if (ctor == null) {\n             throw new NoSuchMethodException(\"No such accessible constructor on object: \" + cls.getName());\n         }\n         return ctor.newInstance(args);\n     }\n     \n     public static <T> Constructor<T> getAccessibleConstructor(final Class<T> cls, final Class<?>... parameterTypes) {\n         Validate.notNull((Object)cls, \"class cannot be null\", new Object[0]);\n         try {\n             return getAccessibleConstructor(cls.getConstructor(parameterTypes));\n         }\n-        catch (final NoSuchMethodException e) {\n+        catch (final NoSuchMethodException ex) {\n             return null;\n         }\n     }\n     \n     public static <T> Constructor<T> getAccessibleConstructor(final Constructor<T> ctor) {\n         Validate.notNull((Object)ctor, \"constructor cannot be null\", new Object[0]);\n         return (MemberUtils.isAccessible((Member)ctor) && isAccessible(ctor.getDeclaringClass())) ? ctor : null;\n@@ -68,17 +68,18 @@\n         try {\n             final Constructor<T> ctor = cls.getConstructor(parameterTypes);\n             MemberUtils.setAccessibleWorkaround((AccessibleObject)ctor);\n             return ctor;\n         }\n         catch (final NoSuchMethodException ex) {\n             Constructor<T> result = null;\n-            final Constructor<?>[] constructors;\n-            final Constructor<?>[] ctors = constructors = cls.getConstructors();\n-            for (Constructor<?> ctor2 : constructors) {\n+            final Constructor[] ctors = cls.getConstructors();\n+            Constructor[] array;\n+            for (int length = (array = ctors).length, i = 0; i < length; ++i) {\n+                Constructor<?> ctor2 = array[i];\n                 if (MemberUtils.isMatchingConstructor((Constructor)ctor2, (Class[])parameterTypes)) {\n                     ctor2 = getAccessibleConstructor(ctor2);\n                     if (ctor2 != null) {\n                         MemberUtils.setAccessibleWorkaround((AccessibleObject)ctor2);\n                         if (result == null || MemberUtils.compareConstructorFit((Constructor)ctor2, (Constructor)result, (Class[])parameterTypes) < 0) {\n                             final Constructor<T> constructor = result = (Constructor<T>)ctor2;\n                         }\n"}]}
