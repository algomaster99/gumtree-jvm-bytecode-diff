{"diffoscope-json-version": 1, "source1": "first/BrotliUtils.class", "source2": "second/BrotliUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,38 +7,37 @@\n {\n     private static volatile BrotliUtils.CachedAvailability cachedBrotliAvailability;\n     \n     private BrotliUtils() {\n     }\n     \n     public static boolean isBrotliCompressionAvailable() {\n-        final BrotliUtils.CachedAvailability cachedResult = BrotliUtils.cachedBrotliAvailability;\n-        if (cachedResult != BrotliUtils.CachedAvailability.DONT_CACHE) {\n-            return cachedResult == BrotliUtils.CachedAvailability.CACHED_AVAILABLE;\n+        final BrotliUtils.CachedAvailability cachedBrotliAvailability = BrotliUtils.cachedBrotliAvailability;\n+        if (cachedBrotliAvailability != BrotliUtils.CachedAvailability.DONT_CACHE) {\n+            return cachedBrotliAvailability == BrotliUtils.CachedAvailability.CACHED_AVAILABLE;\n         }\n         return internalIsBrotliCompressionAvailable();\n     }\n     \n     private static boolean internalIsBrotliCompressionAvailable() {\n         try {\n             Class.forName(\"org.brotli.dec.BrotliInputStream\");\n             return true;\n         }\n-        catch (final NoClassDefFoundError | Exception error) {\n+        catch (final NoClassDefFoundError | Exception ex) {\n             return false;\n         }\n     }\n     \n-    public static void setCacheBrotliAvailablity(final boolean doCache) {\n-        if (!doCache) {\n+    public static void setCacheBrotliAvailablity(final boolean b) {\n+        if (!b) {\n             BrotliUtils.cachedBrotliAvailability = BrotliUtils.CachedAvailability.DONT_CACHE;\n         }\n         else if (BrotliUtils.cachedBrotliAvailability == BrotliUtils.CachedAvailability.DONT_CACHE) {\n-            final boolean hasBrotli = internalIsBrotliCompressionAvailable();\n-            BrotliUtils.cachedBrotliAvailability = (hasBrotli ? BrotliUtils.CachedAvailability.CACHED_AVAILABLE : BrotliUtils.CachedAvailability.CACHED_UNAVAILABLE);\n+            BrotliUtils.cachedBrotliAvailability = (internalIsBrotliCompressionAvailable() ? BrotliUtils.CachedAvailability.CACHED_AVAILABLE : BrotliUtils.CachedAvailability.CACHED_UNAVAILABLE);\n         }\n     }\n     \n     static BrotliUtils.CachedAvailability getCachedBrotliAvailability() {\n         return BrotliUtils.cachedBrotliAvailability;\n     }\n     \n"}]}
