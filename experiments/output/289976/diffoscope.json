{"diffoscope-json-version": 1, "source1": "first/SizeFileFilter.class", "source2": "second/SizeFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,115 +1,113 @@\n-  SHA-256 checksum cd293f5c31325b5559ff4ff2c3efe77714fba5b4beecc191016c57feb9e25567\n+  SHA-256 checksum 13e9b60301b186d2a9f7f0755704e0aa445483fb9665cc5f403a7818dc79f1ca\n   Compiled from \"SizeFileFilter.java\"\n public class org.apache.commons.io.filefilter.SizeFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #26                         // org/apache/commons/io/filefilter/SizeFileFilter\n   super_class: #27                        // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Methodref          #26.#57       // org/apache/commons/io/filefilter/SizeFileFilter.\"<init>\":(JZ)V\n-    #2 = Methodref          #27.#58       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #3 = Class              #59           // java/lang/IllegalArgumentException\n-    #4 = String             #60           // The size must be non-negative\n-    #5 = Methodref          #3.#61        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #6 = Fieldref           #26.#62       // org/apache/commons/io/filefilter/SizeFileFilter.size:J\n-    #7 = Fieldref           #26.#63       // org/apache/commons/io/filefilter/SizeFileFilter.acceptLarger:Z\n-    #8 = Methodref          #64.#65       // java/io/File.length:()J\n-    #9 = Methodref          #26.#66       // org/apache/commons/io/filefilter/SizeFileFilter.accept:(J)Z\n-   #10 = Methodref          #67.#68       // java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n-   #11 = Methodref          #26.#69       // org/apache/commons/io/filefilter/SizeFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #12 = Class              #70           // java/io/IOException\n-   #13 = Methodref          #26.#71       // org/apache/commons/io/filefilter/SizeFileFilter.handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-   #14 = String             #72           // >=\n-   #15 = String             #73           // <\n-   #16 = Class              #74           // java/lang/StringBuilder\n-   #17 = Methodref          #16.#58       // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = Methodref          #27.#75       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #19 = Methodref          #16.#76       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = String             #77           // (\n-   #21 = Methodref          #16.#78       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #22 = String             #79           // )\n-   #23 = Methodref          #16.#75       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #24 = Class              #80           // java/nio/file/Path\n-   #25 = Methodref          #26.#81       // org/apache/commons/io/filefilter/SizeFileFilter.visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #26 = Class              #82           // org/apache/commons/io/filefilter/SizeFileFilter\n-   #27 = Class              #83           // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #28 = Class              #84           // java/io/Serializable\n-   #29 = Utf8               serialVersionUID\n-   #30 = Utf8               J\n-   #31 = Utf8               ConstantValue\n-   #32 = Long               7388077430788600069l\n-   #34 = Utf8               acceptLarger\n-   #35 = Utf8               Z\n-   #36 = Utf8               size\n-   #37 = Utf8               <init>\n-   #38 = Utf8               (J)V\n-   #39 = Utf8               Code\n-   #40 = Utf8               LineNumberTable\n-   #41 = Utf8               (JZ)V\n-   #42 = Utf8               StackMapTable\n-   #43 = Class              #82           // org/apache/commons/io/filefilter/SizeFileFilter\n-   #44 = Utf8               accept\n-   #45 = Utf8               (Ljava/io/File;)Z\n-   #46 = Utf8               (J)Z\n-   #47 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #48 = Class              #70           // java/io/IOException\n-   #49 = Utf8               toString\n-   #50 = Utf8               ()Ljava/lang/String;\n-   #51 = Class              #85           // java/lang/String\n-   #52 = Utf8               visitFile\n-   #53 = Utf8               Exceptions\n-   #54 = Utf8               (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #55 = Utf8               SourceFile\n-   #56 = Utf8               SizeFileFilter.java\n-   #57 = NameAndType        #37:#41       // \"<init>\":(JZ)V\n-   #58 = NameAndType        #37:#86       // \"<init>\":()V\n-   #59 = Utf8               java/lang/IllegalArgumentException\n-   #60 = Utf8               The size must be non-negative\n-   #61 = NameAndType        #37:#87       // \"<init>\":(Ljava/lang/String;)V\n-   #62 = NameAndType        #36:#30       // size:J\n-   #63 = NameAndType        #34:#35       // acceptLarger:Z\n-   #64 = Class              #88           // java/io/File\n-   #65 = NameAndType        #89:#90       // length:()J\n-   #66 = NameAndType        #44:#46       // accept:(J)Z\n-   #67 = Class              #91           // java/nio/file/Files\n-   #68 = NameAndType        #36:#92       // size:(Ljava/nio/file/Path;)J\n-   #69 = NameAndType        #93:#94       // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #70 = Utf8               java/io/IOException\n-   #71 = NameAndType        #95:#96       // handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-   #72 = Utf8               >=\n-   #73 = Utf8               <\n-   #74 = Utf8               java/lang/StringBuilder\n-   #75 = NameAndType        #49:#50       // toString:()Ljava/lang/String;\n-   #76 = NameAndType        #97:#98       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #77 = Utf8               (\n-   #78 = NameAndType        #97:#99       // append:(J)Ljava/lang/StringBuilder;\n-   #79 = Utf8               )\n-   #80 = Utf8               java/nio/file/Path\n-   #81 = NameAndType        #52:#47       // visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #82 = Utf8               org/apache/commons/io/filefilter/SizeFileFilter\n-   #83 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-   #84 = Utf8               java/io/Serializable\n-   #85 = Utf8               java/lang/String\n-   #86 = Utf8               ()V\n-   #87 = Utf8               (Ljava/lang/String;)V\n-   #88 = Utf8               java/io/File\n-   #89 = Utf8               length\n-   #90 = Utf8               ()J\n-   #91 = Utf8               java/nio/file/Files\n-   #92 = Utf8               (Ljava/nio/file/Path;)J\n-   #93 = Utf8               toFileVisitResult\n-   #94 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #95 = Utf8               handle\n-   #96 = Utf8               (Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-   #97 = Utf8               append\n-   #98 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #99 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #1 = Methodref          #26.#55        // org/apache/commons/io/filefilter/SizeFileFilter.\"<init>\":(JZ)V\n+   #2 = Methodref          #27.#56        // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+   #3 = Class              #57            // java/lang/IllegalArgumentException\n+   #4 = String             #58            // The size must be non-negative\n+   #5 = Methodref          #3.#59         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #6 = Fieldref           #26.#60        // org/apache/commons/io/filefilter/SizeFileFilter.size:J\n+   #7 = Fieldref           #26.#61        // org/apache/commons/io/filefilter/SizeFileFilter.acceptLarger:Z\n+   #8 = Methodref          #62.#63        // java/io/File.length:()J\n+   #9 = Methodref          #26.#64        // org/apache/commons/io/filefilter/SizeFileFilter.accept:(J)Z\n+  #10 = Methodref          #65.#66        // java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n+  #11 = Methodref          #26.#67        // org/apache/commons/io/filefilter/SizeFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #12 = Class              #68            // java/io/IOException\n+  #13 = Methodref          #26.#69        // org/apache/commons/io/filefilter/SizeFileFilter.handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+  #14 = String             #70            // >=\n+  #15 = String             #71            // <\n+  #16 = Class              #72            // java/lang/StringBuilder\n+  #17 = Methodref          #16.#56        // java/lang/StringBuilder.\"<init>\":()V\n+  #18 = Methodref          #27.#73        // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+  #19 = Methodref          #16.#74        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #20 = String             #75            // (\n+  #21 = Methodref          #16.#76        // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #22 = String             #77            // )\n+  #23 = Methodref          #16.#73        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #24 = Class              #78            // java/nio/file/Path\n+  #25 = Methodref          #26.#79        // org/apache/commons/io/filefilter/SizeFileFilter.visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #26 = Class              #80            // org/apache/commons/io/filefilter/SizeFileFilter\n+  #27 = Class              #81            // org/apache/commons/io/filefilter/AbstractFileFilter\n+  #28 = Class              #82            // java/io/Serializable\n+  #29 = Utf8               serialVersionUID\n+  #30 = Utf8               J\n+  #31 = Utf8               ConstantValue\n+  #32 = Long               7388077430788600069l\n+  #34 = Utf8               acceptLarger\n+  #35 = Utf8               Z\n+  #36 = Utf8               size\n+  #37 = Utf8               <init>\n+  #38 = Utf8               (J)V\n+  #39 = Utf8               Code\n+  #40 = Utf8               LineNumberTable\n+  #41 = Utf8               (JZ)V\n+  #42 = Utf8               StackMapTable\n+  #43 = Utf8               accept\n+  #44 = Utf8               (Ljava/io/File;)Z\n+  #45 = Utf8               (J)Z\n+  #46 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #47 = Utf8               toString\n+  #48 = Utf8               ()Ljava/lang/String;\n+  #49 = Class              #83            // java/lang/String\n+  #50 = Utf8               visitFile\n+  #51 = Utf8               Exceptions\n+  #52 = Utf8               (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #53 = Utf8               SourceFile\n+  #54 = Utf8               SizeFileFilter.java\n+  #55 = NameAndType        #37:#41        // \"<init>\":(JZ)V\n+  #56 = NameAndType        #37:#84        // \"<init>\":()V\n+  #57 = Utf8               java/lang/IllegalArgumentException\n+  #58 = Utf8               The size must be non-negative\n+  #59 = NameAndType        #37:#85        // \"<init>\":(Ljava/lang/String;)V\n+  #60 = NameAndType        #36:#30        // size:J\n+  #61 = NameAndType        #34:#35        // acceptLarger:Z\n+  #62 = Class              #86            // java/io/File\n+  #63 = NameAndType        #87:#88        // length:()J\n+  #64 = NameAndType        #43:#45        // accept:(J)Z\n+  #65 = Class              #89            // java/nio/file/Files\n+  #66 = NameAndType        #36:#90        // size:(Ljava/nio/file/Path;)J\n+  #67 = NameAndType        #91:#92        // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #68 = Utf8               java/io/IOException\n+  #69 = NameAndType        #93:#94        // handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+  #70 = Utf8               >=\n+  #71 = Utf8               <\n+  #72 = Utf8               java/lang/StringBuilder\n+  #73 = NameAndType        #47:#48        // toString:()Ljava/lang/String;\n+  #74 = NameAndType        #95:#96        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #75 = Utf8               (\n+  #76 = NameAndType        #95:#97        // append:(J)Ljava/lang/StringBuilder;\n+  #77 = Utf8               )\n+  #78 = Utf8               java/nio/file/Path\n+  #79 = NameAndType        #50:#46        // visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #80 = Utf8               org/apache/commons/io/filefilter/SizeFileFilter\n+  #81 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+  #82 = Utf8               java/io/Serializable\n+  #83 = Utf8               java/lang/String\n+  #84 = Utf8               ()V\n+  #85 = Utf8               (Ljava/lang/String;)V\n+  #86 = Utf8               java/io/File\n+  #87 = Utf8               length\n+  #88 = Utf8               ()J\n+  #89 = Utf8               java/nio/file/Files\n+  #90 = Utf8               (Ljava/nio/file/Path;)J\n+  #91 = Utf8               toFileVisitResult\n+  #92 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #93 = Utf8               handle\n+  #94 = Utf8               (Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+  #95 = Utf8               append\n+  #96 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #97 = Utf8               (J)Ljava/lang/StringBuilder;\n {\n   private static final long serialVersionUID = 7388077430788600069l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 7388077430788600069l\n \n   private final boolean acceptLarger;\n"}]}
