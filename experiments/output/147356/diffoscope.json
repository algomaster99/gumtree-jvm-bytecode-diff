{"diffoscope-json-version": 1, "source1": "first/MissingOverrideCheck.class", "source2": "second/MissingOverrideCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,32 +1,36 @@\n \n package com.puppycrawl.tools.checkstyle.checks.annotation;\n \n-import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n import java.util.function.Function;\n import java.util.function.Predicate;\n import java.util.stream.Stream;\n import java.util.Objects;\n import java.util.Optional;\n import com.puppycrawl.tools.checkstyle.utils.AnnotationUtil;\n import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.regex.Pattern;\n import com.puppycrawl.tools.checkstyle.StatelessCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n @StatelessCheck\n public final class MissingOverrideCheck extends AbstractCheck\n {\n     public static final String MSG_KEY_TAG_NOT_VALID_ON = \"tag.not.valid.on\";\n     public static final String MSG_KEY_ANNOTATION_MISSING_OVERRIDE = \"annotation.missing.override\";\n     private static final Pattern MATCH_INHERIT_DOC;\n     private boolean javaFiveCompatibility;\n     \n+    static {\n+        MATCH_INHERIT_DOC = CommonUtil.createPattern(\"\\\\{\\\\s*@(inheritDoc)\\\\s*\\\\}\");\n+    }\n+    \n     public void setJavaFiveCompatibility(final boolean compatibility) {\n         this.javaFiveCompatibility = compatibility;\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n@@ -70,12 +74,8 @@\n         }\n         else {\n             startNode = ast.findFirstToken(13);\n         }\n         final Optional<String> javadoc = Stream.iterate(startNode.getLastChild(), Objects::nonNull, DetailAST::getPreviousSibling).filter(node -> node.getType() == 145).map((Function<? super DetailAST, ?>)DetailAST::getFirstChild).map((Function<? super Object, ? extends String>)DetailAST::getText).filter(JavadocUtil::isJavadocComment).findFirst();\n         return javadoc.isPresent() && MissingOverrideCheck.MATCH_INHERIT_DOC.matcher(javadoc.get()).find();\n     }\n-    \n-    static {\n-        MATCH_INHERIT_DOC = CommonUtil.createPattern(\"\\\\{\\\\s*@(inheritDoc)\\\\s*\\\\}\");\n-    }\n }\n"}]}
