{"diffoscope-json-version": 1, "source1": "first/AnnotationUtils.class", "source2": "second/AnnotationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -112,41 +112,41 @@\n             return equals((Annotation)o, (Annotation)obj);\n         }\n         return o.equals(obj);\n     }\n     \n     private static boolean arrayMemberEquals(final Class<?> clazz, final Object o, final Object o2) {\n         if (clazz.isAnnotation()) {\n-            return annotationArrayMemberEquals(o, (Annotation[])(Annotation[])o2);\n+            return annotationArrayMemberEquals((Annotation[])o, (Annotation[])o2);\n         }\n         if (clazz.equals(Byte.TYPE)) {\n-            return Arrays.equals(o, (byte[])(byte[])o2);\n+            return Arrays.equals((byte[])o, (byte[])o2);\n         }\n         if (clazz.equals(Short.TYPE)) {\n-            return Arrays.equals(o, (short[])(short[])o2);\n+            return Arrays.equals((short[])o, (short[])o2);\n         }\n         if (clazz.equals(Integer.TYPE)) {\n-            return Arrays.equals(o, (int[])(int[])o2);\n+            return Arrays.equals((int[])o, (int[])o2);\n         }\n         if (clazz.equals(Character.TYPE)) {\n-            return Arrays.equals(o, (char[])(char[])o2);\n+            return Arrays.equals((char[])o, (char[])o2);\n         }\n         if (clazz.equals(Long.TYPE)) {\n-            return Arrays.equals(o, (long[])(long[])o2);\n+            return Arrays.equals((long[])o, (long[])o2);\n         }\n         if (clazz.equals(Float.TYPE)) {\n-            return Arrays.equals(o, (float[])(float[])o2);\n+            return Arrays.equals((float[])o, (float[])o2);\n         }\n         if (clazz.equals(Double.TYPE)) {\n-            return Arrays.equals(o, (double[])(double[])o2);\n+            return Arrays.equals((double[])o, (double[])o2);\n         }\n         if (clazz.equals(Boolean.TYPE)) {\n-            return Arrays.equals(o, (boolean[])(boolean[])o2);\n+            return Arrays.equals((boolean[])o, (boolean[])o2);\n         }\n-        return Arrays.equals(o, (Object[])(Object[])o2);\n+        return Arrays.equals((Object[])o, (Object[])o2);\n     }\n     \n     private static boolean annotationArrayMemberEquals(final Annotation[] array, final Annotation[] array2) {\n         if (array.length != array2.length) {\n             return false;\n         }\n         for (int i = 0; i < array.length; ++i) {\n"}]}
