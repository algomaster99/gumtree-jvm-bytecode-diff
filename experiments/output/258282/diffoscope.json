{"diffoscope-json-version": 1, "source1": "first/XMLBeanDeclaration.class", "source2": "second/XMLBeanDeclaration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,51 +30,51 @@\n     private static final String ELEM_CTOR_ARG = \"config-constrarg\";\n     private static final String ATTR_CTOR_VALUE = \"config-value\";\n     private static final String ATTR_CTOR_TYPE = \"config-type\";\n     private final HierarchicalConfiguration<?> configuration;\n     private final XMLBeanDeclaration.NodeData<?> nodeData;\n     private final String defaultBeanClassName;\n     \n-    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {\n-        this(config, key, false);\n+    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> hierarchicalConfiguration, final String s) {\n+        this((org.apache.commons.configuration2.HierarchicalConfiguration<Object>)hierarchicalConfiguration, s, false);\n     }\n     \n-    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key, final boolean optional) {\n-        this(config, key, optional, null);\n+    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> hierarchicalConfiguration, final String s, final boolean b) {\n+        this(hierarchicalConfiguration, s, b, null);\n     }\n     \n-    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key, final boolean optional, final String defBeanClsName) {\n-        if (config == null) {\n+    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> hierarchicalConfiguration, final String s, final boolean b, final String defaultBeanClassName) {\n+        if (hierarchicalConfiguration == null) {\n             throw new IllegalArgumentException(\"Configuration must not be null!\");\n         }\n-        HierarchicalConfiguration<?> tmpconfiguration;\n+        Object configuration;\n         try {\n-            tmpconfiguration = (HierarchicalConfiguration<?>)config.configurationAt(key);\n+            configuration = hierarchicalConfiguration.configurationAt(s);\n         }\n-        catch (final ConfigurationRuntimeException iex) {\n-            if (!optional || config.getMaxIndex(key) > 0) {\n-                throw iex;\n+        catch (final ConfigurationRuntimeException ex) {\n+            if (!b || hierarchicalConfiguration.getMaxIndex(s) > 0) {\n+                throw ex;\n             }\n-            tmpconfiguration = (HierarchicalConfiguration<?>)new BaseHierarchicalConfiguration();\n+            configuration = new BaseHierarchicalConfiguration();\n         }\n-        this.nodeData = createNodeDataFromConfiguration(tmpconfiguration);\n-        this.configuration = tmpconfiguration;\n-        this.defaultBeanClassName = defBeanClsName;\n+        this.nodeData = createNodeDataFromConfiguration((org.apache.commons.configuration2.HierarchicalConfiguration<?>)configuration);\n+        this.configuration = (HierarchicalConfiguration<?>)configuration;\n+        this.defaultBeanClassName = defaultBeanClassName;\n         this.initSubnodeConfiguration(this.getConfiguration());\n     }\n     \n-    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config) {\n-        this(config, null);\n+    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> hierarchicalConfiguration) {\n+        this(hierarchicalConfiguration, null);\n     }\n     \n-    XMLBeanDeclaration(final HierarchicalConfiguration<?> config, final XMLBeanDeclaration.NodeData<?> node) {\n-        this.nodeData = node;\n-        this.configuration = config;\n+    XMLBeanDeclaration(final HierarchicalConfiguration<?> configuration, final XMLBeanDeclaration.NodeData<?> nodeData) {\n+        this.nodeData = nodeData;\n+        this.configuration = configuration;\n         this.defaultBeanClassName = null;\n-        this.initSubnodeConfiguration(config);\n+        this.initSubnodeConfiguration(configuration);\n     }\n     \n     public HierarchicalConfiguration<?> getConfiguration() {\n         return this.configuration;\n     }\n     \n     public String getDefaultBeanClassName() {\n@@ -90,100 +90,101 @@\n     }\n     \n     public String getBeanClassName() {\n         return this.getConfiguration().getString(\"[@config-class]\", this.getDefaultBeanClassName());\n     }\n     \n     public Map<String, Object> getBeanProperties() {\n-        return this.getAttributeNames().stream().filter(e -> !this.isReservedAttributeName(e)).collect(Collectors.toMap((Function<? super Object, ? extends String>)Function.identity(), e -> this.interpolate(this.getNode().getAttribute(e))));\n+        return this.getAttributeNames().stream().filter(s -> !this.isReservedAttributeName(s)).collect(Collectors.toMap((Function<? super Object, ? extends String>)Function.identity(), s2 -> this.interpolate(this.getNode().getAttribute(s2))));\n     }\n     \n     public Map<String, Object> getNestedBeanDeclarations() {\n-        final Map<String, Object> nested = new HashMap<String, Object>();\n-        this.getNode().getChildren().forEach(child -> {\n-            if (!this.isReservedChildName(child.nodeName())) {\n-                final Object obj = nested.get(child.nodeName());\n-                if (obj != null) {\n-                    List<BeanDeclaration> list;\n-                    if (obj instanceof List) {\n-                        final List<BeanDeclaration> tmpList = list = (List)obj;\n+        final HashMap hashMap = new HashMap();\n+        this.getNode().getChildren().forEach(nodeData -> {\n+            if (!this.isReservedChildName(nodeData.nodeName())) {\n+                map.get(nodeData.nodeName());\n+                final BeanDeclaration beanDeclaration;\n+                if (beanDeclaration != null) {\n+                    List list;\n+                    if (beanDeclaration instanceof List) {\n+                        list = (List)beanDeclaration;\n                     }\n                     else {\n-                        list = new ArrayList<BeanDeclaration>();\n-                        list.add((BeanDeclaration)obj);\n-                        nested.put(child.nodeName(), list);\n+                        list = new ArrayList();\n+                        list.add(beanDeclaration);\n+                        map.put(nodeData.nodeName(), list);\n                     }\n-                    list.add(this.createBeanDeclaration((XMLBeanDeclaration.NodeData<?>)child));\n+                    list.add(this.createBeanDeclaration((XMLBeanDeclaration.NodeData<?>)nodeData));\n                 }\n                 else {\n-                    nested.put(child.nodeName(), this.createBeanDeclaration((XMLBeanDeclaration.NodeData<?>)child));\n+                    map.put(nodeData.nodeName(), this.createBeanDeclaration((XMLBeanDeclaration.NodeData<?>)nodeData));\n                 }\n             }\n             return;\n         });\n-        return nested;\n+        return hashMap;\n     }\n     \n     public Collection<ConstructorArg> getConstructorArgs() {\n         return (Collection)this.getNode().getChildren(\"config-constrarg\").stream().map(this::createConstructorArg).collect(Collectors.toCollection(LinkedList::new));\n     }\n     \n-    protected Object interpolate(final Object value) {\n+    protected Object interpolate(final Object o) {\n         final ConfigurationInterpolator interpolator = this.getConfiguration().getInterpolator();\n-        return (interpolator != null) ? interpolator.interpolate(value) : value;\n+        return (interpolator != null) ? interpolator.interpolate(o) : o;\n     }\n     \n-    protected boolean isReservedChildName(final String name) {\n-        return this.isReservedName(name);\n+    protected boolean isReservedChildName(final String s) {\n+        return this.isReservedName(s);\n     }\n     \n-    protected boolean isReservedAttributeName(final String name) {\n-        return this.isReservedName(name);\n+    protected boolean isReservedAttributeName(final String s) {\n+        return this.isReservedName(s);\n     }\n     \n-    protected boolean isReservedName(final String name) {\n-        return name == null || name.startsWith(\"config-\");\n+    protected boolean isReservedName(final String s) {\n+        return s == null || s.startsWith(\"config-\");\n     }\n     \n     protected Set<String> getAttributeNames() {\n         return this.getNode().getAttributes();\n     }\n     \n     XMLBeanDeclaration.NodeData<?> getNode() {\n         return this.nodeData;\n     }\n     \n     BeanDeclaration createBeanDeclaration(final XMLBeanDeclaration.NodeData<?> nodeData) {\n-        for (final HierarchicalConfiguration<?> config : this.getConfiguration().configurationsAt(nodeData.escapedNodeName((HierarchicalConfiguration)this.getConfiguration()))) {\n-            if (nodeData.matchesConfigRootNode((HierarchicalConfiguration)config)) {\n-                return (BeanDeclaration)new XMLBeanDeclaration(config, nodeData);\n+        for (final HierarchicalConfiguration hierarchicalConfiguration : this.getConfiguration().configurationsAt(nodeData.escapedNodeName((HierarchicalConfiguration)this.getConfiguration()))) {\n+            if (nodeData.matchesConfigRootNode(hierarchicalConfiguration)) {\n+                return (BeanDeclaration)new XMLBeanDeclaration((HierarchicalConfiguration<?>)hierarchicalConfiguration, nodeData);\n             }\n         }\n         throw new ConfigurationRuntimeException(\"Unable to match node for \" + nodeData.nodeName());\n     }\n     \n-    private void initSubnodeConfiguration(final HierarchicalConfiguration<?> conf) {\n-        conf.setExpressionEngine((ExpressionEngine)null);\n+    private void initSubnodeConfiguration(final HierarchicalConfiguration<?> hierarchicalConfiguration) {\n+        hierarchicalConfiguration.setExpressionEngine((ExpressionEngine)null);\n     }\n     \n-    private ConstructorArg createConstructorArg(final XMLBeanDeclaration.NodeData<?> child) {\n-        final String type = this.getAttribute(child, \"config-type\");\n-        if (isBeanDeclarationArgument(child)) {\n-            return ConstructorArg.forValue((Object)this.getAttribute(child, \"config-value\"), type);\n+    private ConstructorArg createConstructorArg(final XMLBeanDeclaration.NodeData<?> nodeData) {\n+        final String attribute = this.getAttribute(nodeData, \"config-type\");\n+        if (isBeanDeclarationArgument(nodeData)) {\n+            return ConstructorArg.forValue((Object)this.getAttribute(nodeData, \"config-value\"), attribute);\n         }\n-        return ConstructorArg.forBeanDeclaration(this.createBeanDeclaration(child), type);\n+        return ConstructorArg.forBeanDeclaration(this.createBeanDeclaration(nodeData), attribute);\n     }\n     \n-    private String getAttribute(final XMLBeanDeclaration.NodeData<?> nodeData, final String attribute) {\n-        final Object value = nodeData.getAttribute(attribute);\n-        return (value == null) ? null : String.valueOf(this.interpolate(value));\n+    private String getAttribute(final XMLBeanDeclaration.NodeData<?> nodeData, final String s) {\n+        final Object attribute = nodeData.getAttribute(s);\n+        return (attribute == null) ? null : String.valueOf(this.interpolate(attribute));\n     }\n     \n     private static boolean isBeanDeclarationArgument(final XMLBeanDeclaration.NodeData<?> nodeData) {\n         return !nodeData.getAttributes().contains(\"config-class\");\n     }\n     \n-    private static <T> XMLBeanDeclaration.NodeData<T> createNodeDataFromConfiguration(final HierarchicalConfiguration<T> config) {\n-        final NodeHandler<T> handler = (NodeHandler<T>)config.getNodeModel().getNodeHandler();\n-        return (XMLBeanDeclaration.NodeData<T>)new XMLBeanDeclaration.NodeData(handler.getRootNode(), (NodeHandler)handler);\n+    private static <T> XMLBeanDeclaration.NodeData<T> createNodeDataFromConfiguration(final HierarchicalConfiguration<T> hierarchicalConfiguration) {\n+        final NodeHandler nodeHandler = hierarchicalConfiguration.getNodeModel().getNodeHandler();\n+        return (XMLBeanDeclaration.NodeData<T>)new XMLBeanDeclaration.NodeData(nodeHandler.getRootNode(), nodeHandler);\n     }\n }\n"}]}
