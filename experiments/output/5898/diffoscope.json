{"diffoscope-json-version": 1, "source1": "first/AnnotationUtils.class", "source2": "second/AnnotationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -117,41 +117,41 @@\n             return equals((Annotation)o1, (Annotation)o2);\n         }\n         return o1.equals(o2);\n     }\n     \n     private static boolean arrayMemberEquals(final Class<?> componentType, final Object o1, final Object o2) {\n         if (componentType.isAnnotation()) {\n-            return annotationArrayMemberEquals(o1, (Annotation[])(Annotation[])o2);\n+            return annotationArrayMemberEquals((Annotation[])o1, (Annotation[])o2);\n         }\n         if (componentType.equals(Byte.TYPE)) {\n-            return Arrays.equals(o1, (byte[])(byte[])o2);\n+            return Arrays.equals((byte[])o1, (byte[])o2);\n         }\n         if (componentType.equals(Short.TYPE)) {\n-            return Arrays.equals(o1, (short[])(short[])o2);\n+            return Arrays.equals((short[])o1, (short[])o2);\n         }\n         if (componentType.equals(Integer.TYPE)) {\n-            return Arrays.equals(o1, (int[])(int[])o2);\n+            return Arrays.equals((int[])o1, (int[])o2);\n         }\n         if (componentType.equals(Character.TYPE)) {\n-            return Arrays.equals(o1, (char[])(char[])o2);\n+            return Arrays.equals((char[])o1, (char[])o2);\n         }\n         if (componentType.equals(Long.TYPE)) {\n-            return Arrays.equals(o1, (long[])(long[])o2);\n+            return Arrays.equals((long[])o1, (long[])o2);\n         }\n         if (componentType.equals(Float.TYPE)) {\n-            return Arrays.equals(o1, (float[])(float[])o2);\n+            return Arrays.equals((float[])o1, (float[])o2);\n         }\n         if (componentType.equals(Double.TYPE)) {\n-            return Arrays.equals(o1, (double[])(double[])o2);\n+            return Arrays.equals((double[])o1, (double[])o2);\n         }\n         if (componentType.equals(Boolean.TYPE)) {\n-            return Arrays.equals(o1, (boolean[])(boolean[])o2);\n+            return Arrays.equals((boolean[])o1, (boolean[])o2);\n         }\n-        return Arrays.equals(o1, (Object[])(Object[])o2);\n+        return Arrays.equals((Object[])o1, (Object[])o2);\n     }\n     \n     private static boolean annotationArrayMemberEquals(final Annotation[] a1, final Annotation[] a2) {\n         if (a1.length != a2.length) {\n             return false;\n         }\n         for (int i = 0; i < a1.length; ++i) {\n"}]}
