{"diffoscope-json-version": 1, "source1": "first/EmptyFileFilter.class", "source2": "second/EmptyFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,31 +19,30 @@\n     private static final long serialVersionUID = 3631422087512832211L;\n     \n     protected EmptyFileFilter() {\n     }\n     \n     public boolean accept(final File file) {\n         if (file.isDirectory()) {\n-            final File[] files = file.listFiles();\n-            return IOUtils.length((Object[])files) == 0;\n+            return IOUtils.length((Object[])file.listFiles()) == 0;\n         }\n         return file.length() == 0L;\n     }\n     \n-    public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n+    public FileVisitResult accept(final Path path, final BasicFileAttributes basicFileAttributes) {\n         try {\n-            if (Files.isDirectory(file, new LinkOption[0])) {\n-                try (final Stream<Path> stream = Files.list(file)) {\n-                    return toFileVisitResult(!stream.findFirst().isPresent(), file);\n+            if (Files.isDirectory(path, new LinkOption[0])) {\n+                try (final Stream<Path> list = Files.list(path)) {\n+                    return toFileVisitResult(!list.findFirst().isPresent(), path);\n                 }\n             }\n-            return toFileVisitResult(Files.size(file) == 0L, file);\n+            return toFileVisitResult(Files.size(path) == 0L, path);\n         }\n-        catch (final IOException e) {\n-            return this.handle((Throwable)e);\n+        catch (final IOException ex) {\n+            return this.handle((Throwable)ex);\n         }\n     }\n     \n     static {\n         EMPTY = (IOFileFilter)new EmptyFileFilter();\n         NOT_EMPTY = EmptyFileFilter.EMPTY.negate();\n     }\n"}]}
